# distutils: language = c++
# cython: language_level = 3
# cython: embedsignature=True

import cython
from cython.operator import dereference

from collections import namedtuple
from typing import Callable, Any

from . cimport ccimgui
from libcpp cimport bool
from libc.stdint cimport uintptr_t
from libc.float cimport FLT_MAX, FLT_MIN
from cython.view cimport array as cvarray
from cpython.version cimport PY_MAJOR_VERSION


IM_DRAW_FLAGS_NONE = ccimgui.ImDrawFlags_None
IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_

IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset

IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines

IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None
IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad
IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors
IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset
IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports
IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports

IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_

IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text
IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled
IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg
IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg
IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg
IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border
IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow
IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg
IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered
IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive
IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg
IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive
IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed
IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg
IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg
IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab
IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered
IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive
IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark
IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab
IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive
IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button
IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered
IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive
IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header
IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered
IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive
IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator
IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered
IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive
IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip
IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered
IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive
IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab
IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered
IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive
IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused
IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive
IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview
IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg
IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines
IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered
IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram
IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered
IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg
IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong
IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight
IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg
IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt
IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg
IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget
IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight
IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight
IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg
IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg
IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT

IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None
IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha
IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker
IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions
IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview
IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs
IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip
IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel
IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview
IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop
IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder
IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf
IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex
IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8
IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel
IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB
IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV
IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_
IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_
IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_
IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_

IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None
IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft
IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall
IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular
IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge
IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest
IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton
IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview
IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_

IMGUI_COND_NONE = ccimgui.ImGuiCond_None
IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always
IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once
IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver
IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing

IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None
IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard
IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad
IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos
IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard
IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse
IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange
IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable
IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts
IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB
IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen

IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8
IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8
IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16
IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16
IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32
IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32
IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64
IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64
IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float
IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double
IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT

IMGUI_DIR_NONE = ccimgui.ImGuiDir_None
IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left
IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right
IMGUI_DIR_UP = ccimgui.ImGuiDir_Up
IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down
IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT

IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None
IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly
IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode
IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode
IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit
IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize
IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar

IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID
IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern
IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload
IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly

IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None
IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows
IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow
IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow
IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy
IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy
IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows

IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None
IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows
IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow
IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow
IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy
IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled
IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride
IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly
IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows
IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal
IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort
IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay

IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None
IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase
IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank
IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll
IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter
IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput
IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine
IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll
IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite
IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly
IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password
IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo
IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit
IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll

IMGUI_KEY_NONE = ccimgui.ImGuiKey_None
IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab
IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow
IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow
IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow
IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow
IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp
IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown
IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home
IMGUI_KEY_END = ccimgui.ImGuiKey_End
IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert
IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete
IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace
IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space
IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter
IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape
IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl
IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift
IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt
IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper
IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl
IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift
IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt
IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper
IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu
IMGUI_KEY_0 = ccimgui.ImGuiKey_0
IMGUI_KEY_1 = ccimgui.ImGuiKey_1
IMGUI_KEY_2 = ccimgui.ImGuiKey_2
IMGUI_KEY_3 = ccimgui.ImGuiKey_3
IMGUI_KEY_4 = ccimgui.ImGuiKey_4
IMGUI_KEY_5 = ccimgui.ImGuiKey_5
IMGUI_KEY_6 = ccimgui.ImGuiKey_6
IMGUI_KEY_7 = ccimgui.ImGuiKey_7
IMGUI_KEY_8 = ccimgui.ImGuiKey_8
IMGUI_KEY_9 = ccimgui.ImGuiKey_9
IMGUI_KEY_A = ccimgui.ImGuiKey_A
IMGUI_KEY_B = ccimgui.ImGuiKey_B
IMGUI_KEY_C = ccimgui.ImGuiKey_C
IMGUI_KEY_D = ccimgui.ImGuiKey_D
IMGUI_KEY_E = ccimgui.ImGuiKey_E
IMGUI_KEY_F = ccimgui.ImGuiKey_F
IMGUI_KEY_G = ccimgui.ImGuiKey_G
IMGUI_KEY_H = ccimgui.ImGuiKey_H
IMGUI_KEY_I = ccimgui.ImGuiKey_I
IMGUI_KEY_J = ccimgui.ImGuiKey_J
IMGUI_KEY_K = ccimgui.ImGuiKey_K
IMGUI_KEY_L = ccimgui.ImGuiKey_L
IMGUI_KEY_M = ccimgui.ImGuiKey_M
IMGUI_KEY_N = ccimgui.ImGuiKey_N
IMGUI_KEY_O = ccimgui.ImGuiKey_O
IMGUI_KEY_P = ccimgui.ImGuiKey_P
IMGUI_KEY_Q = ccimgui.ImGuiKey_Q
IMGUI_KEY_R = ccimgui.ImGuiKey_R
IMGUI_KEY_S = ccimgui.ImGuiKey_S
IMGUI_KEY_T = ccimgui.ImGuiKey_T
IMGUI_KEY_U = ccimgui.ImGuiKey_U
IMGUI_KEY_V = ccimgui.ImGuiKey_V
IMGUI_KEY_W = ccimgui.ImGuiKey_W
IMGUI_KEY_X = ccimgui.ImGuiKey_X
IMGUI_KEY_Y = ccimgui.ImGuiKey_Y
IMGUI_KEY_Z = ccimgui.ImGuiKey_Z
IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1
IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2
IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3
IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4
IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5
IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6
IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7
IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8
IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9
IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10
IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11
IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12
IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe
IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma
IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus
IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period
IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash
IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon
IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal
IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket
IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash
IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket
IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent
IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock
IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock
IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock
IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen
IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause
IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0
IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1
IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2
IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3
IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4
IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5
IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6
IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7
IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8
IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9
IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal
IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide
IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply
IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract
IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd
IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter
IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual
IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart
IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack
IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft
IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight
IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp
IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown
IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft
IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight
IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp
IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown
IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1
IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1
IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2
IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2
IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3
IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3
IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft
IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight
IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp
IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown
IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft
IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight
IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp
IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown
IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft
IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight
IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle
IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1
IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2
IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX
IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY
IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl
IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift
IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt
IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper
IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT
IMGUI_MOD_NONE = ccimgui.ImGuiMod_None
IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl
IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift
IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt
IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super
IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut
IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_
IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN
IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END
IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT
IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE
IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET

IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left
IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right
IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle
IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT

IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None
IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow
IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput
IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll
IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS
IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW
IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW
IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE
IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand
IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed
IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT

IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate
IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel
IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input
IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu
IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft
IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight
IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp
IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown
IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft
IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight
IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp
IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown
IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev
IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext
IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow
IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast
IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT

IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems
IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId
IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel
IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup

IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None
IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups
IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns
IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick
IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled
IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap

IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None
IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp
IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic
IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat
IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput
IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_

IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None
IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending
IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending

IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha
IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha
IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding
IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding
IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize
IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize
IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign
IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding
IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize
IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding
IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize
IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding
IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding
IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize
IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing
IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing
IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing
IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding
IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize
IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding
IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize
IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding
IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding
IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign
IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize
IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding
IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT

IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None
IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable
IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs
IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton
IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons
IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_

IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None
IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument
IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected
IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId
IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip
IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder
IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading
IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing

IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None
IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0
IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1
IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg

IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None
IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed
IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize
IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder
IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide
IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending
IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable
IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable
IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled
IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible
IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted
IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_
IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_
IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_
IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_

IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None
IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable
IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable
IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable
IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable
IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings
IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody
IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg
IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH
IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH
IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV
IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV
IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH
IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV
IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner
IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter
IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize
IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit
IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame
IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp
IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY
IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible
IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths
IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip
IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX
IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX
IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY
IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti
IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate
IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_

IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None
IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers

IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None
IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected
IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed
IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap
IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen
IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog
IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen
IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick
IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow
IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf
IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet
IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding
IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth
IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth
IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader

IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor
IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp
IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration
IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick
IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs
IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear
IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost
IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized
IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge
IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows

IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None
IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar
IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize
IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove
IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar
IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse
IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse
IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize
IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground
IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings
IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs
IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar
IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar
IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing
IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus
IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding
IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs
IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus
IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument
IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking
IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav
IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration
IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs
IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened
IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow
IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip
IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup
IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal
IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImGuiWindowFlags_ChildMenu
IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST = ccimgui.ImGuiWindowFlags_DockNodeHost


Vec2 = namedtuple('Vec2', ['x', 'y'])
Vec4 = namedtuple('Vec4', ['x', 'y', 'z', 'w'])

cdef bytes _bytes(str text):
    return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))

cdef str _from_bytes(bytes text):
    return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))


cdef _cast_ImVec2_tuple(ccimgui.ImVec2 vec):
    return Vec2(vec.x, vec.y)

cdef ccimgui.ImVec2 _cast_tuple_ImVec2(pair) except +:
    cdef ccimgui.ImVec2 vec
    if len(pair) != 2:
        raise ValueError('pair param must be length of 2')
    vec.x, vec.y = pair
    return vec

cdef _cast_ImVec4_tuple(ccimgui.ImVec4 vec):
    return Vec4(vec.x, vec.y, vec.z, vec.w)

cdef ccimgui.ImVec4 _cast_tuple_ImVec4(quadruple):
    cdef ccimgui.ImVec4 vec
    if len(quadruple) != 4:
        raise ValueError('quadruple param must be length of 4')

    vec.x, vec.y, vec.z, vec.w = quadruple
    return vec


def _py_vertex_buffer_vertex_pos_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos

def _py_vertex_buffer_vertex_uv_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv

def _py_vertex_buffer_vertex_col_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col

def _py_vertex_buffer_vertex_size():
    return sizeof(ccimgui.ImDrawVert)

def _py_index_buffer_index_size():
    return sizeof(ccimgui.ImDrawIdx)


def _py_vertex_buffer_vertex_pos_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos

def _py_vertex_buffer_vertex_uv_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv

def _py_vertex_buffer_vertex_col_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col

def _py_vertex_buffer_vertex_size():
    return sizeof(ccimgui.ImDrawVert)

def _py_index_buffer_index_size():
    return sizeof(ccimgui.ImDrawIdx)


# def accept_drag_drop_payload(str type, ccimgui.ImGuiDragDropFlags flags=0):
#     cdef ccimgui.ImGuiPayload* res = ccimgui.igAcceptDragDropPayload(_bytes(type), flags)
#     return res

# def align_text_to_frame_padding():
#     ccimgui.igAlignTextToFramePadding()

# def arrow_button(str str_id, ccimgui.ImGuiDir dir):
#     cdef ccimgui.bool res = ccimgui.igArrowButton(_bytes(str_id), dir)
#     return res

# def begin(str name, Any p_open=None, ccimgui.ImGuiWindowFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), p_open, flags)
#     return res

# def begin_child_frame(ccimgui.ImGuiID id, tuple size, ccimgui.ImGuiWindowFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginChildFrame(id, _cast_tuple_ImVec2(size), flags)
#     return res

# def begin_child_id(ccimgui.ImGuiID id, tuple size=(0, 0), Any border=False, ccimgui.ImGuiWindowFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginChild_ID(id, _cast_tuple_ImVec2(size), border, flags)
#     return res

# def begin_child_str(str str_id, tuple size=(0, 0), Any border=False, ccimgui.ImGuiWindowFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginChild_Str(_bytes(str_id), _cast_tuple_ImVec2(size), border, flags)
#     return res

# def begin_combo(str label, str preview_value, ccimgui.ImGuiComboFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginCombo(_bytes(label), _bytes(preview_value), flags)
#     return res

# def begin_disabled(Any disabled=True):
#     ccimgui.igBeginDisabled(disabled)

# def begin_drag_drop_source(ccimgui.ImGuiDragDropFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginDragDropSource(flags)
#     return res

# def begin_drag_drop_target():
#     cdef ccimgui.bool res = ccimgui.igBeginDragDropTarget()
#     return res

# def begin_group():
#     ccimgui.igBeginGroup()

# def begin_list_box(str label, tuple size=(0, 0)):
#     cdef ccimgui.bool res = ccimgui.igBeginListBox(_bytes(label), _cast_tuple_ImVec2(size))
#     return res

# def begin_main_menu_bar():
#     cdef ccimgui.bool res = ccimgui.igBeginMainMenuBar()
#     return res

# def begin_menu(str label, Any enabled=True):
#     cdef ccimgui.bool res = ccimgui.igBeginMenu(_bytes(label), enabled)
#     return res

# def begin_menu_bar():
#     cdef ccimgui.bool res = ccimgui.igBeginMenuBar()
#     return res

# def begin_popup(str str_id, ccimgui.ImGuiWindowFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginPopup(_bytes(str_id), flags)
#     return res

# def begin_popup_context_item(str str_id=None, ccimgui.ImGuiPopupFlags popup_flags=1):
#     cdef ccimgui.bool res = ccimgui.igBeginPopupContextItem(_bytes(str_id), popup_flags)
#     return res

# def begin_popup_context_void(str str_id=None, ccimgui.ImGuiPopupFlags popup_flags=1):
#     cdef ccimgui.bool res = ccimgui.igBeginPopupContextVoid(_bytes(str_id), popup_flags)
#     return res

# def begin_popup_context_window(str str_id=None, ccimgui.ImGuiPopupFlags popup_flags=1):
#     cdef ccimgui.bool res = ccimgui.igBeginPopupContextWindow(_bytes(str_id), popup_flags)
#     return res

# def begin_popup_modal(str name, Any p_open=None, ccimgui.ImGuiWindowFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginPopupModal(_bytes(name), p_open, flags)
#     return res

# def begin_tab_bar(str str_id, ccimgui.ImGuiTabBarFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginTabBar(_bytes(str_id), flags)
#     return res

# def begin_tab_item(str label, Any p_open=None, ccimgui.ImGuiTabItemFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igBeginTabItem(_bytes(label), p_open, flags)
#     return res

# def begin_table(str str_id, int column, ccimgui.ImGuiTableFlags flags=0, tuple outer_size=(0.0, 0.0), float inner_width=0.0):
#     cdef ccimgui.bool res = ccimgui.igBeginTable(_bytes(str_id), column, flags, _cast_tuple_ImVec2(outer_size), inner_width)
#     return res

# def begin_tooltip():
#     ccimgui.igBeginTooltip()

# def bullet():
#     ccimgui.igBullet()

# def bullet_text(str fmt):
#     ccimgui.igBulletText(_bytes(fmt))

# def bullet_textv(str fmt, str args):
#     ccimgui.igBulletTextV(_bytes(fmt), _bytes(args))

# def button(str label, tuple size=(0, 0)):
#     cdef ccimgui.bool res = ccimgui.igButton(_bytes(label), _cast_tuple_ImVec2(size))
#     return res

# def calc_item_width():
#     cdef float res = ccimgui.igCalcItemWidth()
#     return res

# def calc_text_size(_ImVec2 pOut, str text, str text_end=None, Any hide_text_after_double_hash=False, float wrap_width=-1.0):
#     ccimgui.igCalcTextSize(pOut._ptr, _bytes(text), _bytes(text_end), hide_text_after_double_hash, wrap_width)

# def checkbox(str label, Any value):
#     cdef ccimgui.bool res = ccimgui.igCheckbox(_bytes(label), value)
#     return res

# def checkbox_flags_int_ptr(str label, int flags, int flags_value):
#     cdef ccimgui.bool res = ccimgui.igCheckboxFlags_IntPtr(_bytes(label), flags, flags_value)
#     return res

# def checkbox_flags_uint_ptr(str label, Any flags, Any flags_value):
#     cdef ccimgui.bool res = ccimgui.igCheckboxFlags_UintPtr(_bytes(label), flags, flags_value)
#     return res

# def close_current_popup():
#     ccimgui.igCloseCurrentPopup()

# def collapsing_header_bool_ptr(str label, Any p_visible, ccimgui.ImGuiTreeNodeFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igCollapsingHeader_BoolPtr(_bytes(label), p_visible, flags)
#     return res

# def collapsing_header_tree_node_flags(str label, ccimgui.ImGuiTreeNodeFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igCollapsingHeader_TreeNodeFlags(_bytes(label), flags)
#     return res

# def color_button(str desc_id, tuple col, ccimgui.ImGuiColorEditFlags flags=0, tuple size=(0, 0)):
#     cdef ccimgui.bool res = ccimgui.igColorButton(_bytes(desc_id), _cast_tuple_ImVec4(col), flags, _cast_tuple_ImVec2(size))
#     return res

# def color_convert_float_4_to_u32(tuple in_):
#     cdef ccimgui.ImU32 res = ccimgui.igColorConvertFloat4ToU32(_cast_tuple_ImVec4(in_))
#     return res

# def color_convert_hs_vto_rgb(
#     float h,
#     float s,
#     float value,
#     float out_r,
#     float out_g,
#     float out_b
# ):
#     ccimgui.igColorConvertHSVtoRGB(
#         h,
#         s,
#         value,
#         out_r,
#         out_g,
#         out_b
#     )

# def color_convert_rg_bto_hsv(
#     float r,
#     float g,
#     float b,
#     float out_h,
#     float out_s,
#     float out_v
# ):
#     ccimgui.igColorConvertRGBtoHSV(
#         r,
#         g,
#         b,
#         out_h,
#         out_s,
#         out_v
#     )

# def color_convert_u32_to_float4(_ImVec4 pOut, ccimgui.ImU32 in_):
#     ccimgui.igColorConvertU32ToFloat4(pOut._ptr, in_)

# def color_edit3(str label, float col0, float col1, float col2, ccimgui.ImGuiColorEditFlags flags=0):
#     cdef float[3] io_float_col = [col0, col1, col2]
#     cdef ccimgui.bool res = ccimgui.igColorEdit3(_bytes(label), <float*>&io_float_col, flags)
#     return res

# def color_edit4(
#     str label,
#     float col0,
#     float col1,
#     float col2,
#     float col3,
#     ccimgui.ImGuiColorEditFlags flags=0
# ):
#     cdef float[4] io_float_col = [col0, col1, col2, col3]
#     cdef ccimgui.bool res = ccimgui.igColorEdit4(_bytes(label), <float*>&io_float_col, flags)
#     return res

# def color_picker3(str label, float col0, float col1, float col2, ccimgui.ImGuiColorEditFlags flags=0):
#     cdef float[3] io_float_col = [col0, col1, col2]
#     cdef ccimgui.bool res = ccimgui.igColorPicker3(_bytes(label), <float*>&io_float_col, flags)
#     return res

# def color_picker4(
#     str label,
#     float col0,
#     float col1,
#     float col2,
#     float col3,
#     ccimgui.ImGuiColorEditFlags flags=0,
#     Any ref_col=None
# ):
#     cdef float[4] io_float_col = [col0, col1, col2, col3]
#     cdef ccimgui.bool res = ccimgui.igColorPicker4(_bytes(label), <float*>&io_float_col, flags, ref_col)
#     return res

# def columns(int count=1, str id=None, Any border=True):
#     ccimgui.igColumns(count, _bytes(id), border)

# def combo_fn_bool_ptr(
#     str label,
#     int current_item,
#     Callable items_getter,
#     Any data,
#     int items_count,
#     int popup_max_height_in_items=-1
# ):
#     cdef ccimgui.bool res = ccimgui.igCombo_FnBoolPtr(
#         _bytes(label),
#         current_item,
#         items_getter,
#         data,
#         items_count,
#         popup_max_height_in_items
#     )
#     return res

# def combo_str(str label, int current_item, str items_separated_by_zeros, int popup_max_height_in_items=-1):
#     cdef ccimgui.bool res = ccimgui.igCombo_Str(_bytes(label), current_item, _bytes(items_separated_by_zeros), popup_max_height_in_items)
#     return res

# def combo_str_arr(str label, int current_item, Any items_, int items_count, int popup_max_height_in_items=-1):
#     cdef ccimgui.bool res = ccimgui.igCombo_Str_arr(_bytes(label), current_item, items_, items_count, popup_max_height_in_items)
#     return res

# @cython.returns(_ImGuiContext)
def create_context(_ImFontAtlas shared_font_atlas=None):
    cdef ccimgui.ImGuiContext* res
    if shared_font_atlas is None:
        res = ccimgui.igCreateContext(NULL)
    else:
        res = ccimgui.igCreateContext(shared_font_atlas._ptr)

    return _ImGuiContext.from_ptr(res)

# def debug_check_version_and_data_layout(
#     str version_str,
#     Any sz_io,
#     Any sz_style,
#     Any sz_vec2,
#     Any sz_vec4,
#     Any sz_drawvert,
#     Any sz_drawidx
# ):
#     cdef ccimgui.bool res = ccimgui.igDebugCheckVersionAndDataLayout(
#         _bytes(version_str),
#         sz_io,
#         sz_style,
#         sz_vec2,
#         sz_vec4,
#         sz_drawvert,
#         sz_drawidx
#     )
#     return res

# def debug_text_encoding(str text):
#     ccimgui.igDebugTextEncoding(_bytes(text))

def destroy_context(_ImGuiContext ctx=None):
    if ctx is not None:
        ccimgui.igDestroyContext(ctx._ptr)

# def destroy_platform_windows():
#     ccimgui.igDestroyPlatformWindows()

# def dock_space(ccimgui.ImGuiID id, tuple size=(0, 0), ccimgui.ImGuiDockNodeFlags flags=0, _ImGuiWindowClass window_class=None):
#     cdef ccimgui.ImGuiID res = ccimgui.igDockSpace(id, _cast_tuple_ImVec2(size), flags, window_class._ptr)
#     return res

# def dock_space_over_viewport(_ImGuiViewport viewport=None, ccimgui.ImGuiDockNodeFlags flags=0, _ImGuiWindowClass window_class=None):
#     cdef ccimgui.ImGuiID res = ccimgui.igDockSpaceOverViewport(viewport._ptr, flags, window_class._ptr)
#     return res

# def drag_float(
#     str label,
#     float value,
#     float v_speed=1.0,
#     float v_min=0.0,
#     float v_max=0.0,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igDragFloat(
#         _bytes(label),
#         value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_float2(
#     str label,
#     float value0,
#     float value1,
#     float v_speed=1.0,
#     float v_min=0.0,
#     float v_max=0.0,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef float[2] io_float_value = [value0, value1]
#     cdef ccimgui.bool res = ccimgui.igDragFloat2(
#         _bytes(label),
#         <float*>&io_float_value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_float3(
#     str label,
#     float value0,
#     float value1,
#     float value2,
#     float v_speed=1.0,
#     float v_min=0.0,
#     float v_max=0.0,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef float[3] io_float_value = [value0, value1, value2]
#     cdef ccimgui.bool res = ccimgui.igDragFloat3(
#         _bytes(label),
#         <float*>&io_float_value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_float4(
#     str label,
#     float value0,
#     float value1,
#     float value2,
#     float value3,
#     float v_speed=1.0,
#     float v_min=0.0,
#     float v_max=0.0,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef float[4] io_float_value = [value0, value1, value2, value3]
#     cdef ccimgui.bool res = ccimgui.igDragFloat4(
#         _bytes(label),
#         <float*>&io_float_value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_float_range2(
#     str label,
#     float v_current_min,
#     float v_current_max,
#     float v_speed=1.0,
#     float v_min=0.0,
#     float v_max=0.0,
#     str format_="%.3",
#     str format_max=None,
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igDragFloatRange2(
#         _bytes(label),
#         v_current_min,
#         v_current_max,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         _bytes(format_max),
#         flags
#     )
#     return res

# def drag_int(
#     str label,
#     int value,
#     float v_speed=1.0,
#     int v_min=0,
#     int v_max=0,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igDragInt(
#         _bytes(label),
#         value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_int2(
#     str label,
#     int value0,
#     int value1,
#     float v_speed=1.0,
#     int v_min=0,
#     int v_max=0,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef int[2] io_int_value = [value0, value1]
#     cdef ccimgui.bool res = ccimgui.igDragInt2(
#         _bytes(label),
#         <int*>&io_int_value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_int3(
#     str label,
#     int value0,
#     int value1,
#     int value2,
#     float v_speed=1.0,
#     int v_min=0,
#     int v_max=0,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef int[3] io_int_value = [value0, value1, value2]
#     cdef ccimgui.bool res = ccimgui.igDragInt3(
#         _bytes(label),
#         <int*>&io_int_value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_int4(
#     str label,
#     int value0,
#     int value1,
#     int value2,
#     int value3,
#     float v_speed=1.0,
#     int v_min=0,
#     int v_max=0,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef int[4] io_int_value = [value0, value1, value2, value3]
#     cdef ccimgui.bool res = ccimgui.igDragInt4(
#         _bytes(label),
#         <int*>&io_int_value,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_int_range2(
#     str label,
#     int v_current_min,
#     int v_current_max,
#     float v_speed=1.0,
#     int v_min=0,
#     int v_max=0,
#     str format_="%d",
#     str format_max=None,
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igDragIntRange2(
#         _bytes(label),
#         v_current_min,
#         v_current_max,
#         v_speed,
#         v_min,
#         v_max,
#         _bytes(format_),
#         _bytes(format_max),
#         flags
#     )
#     return res

# def drag_scalar(
#     str label,
#     ccimgui.ImGuiDataType data_type,
#     Any p_data,
#     float v_speed=1.0,
#     Any p_min=None,
#     Any p_max=None,
#     str format_=None,
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igDragScalar(
#         _bytes(label),
#         data_type,
#         p_data,
#         v_speed,
#         p_min,
#         p_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def drag_scalarn(
#     str label,
#     ccimgui.ImGuiDataType data_type,
#     Any p_data,
#     int components,
#     float v_speed=1.0,
#     Any p_min=None,
#     Any p_max=None,
#     str format_=None,
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igDragScalarN(
#         _bytes(label),
#         data_type,
#         p_data,
#         components,
#         v_speed,
#         p_min,
#         p_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def dummy(tuple size):
#     ccimgui.igDummy(_cast_tuple_ImVec2(size))

# def end():
#     ccimgui.igEnd()

# def end_child():
#     ccimgui.igEndChild()

# def end_child_frame():
#     ccimgui.igEndChildFrame()

# def end_combo():
#     ccimgui.igEndCombo()

# def end_disabled():
#     ccimgui.igEndDisabled()

# def end_drag_drop_source():
#     ccimgui.igEndDragDropSource()

# def end_drag_drop_target():
#     ccimgui.igEndDragDropTarget()

# def end_frame():
#     ccimgui.igEndFrame()

# def end_group():
#     ccimgui.igEndGroup()

# def end_list_box():
#     ccimgui.igEndListBox()

# def end_main_menu_bar():
#     ccimgui.igEndMainMenuBar()

# def end_menu():
#     ccimgui.igEndMenu()

# def end_menu_bar():
#     ccimgui.igEndMenuBar()

# def end_popup():
#     ccimgui.igEndPopup()

# def end_tab_bar():
#     ccimgui.igEndTabBar()

# def end_tab_item():
#     ccimgui.igEndTabItem()

# def end_table():
#     ccimgui.igEndTable()

# def end_tooltip():
#     ccimgui.igEndTooltip()

# def find_viewport_by_id(ccimgui.ImGuiID id):
#     cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByID(id)
#     return res

# def find_viewport_by_platform_handle(Any platform_handle):
#     cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByPlatformHandle(platform_handle)
#     return res

# def get_background_draw_list_nil():
#     cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_Nil()
#     return res

# def get_background_draw_list_viewport_ptr(_ImGuiViewport viewport):
#     cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_ViewportPtr(viewport._ptr)
#     return res

# def get_clipboard_text():
#     cdef const char* res = ccimgui.igGetClipboardText()
#     return res

# def get_color_u32_col(ccimgui.ImGuiCol idx, float alpha_mul=1.0):
#     cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Col(idx, alpha_mul)
#     return res

# def get_color_u32_u32(ccimgui.ImU32 col):
#     cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_U32(col)
#     return res

# def get_color_u32_vec4(tuple col):
#     cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Vec4(_cast_tuple_ImVec4(col))
#     return res

# def get_column_index():
#     cdef int res = ccimgui.igGetColumnIndex()
#     return res

# def get_column_offset(int column_index=-1):
#     cdef float res = ccimgui.igGetColumnOffset(column_index)
#     return res

# def get_column_width(int column_index=-1):
#     cdef float res = ccimgui.igGetColumnWidth(column_index)
#     return res

# def get_columns_count():
#     cdef int res = ccimgui.igGetColumnsCount()
#     return res

# def get_content_region_avail(_ImVec2 pOut):
#     ccimgui.igGetContentRegionAvail(pOut._ptr)

# def get_content_region_max(_ImVec2 pOut):
#     ccimgui.igGetContentRegionMax(pOut._ptr)

def get_current_context():
    cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
    return _ImGuiContext.from_ptr(res)

# def get_cursor_pos(_ImVec2 pOut):
#     ccimgui.igGetCursorPos(pOut._ptr)

# def get_cursor_posx():
#     cdef float res = ccimgui.igGetCursorPosX()
#     return res

# def get_cursor_posy():
#     cdef float res = ccimgui.igGetCursorPosY()
#     return res

# def get_cursor_screen_pos(_ImVec2 pOut):
#     ccimgui.igGetCursorScreenPos(pOut._ptr)

# def get_cursor_start_pos(_ImVec2 pOut):
#     ccimgui.igGetCursorStartPos(pOut._ptr)

# def get_drag_drop_payload():
#     cdef ccimgui.ImGuiPayload* res = ccimgui.igGetDragDropPayload()
#     return _ImGuiPayload.from_ptr(res)

def get_draw_data():
    cdef ccimgui.ImDrawData* res = ccimgui.igGetDrawData()
    return _ImDrawData.from_ptr(res)

# def get_draw_list_shared_data():
#     cdef ccimgui.ImDrawListSharedData* res = ccimgui.igGetDrawListSharedData()
#     return _ImDrawListSharedData.from_ptr(res)

# def get_font():
#     cdef ccimgui.ImFont* res = ccimgui.igGetFont()
#     return _ImFont.from_ptr(res)

# def get_font_size():
#     cdef float res = ccimgui.igGetFontSize()
#     return res

# def get_font_tex_uv_white_pixel(_ImVec2 pOut):
#     ccimgui.igGetFontTexUvWhitePixel(pOut._ptr)

# def get_foreground_draw_list_nil():
#     cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_Nil()
#     return res

# def get_foreground_draw_list_viewport_ptr(_ImGuiViewport viewport):
#     cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_ViewportPtr(viewport._ptr)
#     return res

# def get_frame_count():
#     cdef int res = ccimgui.igGetFrameCount()
#     return res

# def get_frame_height():
#     cdef float res = ccimgui.igGetFrameHeight()
#     return res

# def get_frame_height_with_spacing():
#     cdef float res = ccimgui.igGetFrameHeightWithSpacing()
#     return res

# def get_id_ptr(Any ptr_id):
#     cdef ccimgui.ImGuiID res = ccimgui.igGetID_Ptr(ptr_id)
#     return res

# def get_id_str(str str_id):
#     cdef ccimgui.ImGuiID res = ccimgui.igGetID_Str(_bytes(str_id))
#     return res

# def get_id_str_str(str str_id_begin, str str_id_end):
#     cdef ccimgui.ImGuiID res = ccimgui.igGetID_StrStr(_bytes(str_id_begin), _bytes(str_id_end))
#     return res

def get_io():
    cdef ccimgui.ImGuiIO* res = ccimgui.igGetIO()
    return _ImGuiIO.from_ptr(res)

# def get_item_id():
#     cdef ccimgui.ImGuiID res = ccimgui.igGetItemID()
#     return res

# def get_item_rect_max(_ImVec2 pOut):
#     ccimgui.igGetItemRectMax(pOut._ptr)

# def get_item_rect_min(_ImVec2 pOut):
#     ccimgui.igGetItemRectMin(pOut._ptr)

# def get_item_rect_size(_ImVec2 pOut):
#     ccimgui.igGetItemRectSize(pOut._ptr)

# def get_key_index(Any key):
#     cdef ccimgui.ImGuiKey res = ccimgui.igGetKeyIndex(key)
#     return res

# def get_key_name(Any key):
#     cdef const char* res = ccimgui.igGetKeyName(key)
#     return res

# def get_key_pressed_amount(Any key, float repeat_delay, float rate):
#     cdef int res = ccimgui.igGetKeyPressedAmount(key, repeat_delay, rate)
#     return res

# def get_main_viewport():
#     cdef ccimgui.ImGuiViewport* res = ccimgui.igGetMainViewport()
#     return res

# def get_mouse_clicked_count(ccimgui.ImGuiMouseButton button):
#     cdef int res = ccimgui.igGetMouseClickedCount(button)
#     return res

# def get_mouse_cursor():
#     cdef ccimgui.ImGuiMouseCursor res = ccimgui.igGetMouseCursor()
#     return res

# def get_mouse_drag_delta(_ImVec2 pOut, ccimgui.ImGuiMouseButton button=0, float lock_threshold=-1.0):
#     ccimgui.igGetMouseDragDelta(pOut._ptr, button, lock_threshold)

# def get_mouse_pos(_ImVec2 pOut):
#     ccimgui.igGetMousePos(pOut._ptr)

# def get_mouse_pos_on_opening_current_popup(_ImVec2 pOut):
#     ccimgui.igGetMousePosOnOpeningCurrentPopup(pOut._ptr)

# def get_platform_io():
#     cdef ccimgui.ImGuiPlatformIO* res = ccimgui.igGetPlatformIO()
#     return res

# def get_scroll_maxx():
#     cdef float res = ccimgui.igGetScrollMaxX()
#     return res

# def get_scroll_maxy():
#     cdef float res = ccimgui.igGetScrollMaxY()
#     return res

# def get_scrollx():
#     cdef float res = ccimgui.igGetScrollX()
#     return res

# def get_scrolly():
#     cdef float res = ccimgui.igGetScrollY()
#     return res

# def get_state_storage():
#     cdef ccimgui.ImGuiStorage* res = ccimgui.igGetStateStorage()
#     return res

# def get_style():
#     cdef ccimgui.ImGuiStyle* res = ccimgui.igGetStyle()
#     return res

# def get_style_color_name(ccimgui.ImGuiCol idx):
#     cdef const char* res = ccimgui.igGetStyleColorName(idx)
#     return res

# def get_style_color_vec4(ccimgui.ImGuiCol idx):
#     cdef ccimgui.ImVec4* res = ccimgui.igGetStyleColorVec4(idx)
#     return res

# def get_text_line_height():
#     cdef float res = ccimgui.igGetTextLineHeight()
#     return res

# def get_text_line_height_with_spacing():
#     cdef float res = ccimgui.igGetTextLineHeightWithSpacing()
#     return res

# def get_time():
#     cdef double res = ccimgui.igGetTime()
#     return res

# def get_tree_node_to_label_spacing():
#     cdef float res = ccimgui.igGetTreeNodeToLabelSpacing()
#     return res

# def get_version():
#     cdef const char* res = ccimgui.igGetVersion()
#     return res

# def get_window_content_region_max(_ImVec2 pOut):
#     ccimgui.igGetWindowContentRegionMax(pOut._ptr)

# def get_window_content_region_min(_ImVec2 pOut):
#     ccimgui.igGetWindowContentRegionMin(pOut._ptr)

# def get_window_dock_id():
#     cdef ccimgui.ImGuiID res = ccimgui.igGetWindowDockID()
#     return res

# def get_window_dpi_scale():
#     cdef float res = ccimgui.igGetWindowDpiScale()
#     return res

# def get_window_draw_list():
#     cdef ccimgui.ImDrawList* res = ccimgui.igGetWindowDrawList()
#     return res

# def get_window_height():
#     cdef float res = ccimgui.igGetWindowHeight()
#     return res

# def get_window_pos(_ImVec2 pOut):
#     ccimgui.igGetWindowPos(pOut._ptr)

# def get_window_size(_ImVec2 pOut):
#     ccimgui.igGetWindowSize(pOut._ptr)

# def get_window_viewport():
#     cdef ccimgui.ImGuiViewport* res = ccimgui.igGetWindowViewport()
#     return res

# def get_window_width():
#     cdef float res = ccimgui.igGetWindowWidth()
#     return res

# def image(
#     ccimgui.ImTextureID user_texture_id,
#     tuple size,
#     tuple uv0=(0, 0),
#     tuple uv1=(1, 1),
#     tuple tint_col=(1, 1, 1, 1),
#     tuple border_col=(0, 0, 0, 0)
# ):
#     ccimgui.igImage(
#         user_texture_id,
#         _cast_tuple_ImVec2(size),
#         _cast_tuple_ImVec2(uv0),
#         _cast_tuple_ImVec2(uv1),
#         _cast_tuple_ImVec4(tint_col),
#         _cast_tuple_ImVec4(border_col)
#     )

# def image_button(
#     str str_id,
#     ccimgui.ImTextureID user_texture_id,
#     tuple size,
#     tuple uv0=(0, 0),
#     tuple uv1=(1, 1),
#     tuple bg_col=(0, 0, 0, 0),
#     tuple tint_col=(1, 1, 1, 1)
# ):
#     cdef ccimgui.bool res = ccimgui.igImageButton(
#         _bytes(str_id),
#         user_texture_id,
#         _cast_tuple_ImVec2(size),
#         _cast_tuple_ImVec2(uv0),
#         _cast_tuple_ImVec2(uv1),
#         _cast_tuple_ImVec4(bg_col),
#         _cast_tuple_ImVec4(tint_col)
#     )
#     return res

# def indent(float indent_w=0.0):
#     ccimgui.igIndent(indent_w)

# def input_double(
#     str label,
#     Any value,
#     Any step=0.0,
#     Any step_fast=0.0,
#     str format_="%.6",
#     ccimgui.ImGuiInputTextFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igInputDouble(
#         _bytes(label),
#         value,
#         step,
#         step_fast,
#         _bytes(format_),
#         flags
#     )
#     return res

# def input_float(
#     str label,
#     float value,
#     float step=0.0,
#     float step_fast=0.0,
#     str format_="%.3",
#     ccimgui.ImGuiInputTextFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igInputFloat(
#         _bytes(label),
#         value,
#         step,
#         step_fast,
#         _bytes(format_),
#         flags
#     )
#     return res

# def input_float2(str label, float value0, float value1, str format_="%.3", ccimgui.ImGuiInputTextFlags flags=0):
#     cdef float[2] io_float_value = [value0, value1]
#     cdef ccimgui.bool res = ccimgui.igInputFloat2(_bytes(label), <float*>&io_float_value, _bytes(format_), flags)
#     return res

# def input_float3(
#     str label,
#     float value0,
#     float value1,
#     float value2,
#     str format_="%.3",
#     ccimgui.ImGuiInputTextFlags flags=0
# ):
#     cdef float[3] io_float_value = [value0, value1, value2]
#     cdef ccimgui.bool res = ccimgui.igInputFloat3(_bytes(label), <float*>&io_float_value, _bytes(format_), flags)
#     return res

# def input_float4(
#     str label,
#     float value0,
#     float value1,
#     float value2,
#     float value3,
#     str format_="%.3",
#     ccimgui.ImGuiInputTextFlags flags=0
# ):
#     cdef float[4] io_float_value = [value0, value1, value2, value3]
#     cdef ccimgui.bool res = ccimgui.igInputFloat4(_bytes(label), <float*>&io_float_value, _bytes(format_), flags)
#     return res

# def input_int(str label, int value, int step=1, int step_fast=100, ccimgui.ImGuiInputTextFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igInputInt(_bytes(label), value, step, step_fast, flags)
#     return res

# def input_int2(str label, int value0, int value1, ccimgui.ImGuiInputTextFlags flags=0):
#     cdef int[2] io_int_value = [value0, value1]
#     cdef ccimgui.bool res = ccimgui.igInputInt2(_bytes(label), <int*>&io_int_value, flags)
#     return res

# def input_int3(str label, int value0, int value1, int value2, ccimgui.ImGuiInputTextFlags flags=0):
#     cdef int[3] io_int_value = [value0, value1, value2]
#     cdef ccimgui.bool res = ccimgui.igInputInt3(_bytes(label), <int*>&io_int_value, flags)
#     return res

# def input_int4(
#     str label,
#     int value0,
#     int value1,
#     int value2,
#     int value3,
#     ccimgui.ImGuiInputTextFlags flags=0
# ):
#     cdef int[4] io_int_value = [value0, value1, value2, value3]
#     cdef ccimgui.bool res = ccimgui.igInputInt4(_bytes(label), <int*>&io_int_value, flags)
#     return res

# def input_scalar(
#     str label,
#     ccimgui.ImGuiDataType data_type,
#     Any p_data,
#     Any p_step=None,
#     Any p_step_fast=None,
#     str format_=None,
#     ccimgui.ImGuiInputTextFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igInputScalar(
#         _bytes(label),
#         data_type,
#         p_data,
#         p_step,
#         p_step_fast,
#         _bytes(format_),
#         flags
#     )
#     return res

# def input_scalarn(
#     str label,
#     ccimgui.ImGuiDataType data_type,
#     Any p_data,
#     int components,
#     Any p_step=None,
#     Any p_step_fast=None,
#     str format_=None,
#     ccimgui.ImGuiInputTextFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igInputScalarN(
#         _bytes(label),
#         data_type,
#         p_data,
#         components,
#         p_step,
#         p_step_fast,
#         _bytes(format_),
#         flags
#     )
#     return res

# def invisible_button(str str_id, tuple size, ccimgui.ImGuiButtonFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igInvisibleButton(_bytes(str_id), _cast_tuple_ImVec2(size), flags)
#     return res

# def is_any_item_active():
#     cdef ccimgui.bool res = ccimgui.igIsAnyItemActive()
#     return res

# def is_any_item_focused():
#     cdef ccimgui.bool res = ccimgui.igIsAnyItemFocused()
#     return res

# def is_any_item_hovered():
#     cdef ccimgui.bool res = ccimgui.igIsAnyItemHovered()
#     return res

# def is_any_mouse_down():
#     cdef ccimgui.bool res = ccimgui.igIsAnyMouseDown()
#     return res

# def is_item_activated():
#     cdef ccimgui.bool res = ccimgui.igIsItemActivated()
#     return res

# def is_item_active():
#     cdef ccimgui.bool res = ccimgui.igIsItemActive()
#     return res

# def is_item_clicked(ccimgui.ImGuiMouseButton mouse_button=0):
#     cdef ccimgui.bool res = ccimgui.igIsItemClicked(mouse_button)
#     return res

# def is_item_deactivated():
#     cdef ccimgui.bool res = ccimgui.igIsItemDeactivated()
#     return res

# def is_item_deactivated_after_edit():
#     cdef ccimgui.bool res = ccimgui.igIsItemDeactivatedAfterEdit()
#     return res

# def is_item_edited():
#     cdef ccimgui.bool res = ccimgui.igIsItemEdited()
#     return res

# def is_item_focused():
#     cdef ccimgui.bool res = ccimgui.igIsItemFocused()
#     return res

# def is_item_hovered(ccimgui.ImGuiHoveredFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igIsItemHovered(flags)
#     return res

# def is_item_toggled_open():
#     cdef ccimgui.bool res = ccimgui.igIsItemToggledOpen()
#     return res

# def is_item_visible():
#     cdef ccimgui.bool res = ccimgui.igIsItemVisible()
#     return res

# def is_key_down(Any key):
#     cdef ccimgui.bool res = ccimgui.igIsKeyDown(key)
#     return res

# def is_key_pressed(Any key, Any repeat=True):
#     cdef ccimgui.bool res = ccimgui.igIsKeyPressed(key, repeat)
#     return res

# def is_key_released(Any key):
#     cdef ccimgui.bool res = ccimgui.igIsKeyReleased(key)
#     return res

# def is_mouse_clicked(ccimgui.ImGuiMouseButton button, Any repeat=False):
#     cdef ccimgui.bool res = ccimgui.igIsMouseClicked(button, repeat)
#     return res

# def is_mouse_double_clicked(ccimgui.ImGuiMouseButton button):
#     cdef ccimgui.bool res = ccimgui.igIsMouseDoubleClicked(button)
#     return res

# def is_mouse_down(ccimgui.ImGuiMouseButton button):
#     cdef ccimgui.bool res = ccimgui.igIsMouseDown(button)
#     return res

# def is_mouse_dragging(ccimgui.ImGuiMouseButton button, float lock_threshold=-1.0):
#     cdef ccimgui.bool res = ccimgui.igIsMouseDragging(button, lock_threshold)
#     return res

# def is_mouse_hovering_rect(tuple r_min, tuple r_max, Any clip=True):
#     cdef ccimgui.bool res = ccimgui.igIsMouseHoveringRect(_cast_tuple_ImVec2(r_min), _cast_tuple_ImVec2(r_max), clip)
#     return res

# def is_mouse_pos_valid(_ImVec2 mouse_pos=None):
#     cdef ccimgui.bool res = ccimgui.igIsMousePosValid(mouse_pos._ptr)
#     return res

# def is_mouse_released(ccimgui.ImGuiMouseButton button):
#     cdef ccimgui.bool res = ccimgui.igIsMouseReleased(button)
#     return res

# def is_popup_open(str str_id, ccimgui.ImGuiPopupFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igIsPopupOpen(_bytes(str_id), flags)
#     return res

# def is_rect_visible_nil(tuple size):
#     cdef ccimgui.bool res = ccimgui.igIsRectVisible_Nil(_cast_tuple_ImVec2(size))
#     return res

# def is_rect_visible_vec2(tuple rect_min, tuple rect_max):
#     cdef ccimgui.bool res = ccimgui.igIsRectVisible_Vec2(_cast_tuple_ImVec2(rect_min), _cast_tuple_ImVec2(rect_max))
#     return res

# def is_window_appearing():
#     cdef ccimgui.bool res = ccimgui.igIsWindowAppearing()
#     return res

# def is_window_collapsed():
#     cdef ccimgui.bool res = ccimgui.igIsWindowCollapsed()
#     return res

# def is_window_docked():
#     cdef ccimgui.bool res = ccimgui.igIsWindowDocked()
#     return res

# def is_window_focused(ccimgui.ImGuiFocusedFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igIsWindowFocused(flags)
#     return res

# def is_window_hovered(ccimgui.ImGuiHoveredFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igIsWindowHovered(flags)
#     return res

# def label_text(str label, str fmt):
#     ccimgui.igLabelText(_bytes(label), _bytes(fmt))

# def label_textv(str label, str fmt, str args):
#     ccimgui.igLabelTextV(_bytes(label), _bytes(fmt), _bytes(args))

# def list_box_fn_bool_ptr(
#     str label,
#     int current_item,
#     Callable items_getter,
#     Any data,
#     int items_count,
#     int height_in_items=-1
# ):
#     cdef ccimgui.bool res = ccimgui.igListBox_FnBoolPtr(
#         _bytes(label),
#         current_item,
#         items_getter,
#         data,
#         items_count,
#         height_in_items
#     )
#     return res

# def list_box_str_arr(str label, int current_item, Any items_, int items_count, int height_in_items=-1):
#     cdef ccimgui.bool res = ccimgui.igListBox_Str_arr(_bytes(label), current_item, items_, items_count, height_in_items)
#     return res

# def load_ini_settings_from_disk(str ini_filename):
#     ccimgui.igLoadIniSettingsFromDisk(_bytes(ini_filename))

# def load_ini_settings_from_memory(str ini_data, Any ini_size=0):
#     ccimgui.igLoadIniSettingsFromMemory(_bytes(ini_data), ini_size)

# def log_buttons():
#     ccimgui.igLogButtons()

# def log_finish():
#     ccimgui.igLogFinish()

# def log_text(str fmt):
#     ccimgui.igLogText(_bytes(fmt))

# def log_textv(str fmt, str args):
#     ccimgui.igLogTextV(_bytes(fmt), _bytes(args))

# def log_to_clipboard(int auto_open_depth=-1):
#     ccimgui.igLogToClipboard(auto_open_depth)

# def log_to_file(int auto_open_depth=-1, str filename=None):
#     ccimgui.igLogToFile(auto_open_depth, _bytes(filename))

# def log_to_tty(int auto_open_depth=-1):
#     ccimgui.igLogToTTY(auto_open_depth)

# def mem_alloc(Any size):
#     cdef void* res = ccimgui.igMemAlloc(size)
#     return res

# def mem_free(Any ptr):
#     ccimgui.igMemFree(ptr)

# def menu_item_bool(str label, str shortcut=None, Any selected=False, Any enabled=True):
#     cdef ccimgui.bool res = ccimgui.igMenuItem_Bool(_bytes(label), _bytes(shortcut), selected, enabled)
#     return res

# def menu_item_bool_ptr(str label, str shortcut, Any p_selected, Any enabled=True):
#     cdef ccimgui.bool res = ccimgui.igMenuItem_BoolPtr(_bytes(label), _bytes(shortcut), p_selected, enabled)
#     return res

def new_frame():
    ccimgui.igNewFrame()

# def new_line():
#     ccimgui.igNewLine()

# def next_column():
#     ccimgui.igNextColumn()

# def open_popup_on_item_click(str str_id=None, ccimgui.ImGuiPopupFlags popup_flags=1):
#     ccimgui.igOpenPopupOnItemClick(_bytes(str_id), popup_flags)

# def open_popup_id(ccimgui.ImGuiID id, ccimgui.ImGuiPopupFlags popup_flags=0):
#     ccimgui.igOpenPopup_ID(id, popup_flags)

# def open_popup_str(str str_id, ccimgui.ImGuiPopupFlags popup_flags=0):
#     ccimgui.igOpenPopup_Str(_bytes(str_id), popup_flags)

# def plot_histogram_float_ptr(
#     str label,
#     Any values_,
#     int values_count,
#     int values_offset=0,
#     str overlay_text=None,
#     float scale_min=FLT_MAX,
#     float scale_max=FLT_MAX,
#     tuple graph_size=(0, 0),
#     int stride=sizeof(float)
# ):
#     ccimgui.igPlotHistogram_FloatPtr(
#         _bytes(label),
#         values_,
#         values_count,
#         values_offset,
#         _bytes(overlay_text),
#         scale_min,
#         scale_max,
#         _cast_tuple_ImVec2(graph_size),
#         stride
#     )

# def plot_histogram_fn_float_ptr(
#     str label,
#     Callable values_getter,
#     Any data,
#     int values_count,
#     int values_offset=0,
#     str overlay_text=None,
#     float scale_min=FLT_MAX,
#     float scale_max=FLT_MAX,
#     tuple graph_size=(0, 0)
# ):
#     ccimgui.igPlotHistogram_FnFloatPtr(
#         _bytes(label),
#         values_getter,
#         data,
#         values_count,
#         values_offset,
#         _bytes(overlay_text),
#         scale_min,
#         scale_max,
#         _cast_tuple_ImVec2(graph_size)
#     )

# def plot_lines_float_ptr(
#     str label,
#     Any values_,
#     int values_count,
#     int values_offset=0,
#     str overlay_text=None,
#     float scale_min=FLT_MAX,
#     float scale_max=FLT_MAX,
#     tuple graph_size=(0, 0),
#     int stride=sizeof(float)
# ):
#     ccimgui.igPlotLines_FloatPtr(
#         _bytes(label),
#         values_,
#         values_count,
#         values_offset,
#         _bytes(overlay_text),
#         scale_min,
#         scale_max,
#         _cast_tuple_ImVec2(graph_size),
#         stride
#     )

# def plot_lines_fn_float_ptr(
#     str label,
#     Callable values_getter,
#     Any data,
#     int values_count,
#     int values_offset=0,
#     str overlay_text=None,
#     float scale_min=FLT_MAX,
#     float scale_max=FLT_MAX,
#     tuple graph_size=(0, 0)
# ):
#     ccimgui.igPlotLines_FnFloatPtr(
#         _bytes(label),
#         values_getter,
#         data,
#         values_count,
#         values_offset,
#         _bytes(overlay_text),
#         scale_min,
#         scale_max,
#         _cast_tuple_ImVec2(graph_size)
#     )

# def pop_allow_keyboard_focus():
#     ccimgui.igPopAllowKeyboardFocus()

# def pop_button_repeat():
#     ccimgui.igPopButtonRepeat()

# def pop_clip_rect():
#     ccimgui.igPopClipRect()

# def pop_font():
#     ccimgui.igPopFont()

# def pop_id():
#     ccimgui.igPopID()

# def pop_item_width():
#     ccimgui.igPopItemWidth()

# def pop_style_color(int count=1):
#     ccimgui.igPopStyleColor(count)

# def pop_style_var(int count=1):
#     ccimgui.igPopStyleVar(count)

# def pop_text_wrap_pos():
#     ccimgui.igPopTextWrapPos()

# def progress_bar(float fraction, tuple size_arg=(-FLT_MIN, 0), str overlay=None):
#     ccimgui.igProgressBar(fraction, _cast_tuple_ImVec2(size_arg), _bytes(overlay))

# def push_allow_keyboard_focus(Any allow_keyboard_focus):
#     ccimgui.igPushAllowKeyboardFocus(allow_keyboard_focus)

# def push_button_repeat(Any repeat):
#     ccimgui.igPushButtonRepeat(repeat)

# def push_clip_rect(tuple clip_rect_min, tuple clip_rect_max, Any intersect_with_current_clip_rect):
#     ccimgui.igPushClipRect(_cast_tuple_ImVec2(clip_rect_min), _cast_tuple_ImVec2(clip_rect_max), intersect_with_current_clip_rect)

# def push_font(_ImFont font):
#     ccimgui.igPushFont(font._ptr)

# def push_id_int(int int_id):
#     ccimgui.igPushID_Int(int_id)

# def push_id_ptr(Any ptr_id):
#     ccimgui.igPushID_Ptr(ptr_id)

# def push_id_str(str str_id):
#     ccimgui.igPushID_Str(_bytes(str_id))

# def push_id_str_str(str str_id_begin, str str_id_end):
#     ccimgui.igPushID_StrStr(_bytes(str_id_begin), _bytes(str_id_end))

# def push_item_width(float item_width):
#     ccimgui.igPushItemWidth(item_width)

# def push_style_color_u32(ccimgui.ImGuiCol idx, ccimgui.ImU32 col):
#     ccimgui.igPushStyleColor_U32(idx, col)

# def push_style_color_vec4(ccimgui.ImGuiCol idx, tuple col):
#     ccimgui.igPushStyleColor_Vec4(idx, _cast_tuple_ImVec4(col))

# def push_style_var_float(ccimgui.ImGuiStyleVar idx, float val):
#     ccimgui.igPushStyleVar_Float(idx, val)

# def push_style_var_vec2(ccimgui.ImGuiStyleVar idx, tuple val):
#     ccimgui.igPushStyleVar_Vec2(idx, _cast_tuple_ImVec2(val))

# def push_text_wrap_pos(float wrap_local_pos_x=0.0):
#     ccimgui.igPushTextWrapPos(wrap_local_pos_x)

# def radio_button_bool(str label, Any active):
#     cdef ccimgui.bool res = ccimgui.igRadioButton_Bool(_bytes(label), active)
#     return res

# def radio_button_int_ptr(str label, int value, int v_button):
#     cdef ccimgui.bool res = ccimgui.igRadioButton_IntPtr(_bytes(label), value, v_button)
#     return res

def render():
    ccimgui.igRender()

# def render_platform_windows_default(Any platform_render_arg=None, Any renderer_render_arg=None):
#     ccimgui.igRenderPlatformWindowsDefault(platform_render_arg, renderer_render_arg)

# def reset_mouse_drag_delta(ccimgui.ImGuiMouseButton button=0):
#     ccimgui.igResetMouseDragDelta(button)

# def same_line(float offset_from_start_x=0.0, float spacing=-1.0):
#     ccimgui.igSameLine(offset_from_start_x, spacing)

# def save_ini_settings_to_disk(str ini_filename):
#     ccimgui.igSaveIniSettingsToDisk(_bytes(ini_filename))

# def save_ini_settings_to_memory(Any out_ini_size=None):
#     cdef const char* res = ccimgui.igSaveIniSettingsToMemory(out_ini_size)
#     return res

# def selectable_bool(str label, Any selected=False, ccimgui.ImGuiSelectableFlags flags=0, tuple size=(0, 0)):
#     cdef ccimgui.bool res = ccimgui.igSelectable_Bool(_bytes(label), selected, flags, _cast_tuple_ImVec2(size))
#     return res

# def selectable_bool_ptr(str label, Any p_selected, ccimgui.ImGuiSelectableFlags flags=0, tuple size=(0, 0)):
#     cdef ccimgui.bool res = ccimgui.igSelectable_BoolPtr(_bytes(label), p_selected, flags, _cast_tuple_ImVec2(size))
#     return res

# def separator():
#     ccimgui.igSeparator()

# def separator_text(str label):
#     ccimgui.igSeparatorText(_bytes(label))

# def set_clipboard_text(str text):
#     ccimgui.igSetClipboardText(_bytes(text))

# def set_color_edit_options(ccimgui.ImGuiColorEditFlags flags):
#     ccimgui.igSetColorEditOptions(flags)

# def set_column_offset(int column_index, float offset_x):
#     ccimgui.igSetColumnOffset(column_index, offset_x)

# def set_column_width(int column_index, float width):
#     ccimgui.igSetColumnWidth(column_index, width)

# def set_current_context(_ImGuiContext ctx):
#     ccimgui.igSetCurrentContext(ctx._ptr)

# def set_cursor_pos(tuple local_pos):
#     ccimgui.igSetCursorPos(_cast_tuple_ImVec2(local_pos))

# def set_cursor_posx(float local_x):
#     ccimgui.igSetCursorPosX(local_x)

# def set_cursor_posy(float local_y):
#     ccimgui.igSetCursorPosY(local_y)

# def set_cursor_screen_pos(tuple pos):
#     ccimgui.igSetCursorScreenPos(_cast_tuple_ImVec2(pos))

# def set_drag_drop_payload(str type, Any data, Any sz, ccimgui.ImGuiCond cond=0):
#     cdef ccimgui.bool res = ccimgui.igSetDragDropPayload(_bytes(type), data, sz, cond)
#     return res

# def set_item_allow_overlap():
#     ccimgui.igSetItemAllowOverlap()

# def set_item_default_focus():
#     ccimgui.igSetItemDefaultFocus()

# def set_keyboard_focus_here(int offset=0):
#     ccimgui.igSetKeyboardFocusHere(offset)

# def set_mouse_cursor(ccimgui.ImGuiMouseCursor cursor_type):
#     ccimgui.igSetMouseCursor(cursor_type)

# def set_next_frame_want_capture_keyboard(Any want_capture_keyboard):
#     ccimgui.igSetNextFrameWantCaptureKeyboard(want_capture_keyboard)

# def set_next_frame_want_capture_mouse(Any want_capture_mouse):
#     ccimgui.igSetNextFrameWantCaptureMouse(want_capture_mouse)

# def set_next_item_open(Any is_open, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetNextItemOpen(is_open, cond)

# def set_next_item_width(float item_width):
#     ccimgui.igSetNextItemWidth(item_width)

# def set_next_window_bg_alpha(float alpha):
#     ccimgui.igSetNextWindowBgAlpha(alpha)

# def set_next_window_class(_ImGuiWindowClass window_class):
#     ccimgui.igSetNextWindowClass(window_class._ptr)

# def set_next_window_collapsed(Any collapsed, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetNextWindowCollapsed(collapsed, cond)

# def set_next_window_content_size(tuple size):
#     ccimgui.igSetNextWindowContentSize(_cast_tuple_ImVec2(size))

# def set_next_window_dock_id(ccimgui.ImGuiID dock_id, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetNextWindowDockID(dock_id, cond)

# def set_next_window_focus():
#     ccimgui.igSetNextWindowFocus()

# def set_next_window_pos(tuple pos, ccimgui.ImGuiCond cond=0, tuple pivot=(0, 0)):
#     ccimgui.igSetNextWindowPos(_cast_tuple_ImVec2(pos), cond, _cast_tuple_ImVec2(pivot))

# def set_next_window_scroll(tuple scroll):
#     ccimgui.igSetNextWindowScroll(_cast_tuple_ImVec2(scroll))

# def set_next_window_size(tuple size, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetNextWindowSize(_cast_tuple_ImVec2(size), cond)

# def set_next_window_viewport(ccimgui.ImGuiID viewport_id):
#     ccimgui.igSetNextWindowViewport(viewport_id)

# def set_scroll_from_posx(float local_x, float center_x_ratio=0.5):
#     ccimgui.igSetScrollFromPosX(local_x, center_x_ratio)

# def set_scroll_from_posy(float local_y, float center_y_ratio=0.5):
#     ccimgui.igSetScrollFromPosY(local_y, center_y_ratio)

# def set_scroll_herex(float center_x_ratio=0.5):
#     ccimgui.igSetScrollHereX(center_x_ratio)

# def set_scroll_herey(float center_y_ratio=0.5):
#     ccimgui.igSetScrollHereY(center_y_ratio)

# def set_scrollx(float scroll_x):
#     ccimgui.igSetScrollX(scroll_x)

# def set_scrolly(float scroll_y):
#     ccimgui.igSetScrollY(scroll_y)

# def set_state_storage(_ImGuiStorage storage):
#     ccimgui.igSetStateStorage(storage._ptr)

# def set_tab_item_closed(str tab_or_docked_window_label):
#     ccimgui.igSetTabItemClosed(_bytes(tab_or_docked_window_label))

# def set_tooltip(str fmt):
#     ccimgui.igSetTooltip(_bytes(fmt))

# def set_tooltipv(str fmt, str args):
#     ccimgui.igSetTooltipV(_bytes(fmt), _bytes(args))

# def set_window_collapsed_bool(Any collapsed, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetWindowCollapsed_Bool(collapsed, cond)

# def set_window_collapsed_str(str name, Any collapsed, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetWindowCollapsed_Str(_bytes(name), collapsed, cond)

# def set_window_focus_nil():
#     ccimgui.igSetWindowFocus_Nil()

# def set_window_focus_str(str name):
#     ccimgui.igSetWindowFocus_Str(_bytes(name))

# def set_window_font_scale(float scale):
#     ccimgui.igSetWindowFontScale(scale)

# def set_window_pos_str(str name, tuple pos, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetWindowPos_Str(_bytes(name), _cast_tuple_ImVec2(pos), cond)

# def set_window_pos_vec2(tuple pos, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetWindowPos_Vec2(_cast_tuple_ImVec2(pos), cond)

# def set_window_size_str(str name, tuple size, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetWindowSize_Str(_bytes(name), _cast_tuple_ImVec2(size), cond)

# def set_window_size_vec2(tuple size, ccimgui.ImGuiCond cond=0):
#     ccimgui.igSetWindowSize_Vec2(_cast_tuple_ImVec2(size), cond)

# def show_about_window(Any p_open=None):
#     ccimgui.igShowAboutWindow(p_open)

# def show_debug_log_window(Any p_open=None):
#     ccimgui.igShowDebugLogWindow(p_open)

def show_demo_window(bool closable=False):
    cdef ccimgui.bool opened = True
    if closable:
        ccimgui.igShowDemoWindow(&opened)
    else:
        ccimgui.igShowDemoWindow(NULL)
    return opened

# def show_font_selector(str label):
#     ccimgui.igShowFontSelector(_bytes(label))

# def show_metrics_window(Any p_open=None):
#     ccimgui.igShowMetricsWindow(p_open)

# def show_stack_tool_window(Any p_open=None):
#     ccimgui.igShowStackToolWindow(p_open)

# def show_style_editor(_ImGuiStyle ref=None):
#     ccimgui.igShowStyleEditor(ref._ptr)

# def show_style_selector(str label):
#     cdef ccimgui.bool res = ccimgui.igShowStyleSelector(_bytes(label))
#     return res

def show_user_guide():
    ccimgui.igShowUserGuide()

# def slider_angle(
#     str label,
#     float v_rad,
#     float v_degrees_min=-360.0,
#     float v_degrees_max=+360.0,
#     str format_="%.0 deg",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igSliderAngle(
#         _bytes(label),
#         v_rad,
#         v_degrees_min,
#         v_degrees_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_float(
#     str label,
#     float value,
#     float v_min,
#     float v_max,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igSliderFloat(
#         _bytes(label),
#         value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_float2(
#     str label,
#     float value0,
#     float value1,
#     float v_min,
#     float v_max,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef float[2] io_float_value = [value0, value1]
#     cdef ccimgui.bool res = ccimgui.igSliderFloat2(
#         _bytes(label),
#         <float*>&io_float_value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_float3(
#     str label,
#     float value0,
#     float value1,
#     float value2,
#     float v_min,
#     float v_max,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef float[3] io_float_value = [value0, value1, value2]
#     cdef ccimgui.bool res = ccimgui.igSliderFloat3(
#         _bytes(label),
#         <float*>&io_float_value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_float4(
#     str label,
#     float value0,
#     float value1,
#     float value2,
#     float value3,
#     float v_min,
#     float v_max,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef float[4] io_float_value = [value0, value1, value2, value3]
#     cdef ccimgui.bool res = ccimgui.igSliderFloat4(
#         _bytes(label),
#         <float*>&io_float_value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_int(
#     str label,
#     int value,
#     int v_min,
#     int v_max,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igSliderInt(
#         _bytes(label),
#         value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_int2(
#     str label,
#     int value0,
#     int value1,
#     int v_min,
#     int v_max,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef int[2] io_int_value = [value0, value1]
#     cdef ccimgui.bool res = ccimgui.igSliderInt2(
#         _bytes(label),
#         <int*>&io_int_value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_int3(
#     str label,
#     int value0,
#     int value1,
#     int value2,
#     int v_min,
#     int v_max,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef int[3] io_int_value = [value0, value1, value2]
#     cdef ccimgui.bool res = ccimgui.igSliderInt3(
#         _bytes(label),
#         <int*>&io_int_value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_int4(
#     str label,
#     int value0,
#     int value1,
#     int value2,
#     int value3,
#     int v_min,
#     int v_max,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef int[4] io_int_value = [value0, value1, value2, value3]
#     cdef ccimgui.bool res = ccimgui.igSliderInt4(
#         _bytes(label),
#         <int*>&io_int_value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_scalar(
#     str label,
#     ccimgui.ImGuiDataType data_type,
#     Any p_data,
#     Any p_min,
#     Any p_max,
#     str format_=None,
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igSliderScalar(
#         _bytes(label),
#         data_type,
#         p_data,
#         p_min,
#         p_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def slider_scalarn(
#     str label,
#     ccimgui.ImGuiDataType data_type,
#     Any p_data,
#     int components,
#     Any p_min,
#     Any p_max,
#     str format_=None,
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igSliderScalarN(
#         _bytes(label),
#         data_type,
#         p_data,
#         components,
#         p_min,
#         p_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def small_button(str label):
#     cdef ccimgui.bool res = ccimgui.igSmallButton(_bytes(label))
#     return res

# def spacing():
#     ccimgui.igSpacing()

# def style_colors_classic(_ImGuiStyle dst=None):
#     ccimgui.igStyleColorsClassic(dst._ptr)

# def style_colors_dark(_ImGuiStyle dst=None):
#     ccimgui.igStyleColorsDark(dst._ptr)

# def style_colors_light(_ImGuiStyle dst=None):
#     ccimgui.igStyleColorsLight(dst._ptr)

# def tab_item_button(str label, ccimgui.ImGuiTabItemFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igTabItemButton(_bytes(label), flags)
#     return res

# def table_get_column_count():
#     cdef int res = ccimgui.igTableGetColumnCount()
#     return res

# def table_get_column_flags(int column_n=-1):
#     cdef ccimgui.ImGuiTableColumnFlags res = ccimgui.igTableGetColumnFlags(column_n)
#     return res

# def table_get_column_index():
#     cdef int res = ccimgui.igTableGetColumnIndex()
#     return res

# def table_get_column_name(int column_n=-1):
#     cdef const char* res = ccimgui.igTableGetColumnName(column_n)
#     return res

# def table_get_row_index():
#     cdef int res = ccimgui.igTableGetRowIndex()
#     return res

# def table_get_sort_specs():
#     cdef ccimgui.ImGuiTableSortSpecs* res = ccimgui.igTableGetSortSpecs()
#     return res

# def table_header(str label):
#     ccimgui.igTableHeader(_bytes(label))

# def table_headers_row():
#     ccimgui.igTableHeadersRow()

# def table_next_column():
#     cdef ccimgui.bool res = ccimgui.igTableNextColumn()
#     return res

# def table_next_row(ccimgui.ImGuiTableRowFlags row_flags=0, float min_row_height=0.0):
#     ccimgui.igTableNextRow(row_flags, min_row_height)

# def table_set_bg_color(ccimgui.ImGuiTableBgTarget target, ccimgui.ImU32 color, int column_n=-1):
#     ccimgui.igTableSetBgColor(target, color, column_n)

# def table_set_column_enabled(int column_n, Any value):
#     ccimgui.igTableSetColumnEnabled(column_n, value)

# def table_set_column_index(int column_n):
#     cdef ccimgui.bool res = ccimgui.igTableSetColumnIndex(column_n)
#     return res

# def table_setup_column(str label, ccimgui.ImGuiTableColumnFlags flags=0, float init_width_or_weight=0.0, ccimgui.ImGuiID user_id=0):
#     ccimgui.igTableSetupColumn(_bytes(label), flags, init_width_or_weight, user_id)

# def table_setup_scroll_freeze(int cols, int rows):
#     ccimgui.igTableSetupScrollFreeze(cols, rows)

# def text(str fmt):
#     ccimgui.igText(_bytes(fmt))

# def text_colored(tuple col, str fmt):
#     ccimgui.igTextColored(_cast_tuple_ImVec4(col), _bytes(fmt))

# def text_coloredv(tuple col, str fmt, str args):
#     ccimgui.igTextColoredV(_cast_tuple_ImVec4(col), _bytes(fmt), _bytes(args))

# def text_disabled(str fmt):
#     ccimgui.igTextDisabled(_bytes(fmt))

# def text_disabledv(str fmt, str args):
#     ccimgui.igTextDisabledV(_bytes(fmt), _bytes(args))

# def text_unformatted(str text, str text_end=None):
#     ccimgui.igTextUnformatted(_bytes(text), _bytes(text_end))

# def textv(str fmt, str args):
#     ccimgui.igTextV(_bytes(fmt), _bytes(args))

# def text_wrapped(str fmt):
#     ccimgui.igTextWrapped(_bytes(fmt))

# def text_wrappedv(str fmt, str args):
#     ccimgui.igTextWrappedV(_bytes(fmt), _bytes(args))

# def tree_node_ex_v_ptr(Any ptr_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt, str args):
#     cdef ccimgui.bool res = ccimgui.igTreeNodeExV_Ptr(ptr_id, flags, _bytes(fmt), _bytes(args))
#     return res

# def tree_node_ex_v_str(str str_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt, str args):
#     cdef ccimgui.bool res = ccimgui.igTreeNodeExV_Str(_bytes(str_id), flags, _bytes(fmt), _bytes(args))
#     return res

# def tree_node_ex_ptr(Any ptr_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt):
#     cdef ccimgui.bool res = ccimgui.igTreeNodeEx_Ptr(ptr_id, flags, _bytes(fmt))
#     return res

# def tree_node_ex_str(str label, ccimgui.ImGuiTreeNodeFlags flags=0):
#     cdef ccimgui.bool res = ccimgui.igTreeNodeEx_Str(_bytes(label), flags)
#     return res

# def tree_node_ex_str_str(str str_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt):
#     cdef ccimgui.bool res = ccimgui.igTreeNodeEx_StrStr(_bytes(str_id), flags, _bytes(fmt))
#     return res

# def tree_node_v_ptr(Any ptr_id, str fmt, str args):
#     cdef ccimgui.bool res = ccimgui.igTreeNodeV_Ptr(ptr_id, _bytes(fmt), _bytes(args))
#     return res

# def tree_node_v_str(str str_id, str fmt, str args):
#     cdef ccimgui.bool res = ccimgui.igTreeNodeV_Str(_bytes(str_id), _bytes(fmt), _bytes(args))
#     return res

# def tree_node_ptr(Any ptr_id, str fmt):
#     cdef ccimgui.bool res = ccimgui.igTreeNode_Ptr(ptr_id, _bytes(fmt))
#     return res

# def tree_node_str(str label):
#     cdef ccimgui.bool res = ccimgui.igTreeNode_Str(_bytes(label))
#     return res

# def tree_node_str_str(str str_id, str fmt):
#     cdef ccimgui.bool res = ccimgui.igTreeNode_StrStr(_bytes(str_id), _bytes(fmt))
#     return res

# def tree_pop():
#     ccimgui.igTreePop()

# def tree_push_ptr(Any ptr_id):
#     ccimgui.igTreePush_Ptr(ptr_id)

# def tree_push_str(str str_id):
#     ccimgui.igTreePush_Str(_bytes(str_id))

# def unindent(float indent_w=0.0):
#     ccimgui.igUnindent(indent_w)

# def update_platform_windows():
#     ccimgui.igUpdatePlatformWindows()

# def v_slider_float(
#     str label,
#     tuple size,
#     float value,
#     float v_min,
#     float v_max,
#     str format_="%.3",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igVSliderFloat(
#         _bytes(label),
#         _cast_tuple_ImVec2(size),
#         value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def v_slider_int(
#     str label,
#     tuple size,
#     int value,
#     int v_min,
#     int v_max,
#     str format_="%d",
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igVSliderInt(
#         _bytes(label),
#         _cast_tuple_ImVec2(size),
#         value,
#         v_min,
#         v_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def v_slider_scalar(
#     str label,
#     tuple size,
#     ccimgui.ImGuiDataType data_type,
#     Any p_data,
#     Any p_min,
#     Any p_max,
#     str format_=None,
#     ccimgui.ImGuiSliderFlags flags=0
# ):
#     cdef ccimgui.bool res = ccimgui.igVSliderScalar(
#         _bytes(label),
#         _cast_tuple_ImVec2(size),
#         data_type,
#         p_data,
#         p_min,
#         p_max,
#         _bytes(format_),
#         flags
#     )
#     return res

# def value_bool(str prefix, Any b):
#     ccimgui.igValue_Bool(_bytes(prefix), b)

# def value_float(str prefix, float value, str float_format=None):
#     ccimgui.igValue_Float(_bytes(prefix), value, _bytes(float_format))

# def value_int(str prefix, int value):
#     ccimgui.igValue_Int(_bytes(prefix), value)

# def value_uint(str prefix, Any value):
#     ccimgui.igValue_Uint(_bytes(prefix), value)


# cdef class _ImVector_ImDrawCmd:
#     cdef ccimgui.ImVector_ImDrawCmd* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImDrawCmd from_ptr(ccimgui.ImVector_ImDrawCmd* _ptr):
#        cdef _ImVector_ImDrawCmd wrapper = _ImVector_ImDrawCmd.__new__(_ImVector_ImDrawCmd)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImDrawCmd res = dereference(self._ptr).Data
#         return _ImDrawCmd.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImDrawIdx:
#     cdef ccimgui.ImVector_ImDrawIdx* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImDrawIdx from_ptr(ccimgui.ImVector_ImDrawIdx* _ptr):
#        cdef _ImVector_ImDrawIdx wrapper = _ImVector_ImDrawIdx.__new__(_ImVector_ImDrawIdx)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef Any res = dereference(self._ptr).Data
#         return res
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImDrawVert:
#     cdef ccimgui.ImVector_ImDrawVert* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImDrawVert from_ptr(ccimgui.ImVector_ImDrawVert* _ptr):
#        cdef _ImVector_ImDrawVert wrapper = _ImVector_ImDrawVert.__new__(_ImVector_ImDrawVert)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImDrawVert res = dereference(self._ptr).Data
#         return _ImDrawVert.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImVec4:
#     cdef ccimgui.ImVector_ImVec4* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImVec4 from_ptr(ccimgui.ImVector_ImVec4* _ptr):
#        cdef _ImVector_ImVec4 wrapper = _ImVector_ImVec4.__new__(_ImVector_ImVec4)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImVec4 res = dereference(self._ptr).Data
#         return _ImVec4.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImTextureID:
#     cdef ccimgui.ImVector_ImTextureID* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImTextureID from_ptr(ccimgui.ImVector_ImTextureID* _ptr):
#        cdef _ImVector_ImTextureID wrapper = _ImVector_ImTextureID.__new__(_ImVector_ImTextureID)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef Any res = dereference(self._ptr).Data
#         return res
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImVec2:
#     cdef ccimgui.ImVector_ImVec2* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImVec2 from_ptr(ccimgui.ImVector_ImVec2* _ptr):
#        cdef _ImVector_ImVec2 wrapper = _ImVector_ImVec2.__new__(_ImVector_ImVec2)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImVec2 res = dereference(self._ptr).Data
#         return _ImVec2.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImDrawChannel:
#     cdef ccimgui.ImVector_ImDrawChannel* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImDrawChannel from_ptr(ccimgui.ImVector_ImDrawChannel* _ptr):
#        cdef _ImVector_ImDrawChannel wrapper = _ImVector_ImDrawChannel.__new__(_ImVector_ImDrawChannel)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImDrawChannel res = dereference(self._ptr).Data
#         return _ImDrawChannel.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_float:
#     cdef ccimgui.ImVector_float* _ptr
    
#     @staticmethod
#     cdef _ImVector_float from_ptr(ccimgui.ImVector_float* _ptr):
#        cdef _ImVector_float wrapper = _ImVector_float.__new__(_ImVector_float)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef float res = dereference(self._ptr).Data
#         return res
#     @data.setter
#     def data(self, float value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImWchar:
#     cdef ccimgui.ImVector_ImWchar* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImWchar from_ptr(ccimgui.ImVector_ImWchar* _ptr):
#        cdef _ImVector_ImWchar wrapper = _ImVector_ImWchar.__new__(_ImVector_ImWchar)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef Any res = dereference(self._ptr).Data
#         return res
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImFontGlyph:
#     cdef ccimgui.ImVector_ImFontGlyph* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImFontGlyph from_ptr(ccimgui.ImVector_ImFontGlyph* _ptr):
#        cdef _ImVector_ImFontGlyph wrapper = _ImVector_ImFontGlyph.__new__(_ImVector_ImFontGlyph)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImFontGlyph res = dereference(self._ptr).Data
#         return _ImFontGlyph.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImFontPtr:
#     cdef ccimgui.ImVector_ImFontPtr* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImFontPtr from_ptr(ccimgui.ImVector_ImFontPtr* _ptr):
#        cdef _ImVector_ImFontPtr wrapper = _ImVector_ImFontPtr.__new__(_ImVector_ImFontPtr)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImFont res = dereference(self._ptr).Data
#         return _ImFont.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImFontAtlasCustomRect:
#     cdef ccimgui.ImVector_ImFontAtlasCustomRect* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImFontAtlasCustomRect from_ptr(ccimgui.ImVector_ImFontAtlasCustomRect* _ptr):
#        cdef _ImVector_ImFontAtlasCustomRect wrapper = _ImVector_ImFontAtlasCustomRect.__new__(_ImVector_ImFontAtlasCustomRect)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImFontAtlasCustomRect res = dereference(self._ptr).Data
#         return _ImFontAtlasCustomRect.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImVector_ImFontConfig:
#     cdef ccimgui.ImVector_ImFontConfig* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImFontConfig from_ptr(ccimgui.ImVector_ImFontConfig* _ptr):
#        cdef _ImVector_ImFontConfig wrapper = _ImVector_ImFontConfig.__new__(_ImVector_ImFontConfig)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImFontConfig res = dereference(self._ptr).Data
#         return _ImFontConfig.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImFontGlyph:
#     cdef ccimgui.ImFontGlyph* _ptr
    
#     @staticmethod
#     cdef _ImFontGlyph from_ptr(ccimgui.ImFontGlyph* _ptr):
#        cdef _ImFontGlyph wrapper = _ImFontGlyph.__new__(_ImFontGlyph)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def colored(self):
#         cdef Any res = dereference(self._ptr).Colored
#         return res
#     @colored.setter
#     def colored(self, Any value):
#         dereference(self._ptr).Colored = value
    
#     @property
#     def visible(self):
#         cdef Any res = dereference(self._ptr).Visible
#         return res
#     @visible.setter
#     def visible(self, Any value):
#         dereference(self._ptr).Visible = value
    
#     @property
#     def codepoint(self):
#         cdef Any res = dereference(self._ptr).Codepoint
#         return res
#     @codepoint.setter
#     def codepoint(self, Any value):
#         dereference(self._ptr).Codepoint = value
    
#     @property
#     def advancex(self):
#         cdef float res = dereference(self._ptr).AdvanceX
#         return res
#     @advancex.setter
#     def advancex(self, float value):
#         dereference(self._ptr).AdvanceX = value
    
#     @property
#     def x0(self):
#         cdef float res = dereference(self._ptr).X0
#         return res
#     @x0.setter
#     def x0(self, float value):
#         dereference(self._ptr).X0 = value
    
#     @property
#     def y0(self):
#         cdef float res = dereference(self._ptr).Y0
#         return res
#     @y0.setter
#     def y0(self, float value):
#         dereference(self._ptr).Y0 = value
    
#     @property
#     def x1(self):
#         cdef float res = dereference(self._ptr).X1
#         return res
#     @x1.setter
#     def x1(self, float value):
#         dereference(self._ptr).X1 = value
    
#     @property
#     def y1(self):
#         cdef float res = dereference(self._ptr).Y1
#         return res
#     @y1.setter
#     def y1(self, float value):
#         dereference(self._ptr).Y1 = value
    
#     @property
#     def u0(self):
#         cdef float res = dereference(self._ptr).U0
#         return res
#     @u0.setter
#     def u0(self, float value):
#         dereference(self._ptr).U0 = value
    
#     @property
#     def v0(self):
#         cdef float res = dereference(self._ptr).V0
#         return res
#     @v0.setter
#     def v0(self, float value):
#         dereference(self._ptr).V0 = value
    
#     @property
#     def u1(self):
#         cdef float res = dereference(self._ptr).U1
#         return res
#     @u1.setter
#     def u1(self, float value):
#         dereference(self._ptr).U1 = value
    
#     @property
#     def v1(self):
#         cdef float res = dereference(self._ptr).V1
#         return res
#     @v1.setter
#     def v1(self, float value):
#         dereference(self._ptr).V1 = value
    

# cdef class _ImVector_ImU32:
#     cdef ccimgui.ImVector_ImU32* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImU32 from_ptr(ccimgui.ImVector_ImU32* _ptr):
#        cdef _ImVector_ImU32 wrapper = _ImVector_ImU32.__new__(_ImVector_ImU32)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef Any res = dereference(self._ptr).Data
#         return res
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImGuiKeyData:
#     cdef ccimgui.ImGuiKeyData* _ptr
    
#     @staticmethod
#     cdef _ImGuiKeyData from_ptr(ccimgui.ImGuiKeyData* _ptr):
#        cdef _ImGuiKeyData wrapper = _ImGuiKeyData.__new__(_ImGuiKeyData)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def down(self):
#         cdef Any res = dereference(self._ptr).Down
#         return res
#     @down.setter
#     def down(self, Any value):
#         dereference(self._ptr).Down = value
    
#     @property
#     def down_duration(self):
#         cdef float res = dereference(self._ptr).DownDuration
#         return res
#     @down_duration.setter
#     def down_duration(self, float value):
#         dereference(self._ptr).DownDuration = value
    
#     @property
#     def down_duration_prev(self):
#         cdef float res = dereference(self._ptr).DownDurationPrev
#         return res
#     @down_duration_prev.setter
#     def down_duration_prev(self, float value):
#         dereference(self._ptr).DownDurationPrev = value
    
#     @property
#     def analog_value(self):
#         cdef float res = dereference(self._ptr).AnalogValue
#         return res
#     @analog_value.setter
#     def analog_value(self, float value):
#         dereference(self._ptr).AnalogValue = value
    

# cdef class _ImGuiListClipper:
#     cdef ccimgui.ImGuiListClipper* _ptr
    
#     @staticmethod
#     cdef _ImGuiListClipper from_ptr(ccimgui.ImGuiListClipper* _ptr):
#        cdef _ImGuiListClipper wrapper = _ImGuiListClipper.__new__(_ImGuiListClipper)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_list_clipper():
#         cdef ccimgui.ImGuiListClipper* _ptr = ccimgui.ImGuiListClipper_ImGuiListClipper()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiListClipper.from_ptr(_ptr)
    
#     def destroy(_ImGuiListClipper self):
#         ccimgui.ImGuiListClipper_destroy(self._ptr)
    
#     def begin(_ImGuiListClipper self, int items_count, float items_height=-1.0):
#         ccimgui.ImGuiListClipper_Begin(self._ptr, items_count, items_height)
    
#     def end(_ImGuiListClipper self):
#         ccimgui.ImGuiListClipper_End(self._ptr)
    
#     def force_display_range_by_indices(_ImGuiListClipper self, int item_min, int item_max):
#         ccimgui.ImGuiListClipper_ForceDisplayRangeByIndices(self._ptr, item_min, item_max)
    
#     def step(_ImGuiListClipper self):
#         cdef ccimgui.bool res = ccimgui.ImGuiListClipper_Step(self._ptr)
#         return res
    
#     @property
#     def display_start(self):
#         cdef int res = dereference(self._ptr).DisplayStart
#         return res
#     @display_start.setter
#     def display_start(self, int value):
#         dereference(self._ptr).DisplayStart = value
    
#     @property
#     def display_end(self):
#         cdef int res = dereference(self._ptr).DisplayEnd
#         return res
#     @display_end.setter
#     def display_end(self, int value):
#         dereference(self._ptr).DisplayEnd = value
    
#     @property
#     def items_count(self):
#         cdef int res = dereference(self._ptr).ItemsCount
#         return res
#     @items_count.setter
#     def items_count(self, int value):
#         dereference(self._ptr).ItemsCount = value
    
#     @property
#     def items_height(self):
#         cdef float res = dereference(self._ptr).ItemsHeight
#         return res
#     @items_height.setter
#     def items_height(self, float value):
#         dereference(self._ptr).ItemsHeight = value
    
#     @property
#     def start_posy(self):
#         cdef float res = dereference(self._ptr).StartPosY
#         return res
#     @start_posy.setter
#     def start_posy(self, float value):
#         dereference(self._ptr).StartPosY = value
    
#     @property
#     def temp_data(self):
#         cdef Any res = dereference(self._ptr).TempData
#         return res
#     @temp_data.setter
#     def temp_data(self, Any value):
#         dereference(self._ptr).TempData = value
    

# cdef class _ImGuiOnceUponAFrame:
#     cdef ccimgui.ImGuiOnceUponAFrame* _ptr
    
#     @staticmethod
#     cdef _ImGuiOnceUponAFrame from_ptr(ccimgui.ImGuiOnceUponAFrame* _ptr):
#        cdef _ImGuiOnceUponAFrame wrapper = _ImGuiOnceUponAFrame.__new__(_ImGuiOnceUponAFrame)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_once_upon_a_frame():
#         cdef ccimgui.ImGuiOnceUponAFrame* _ptr = ccimgui.ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiOnceUponAFrame.from_ptr(_ptr)
    
#     def destroy(_ImGuiOnceUponAFrame self):
#         ccimgui.ImGuiOnceUponAFrame_destroy(self._ptr)
    
#     @property
#     def ref_frame(self):
#         cdef int res = dereference(self._ptr).RefFrame
#         return res
#     @ref_frame.setter
#     def ref_frame(self, int value):
#         dereference(self._ptr).RefFrame = value
    

# cdef class _ImGuiPayload:
#     cdef ccimgui.ImGuiPayload* _ptr
    
#     @staticmethod
#     cdef _ImGuiPayload from_ptr(ccimgui.ImGuiPayload* _ptr):
#        cdef _ImGuiPayload wrapper = _ImGuiPayload.__new__(_ImGuiPayload)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_payload():
#         cdef ccimgui.ImGuiPayload* _ptr = ccimgui.ImGuiPayload_ImGuiPayload()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiPayload.from_ptr(_ptr)
    
#     def destroy(_ImGuiPayload self):
#         ccimgui.ImGuiPayload_destroy(self._ptr)
    
#     def clear_(_ImGuiPayload self):
#         ccimgui.ImGuiPayload_Clear(self._ptr)
    
#     def is_data_type(_ImGuiPayload self, str type):
#         cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsDataType(self._ptr, _bytes(type))
#         return res
    
#     def is_delivery(_ImGuiPayload self):
#         cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsDelivery(self._ptr)
#         return res
    
#     def is_preview(_ImGuiPayload self):
#         cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsPreview(self._ptr)
#         return res
    
#     @property
#     def data(self):
#         cdef Any res = dereference(self._ptr).Data
#         return res
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    
#     @property
#     def data_size(self):
#         cdef int res = dereference(self._ptr).DataSize
#         return res
#     @data_size.setter
#     def data_size(self, int value):
#         dereference(self._ptr).DataSize = value
    
#     @property
#     def source_id(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).SourceId
#         return res
#     @source_id.setter
#     def source_id(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).SourceId = value
    
#     @property
#     def source_parent_id(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).SourceParentId
#         return res
#     @source_parent_id.setter
#     def source_parent_id(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).SourceParentId = value
    
#     @property
#     def data_frame_count(self):
#         cdef int res = dereference(self._ptr).DataFrameCount
#         return res
#     @data_frame_count.setter
#     def data_frame_count(self, int value):
#         dereference(self._ptr).DataFrameCount = value
    
#     @property
#     def data_type(self):
#         cdef Any res = dereference(self._ptr).DataType
#         return res
#     @data_type.setter
#     def data_type(self, Any value):
#         dereference(self._ptr).DataType = value
    
#     @property
#     def preview(self):
#         cdef Any res = dereference(self._ptr).Preview
#         return res
#     @preview.setter
#     def preview(self, Any value):
#         dereference(self._ptr).Preview = value
    
#     @property
#     def delivery(self):
#         cdef Any res = dereference(self._ptr).Delivery
#         return res
#     @delivery.setter
#     def delivery(self, Any value):
#         dereference(self._ptr).Delivery = value
    

# cdef class _ImVector_ImGuiPlatformMonitor:
#     cdef ccimgui.ImVector_ImGuiPlatformMonitor* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImGuiPlatformMonitor from_ptr(ccimgui.ImVector_ImGuiPlatformMonitor* _ptr):
#        cdef _ImVector_ImGuiPlatformMonitor wrapper = _ImVector_ImGuiPlatformMonitor.__new__(_ImVector_ImGuiPlatformMonitor)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImGuiPlatformMonitor res = dereference(self._ptr).Data
#         return _ImGuiPlatformMonitor.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value


# cdef class _ImVector_ImGuiViewportPtr:
#     cdef ccimgui.ImVector_ImGuiViewportPtr* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImGuiViewportPtr from_ptr(ccimgui.ImVector_ImGuiViewportPtr* _ptr):
#        cdef _ImVector_ImGuiViewportPtr wrapper = _ImVector_ImGuiViewportPtr.__new__(_ImVector_ImGuiViewportPtr)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImGuiViewport res = dereference(self._ptr).Data
#         return _ImGuiViewport.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value


# cdef class _ImVector_ImGuiStoragePair:
#     cdef ccimgui.ImVector_ImGuiStoragePair* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImGuiStoragePair from_ptr(ccimgui.ImVector_ImGuiStoragePair* _ptr):
#        cdef _ImVector_ImGuiStoragePair wrapper = _ImVector_ImGuiStoragePair.__new__(_ImVector_ImGuiStoragePair)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImGuiStoragePair res = dereference(self._ptr).Data
#         return _ImGuiStoragePair.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value


# cdef class _ImGuiStoragePair:
#     cdef ccimgui.ImGuiStoragePair* _ptr
    
#     @staticmethod
#     cdef _ImGuiStoragePair from_ptr(ccimgui.ImGuiStoragePair* _ptr):
#        cdef _ImGuiStoragePair wrapper = _ImGuiStoragePair.__new__(_ImGuiStoragePair)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def float(ccimgui.ImGuiID _key, float _val_f):
#         cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Float(_key, _val_f)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiStoragePair.from_ptr(_ptr)
    
#     @staticmethod
#     def int(ccimgui.ImGuiID _key, int _val_i):
#         cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Int(_key, _val_i)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiStoragePair.from_ptr(_ptr)
    
#     @staticmethod
#     def ptr(ccimgui.ImGuiID _key, Any _val_p):
#         cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Ptr(_key, _val_p)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiStoragePair.from_ptr(_ptr)
    
#     def destroy(_ImGuiStoragePair self):
#         ccimgui.ImGuiStoragePair_destroy(self._ptr)
    
#     @property
#     def key(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).key
#         return res
#     @key.setter
#     def key(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).key = value
    
#     @property
#     def val_i(self):
#         cdef int res = dereference(self._ptr).val_i
#         return res
#     @val_i.setter
#     def val_i(self, int value):
#         dereference(self._ptr).val_i = value
    
#     @property
#     def val_f(self):
#         cdef float res = dereference(self._ptr).val_f
#         return res
#     @val_f.setter
#     def val_f(self, float value):
#         dereference(self._ptr).val_f = value
    
#     @property
#     def val_p(self):
#         cdef Any res = dereference(self._ptr).val_p
#         return res
#     @val_p.setter
#     def val_p(self, Any value):
#         dereference(self._ptr).val_p = value
    

# cdef class _ImGuiTableColumnSortSpecs:
#     cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr
    
#     @staticmethod
#     cdef _ImGuiTableColumnSortSpecs from_ptr(ccimgui.ImGuiTableColumnSortSpecs* _ptr):
#        cdef _ImGuiTableColumnSortSpecs wrapper = _ImGuiTableColumnSortSpecs.__new__(_ImGuiTableColumnSortSpecs)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_table_column_sort_specs():
#         cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr = ccimgui.ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiTableColumnSortSpecs.from_ptr(_ptr)
    
#     def destroy(_ImGuiTableColumnSortSpecs self):
#         ccimgui.ImGuiTableColumnSortSpecs_destroy(self._ptr)
    
#     @property
#     def column_user_id(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).ColumnUserID
#         return res
#     @column_user_id.setter
#     def column_user_id(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).ColumnUserID = value
    
#     @property
#     def column_index(self):
#         cdef ccimgui.ImS16 res = dereference(self._ptr).ColumnIndex
#         return res
#     @column_index.setter
#     def column_index(self, ccimgui.ImS16 value):
#         dereference(self._ptr).ColumnIndex = value
    
#     @property
#     def sort_order(self):
#         cdef ccimgui.ImS16 res = dereference(self._ptr).SortOrder
#         return res
#     @sort_order.setter
#     def sort_order(self, ccimgui.ImS16 value):
#         dereference(self._ptr).SortOrder = value
    
#     @property
#     def sort_direction(self):
#         cdef ccimgui.ImGuiSortDirection res = dereference(self._ptr).SortDirection
#         return res
#     @sort_direction.setter
#     def sort_direction(self, ccimgui.ImGuiSortDirection value):
#         dereference(self._ptr).SortDirection = value
    

# cdef class _ImGuiTableSortSpecs:
#     cdef ccimgui.ImGuiTableSortSpecs* _ptr
    
#     @staticmethod
#     cdef _ImGuiTableSortSpecs from_ptr(ccimgui.ImGuiTableSortSpecs* _ptr):
#        cdef _ImGuiTableSortSpecs wrapper = _ImGuiTableSortSpecs.__new__(_ImGuiTableSortSpecs)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_table_sort_specs():
#         cdef ccimgui.ImGuiTableSortSpecs* _ptr = ccimgui.ImGuiTableSortSpecs_ImGuiTableSortSpecs()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiTableSortSpecs.from_ptr(_ptr)
    
#     def destroy(_ImGuiTableSortSpecs self):
#         ccimgui.ImGuiTableSortSpecs_destroy(self._ptr)
    
#     @property
#     def specs(self):
#         cdef ccimgui.ImGuiTableColumnSortSpecs res = dereference(self._ptr).Specs
#         return _ImGuiTableColumnSortSpecs.from_ptr(res)
#     @specs.setter
#     def specs(self, Any value):
#         dereference(self._ptr).Specs = value
    
#     @property
#     def specs_count(self):
#         cdef int res = dereference(self._ptr).SpecsCount
#         return res
#     @specs_count.setter
#     def specs_count(self, int value):
#         dereference(self._ptr).SpecsCount = value
    
#     @property
#     def specs_dirty(self):
#         cdef Any res = dereference(self._ptr).SpecsDirty
#         return res
#     @specs_dirty.setter
#     def specs_dirty(self, Any value):
#         dereference(self._ptr).SpecsDirty = value
    

# cdef class _ImVector_char:
#     cdef ccimgui.ImVector_char* _ptr
    
#     @staticmethod
#     cdef _ImVector_char from_ptr(ccimgui.ImVector_char* _ptr):
#        cdef _ImVector_char wrapper = _ImVector_char.__new__(_ImVector_char)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef str res = dereference(self._ptr).Data
#         return res
#     @data.setter
#     def data(self, str value):
#         dereference(self._ptr).Data = value


# cdef class _ImVector_ImGuiTextRange:
#     cdef ccimgui.ImVector_ImGuiTextRange* _ptr
    
#     @staticmethod
#     cdef _ImVector_ImGuiTextRange from_ptr(ccimgui.ImVector_ImGuiTextRange* _ptr):
#        cdef _ImVector_ImGuiTextRange wrapper = _ImVector_ImGuiTextRange.__new__(_ImVector_ImGuiTextRange)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def size(self):
#         cdef int res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, int value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def capacity(self):
#         cdef int res = dereference(self._ptr).Capacity
#         return res
#     @capacity.setter
#     def capacity(self, int value):
#         dereference(self._ptr).Capacity = value
    
#     @property
#     def data(self):
#         cdef ccimgui.ImGuiTextRange res = dereference(self._ptr).Data
#         return _ImGuiTextRange.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value


# cdef class _ImGuiTextRange:
#     cdef ccimgui.ImGuiTextRange* _ptr
    
#     @staticmethod
#     cdef _ImGuiTextRange from_ptr(ccimgui.ImGuiTextRange* _ptr):
#        cdef _ImGuiTextRange wrapper = _ImGuiTextRange.__new__(_ImGuiTextRange)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def nil():
#         cdef ccimgui.ImGuiTextRange* _ptr = ccimgui.ImGuiTextRange_ImGuiTextRange_Nil()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiTextRange.from_ptr(_ptr)
    
#     @staticmethod
#     def str(str _b, str _e):
#         cdef ccimgui.ImGuiTextRange* _ptr = ccimgui.ImGuiTextRange_ImGuiTextRange_Str(_bytes(_b), _bytes(_e))
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiTextRange.from_ptr(_ptr)
    
#     def destroy(_ImGuiTextRange self):
#         ccimgui.ImGuiTextRange_destroy(self._ptr)
    
#     def empty(_ImGuiTextRange self):
#         cdef ccimgui.bool res = ccimgui.ImGuiTextRange_empty(self._ptr)
#         return res
    
#     def split(_ImGuiTextRange self, Any separator, _ImVector_ImGuiTextRange out):
#         ccimgui.ImGuiTextRange_split(self._ptr, separator, out._ptr)
    
#     @property
#     def b(self):
#         cdef str res = dereference(self._ptr).b
#         return res
#     @b.setter
#     def b(self, str value):
#         dereference(self._ptr).b = value
    
#     @property
#     def e(self):
#         cdef str res = dereference(self._ptr).e
#         return res
#     @e.setter
#     def e(self, str value):
#         dereference(self._ptr).e = value
    

# cdef class _ImGuiWindowClass:
#     cdef ccimgui.ImGuiWindowClass* _ptr
    
#     @staticmethod
#     cdef _ImGuiWindowClass from_ptr(ccimgui.ImGuiWindowClass* _ptr):
#        cdef _ImGuiWindowClass wrapper = _ImGuiWindowClass.__new__(_ImGuiWindowClass)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_window_class():
#         cdef ccimgui.ImGuiWindowClass* _ptr = ccimgui.ImGuiWindowClass_ImGuiWindowClass()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiWindowClass.from_ptr(_ptr)
    
#     def destroy(_ImGuiWindowClass self):
#         ccimgui.ImGuiWindowClass_destroy(self._ptr)
    
#     @property
#     def class_id(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).ClassId
#         return res
#     @class_id.setter
#     def class_id(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).ClassId = value
    
#     @property
#     def parent_viewport_id(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).ParentViewportId
#         return res
#     @parent_viewport_id.setter
#     def parent_viewport_id(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).ParentViewportId = value
    
#     @property
#     def viewport_flags_override_set(self):
#         cdef ccimgui.ImGuiViewportFlags res = dereference(self._ptr).ViewportFlagsOverrideSet
#         return res
#     @viewport_flags_override_set.setter
#     def viewport_flags_override_set(self, ccimgui.ImGuiViewportFlags value):
#         dereference(self._ptr).ViewportFlagsOverrideSet = value
    
#     @property
#     def viewport_flags_override_clear(self):
#         cdef ccimgui.ImGuiViewportFlags res = dereference(self._ptr).ViewportFlagsOverrideClear
#         return res
#     @viewport_flags_override_clear.setter
#     def viewport_flags_override_clear(self, ccimgui.ImGuiViewportFlags value):
#         dereference(self._ptr).ViewportFlagsOverrideClear = value
    
#     @property
#     def tab_item_flags_override_set(self):
#         cdef ccimgui.ImGuiTabItemFlags res = dereference(self._ptr).TabItemFlagsOverrideSet
#         return res
#     @tab_item_flags_override_set.setter
#     def tab_item_flags_override_set(self, ccimgui.ImGuiTabItemFlags value):
#         dereference(self._ptr).TabItemFlagsOverrideSet = value
    
#     @property
#     def dock_node_flags_override_set(self):
#         cdef ccimgui.ImGuiDockNodeFlags res = dereference(self._ptr).DockNodeFlagsOverrideSet
#         return res
#     @dock_node_flags_override_set.setter
#     def dock_node_flags_override_set(self, ccimgui.ImGuiDockNodeFlags value):
#         dereference(self._ptr).DockNodeFlagsOverrideSet = value
    
#     @property
#     def docking_always_tab_bar(self):
#         cdef Any res = dereference(self._ptr).DockingAlwaysTabBar
#         return res
#     @docking_always_tab_bar.setter
#     def docking_always_tab_bar(self, Any value):
#         dereference(self._ptr).DockingAlwaysTabBar = value
    
#     @property
#     def docking_allow_unclassed(self):
#         cdef Any res = dereference(self._ptr).DockingAllowUnclassed
#         return res
#     @docking_allow_unclassed.setter
#     def docking_allow_unclassed(self, Any value):
#         dereference(self._ptr).DockingAllowUnclassed = value
    

# cdef class _ImVec2:
#     cdef ccimgui.ImVec2* _ptr
    
#     @staticmethod
#     cdef _ImVec2 from_ptr(ccimgui.ImVec2* _ptr):
#        cdef _ImVec2 wrapper = _ImVec2.__new__(_ImVec2)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def float(float _x, float _y):
#         cdef ccimgui.ImVec2* _ptr = ccimgui.ImVec2_ImVec2_Float(_x, _y)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImVec2.from_ptr(_ptr)
    
#     @staticmethod
#     def nil():
#         cdef ccimgui.ImVec2* _ptr = ccimgui.ImVec2_ImVec2_Nil()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImVec2.from_ptr(_ptr)
    
#     def destroy(_ImVec2 self):
#         ccimgui.ImVec2_destroy(self._ptr)
    
#     @property
#     def x(self):
#         cdef float res = dereference(self._ptr).x
#         return res
#     @x.setter
#     def x(self, float value):
#         dereference(self._ptr).x = value
    
#     @property
#     def y(self):
#         cdef float res = dereference(self._ptr).y
#         return res
#     @y.setter
#     def y(self, float value):
#         dereference(self._ptr).y = value
    

# cdef class _ImVec4:
#     cdef ccimgui.ImVec4* _ptr
    
#     @staticmethod
#     cdef _ImVec4 from_ptr(ccimgui.ImVec4* _ptr):
#        cdef _ImVec4 wrapper = _ImVec4.__new__(_ImVec4)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def float(float _x, float _y, float _z, float _w):
#         cdef ccimgui.ImVec4* _ptr = ccimgui.ImVec4_ImVec4_Float(_x, _y, _z, _w)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImVec4.from_ptr(_ptr)
    
#     @staticmethod
#     def nil():
#         cdef ccimgui.ImVec4* _ptr = ccimgui.ImVec4_ImVec4_Nil()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImVec4.from_ptr(_ptr)
    
#     def destroy(_ImVec4 self):
#         ccimgui.ImVec4_destroy(self._ptr)
    
#     @property
#     def x(self):
#         cdef float res = dereference(self._ptr).x
#         return res
#     @x.setter
#     def x(self, float value):
#         dereference(self._ptr).x = value
    
#     @property
#     def y(self):
#         cdef float res = dereference(self._ptr).y
#         return res
#     @y.setter
#     def y(self, float value):
#         dereference(self._ptr).y = value
    
#     @property
#     def z(self):
#         cdef float res = dereference(self._ptr).z
#         return res
#     @z.setter
#     def z(self, float value):
#         dereference(self._ptr).z = value
    
#     @property
#     def w(self):
#         cdef float res = dereference(self._ptr).w
#         return res
#     @w.setter
#     def w(self, float value):
#         dereference(self._ptr).w = value
    

# cdef class _ImColor:
#     cdef ccimgui.ImColor* _ptr
    
#     @staticmethod
#     cdef _ImColor from_ptr(ccimgui.ImColor* _ptr):
#        cdef _ImColor wrapper = _ImColor.__new__(_ImColor)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def float(float r, float g, float b, float a=1.0):
#         cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Float(r, g, b, a)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImColor.from_ptr(_ptr)
    
#     @staticmethod
#     def int(int r, int g, int b, int a=255):
#         cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Int(r, g, b, a)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImColor.from_ptr(_ptr)
    
#     @staticmethod
#     def nil():
#         cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Nil()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImColor.from_ptr(_ptr)
    
#     @staticmethod
#     def u32(ccimgui.ImU32 rgba):
#         cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_U32(rgba)
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImColor.from_ptr(_ptr)
    
#     @staticmethod
#     def vec4(tuple col):
#         cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Vec4(_cast_tuple_ImVec4(col))
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImColor.from_ptr(_ptr)
    
#     def destroy(_ImColor self):
#         ccimgui.ImColor_destroy(self._ptr)
    
#     def hsv(_ImColor pOut, float h, float s, float value, float a=1.0):
#         ccimgui.ImColor_HSV(pOut._ptr, h, s, value, a)
    
#     def set_hsv(_ImColor self, float h, float s, float value, float a=1.0):
#         ccimgui.ImColor_SetHSV(self._ptr, h, s, value, a)
    
#     @property
#     def value(self):
#         cdef tuple res = dereference(self._ptr).Value
#         return res
#     @value.setter
#     def value(self, tuple value):
#         dereference(self._ptr).Value = value
    

# cdef class _ImDrawChannel:
#     cdef ccimgui.ImDrawChannel* _ptr
    
#     @staticmethod
#     cdef _ImDrawChannel from_ptr(ccimgui.ImDrawChannel* _ptr):
#        cdef _ImDrawChannel wrapper = _ImDrawChannel.__new__(_ImDrawChannel)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @property
#     def _cmd_buffer(self):
#         cdef ccimgui.ImVector_ImDrawCmd res = dereference(self._ptr)._CmdBuffer
#         return _ImVector_ImDrawCmd.from_ptr(res)
#     @_cmd_buffer.setter
#     def _cmd_buffer(self, Any value):
#         dereference(self._ptr)._CmdBuffer = value
    
#     @property
#     def _idx_buffer(self):
#         cdef ccimgui.ImVector_ImDrawIdx res = dereference(self._ptr)._IdxBuffer
#         return _ImVector_ImDrawIdx.from_ptr(res)
#     @_idx_buffer.setter
#     def _idx_buffer(self, Any value):
#         dereference(self._ptr)._IdxBuffer = value
    

cdef class _ImDrawCmd:
    cdef ccimgui.ImDrawCmd* _ptr
    
    @staticmethod
    cdef _ImDrawCmd from_ptr(ccimgui.ImDrawCmd* _ptr):
       cdef _ImDrawCmd wrapper = _ImDrawCmd.__new__(_ImDrawCmd)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def draw_cmd():
#         cdef ccimgui.ImDrawCmd* _ptr = ccimgui.ImDrawCmd_ImDrawCmd()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImDrawCmd.from_ptr(_ptr)
    
#     def destroy(_ImDrawCmd self):
#         ccimgui.ImDrawCmd_destroy(self._ptr)
    
#     def get_tex_id(_ImDrawCmd self):
#         cdef ccimgui.ImTextureID res = ccimgui.ImDrawCmd_GetTexID(self._ptr)
#         return res
    
#     @property
#     def clip_rect(self):
#         cdef tuple res = dereference(self._ptr).ClipRect
#         return res
#     @clip_rect.setter
#     def clip_rect(self, tuple value):
#         dereference(self._ptr).ClipRect = value
    
    @property
    def texture_id(self):
        cdef object res = <object>dereference(self._ptr).TextureId
        return res
    # @texture_id.setter
    # def texture_id(self, ccimgui.ImTextureID value):
    #     dereference(self._ptr).TextureId = value
    
#     @property
#     def vtx_offset(self):
#         cdef Any res = dereference(self._ptr).VtxOffset
#         return res
#     @vtx_offset.setter
#     def vtx_offset(self, Any value):
#         dereference(self._ptr).VtxOffset = value
    
#     @property
#     def idx_offset(self):
#         cdef Any res = dereference(self._ptr).IdxOffset
#         return res
#     @idx_offset.setter
#     def idx_offset(self, Any value):
#         dereference(self._ptr).IdxOffset = value
    
    @property
    def elem_count(self):
        cdef int res = dereference(self._ptr).ElemCount
        return res
#     @elem_count.setter
#     def elem_count(self, Any value):
#         dereference(self._ptr).ElemCount = value
    
#     @property
#     def user_callback_data(self):
#         cdef Any res = dereference(self._ptr).UserCallbackData
#         return res
#     @user_callback_data.setter
#     def user_callback_data(self, Any value):
#         dereference(self._ptr).UserCallbackData = value
    

# cdef class _ImDrawCmdHeader:
#     cdef ccimgui.ImDrawCmdHeader* _ptr
    
#     @staticmethod
#     cdef _ImDrawCmdHeader from_ptr(ccimgui.ImDrawCmdHeader* _ptr):
#        cdef _ImDrawCmdHeader wrapper = _ImDrawCmdHeader.__new__(_ImDrawCmdHeader)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

    @property
    def clip_rect(self):
        return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
#     @clip_rect.setter
#     def clip_rect(self, tuple value):
#         dereference(self._ptr).ClipRect = value
    
#     @property
#     def texture_id(self):
#         cdef ccimgui.ImTextureID res = dereference(self._ptr).TextureId
#         return res
#     @texture_id.setter
#     def texture_id(self, ccimgui.ImTextureID value):
#         dereference(self._ptr).TextureId = value
    
#     @property
#     def vtx_offset(self):
#         cdef Any res = dereference(self._ptr).VtxOffset
#         return res
#     @vtx_offset.setter
#     def vtx_offset(self, Any value):
#         dereference(self._ptr).VtxOffset = value
    

cdef class _ImDrawData:
    cdef ccimgui.ImDrawData* _ptr
    
    @staticmethod
    cdef _ImDrawData from_ptr(ccimgui.ImDrawData* _ptr):
       cdef _ImDrawData wrapper = _ImDrawData.__new__(_ImDrawData)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def draw_data():
#         cdef ccimgui.ImDrawData* _ptr = ccimgui.ImDrawData_ImDrawData()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImDrawData.from_ptr(_ptr)
    
#     def destroy(_ImDrawData self):
#         ccimgui.ImDrawData_destroy(self._ptr)
    
#     def clear_(_ImDrawData self):
#         ccimgui.ImDrawData_Clear(self._ptr)
    
#     def de_index_all_buffers(_ImDrawData self):
#         ccimgui.ImDrawData_DeIndexAllBuffers(self._ptr)
    
    def scale_clip_rects(_ImDrawData self, fb_scale):
        ccimgui.ImDrawData_ScaleClipRects(self._ptr, _cast_tuple_ImVec2(fb_scale))
    
    # @property
    # def valid(self):
    #     cdef Any res = dereference(self._ptr).Valid
    #     return res
    # @valid.setter
    # def valid(self, Any value):
    #     dereference(self._ptr).Valid = value
    
    # @property
    # def cmd_lists_count(self):
    #     cdef int res = dereference(self._ptr).CmdListsCount
    #     return res
    # @cmd_lists_count.setter
    # def cmd_lists_count(self, int value):
    #     dereference(self._ptr).CmdListsCount = value
    
    # @property
    # def total_idx_count(self):
    #     cdef int res = dereference(self._ptr).TotalIdxCount
    #     return res
    # @total_idx_count.setter
    # def total_idx_count(self, int value):
    #     dereference(self._ptr).TotalIdxCount = value
    
    # @property
    # def total_vtx_count(self):
    #     cdef int res = dereference(self._ptr).TotalVtxCount
    #     return res
    # @total_vtx_count.setter
    # def total_vtx_count(self, int value):
    #     dereference(self._ptr).TotalVtxCount = value
    
    @property
    def cmd_lists(self):
        return [
            _ImDrawList.from_ptr(dereference(self._ptr).CmdLists[idx])
            for idx in range(dereference(self._ptr).CmdListsCount)
        ]
    # @cmd_lists.setter
    # def cmd_lists(self, Any value):
    #     dereference(self._ptr).CmdLists = value._ptr
    
    # @property
    # def display_pos(self):
    #     cdef tuple res = dereference(self._ptr).DisplayPos
    #     return res
    # @display_pos.setter
    # def display_pos(self, tuple value):
    #     dereference(self._ptr).DisplayPos = _cast_tuple_ImVec2(value)
    
    # @property
    # def display_size(self):
    #     cdef tuple res = dereference(self._ptr).DisplaySize
    #     return res
    # @display_size.setter
    # def display_size(self, tuple value):
    #     dereference(self._ptr).DisplaySize = _cast_tuple_ImVec2(value)
    
    # @property
    # def framebuffer_scale(self):
    #     cdef tuple res = dereference(self._ptr).FramebufferScale
    #     return res
    # @framebuffer_scale.setter
    # def framebuffer_scale(self, tuple value):
    #     dereference(self._ptr).FramebufferScale = _cast_tuple_ImVec2(value)
    
    # @property
    # def owner_viewport(self):
    #     cdef ccimgui.ImGuiViewport res = dereference(self._ptr).OwnerViewport
    #     return _ImGuiViewport.from_ptr(res)
    # @owner_viewport.setter
    # def owner_viewport(self, Any value):
    #     dereference(self._ptr).OwnerViewport = value._ptr
    

# cdef class _ImDrawListSplitter:
#     cdef ccimgui.ImDrawListSplitter* _ptr
    
#     @staticmethod
#     cdef _ImDrawListSplitter from_ptr(ccimgui.ImDrawListSplitter* _ptr):
#        cdef _ImDrawListSplitter wrapper = _ImDrawListSplitter.__new__(_ImDrawListSplitter)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def draw_list_splitter():
#         cdef ccimgui.ImDrawListSplitter* _ptr = ccimgui.ImDrawListSplitter_ImDrawListSplitter()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImDrawListSplitter.from_ptr(_ptr)
    
#     def destroy(_ImDrawListSplitter self):
#         ccimgui.ImDrawListSplitter_destroy(self._ptr)
    
#     def clear_(_ImDrawListSplitter self):
#         ccimgui.ImDrawListSplitter_Clear(self._ptr)
    
#     def clear_free_memory(_ImDrawListSplitter self):
#         ccimgui.ImDrawListSplitter_ClearFreeMemory(self._ptr)
    
#     def merge(_ImDrawListSplitter self, _ImDrawList draw_list):
#         ccimgui.ImDrawListSplitter_Merge(self._ptr, draw_list._ptr)
    
#     def set_current_channel(_ImDrawListSplitter self, _ImDrawList draw_list, int channel_idx):
#         ccimgui.ImDrawListSplitter_SetCurrentChannel(self._ptr, draw_list._ptr, channel_idx)
    
#     def split(_ImDrawListSplitter self, _ImDrawList draw_list, int count):
#         ccimgui.ImDrawListSplitter_Split(self._ptr, draw_list._ptr, count)
    

# cdef class _ImDrawVert:
#     cdef ccimgui.ImDrawVert* _ptr
    
#     @staticmethod
#     cdef _ImDrawVert from_ptr(ccimgui.ImDrawVert* _ptr):
#        cdef _ImDrawVert wrapper = _ImDrawVert.__new__(_ImDrawVert)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')


# cdef class _ImFont:
#     cdef ccimgui.ImFont* _ptr
    
#     @staticmethod
#     cdef _ImFont from_ptr(ccimgui.ImFont* _ptr):
#        cdef _ImFont wrapper = _ImFont.__new__(_ImFont)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def font():
#         cdef ccimgui.ImFont* _ptr = ccimgui.ImFont_ImFont()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImFont.from_ptr(_ptr)
    
#     def destroy(_ImFont self):
#         ccimgui.ImFont_destroy(self._ptr)
    
#     def add_glyph(
#         _ImFont self,
#         _ImFontConfig src_cfg,
#         ccimgui.ImWchar c,
#         float x0,
#         float y0,
#         float x1,
#         float y1,
#         float u0,
#         float v0,
#         float u1,
#         float v1,
#         float advance_x
#     ):
#         ccimgui.ImFont_AddGlyph(
#             self._ptr,
#             src_cfg._ptr,
#             c,
#             x0,
#             y0,
#             x1,
#             y1,
#             u0,
#             v0,
#             u1,
#             v1,
#             advance_x
#         )
    
#     def add_remap_char(_ImFont self, ccimgui.ImWchar dst, ccimgui.ImWchar src, Any overwrite_dst=True):
#         ccimgui.ImFont_AddRemapChar(self._ptr, dst, src, overwrite_dst)
    
#     def build_lookup_table(_ImFont self):
#         ccimgui.ImFont_BuildLookupTable(self._ptr)
    
#     def calc_text_sizea(
#         _ImVec2 pOut,
#         _ImFont self,
#         float size,
#         float max_width,
#         float wrap_width,
#         str text_begin,
#         str text_end=None,
#         Any remaining=None
#     ):
#         ccimgui.ImFont_CalcTextSizeA(
#             pOut._ptr,
#             self._ptr,
#             size,
#             max_width,
#             wrap_width,
#             _bytes(text_begin),
#             _bytes(text_end),
#             remaining
#         )
    
#     def calc_word_wrap_positiona(_ImFont self, float scale, str text, str text_end, float wrap_width):
#         cdef const char* res = ccimgui.ImFont_CalcWordWrapPositionA(self._ptr, scale, _bytes(text), _bytes(text_end), wrap_width)
#         return res
    
#     def clear_output_data(_ImFont self):
#         ccimgui.ImFont_ClearOutputData(self._ptr)
    
#     def find_glyph(_ImFont self, ccimgui.ImWchar c):
#         cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyph(self._ptr, c)
#         return res
    
#     def find_glyph_no_fallback(_ImFont self, ccimgui.ImWchar c):
#         cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyphNoFallback(self._ptr, c)
#         return res
    
#     def get_char_advance(_ImFont self, ccimgui.ImWchar c):
#         cdef float res = ccimgui.ImFont_GetCharAdvance(self._ptr, c)
#         return res
    
#     def get_debug_name(_ImFont self):
#         cdef const char* res = ccimgui.ImFont_GetDebugName(self._ptr)
#         return res
    
#     def grow_index(_ImFont self, int new_size):
#         ccimgui.ImFont_GrowIndex(self._ptr, new_size)
    
#     def is_glyph_range_unused(_ImFont self, Any c_begin, Any c_last):
#         cdef ccimgui.bool res = ccimgui.ImFont_IsGlyphRangeUnused(self._ptr, c_begin, c_last)
#         return res
    
#     def is_loaded(_ImFont self):
#         cdef ccimgui.bool res = ccimgui.ImFont_IsLoaded(self._ptr)
#         return res
    
#     def render_char(
#         _ImFont self,
#         _ImDrawList draw_list,
#         float size,
#         tuple pos,
#         ccimgui.ImU32 col,
#         ccimgui.ImWchar c
#     ):
#         ccimgui.ImFont_RenderChar(
#             self._ptr,
#             draw_list._ptr,
#             size,
#             _cast_tuple_ImVec2(pos),
#             col,
#             c
#         )
    
#     def render_text(
#         _ImFont self,
#         _ImDrawList draw_list,
#         float size,
#         tuple pos,
#         ccimgui.ImU32 col,
#         tuple clip_rect,
#         str text_begin,
#         str text_end,
#         float wrap_width=0.0,
#         Any cpu_fine_clip=False
#     ):
#         ccimgui.ImFont_RenderText(
#             self._ptr,
#             draw_list._ptr,
#             size,
#             _cast_tuple_ImVec2(pos),
#             col,
#             _cast_tuple_ImVec4(clip_rect),
#             _bytes(text_begin),
#             _bytes(text_end),
#             wrap_width,
#             cpu_fine_clip
#         )
    
#     def set_glyph_visible(_ImFont self, ccimgui.ImWchar c, Any visible):
#         ccimgui.ImFont_SetGlyphVisible(self._ptr, c, visible)
    
    # @property
    # def index_advancex(self):
    #     cdef ccimgui.ImVector_float res = dereference(self._ptr).IndexAdvanceX
    #     return _ImVector_float.from_ptr(res)
    # @index_advancex.setter
    # def index_advancex(self, Any value):
    #     dereference(self._ptr).IndexAdvanceX = value._ptr
    
    # @property
    # def fallback_advancex(self):
    #     cdef float res = dereference(self._ptr).FallbackAdvanceX
    #     return res
    # @fallback_advancex.setter
    # def fallback_advancex(self, float value):
    #     dereference(self._ptr).FallbackAdvanceX = value
    
    # @property
    # def font_size(self):
    #     cdef float res = dereference(self._ptr).FontSize
    #     return res
    # @font_size.setter
    # def font_size(self, float value):
    #     dereference(self._ptr).FontSize = value
    
    # @property
    # def index_lookup(self):
    #     cdef ccimgui.ImVector_ImWchar res = dereference(self._ptr).IndexLookup
    #     return _ImVector_ImWchar.from_ptr(res)
    # @index_lookup.setter
    # def index_lookup(self, Any value):
    #     dereference(self._ptr).IndexLookup = value._ptr
    
    # @property
    # def glyphs(self):
    #     cdef ccimgui.ImVector_ImFontGlyph res = dereference(self._ptr).Glyphs
    #     return _ImVector_ImFontGlyph.from_ptr(res)
    # @glyphs.setter
    # def glyphs(self, Any value):
    #     dereference(self._ptr).Glyphs = value._ptr
    
    # @property
    # def fallback_glyph(self):
    #     cdef ccimgui.ImFontGlyph res = dereference(self._ptr).FallbackGlyph
    #     return _ImFontGlyph.from_ptr(res)
    # @fallback_glyph.setter
    # def fallback_glyph(self, Any value):
    #     dereference(self._ptr).FallbackGlyph = value._ptr
    
    # @property
    # def container_atlas(self):
    #     cdef ccimgui.ImFontAtlas res = dereference(self._ptr).ContainerAtlas
    #     return _ImFontAtlas.from_ptr(res)
    # @container_atlas.setter
    # def container_atlas(self, Any value):
    #     dereference(self._ptr).ContainerAtlas = value._ptr
    
    # @property
    # def config_data(self):
    #     cdef ccimgui.ImFontConfig res = dereference(self._ptr).ConfigData
    #     return _ImFontConfig.from_ptr(res)
    # @config_data.setter
    # def config_data(self, Any value):
    #     dereference(self._ptr).ConfigData = value._ptr
    
    # @property
    # def config_data_count(self):
    #     cdef Any res = dereference(self._ptr).ConfigDataCount
    #     return res
    # @config_data_count.setter
    # def config_data_count(self, Any value):
    #     dereference(self._ptr).ConfigDataCount = value
    
    # @property
    # def fallback_char(self):
    #     cdef ccimgui.ImWchar res = dereference(self._ptr).FallbackChar
    #     return res
    # @fallback_char.setter
    # def fallback_char(self, ccimgui.ImWchar value):
    #     dereference(self._ptr).FallbackChar = value
    
    # @property
    # def ellipsis_char(self):
    #     cdef ccimgui.ImWchar res = dereference(self._ptr).EllipsisChar
    #     return res
    # @ellipsis_char.setter
    # def ellipsis_char(self, ccimgui.ImWchar value):
    #     dereference(self._ptr).EllipsisChar = value
    
    # @property
    # def ellipsis_char_count(self):
    #     cdef Any res = dereference(self._ptr).EllipsisCharCount
    #     return res
    # @ellipsis_char_count.setter
    # def ellipsis_char_count(self, Any value):
    #     dereference(self._ptr).EllipsisCharCount = value
    
    # @property
    # def ellipsis_width(self):
    #     cdef float res = dereference(self._ptr).EllipsisWidth
    #     return res
    # @ellipsis_width.setter
    # def ellipsis_width(self, float value):
    #     dereference(self._ptr).EllipsisWidth = value
    
    # @property
    # def ellipsis_char_step(self):
    #     cdef float res = dereference(self._ptr).EllipsisCharStep
    #     return res
    # @ellipsis_char_step.setter
    # def ellipsis_char_step(self, float value):
    #     dereference(self._ptr).EllipsisCharStep = value
    
    # @property
    # def dirty_lookup_tables(self):
    #     cdef Any res = dereference(self._ptr).DirtyLookupTables
    #     return res
    # @dirty_lookup_tables.setter
    # def dirty_lookup_tables(self, Any value):
    #     dereference(self._ptr).DirtyLookupTables = value
    
    # @property
    # def scale(self):
    #     cdef float res = dereference(self._ptr).Scale
    #     return res
    # @scale.setter
    # def scale(self, float value):
    #     dereference(self._ptr).Scale = value
    
    # @property
    # def ascent(self):
    #     cdef float res = dereference(self._ptr).Ascent
    #     return res
    # @ascent.setter
    # def ascent(self, float value):
    #     dereference(self._ptr).Ascent = value
    
    # @property
    # def descent(self):
    #     cdef float res = dereference(self._ptr).Descent
    #     return res
    # @descent.setter
    # def descent(self, float value):
    #     dereference(self._ptr).Descent = value
    
    # @property
    # def metrics_total_surface(self):
    #     cdef int res = dereference(self._ptr).MetricsTotalSurface
    #     return res
    # @metrics_total_surface.setter
    # def metrics_total_surface(self, int value):
    #     dereference(self._ptr).MetricsTotalSurface = value
    
    # @property
    # def used_4k_pages_map(self):
    #     cdef ccimgui.ImU8 res = dereference(self._ptr).Used4kPagesMap
    #     return res
    # @used_4k_pages_map.setter
    # def used_4k_pages_map(self, ccimgui.ImU8 value):
    #     dereference(self._ptr).Used4kPagesMap = value
    

cdef class _ImFontAtlas:
    cdef ccimgui.ImFontAtlas* _ptr
    
    @staticmethod
    cdef _ImFontAtlas from_ptr(ccimgui.ImFontAtlas* _ptr):
       cdef _ImFontAtlas wrapper = _ImFontAtlas.__new__(_ImFontAtlas)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    @staticmethod
    def font_atlas():
        cdef ccimgui.ImFontAtlas* _ptr = ccimgui.ImFontAtlas_ImFontAtlas()
        if _ptr is NULL:
            raise MemoryError
        return _ImFontAtlas.from_ptr(_ptr)
    
    def destroy(_ImFontAtlas self):
        ccimgui.ImFontAtlas_destroy(self._ptr)
    
    # def add_custom_rect_font_glyph(
    #     _ImFontAtlas self,
    #     _ImFont font,
    #     ccimgui.ImWchar id,
    #     int width,
    #     int height,
    #     float advance_x,
    #     tuple offset=(0, 0)
    # ):
    #     cdef int res = ccimgui.ImFontAtlas_AddCustomRectFontGlyph(
    #         self._ptr,
    #         font._ptr,
    #         id,
    #         width,
    #         height,
    #         advance_x,
    #         _cast_tuple_ImVec2(offset)
    #     )
    #     return res
    
#     def add_custom_rect_regular(_ImFontAtlas self, int width, int height):
#         cdef int res = ccimgui.ImFontAtlas_AddCustomRectRegular(self._ptr, width, height)
#         return res
    
#     def add_font(_ImFontAtlas self, _ImFontConfig font_cfg):
#         cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFont(self._ptr, font_cfg._ptr)
#         return res
    
#     def add_font_default(_ImFontAtlas self, _ImFontConfig font_cfg=None):
#         cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontDefault(self._ptr, font_cfg._ptr)
#         return res
    
#     def add_font_from_file_ttf(_ImFontAtlas self, str filename, float size_pixels, _ImFontConfig font_cfg=None, Any glyph_ranges=None):
#         cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromFileTTF(self._ptr, _bytes(filename), size_pixels, font_cfg._ptr, glyph_ranges)
#         return res
    
#     def add_font_from_memory_compressed_base_85ttf(_ImFontAtlas self, str compressed_font_data_base85, float size_pixels, _ImFontConfig font_cfg=None, Any glyph_ranges=None):
#         cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self._ptr, _bytes(compressed_font_data_base85), size_pixels, font_cfg._ptr, glyph_ranges)
#         return res
    
#     def add_font_from_memory_compressed_ttf(
#         _ImFontAtlas self,
#         Any compressed_font_data,
#         int compressed_font_size,
#         float size_pixels,
#         _ImFontConfig font_cfg=None,
#         Any glyph_ranges=None
#     ):
#         cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedTTF(
#             self._ptr,
#             compressed_font_data,
#             compressed_font_size,
#             size_pixels,
#             font_cfg._ptr,
#             glyph_ranges
#         )
#         return res
    
#     def add_font_from_memory_ttf(
#         _ImFontAtlas self,
#         Any font_data,
#         int font_size,
#         float size_pixels,
#         _ImFontConfig font_cfg=None,
#         Any glyph_ranges=None
#     ):
#         cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryTTF(
#             self._ptr,
#             font_data,
#             font_size,
#             size_pixels,
#             font_cfg._ptr,
#             glyph_ranges
#         )
#         return res
    
#     def build(_ImFontAtlas self):
#         cdef ccimgui.bool res = ccimgui.ImFontAtlas_Build(self._ptr)
#         return res
    
#     def calc_custom_rect_uv(_ImFontAtlas self, _ImFontAtlasCustomRect rect, _ImVec2 out_uv_min, _ImVec2 out_uv_max):
#         ccimgui.ImFontAtlas_CalcCustomRectUV(self._ptr, rect._ptr, out_uv_min._ptr, out_uv_max._ptr)
    
#     def clear_(_ImFontAtlas self):
#         ccimgui.ImFontAtlas_Clear(self._ptr)
    
#     def clear_fonts(_ImFontAtlas self):
#         ccimgui.ImFontAtlas_ClearFonts(self._ptr)
    
#     def clear_input_data(_ImFontAtlas self):
#         ccimgui.ImFontAtlas_ClearInputData(self._ptr)
    
    def clear_tex_data(_ImFontAtlas self):
        ccimgui.ImFontAtlas_ClearTexData(self._ptr)
    
#     def get_custom_rect_by_index(_ImFontAtlas self, int index):
#         cdef ccimgui.ImFontAtlasCustomRect* res = ccimgui.ImFontAtlas_GetCustomRectByIndex(self._ptr, index)
#         return res
    
#     def get_glyph_ranges_chinese_full(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseFull(self._ptr)
#         return res
    
#     def get_glyph_ranges_chinese_simplified_common(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self._ptr)
#         return res
    
#     def get_glyph_ranges_cyrillic(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesCyrillic(self._ptr)
#         return res
    
#     def get_glyph_ranges_default(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesDefault(self._ptr)
#         return res
    
#     def get_glyph_ranges_greek(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesGreek(self._ptr)
#         return res
    
#     def get_glyph_ranges_japanese(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesJapanese(self._ptr)
#         return res
    
#     def get_glyph_ranges_korean(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesKorean(self._ptr)
#         return res
    
#     def get_glyph_ranges_thai(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesThai(self._ptr)
#         return res
    
#     def get_glyph_ranges_vietnamese(_ImFontAtlas self):
#         cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesVietnamese(self._ptr)
#         return res
    
#     def get_mouse_cursor_tex_data(
#         _ImFontAtlas self,
#         ccimgui.ImGuiMouseCursor cursor,
#         _ImVec2 out_offset,
#         _ImVec2 out_size,
#         tuple out_uv_border0,
#         tuple out_uv_border1,
#         tuple out_uv_fill0,
#         tuple out_uv_fill1
#     ):
#         cdef ImVec2[2] io_ImVec2_out_uv_border = [out_uv_border0, out_uv_border1]
#         cdef ImVec2[2] io_ImVec2_out_uv_fill = [out_uv_fill0, out_uv_fill1]
#         cdef ccimgui.bool res = ccimgui.ImFontAtlas_GetMouseCursorTexData(
#             self._ptr,
#             cursor,
#             out_offset._ptr,
#             out_size._ptr,
#             _cast_tuple_ImVec2(<ImVec2*>&io_ImVec2_out_uv_border),
#             _cast_tuple_ImVec2(<ImVec2*>&io_ImVec2_out_uv_fill)
#         )
#         return res
    
    def get_tex_data_as_alpha8(self: _ImFontAtlas):
        cdef unsigned char* pixels
        cdef int width
        cdef int height
        
        ccimgui.ImFontAtlas_GetTexDataAsAlpha8(self._ptr, &pixels, &width, &height, NULL)
        return width, height, bytes(pixels[:width*height])
    
    @cython.returns(tuple)
    def get_tex_data_as_rgba32(_ImFontAtlas self):
        cdef unsigned char* pixels
        cdef int width
        cdef int height
        
        ccimgui.ImFontAtlas_GetTexDataAsRGBA32(self._ptr, &pixels, &width, &height, NULL)
        return width, height, bytes(pixels[:width*height*4])
    
#     def is_built(_ImFontAtlas self):
#         cdef ccimgui.bool res = ccimgui.ImFontAtlas_IsBuilt(self._ptr)
#         return res
    
#     def set_tex_id(_ImFontAtlas self, ccimgui.ImTextureID id):
#         ccimgui.ImFontAtlas_SetTexID(self._ptr, id)
    
    # @property
    # def flags(self):
    #     cdef ccimgui.ImFontAtlasFlags res = dereference(self._ptr).Flags
    #     return res
    # @flags.setter
    # def flags(self, ccimgui.ImFontAtlasFlags value):
    #     dereference(self._ptr).Flags = value
    
    @property
    def tex_id(self):
        cdef object res = <object>dereference(self._ptr).TexID
        return res
    @tex_id.setter
    def tex_id(self, value):
        dereference(self._ptr).TexID = <void*>value
    
    # @property
    # def tex_desired_width(self):
    #     cdef int res = dereference(self._ptr).TexDesiredWidth
    #     return res
    # @tex_desired_width.setter
    # def tex_desired_width(self, int value):
    #     dereference(self._ptr).TexDesiredWidth = value
    
    # @property
    # def tex_glyph_padding(self):
    #     cdef int res = dereference(self._ptr).TexGlyphPadding
    #     return res
    # @tex_glyph_padding.setter
    # def tex_glyph_padding(self, int value):
    #     dereference(self._ptr).TexGlyphPadding = value
    
    # @property
    # def locked(self):
    #     cdef Any res = dereference(self._ptr).Locked
    #     return res
    # @locked.setter
    # def locked(self, Any value):
    #     dereference(self._ptr).Locked = value
    
    # @property
    # def user_data(self):
    #     cdef Any res = dereference(self._ptr).UserData
    #     return res
    # @user_data.setter
    # def user_data(self, Any value):
    #     dereference(self._ptr).UserData = value
    
    # @property
    # def tex_ready(self):
    #     cdef Any res = dereference(self._ptr).TexReady
    #     return res
    # @tex_ready.setter
    # def tex_ready(self, Any value):
    #     dereference(self._ptr).TexReady = value
    
    # @property
    # def tex_pixels_use_colors(self):
    #     cdef Any res = dereference(self._ptr).TexPixelsUseColors
    #     return res
    # @tex_pixels_use_colors.setter
    # def tex_pixels_use_colors(self, Any value):
    #     dereference(self._ptr).TexPixelsUseColors = value
    
    # @property
    # def tex_pixels_alpha8(self):
    #     cdef Any res = dereference(self._ptr).TexPixelsAlpha8
    #     return res
    # @tex_pixels_alpha8.setter
    # def tex_pixels_alpha8(self, Any value):
    #     dereference(self._ptr).TexPixelsAlpha8 = value
    
    # @property
    # def tex_pixels_rgba32(self):
    #     cdef Any res = dereference(self._ptr).TexPixelsRGBA32
    #     return res
    # @tex_pixels_rgba32.setter
    # def tex_pixels_rgba32(self, Any value):
    #     dereference(self._ptr).TexPixelsRGBA32 = value
    
    # @property
    # def tex_width(self):
    #     cdef int res = dereference(self._ptr).TexWidth
    #     return res
    # @tex_width.setter
    # def tex_width(self, int value):
    #     dereference(self._ptr).TexWidth = value
    
    # @property
    # def tex_height(self):
    #     cdef int res = dereference(self._ptr).TexHeight
    #     return res
    # @tex_height.setter
    # def tex_height(self, int value):
    #     dereference(self._ptr).TexHeight = value
    
    # @property
    # def tex_uv_scale(self):
    #     cdef tuple res = dereference(self._ptr).TexUvScale
    #     return res
    # @tex_uv_scale.setter
    # def tex_uv_scale(self, tuple value):
    #     dereference(self._ptr).TexUvScale = value
    
    # @property
    # def tex_uv_white_pixel(self):
    #     cdef tuple res = dereference(self._ptr).TexUvWhitePixel
    #     return res
    # @tex_uv_white_pixel.setter
    # def tex_uv_white_pixel(self, tuple value):
    #     dereference(self._ptr).TexUvWhitePixel = value
    
    # @property
    # def fonts(self):
    #     cdef ccimgui.ImVector_ImFontPtr res = dereference(self._ptr).Fonts
    #     return _ImVector_ImFontPtr.from_ptr(res)
    # @fonts.setter
    # def fonts(self, Any value):
    #     dereference(self._ptr).Fonts = value
    
    # @property
    # def custom_rects(self):
    #     cdef ccimgui.ImVector_ImFontAtlasCustomRect res = dereference(self._ptr).CustomRects
    #     return _ImVector_ImFontAtlasCustomRect.from_ptr(res)
    # @custom_rects.setter
    # def custom_rects(self, Any value):
    #     dereference(self._ptr).CustomRects = value
    
    # @property
    # def config_data(self):
    #     cdef ccimgui.ImVector_ImFontConfig res = dereference(self._ptr).ConfigData
    #     return _ImVector_ImFontConfig.from_ptr(res)
    # @config_data.setter
    # def config_data(self, Any value):
    #     dereference(self._ptr).ConfigData = value
    
    # @property
    # def tex_uv_lines(self):
    #     cdef tuple res = dereference(self._ptr).TexUvLines
    #     return res
    # @tex_uv_lines.setter
    # def tex_uv_lines(self, tuple value):
    #     dereference(self._ptr).TexUvLines = value
    
    # @property
    # def font_builder_io(self):
    #     cdef ccimgui.ImFontBuilderIO res = dereference(self._ptr).FontBuilderIO
    #     return _ImFontBuilderIO.from_ptr(res)
    # @font_builder_io.setter
    # def font_builder_io(self, Any value):
    #     dereference(self._ptr).FontBuilderIO = value
    
    # @property
    # def font_builder_flags(self):
    #     cdef Any res = dereference(self._ptr).FontBuilderFlags
    #     return res
    # @font_builder_flags.setter
    # def font_builder_flags(self, Any value):
    #     dereference(self._ptr).FontBuilderFlags = value
    
    # @property
    # def pack_id_mouse_cursors(self):
    #     cdef int res = dereference(self._ptr).PackIdMouseCursors
    #     return res
    # @pack_id_mouse_cursors.setter
    # def pack_id_mouse_cursors(self, int value):
    #     dereference(self._ptr).PackIdMouseCursors = value
    
    # @property
    # def pack_id_lines(self):
    #     cdef int res = dereference(self._ptr).PackIdLines
    #     return res
    # @pack_id_lines.setter
    # def pack_id_lines(self, int value):
    #     dereference(self._ptr).PackIdLines = value
    

# cdef class _ImFontAtlasCustomRect:
#     cdef ccimgui.ImFontAtlasCustomRect* _ptr
    
#     @staticmethod
#     cdef _ImFontAtlasCustomRect from_ptr(ccimgui.ImFontAtlasCustomRect* _ptr):
#        cdef _ImFontAtlasCustomRect wrapper = _ImFontAtlasCustomRect.__new__(_ImFontAtlasCustomRect)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def font_atlas_custom_rect():
#         cdef ccimgui.ImFontAtlasCustomRect* _ptr = ccimgui.ImFontAtlasCustomRect_ImFontAtlasCustomRect()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImFontAtlasCustomRect.from_ptr(_ptr)
    
#     def destroy(_ImFontAtlasCustomRect self):
#         ccimgui.ImFontAtlasCustomRect_destroy(self._ptr)
    
#     def is_packed(_ImFontAtlasCustomRect self):
#         cdef ccimgui.bool res = ccimgui.ImFontAtlasCustomRect_IsPacked(self._ptr)
#         return res
    
#     @property
#     def width(self):
#         cdef Any res = dereference(self._ptr).Width
#         return res
#     @width.setter
#     def width(self, Any value):
#         dereference(self._ptr).Width = value
    
#     @property
#     def height(self):
#         cdef Any res = dereference(self._ptr).Height
#         return res
#     @height.setter
#     def height(self, Any value):
#         dereference(self._ptr).Height = value
    
#     @property
#     def x(self):
#         cdef Any res = dereference(self._ptr).X
#         return res
#     @x.setter
#     def x(self, Any value):
#         dereference(self._ptr).X = value
    
#     @property
#     def y(self):
#         cdef Any res = dereference(self._ptr).Y
#         return res
#     @y.setter
#     def y(self, Any value):
#         dereference(self._ptr).Y = value
    
#     @property
#     def glyph_id(self):
#         cdef Any res = dereference(self._ptr).GlyphID
#         return res
#     @glyph_id.setter
#     def glyph_id(self, Any value):
#         dereference(self._ptr).GlyphID = value
    
#     @property
#     def glyph_advancex(self):
#         cdef float res = dereference(self._ptr).GlyphAdvanceX
#         return res
#     @glyph_advancex.setter
#     def glyph_advancex(self, float value):
#         dereference(self._ptr).GlyphAdvanceX = value
    
#     @property
#     def glyph_offset(self):
#         cdef tuple res = dereference(self._ptr).GlyphOffset
#         return res
#     @glyph_offset.setter
#     def glyph_offset(self, tuple value):
#         dereference(self._ptr).GlyphOffset = value
    
#     @property
#     def font(self):
#         cdef ccimgui.ImFont res = dereference(self._ptr).Font
#         return _ImFont.from_ptr(res)
#     @font.setter
#     def font(self, Any value):
#         dereference(self._ptr).Font = value
    

# cdef class _ImFontConfig:
#     cdef ccimgui.ImFontConfig* _ptr
    
#     @staticmethod
#     cdef _ImFontConfig from_ptr(ccimgui.ImFontConfig* _ptr):
#        cdef _ImFontConfig wrapper = _ImFontConfig.__new__(_ImFontConfig)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def font_config():
#         cdef ccimgui.ImFontConfig* _ptr = ccimgui.ImFontConfig_ImFontConfig()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImFontConfig.from_ptr(_ptr)
    
#     def destroy(_ImFontConfig self):
#         ccimgui.ImFontConfig_destroy(self._ptr)
    
#     @property
#     def font_data(self):
#         cdef Any res = dereference(self._ptr).FontData
#         return res
#     @font_data.setter
#     def font_data(self, Any value):
#         dereference(self._ptr).FontData = value
    
#     @property
#     def font_data_size(self):
#         cdef int res = dereference(self._ptr).FontDataSize
#         return res
#     @font_data_size.setter
#     def font_data_size(self, int value):
#         dereference(self._ptr).FontDataSize = value
    
#     @property
#     def font_data_owned_by_atlas(self):
#         cdef Any res = dereference(self._ptr).FontDataOwnedByAtlas
#         return res
#     @font_data_owned_by_atlas.setter
#     def font_data_owned_by_atlas(self, Any value):
#         dereference(self._ptr).FontDataOwnedByAtlas = value
    
#     @property
#     def font_no(self):
#         cdef int res = dereference(self._ptr).FontNo
#         return res
#     @font_no.setter
#     def font_no(self, int value):
#         dereference(self._ptr).FontNo = value
    
#     @property
#     def size_pixels(self):
#         cdef float res = dereference(self._ptr).SizePixels
#         return res
#     @size_pixels.setter
#     def size_pixels(self, float value):
#         dereference(self._ptr).SizePixels = value
    
#     @property
#     def oversampleh(self):
#         cdef int res = dereference(self._ptr).OversampleH
#         return res
#     @oversampleh.setter
#     def oversampleh(self, int value):
#         dereference(self._ptr).OversampleH = value
    
#     @property
#     def oversamplev(self):
#         cdef int res = dereference(self._ptr).OversampleV
#         return res
#     @oversamplev.setter
#     def oversamplev(self, int value):
#         dereference(self._ptr).OversampleV = value
    
#     @property
#     def pixel_snaph(self):
#         cdef Any res = dereference(self._ptr).PixelSnapH
#         return res
#     @pixel_snaph.setter
#     def pixel_snaph(self, Any value):
#         dereference(self._ptr).PixelSnapH = value
    
#     @property
#     def glyph_extra_spacing(self):
#         cdef tuple res = dereference(self._ptr).GlyphExtraSpacing
#         return res
#     @glyph_extra_spacing.setter
#     def glyph_extra_spacing(self, tuple value):
#         dereference(self._ptr).GlyphExtraSpacing = value
    
#     @property
#     def glyph_offset(self):
#         cdef tuple res = dereference(self._ptr).GlyphOffset
#         return res
#     @glyph_offset.setter
#     def glyph_offset(self, tuple value):
#         dereference(self._ptr).GlyphOffset = value
    
#     @property
#     def glyph_ranges(self):
#         cdef Any res = dereference(self._ptr).GlyphRanges
#         return res
#     @glyph_ranges.setter
#     def glyph_ranges(self, Any value):
#         dereference(self._ptr).GlyphRanges = value
    
#     @property
#     def glyph_min_advancex(self):
#         cdef float res = dereference(self._ptr).GlyphMinAdvanceX
#         return res
#     @glyph_min_advancex.setter
#     def glyph_min_advancex(self, float value):
#         dereference(self._ptr).GlyphMinAdvanceX = value
    
#     @property
#     def glyph_max_advancex(self):
#         cdef float res = dereference(self._ptr).GlyphMaxAdvanceX
#         return res
#     @glyph_max_advancex.setter
#     def glyph_max_advancex(self, float value):
#         dereference(self._ptr).GlyphMaxAdvanceX = value
    
#     @property
#     def merge_mode(self):
#         cdef Any res = dereference(self._ptr).MergeMode
#         return res
#     @merge_mode.setter
#     def merge_mode(self, Any value):
#         dereference(self._ptr).MergeMode = value
    
#     @property
#     def font_builder_flags(self):
#         cdef Any res = dereference(self._ptr).FontBuilderFlags
#         return res
#     @font_builder_flags.setter
#     def font_builder_flags(self, Any value):
#         dereference(self._ptr).FontBuilderFlags = value
    
#     @property
#     def rasterizer_multiply(self):
#         cdef float res = dereference(self._ptr).RasterizerMultiply
#         return res
#     @rasterizer_multiply.setter
#     def rasterizer_multiply(self, float value):
#         dereference(self._ptr).RasterizerMultiply = value
    
#     @property
#     def ellipsis_char(self):
#         cdef ccimgui.ImWchar res = dereference(self._ptr).EllipsisChar
#         return res
#     @ellipsis_char.setter
#     def ellipsis_char(self, ccimgui.ImWchar value):
#         dereference(self._ptr).EllipsisChar = value
    
#     @property
#     def name(self):
#         cdef Any res = dereference(self._ptr).Name
#         return res
#     @name.setter
#     def name(self, Any value):
#         dereference(self._ptr).Name = value
    
#     @property
#     def dst_font(self):
#         cdef ccimgui.ImFont res = dereference(self._ptr).DstFont
#         return _ImFont.from_ptr(res)
#     @dst_font.setter
#     def dst_font(self, Any value):
#         dereference(self._ptr).DstFont = value
    

# cdef class _ImFontGlyphRangesBuilder:
#     cdef ccimgui.ImFontGlyphRangesBuilder* _ptr
    
#     @staticmethod
#     cdef _ImFontGlyphRangesBuilder from_ptr(ccimgui.ImFontGlyphRangesBuilder* _ptr):
#        cdef _ImFontGlyphRangesBuilder wrapper = _ImFontGlyphRangesBuilder.__new__(_ImFontGlyphRangesBuilder)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def font_glyph_ranges_builder():
#         cdef ccimgui.ImFontGlyphRangesBuilder* _ptr = ccimgui.ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImFontGlyphRangesBuilder.from_ptr(_ptr)
    
#     def destroy(_ImFontGlyphRangesBuilder self):
#         ccimgui.ImFontGlyphRangesBuilder_destroy(self._ptr)
    
#     def add_char(_ImFontGlyphRangesBuilder self, ccimgui.ImWchar c):
#         ccimgui.ImFontGlyphRangesBuilder_AddChar(self._ptr, c)
    
#     def add_ranges(_ImFontGlyphRangesBuilder self, Any ranges):
#         ccimgui.ImFontGlyphRangesBuilder_AddRanges(self._ptr, ranges)
    
#     def add_text(_ImFontGlyphRangesBuilder self, str text, str text_end=None):
#         ccimgui.ImFontGlyphRangesBuilder_AddText(self._ptr, _bytes(text), _bytes(text_end))
    
#     def build_ranges(_ImFontGlyphRangesBuilder self, _ImVector_ImWchar out_ranges):
#         ccimgui.ImFontGlyphRangesBuilder_BuildRanges(self._ptr, out_ranges._ptr)
    
#     def clear_(_ImFontGlyphRangesBuilder self):
#         ccimgui.ImFontGlyphRangesBuilder_Clear(self._ptr)
    
#     def get_bit(_ImFontGlyphRangesBuilder self, Any n):
#         cdef ccimgui.bool res = ccimgui.ImFontGlyphRangesBuilder_GetBit(self._ptr, n)
#         return res
    
#     def set_bit(_ImFontGlyphRangesBuilder self, Any n):
#         ccimgui.ImFontGlyphRangesBuilder_SetBit(self._ptr, n)
    
#     @property
#     def used_chars(self):
#         cdef ccimgui.ImVector_ImU32 res = dereference(self._ptr).UsedChars
#         return _ImVector_ImU32.from_ptr(res)
#     @used_chars.setter
#     def used_chars(self, Any value):
#         dereference(self._ptr).UsedChars = value
    
_io_clipboard = {}
cdef class _ImGuiIO:
    cdef ccimgui.ImGuiIO* _ptr
    
    @staticmethod
    cdef _ImGuiIO from_ptr(ccimgui.ImGuiIO* _ptr):
       cdef _ImGuiIO wrapper = _ImGuiIO.__new__(_ImGuiIO)
       wrapper._ptr = _ptr
       if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:
           _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {
               '_get_clipboard_text_fn': None,
               '_set_clipboard_text_fn': None
       }
       return wrapper

    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_io():
#         cdef ccimgui.ImGuiIO* _ptr = ccimgui.ImGuiIO_ImGuiIO()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiIO.from_ptr(_ptr)
    
#     def destroy(_ImGuiIO self):
#         ccimgui.ImGuiIO_destroy(self._ptr)
    
#     def add_focus_event(_ImGuiIO self, Any focused):
#         ccimgui.ImGuiIO_AddFocusEvent(self._ptr, focused)
    
    def add_input_character(_ImGuiIO self, ccimgui.ImWchar c):
        ccimgui.ImGuiIO_AddInputCharacter(self._ptr, c)
    
#     def add_input_character_utf16(_ImGuiIO self, ccimgui.ImWchar16 c):
#         ccimgui.ImGuiIO_AddInputCharacterUTF16(self._ptr, c)
    
#     def add_input_characters_utf8(_ImGuiIO self, str str):
#         ccimgui.ImGuiIO_AddInputCharactersUTF8(self._ptr, _bytes(str))
    
#     def add_key_analog_event(_ImGuiIO self, Any key, Any down, float value):
#         ccimgui.ImGuiIO_AddKeyAnalogEvent(self._ptr, key, down, value)
    
#     def add_key_event(_ImGuiIO self, Any key, Any down):
#         ccimgui.ImGuiIO_AddKeyEvent(self._ptr, key, down)
    
#     def add_mouse_button_event(_ImGuiIO self, int button, Any down):
#         ccimgui.ImGuiIO_AddMouseButtonEvent(self._ptr, button, down)
    
#     def add_mouse_pos_event(_ImGuiIO self, float x, float y):
#         ccimgui.ImGuiIO_AddMousePosEvent(self._ptr, x, y)
    
#     def add_mouse_viewport_event(_ImGuiIO self, ccimgui.ImGuiID id):
#         ccimgui.ImGuiIO_AddMouseViewportEvent(self._ptr, id)
    
#     def add_mouse_wheel_event(_ImGuiIO self, float wheel_x, float wheel_y):
#         ccimgui.ImGuiIO_AddMouseWheelEvent(self._ptr, wheel_x, wheel_y)
    
#     def clear_input_characters(_ImGuiIO self):
#         ccimgui.ImGuiIO_ClearInputCharacters(self._ptr)
    
#     def clear_input_keys(_ImGuiIO self):
#         ccimgui.ImGuiIO_ClearInputKeys(self._ptr)
    
#     def set_app_accepting_events(_ImGuiIO self, Any accepting_events):
#         ccimgui.ImGuiIO_SetAppAcceptingEvents(self._ptr, accepting_events)
    
#     def set_key_event_native_data(_ImGuiIO self, Any key, int native_keycode, int native_scancode, int native_legacy_index=-1):
#         ccimgui.ImGuiIO_SetKeyEventNativeData(self._ptr, key, native_keycode, native_scancode, native_legacy_index)
    
#     @property
#     def config_flags(self):
#         cdef ccimgui.ImGuiConfigFlags res = dereference(self._ptr).ConfigFlags
#         return res
#     @config_flags.setter
#     def config_flags(self, ccimgui.ImGuiConfigFlags value):
#         dereference(self._ptr).ConfigFlags = value
    
#     @property
#     def backend_flags(self):
#         cdef ccimgui.ImGuiBackendFlags res = dereference(self._ptr).BackendFlags
#         return res
#     @backend_flags.setter
#     def backend_flags(self, ccimgui.ImGuiBackendFlags value):
#         dereference(self._ptr).BackendFlags = value
    
    @property
    def display_size(self):
        return _cast_ImVec2_tuple(dereference(self._ptr).DisplaySize)
    @display_size.setter
    def display_size(self, tuple value):
        dereference(self._ptr).DisplaySize = _cast_tuple_ImVec2(value)
    
    @property
    def delta_time(self):
        cdef float res = dereference(self._ptr).DeltaTime
        return res
    @delta_time.setter
    def delta_time(self, float value):
        dereference(self._ptr).DeltaTime = value
    
#     @property
#     def ini_saving_rate(self):
#         cdef float res = dereference(self._ptr).IniSavingRate
#         return res
#     @ini_saving_rate.setter
#     def ini_saving_rate(self, float value):
#         dereference(self._ptr).IniSavingRate = value
    
#     @property
#     def ini_filename(self):
#         cdef str res = dereference(self._ptr).IniFilename
#         return res
#     @ini_filename.setter
#     def ini_filename(self, str value):
#         dereference(self._ptr).IniFilename = value
    
#     @property
#     def log_filename(self):
#         cdef str res = dereference(self._ptr).LogFilename
#         return res
#     @log_filename.setter
#     def log_filename(self, str value):
#         dereference(self._ptr).LogFilename = value
    
#     @property
#     def mouse_double_click_time(self):
#         cdef float res = dereference(self._ptr).MouseDoubleClickTime
#         return res
#     @mouse_double_click_time.setter
#     def mouse_double_click_time(self, float value):
#         dereference(self._ptr).MouseDoubleClickTime = value
    
#     @property
#     def mouse_double_click_max_dist(self):
#         cdef float res = dereference(self._ptr).MouseDoubleClickMaxDist
#         return res
#     @mouse_double_click_max_dist.setter
#     def mouse_double_click_max_dist(self, float value):
#         dereference(self._ptr).MouseDoubleClickMaxDist = value
    
#     @property
#     def mouse_drag_threshold(self):
#         cdef float res = dereference(self._ptr).MouseDragThreshold
#         return res
#     @mouse_drag_threshold.setter
#     def mouse_drag_threshold(self, float value):
#         dereference(self._ptr).MouseDragThreshold = value
    
#     @property
#     def key_repeat_delay(self):
#         cdef float res = dereference(self._ptr).KeyRepeatDelay
#         return res
#     @key_repeat_delay.setter
#     def key_repeat_delay(self, float value):
#         dereference(self._ptr).KeyRepeatDelay = value
    
#     @property
#     def key_repeat_rate(self):
#         cdef float res = dereference(self._ptr).KeyRepeatRate
#         return res
#     @key_repeat_rate.setter
#     def key_repeat_rate(self, float value):
#         dereference(self._ptr).KeyRepeatRate = value
    
#     @property
#     def hover_delay_normal(self):
#         cdef float res = dereference(self._ptr).HoverDelayNormal
#         return res
#     @hover_delay_normal.setter
#     def hover_delay_normal(self, float value):
#         dereference(self._ptr).HoverDelayNormal = value
    
#     @property
#     def hover_delay_short(self):
#         cdef float res = dereference(self._ptr).HoverDelayShort
#         return res
#     @hover_delay_short.setter
#     def hover_delay_short(self, float value):
#         dereference(self._ptr).HoverDelayShort = value
    
#     @property
#     def user_data(self):
#         cdef Any res = dereference(self._ptr).UserData
#         return res
#     @user_data.setter
#     def user_data(self, Any value):
#         dereference(self._ptr).UserData = value
    
    @property
    def fonts(self):
        cdef ccimgui.ImFontAtlas* res = dereference(self._ptr).Fonts
        return _ImFontAtlas.from_ptr(res)
#     @fonts.setter
#     def fonts(self, Any value):
#         dereference(self._ptr).Fonts = value
    
#     @property
#     def font_global_scale(self):
#         cdef float res = dereference(self._ptr).FontGlobalScale
#         return res
#     @font_global_scale.setter
#     def font_global_scale(self, float value):
#         dereference(self._ptr).FontGlobalScale = value
    
#     @property
#     def font_allow_user_scaling(self):
#         cdef Any res = dereference(self._ptr).FontAllowUserScaling
#         return res
#     @font_allow_user_scaling.setter
#     def font_allow_user_scaling(self, Any value):
#         dereference(self._ptr).FontAllowUserScaling = value
    
#     @property
#     def font_default(self):
#         cdef ccimgui.ImFont res = dereference(self._ptr).FontDefault
#         return _ImFont.from_ptr(res)
#     @font_default.setter
#     def font_default(self, Any value):
#         dereference(self._ptr).FontDefault = value
    
    @property
    def display_framebuffer_scale(self):
        return _cast_ImVec2_tuple(dereference(self._ptr).DisplayFramebufferScale)
    @display_framebuffer_scale.setter
    def display_framebuffer_scale(self, tuple value):
        dereference(self._ptr).DisplayFramebufferScale = _cast_tuple_ImVec2(value)
    
#     @property
#     def config_docking_no_split(self):
#         cdef Any res = dereference(self._ptr).ConfigDockingNoSplit
#         return res
#     @config_docking_no_split.setter
#     def config_docking_no_split(self, Any value):
#         dereference(self._ptr).ConfigDockingNoSplit = value
    
#     @property
#     def config_docking_with_shift(self):
#         cdef Any res = dereference(self._ptr).ConfigDockingWithShift
#         return res
#     @config_docking_with_shift.setter
#     def config_docking_with_shift(self, Any value):
#         dereference(self._ptr).ConfigDockingWithShift = value
    
#     @property
#     def config_docking_always_tab_bar(self):
#         cdef Any res = dereference(self._ptr).ConfigDockingAlwaysTabBar
#         return res
#     @config_docking_always_tab_bar.setter
#     def config_docking_always_tab_bar(self, Any value):
#         dereference(self._ptr).ConfigDockingAlwaysTabBar = value
    
#     @property
#     def config_docking_transparent_payload(self):
#         cdef Any res = dereference(self._ptr).ConfigDockingTransparentPayload
#         return res
#     @config_docking_transparent_payload.setter
#     def config_docking_transparent_payload(self, Any value):
#         dereference(self._ptr).ConfigDockingTransparentPayload = value
    
#     @property
#     def config_viewports_no_auto_merge(self):
#         cdef Any res = dereference(self._ptr).ConfigViewportsNoAutoMerge
#         return res
#     @config_viewports_no_auto_merge.setter
#     def config_viewports_no_auto_merge(self, Any value):
#         dereference(self._ptr).ConfigViewportsNoAutoMerge = value
    
#     @property
#     def config_viewports_no_task_bar_icon(self):
#         cdef Any res = dereference(self._ptr).ConfigViewportsNoTaskBarIcon
#         return res
#     @config_viewports_no_task_bar_icon.setter
#     def config_viewports_no_task_bar_icon(self, Any value):
#         dereference(self._ptr).ConfigViewportsNoTaskBarIcon = value
    
#     @property
#     def config_viewports_no_decoration(self):
#         cdef Any res = dereference(self._ptr).ConfigViewportsNoDecoration
#         return res
#     @config_viewports_no_decoration.setter
#     def config_viewports_no_decoration(self, Any value):
#         dereference(self._ptr).ConfigViewportsNoDecoration = value
    
#     @property
#     def config_viewports_no_default_parent(self):
#         cdef Any res = dereference(self._ptr).ConfigViewportsNoDefaultParent
#         return res
#     @config_viewports_no_default_parent.setter
#     def config_viewports_no_default_parent(self, Any value):
#         dereference(self._ptr).ConfigViewportsNoDefaultParent = value
    
#     @property
#     def mouse_draw_cursor(self):
#         cdef Any res = dereference(self._ptr).MouseDrawCursor
#         return res
#     @mouse_draw_cursor.setter
#     def mouse_draw_cursor(self, Any value):
#         dereference(self._ptr).MouseDrawCursor = value
    
#     @property
#     def config_mac_osx_behaviors(self):
#         cdef Any res = dereference(self._ptr).ConfigMacOSXBehaviors
#         return res
#     @config_mac_osx_behaviors.setter
#     def config_mac_osx_behaviors(self, Any value):
#         dereference(self._ptr).ConfigMacOSXBehaviors = value
    
#     @property
#     def config_input_trickle_event_queue(self):
#         cdef Any res = dereference(self._ptr).ConfigInputTrickleEventQueue
#         return res
#     @config_input_trickle_event_queue.setter
#     def config_input_trickle_event_queue(self, Any value):
#         dereference(self._ptr).ConfigInputTrickleEventQueue = value
    
#     @property
#     def config_input_text_cursor_blink(self):
#         cdef Any res = dereference(self._ptr).ConfigInputTextCursorBlink
#         return res
#     @config_input_text_cursor_blink.setter
#     def config_input_text_cursor_blink(self, Any value):
#         dereference(self._ptr).ConfigInputTextCursorBlink = value
    
#     @property
#     def config_input_text_enter_keep_active(self):
#         cdef Any res = dereference(self._ptr).ConfigInputTextEnterKeepActive
#         return res
#     @config_input_text_enter_keep_active.setter
#     def config_input_text_enter_keep_active(self, Any value):
#         dereference(self._ptr).ConfigInputTextEnterKeepActive = value
    
#     @property
#     def config_drag_click_to_input_text(self):
#         cdef Any res = dereference(self._ptr).ConfigDragClickToInputText
#         return res
#     @config_drag_click_to_input_text.setter
#     def config_drag_click_to_input_text(self, Any value):
#         dereference(self._ptr).ConfigDragClickToInputText = value
    
#     @property
#     def config_windows_resize_from_edges(self):
#         cdef Any res = dereference(self._ptr).ConfigWindowsResizeFromEdges
#         return res
#     @config_windows_resize_from_edges.setter
#     def config_windows_resize_from_edges(self, Any value):
#         dereference(self._ptr).ConfigWindowsResizeFromEdges = value
    
#     @property
#     def config_windows_move_from_title_bar_only(self):
#         cdef Any res = dereference(self._ptr).ConfigWindowsMoveFromTitleBarOnly
#         return res
#     @config_windows_move_from_title_bar_only.setter
#     def config_windows_move_from_title_bar_only(self, Any value):
#         dereference(self._ptr).ConfigWindowsMoveFromTitleBarOnly = value
    
#     @property
#     def config_memory_compact_timer(self):
#         cdef float res = dereference(self._ptr).ConfigMemoryCompactTimer
#         return res
#     @config_memory_compact_timer.setter
#     def config_memory_compact_timer(self, float value):
#         dereference(self._ptr).ConfigMemoryCompactTimer = value
    
#     @property
#     def backend_platform_name(self):
#         cdef str res = dereference(self._ptr).BackendPlatformName
#         return res
#     @backend_platform_name.setter
#     def backend_platform_name(self, str value):
#         dereference(self._ptr).BackendPlatformName = value
    
#     @property
#     def backend_renderer_name(self):
#         cdef str res = dereference(self._ptr).BackendRendererName
#         return res
#     @backend_renderer_name.setter
#     def backend_renderer_name(self, str value):
#         dereference(self._ptr).BackendRendererName = value
    
#     @property
#     def backend_platform_user_data(self):
#         cdef Any res = dereference(self._ptr).BackendPlatformUserData
#         return res
#     @backend_platform_user_data.setter
#     def backend_platform_user_data(self, Any value):
#         dereference(self._ptr).BackendPlatformUserData = value
    
#     @property
#     def backend_renderer_user_data(self):
#         cdef Any res = dereference(self._ptr).BackendRendererUserData
#         return res
#     @backend_renderer_user_data.setter
#     def backend_renderer_user_data(self, Any value):
#         dereference(self._ptr).BackendRendererUserData = value
    
#     @property
#     def backend_language_user_data(self):
#         cdef Any res = dereference(self._ptr).BackendLanguageUserData
#         return res
#     @backend_language_user_data.setter
#     def backend_language_user_data(self, Any value):
#         dereference(self._ptr).BackendLanguageUserData = value
    
    @staticmethod
    cdef const char* _get_clipboard_text(void* user_data):
        text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()
        if type(text) is bytes:
            return text
        return _bytes(text)

    @property
    def get_clipboard_text_fn(self):
        return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']

    @get_clipboard_text_fn.setter
    def get_clipboard_text_fn(self, func):
        if callable(func):
            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = func
            dereference(self._ptr).GetClipboardTextFn = self._get_clipboard_text
        else:
            raise ValueError("func is not a callable: %s" % str(func))

    @staticmethod
    cdef void _set_clipboard_text(void* user_data, const char* text):
        _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))

    @property
    def set_clipboard_text_fn(self):
        return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn']

    @set_clipboard_text_fn.setter
    def set_clipboard_text_fn(self, func):
        if callable(func):
            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = func
            dereference(self._ptr).SetClipboardTextFn = self._set_clipboard_text
        else:
            raise ValueError("func is not a callable: %s" % str(func))
    
#     @property
#     def clipboard_user_data(self):
#         cdef Any res = dereference(self._ptr).ClipboardUserData
#         return res
#     @clipboard_user_data.setter
#     def clipboard_user_data(self, Any value):
#         dereference(self._ptr).ClipboardUserData = value
    
#     @property
#     def set_platform_ime_data_fn(self):
#         cdef Callable res = dereference(self._ptr).SetPlatformImeDataFn
#         return res
#     @set_platform_ime_data_fn.setter
#     def set_platform_ime_data_fn(self, Callable value):
#         dereference(self._ptr).SetPlatformImeDataFn = value
    
#     @property
#     def _unused_padding(self):
#         cdef Any res = dereference(self._ptr)._UnusedPadding
#         return res
#     @_unused_padding.setter
#     def _unused_padding(self, Any value):
#         dereference(self._ptr)._UnusedPadding = value
    
#     @property
#     def want_capture_mouse(self):
#         cdef Any res = dereference(self._ptr).WantCaptureMouse
#         return res
#     @want_capture_mouse.setter
#     def want_capture_mouse(self, Any value):
#         dereference(self._ptr).WantCaptureMouse = value
    
#     @property
#     def want_capture_keyboard(self):
#         cdef Any res = dereference(self._ptr).WantCaptureKeyboard
#         return res
#     @want_capture_keyboard.setter
#     def want_capture_keyboard(self, Any value):
#         dereference(self._ptr).WantCaptureKeyboard = value
    
#     @property
#     def want_text_input(self):
#         cdef Any res = dereference(self._ptr).WantTextInput
#         return res
#     @want_text_input.setter
#     def want_text_input(self, Any value):
#         dereference(self._ptr).WantTextInput = value
    
#     @property
#     def want_set_mouse_pos(self):
#         cdef Any res = dereference(self._ptr).WantSetMousePos
#         return res
#     @want_set_mouse_pos.setter
#     def want_set_mouse_pos(self, Any value):
#         dereference(self._ptr).WantSetMousePos = value
    
#     @property
#     def want_save_ini_settings(self):
#         cdef Any res = dereference(self._ptr).WantSaveIniSettings
#         return res
#     @want_save_ini_settings.setter
#     def want_save_ini_settings(self, Any value):
#         dereference(self._ptr).WantSaveIniSettings = value
    
#     @property
#     def nav_active(self):
#         cdef Any res = dereference(self._ptr).NavActive
#         return res
#     @nav_active.setter
#     def nav_active(self, Any value):
#         dereference(self._ptr).NavActive = value
    
#     @property
#     def nav_visible(self):
#         cdef Any res = dereference(self._ptr).NavVisible
#         return res
#     @nav_visible.setter
#     def nav_visible(self, Any value):
#         dereference(self._ptr).NavVisible = value
    
#     @property
#     def framerate(self):
#         cdef float res = dereference(self._ptr).Framerate
#         return res
#     @framerate.setter
#     def framerate(self, float value):
#         dereference(self._ptr).Framerate = value
    
#     @property
#     def metrics_render_vertices(self):
#         cdef int res = dereference(self._ptr).MetricsRenderVertices
#         return res
#     @metrics_render_vertices.setter
#     def metrics_render_vertices(self, int value):
#         dereference(self._ptr).MetricsRenderVertices = value
    
#     @property
#     def metrics_render_indices(self):
#         cdef int res = dereference(self._ptr).MetricsRenderIndices
#         return res
#     @metrics_render_indices.setter
#     def metrics_render_indices(self, int value):
#         dereference(self._ptr).MetricsRenderIndices = value
    
#     @property
#     def metrics_render_windows(self):
#         cdef int res = dereference(self._ptr).MetricsRenderWindows
#         return res
#     @metrics_render_windows.setter
#     def metrics_render_windows(self, int value):
#         dereference(self._ptr).MetricsRenderWindows = value
    
#     @property
#     def metrics_active_windows(self):
#         cdef int res = dereference(self._ptr).MetricsActiveWindows
#         return res
#     @metrics_active_windows.setter
#     def metrics_active_windows(self, int value):
#         dereference(self._ptr).MetricsActiveWindows = value
    
#     @property
#     def metrics_active_allocations(self):
#         cdef int res = dereference(self._ptr).MetricsActiveAllocations
#         return res
#     @metrics_active_allocations.setter
#     def metrics_active_allocations(self, int value):
#         dereference(self._ptr).MetricsActiveAllocations = value
    
#     @property
#     def mouse_delta(self):
#         cdef tuple res = dereference(self._ptr).MouseDelta
#         return res
#     @mouse_delta.setter
#     def mouse_delta(self, tuple value):
#         dereference(self._ptr).MouseDelta = value
    
    @property
    def key_map(self):
        cdef cvarray res = cvarray(
            shape=(ccimgui.ImGuiKey.ImGuiKey_COUNT,),
            format='i',
            itemsize=sizeof(int),
            allocate_buffer=False
        )
        res.data = <char*>(dereference(self._ptr).KeyMap)
        return res
    # @key_map.setter
    # def key_map(self, int value):
    #     dereference(self._ptr).KeyMap = value
    
    @property
    def keys_down(self):
        cdef cvarray res = cvarray(
            shape=(512,),
            format='b',
            itemsize=sizeof(bool),
            allocate_buffer=False
        )
        res.data = <char*>dereference(self._ptr).KeysDown
        return res
#     @keys_down.setter
#     def keys_down(self, Any value):
#         dereference(self._ptr).KeysDown = value
    
#     @property
#     def nav_inputs(self):
#         cdef float res = dereference(self._ptr).NavInputs
#         return res
#     @nav_inputs.setter
#     def nav_inputs(self, float value):
#         dereference(self._ptr).NavInputs = value
    
    @property
    def mouse_pos(self):
        cdef tuple res = _cast_ImVec2_tuple(dereference(self._ptr).MousePos)
        return res
    @mouse_pos.setter
    def mouse_pos(self, tuple value):
        dereference(self._ptr).MousePos = _cast_tuple_ImVec2(value)
    
    @property
    def mouse_down(self):
        cdef cvarray res = cvarray(
            shape=(5,),
            format='b',
            itemsize=sizeof(bool),
            allocate_buffer=False
        )
        res.data = <char*>dereference(self._ptr).MouseDown
        return res
#     @mouse_down.setter
#     def mouse_down(self, Any value):
#         dereference(self._ptr).MouseDown = value
    
    @property
    def mouse_wheel(self):
        cdef float res = dereference(self._ptr).MouseWheel
        return res
    @mouse_wheel.setter
    def mouse_wheel(self, float value):
        dereference(self._ptr).MouseWheel = value
    
    @property
    def mouse_wheelh(self):
        cdef float res = dereference(self._ptr).MouseWheelH
        return res
    @mouse_wheelh.setter
    def mouse_wheelh(self, float value):
        dereference(self._ptr).MouseWheelH = value
    
#     @property
#     def mouse_hovered_viewport(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).MouseHoveredViewport
#         return res
#     @mouse_hovered_viewport.setter
#     def mouse_hovered_viewport(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).MouseHoveredViewport = value
    
    @property
    def key_ctrl(self):
        cdef ccimgui.bool res = dereference(self._ptr).KeyCtrl
        return res
    @key_ctrl.setter
    def key_ctrl(self, ccimgui.bool value):
        dereference(self._ptr).KeyCtrl = value
    
    @property
    def key_shift(self):
        cdef ccimgui.bool res = dereference(self._ptr).KeyShift
        return res
    @key_shift.setter
    def key_shift(self, ccimgui.bool value):
        dereference(self._ptr).KeyShift = value
    
    @property
    def key_alt(self):
        cdef ccimgui.bool res = dereference(self._ptr).KeyAlt
        return res
    @key_alt.setter
    def key_alt(self, ccimgui.bool value):
        dereference(self._ptr).KeyAlt = value
    
    @property
    def key_super(self):
        cdef ccimgui.bool res = dereference(self._ptr).KeySuper
        return res
    @key_super.setter
    def key_super(self, ccimgui.bool value):
        dereference(self._ptr).KeySuper = value
    
#     @property
#     def key_mods(self):
#         cdef ccimgui.ImGuiKeyChord res = dereference(self._ptr).KeyMods
#         return res
#     @key_mods.setter
#     def key_mods(self, ccimgui.ImGuiKeyChord value):
#         dereference(self._ptr).KeyMods = value
    
#     @property
#     def keys_data(self):
#         cdef ccimgui.ImGuiKeyData res = dereference(self._ptr).KeysData
#         return _ImGuiKeyData.from_ptr(res)
#     @keys_data.setter
#     def keys_data(self, Any value):
#         dereference(self._ptr).KeysData = value
    
#     @property
#     def want_capture_mouse_unless_popup_close(self):
#         cdef Any res = dereference(self._ptr).WantCaptureMouseUnlessPopupClose
#         return res
#     @want_capture_mouse_unless_popup_close.setter
#     def want_capture_mouse_unless_popup_close(self, Any value):
#         dereference(self._ptr).WantCaptureMouseUnlessPopupClose = value
    
#     @property
#     def mouse_pos_prev(self):
#         cdef tuple res = dereference(self._ptr).MousePosPrev
#         return res
#     @mouse_pos_prev.setter
#     def mouse_pos_prev(self, tuple value):
#         dereference(self._ptr).MousePosPrev = value
    
#     @property
#     def mouse_clicked_pos(self):
#         cdef tuple res = dereference(self._ptr).MouseClickedPos
#         return res
#     @mouse_clicked_pos.setter
#     def mouse_clicked_pos(self, tuple value):
#         dereference(self._ptr).MouseClickedPos = value
    
#     @property
#     def mouse_clicked_time(self):
#         cdef Any res = dereference(self._ptr).MouseClickedTime
#         return res
#     @mouse_clicked_time.setter
#     def mouse_clicked_time(self, Any value):
#         dereference(self._ptr).MouseClickedTime = value
    
#     @property
#     def mouse_clicked(self):
#         cdef Any res = dereference(self._ptr).MouseClicked
#         return res
#     @mouse_clicked.setter
#     def mouse_clicked(self, Any value):
#         dereference(self._ptr).MouseClicked = value
    
#     @property
#     def mouse_double_clicked(self):
#         cdef Any res = dereference(self._ptr).MouseDoubleClicked
#         return res
#     @mouse_double_clicked.setter
#     def mouse_double_clicked(self, Any value):
#         dereference(self._ptr).MouseDoubleClicked = value
    
#     @property
#     def mouse_clicked_count(self):
#         cdef ccimgui.ImU16 res = dereference(self._ptr).MouseClickedCount
#         return res
#     @mouse_clicked_count.setter
#     def mouse_clicked_count(self, ccimgui.ImU16 value):
#         dereference(self._ptr).MouseClickedCount = value
    
#     @property
#     def mouse_clicked_last_count(self):
#         cdef ccimgui.ImU16 res = dereference(self._ptr).MouseClickedLastCount
#         return res
#     @mouse_clicked_last_count.setter
#     def mouse_clicked_last_count(self, ccimgui.ImU16 value):
#         dereference(self._ptr).MouseClickedLastCount = value
    
#     @property
#     def mouse_released(self):
#         cdef Any res = dereference(self._ptr).MouseReleased
#         return res
#     @mouse_released.setter
#     def mouse_released(self, Any value):
#         dereference(self._ptr).MouseReleased = value
    
#     @property
#     def mouse_down_owned(self):
#         cdef Any res = dereference(self._ptr).MouseDownOwned
#         return res
#     @mouse_down_owned.setter
#     def mouse_down_owned(self, Any value):
#         dereference(self._ptr).MouseDownOwned = value
    
#     @property
#     def mouse_down_owned_unless_popup_close(self):
#         cdef Any res = dereference(self._ptr).MouseDownOwnedUnlessPopupClose
#         return res
#     @mouse_down_owned_unless_popup_close.setter
#     def mouse_down_owned_unless_popup_close(self, Any value):
#         dereference(self._ptr).MouseDownOwnedUnlessPopupClose = value
    
#     @property
#     def mouse_down_duration(self):
#         cdef float res = dereference(self._ptr).MouseDownDuration
#         return res
#     @mouse_down_duration.setter
#     def mouse_down_duration(self, float value):
#         dereference(self._ptr).MouseDownDuration = value
    
#     @property
#     def mouse_down_duration_prev(self):
#         cdef float res = dereference(self._ptr).MouseDownDurationPrev
#         return res
#     @mouse_down_duration_prev.setter
#     def mouse_down_duration_prev(self, float value):
#         dereference(self._ptr).MouseDownDurationPrev = value
    
#     @property
#     def mouse_drag_max_distance_abs(self):
#         cdef tuple res = dereference(self._ptr).MouseDragMaxDistanceAbs
#         return res
#     @mouse_drag_max_distance_abs.setter
#     def mouse_drag_max_distance_abs(self, tuple value):
#         dereference(self._ptr).MouseDragMaxDistanceAbs = value
    
#     @property
#     def mouse_drag_max_distance_sqr(self):
#         cdef float res = dereference(self._ptr).MouseDragMaxDistanceSqr
#         return res
#     @mouse_drag_max_distance_sqr.setter
#     def mouse_drag_max_distance_sqr(self, float value):
#         dereference(self._ptr).MouseDragMaxDistanceSqr = value
    
#     @property
#     def pen_pressure(self):
#         cdef float res = dereference(self._ptr).PenPressure
#         return res
#     @pen_pressure.setter
#     def pen_pressure(self, float value):
#         dereference(self._ptr).PenPressure = value
    
#     @property
#     def app_focus_lost(self):
#         cdef Any res = dereference(self._ptr).AppFocusLost
#         return res
#     @app_focus_lost.setter
#     def app_focus_lost(self, Any value):
#         dereference(self._ptr).AppFocusLost = value
    
#     @property
#     def app_accepting_events(self):
#         cdef Any res = dereference(self._ptr).AppAcceptingEvents
#         return res
#     @app_accepting_events.setter
#     def app_accepting_events(self, Any value):
#         dereference(self._ptr).AppAcceptingEvents = value
    
#     @property
#     def backend_using_legacy_key_arrays(self):
#         cdef ccimgui.ImS8 res = dereference(self._ptr).BackendUsingLegacyKeyArrays
#         return res
#     @backend_using_legacy_key_arrays.setter
#     def backend_using_legacy_key_arrays(self, ccimgui.ImS8 value):
#         dereference(self._ptr).BackendUsingLegacyKeyArrays = value
    
#     @property
#     def backend_using_legacy_nav_input_array(self):
#         cdef Any res = dereference(self._ptr).BackendUsingLegacyNavInputArray
#         return res
#     @backend_using_legacy_nav_input_array.setter
#     def backend_using_legacy_nav_input_array(self, Any value):
#         dereference(self._ptr).BackendUsingLegacyNavInputArray = value
    
#     @property
#     def input_queue_surrogate(self):
#         cdef ccimgui.ImWchar16 res = dereference(self._ptr).InputQueueSurrogate
#         return res
#     @input_queue_surrogate.setter
#     def input_queue_surrogate(self, ccimgui.ImWchar16 value):
#         dereference(self._ptr).InputQueueSurrogate = value
    
#     @property
#     def input_queue_characters(self):
#         cdef ccimgui.ImVector_ImWchar res = dereference(self._ptr).InputQueueCharacters
#         return _ImVector_ImWchar.from_ptr(res)
#     @input_queue_characters.setter
#     def input_queue_characters(self, Any value):
#         dereference(self._ptr).InputQueueCharacters = value
    

# cdef class _ImGuiPlatformIO:
#     cdef ccimgui.ImGuiPlatformIO* _ptr
    
#     @staticmethod
#     cdef _ImGuiPlatformIO from_ptr(ccimgui.ImGuiPlatformIO* _ptr):
#        cdef _ImGuiPlatformIO wrapper = _ImGuiPlatformIO.__new__(_ImGuiPlatformIO)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_platform_io():
#         cdef ccimgui.ImGuiPlatformIO* _ptr = ccimgui.ImGuiPlatformIO_ImGuiPlatformIO()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiPlatformIO.from_ptr(_ptr)
    
#     def destroy(_ImGuiPlatformIO self):
#         ccimgui.ImGuiPlatformIO_destroy(self._ptr)
    
#     @property
#     def platform_create_window(self):
#         cdef Callable res = dereference(self._ptr).Platform_CreateWindow
#         return res
#     @platform_create_window.setter
#     def platform_create_window(self, Callable value):
#         dereference(self._ptr).Platform_CreateWindow = value
    
#     @property
#     def platform_destroy_window(self):
#         cdef Callable res = dereference(self._ptr).Platform_DestroyWindow
#         return res
#     @platform_destroy_window.setter
#     def platform_destroy_window(self, Callable value):
#         dereference(self._ptr).Platform_DestroyWindow = value
    
#     @property
#     def platform_show_window(self):
#         cdef Callable res = dereference(self._ptr).Platform_ShowWindow
#         return res
#     @platform_show_window.setter
#     def platform_show_window(self, Callable value):
#         dereference(self._ptr).Platform_ShowWindow = value
    
#     @property
#     def platform_set_window_pos(self):
#         cdef Callable res = dereference(self._ptr).Platform_SetWindowPos
#         return res
#     @platform_set_window_pos.setter
#     def platform_set_window_pos(self, Callable value):
#         dereference(self._ptr).Platform_SetWindowPos = value
    
#     @property
#     def platform_get_window_pos(self):
#         cdef Callable res = dereference(self._ptr).Platform_GetWindowPos
#         return res
#     @platform_get_window_pos.setter
#     def platform_get_window_pos(self, Callable value):
#         dereference(self._ptr).Platform_GetWindowPos = value
    
#     @property
#     def platform_set_window_size(self):
#         cdef Callable res = dereference(self._ptr).Platform_SetWindowSize
#         return res
#     @platform_set_window_size.setter
#     def platform_set_window_size(self, Callable value):
#         dereference(self._ptr).Platform_SetWindowSize = value
    
#     @property
#     def platform_get_window_size(self):
#         cdef Callable res = dereference(self._ptr).Platform_GetWindowSize
#         return res
#     @platform_get_window_size.setter
#     def platform_get_window_size(self, Callable value):
#         dereference(self._ptr).Platform_GetWindowSize = value
    
#     @property
#     def platform_set_window_focus(self):
#         cdef Callable res = dereference(self._ptr).Platform_SetWindowFocus
#         return res
#     @platform_set_window_focus.setter
#     def platform_set_window_focus(self, Callable value):
#         dereference(self._ptr).Platform_SetWindowFocus = value
    
#     @property
#     def platform_get_window_focus(self):
#         cdef Callable res = dereference(self._ptr).Platform_GetWindowFocus
#         return res
#     @platform_get_window_focus.setter
#     def platform_get_window_focus(self, Callable value):
#         dereference(self._ptr).Platform_GetWindowFocus = value
    
#     @property
#     def platform_get_window_minimized(self):
#         cdef Callable res = dereference(self._ptr).Platform_GetWindowMinimized
#         return res
#     @platform_get_window_minimized.setter
#     def platform_get_window_minimized(self, Callable value):
#         dereference(self._ptr).Platform_GetWindowMinimized = value
    
#     @property
#     def platform_set_window_title(self):
#         cdef Callable res = dereference(self._ptr).Platform_SetWindowTitle
#         return res
#     @platform_set_window_title.setter
#     def platform_set_window_title(self, Callable value):
#         dereference(self._ptr).Platform_SetWindowTitle = value
    
#     @property
#     def platform_set_window_alpha(self):
#         cdef Callable res = dereference(self._ptr).Platform_SetWindowAlpha
#         return res
#     @platform_set_window_alpha.setter
#     def platform_set_window_alpha(self, Callable value):
#         dereference(self._ptr).Platform_SetWindowAlpha = value
    
#     @property
#     def platform_update_window(self):
#         cdef Callable res = dereference(self._ptr).Platform_UpdateWindow
#         return res
#     @platform_update_window.setter
#     def platform_update_window(self, Callable value):
#         dereference(self._ptr).Platform_UpdateWindow = value
    
#     @property
#     def platform_render_window(self):
#         cdef Callable res = dereference(self._ptr).Platform_RenderWindow
#         return res
#     @platform_render_window.setter
#     def platform_render_window(self, Callable value):
#         dereference(self._ptr).Platform_RenderWindow = value
    
#     @property
#     def platform_swap_buffers(self):
#         cdef Callable res = dereference(self._ptr).Platform_SwapBuffers
#         return res
#     @platform_swap_buffers.setter
#     def platform_swap_buffers(self, Callable value):
#         dereference(self._ptr).Platform_SwapBuffers = value
    
#     @property
#     def platform_get_window_dpi_scale(self):
#         cdef Callable res = dereference(self._ptr).Platform_GetWindowDpiScale
#         return res
#     @platform_get_window_dpi_scale.setter
#     def platform_get_window_dpi_scale(self, Callable value):
#         dereference(self._ptr).Platform_GetWindowDpiScale = value
    
#     @property
#     def platform_on_changed_viewport(self):
#         cdef Callable res = dereference(self._ptr).Platform_OnChangedViewport
#         return res
#     @platform_on_changed_viewport.setter
#     def platform_on_changed_viewport(self, Callable value):
#         dereference(self._ptr).Platform_OnChangedViewport = value
    
#     @property
#     def platform_create_vk_surface(self):
#         cdef Callable res = dereference(self._ptr).Platform_CreateVkSurface
#         return res
#     @platform_create_vk_surface.setter
#     def platform_create_vk_surface(self, Callable value):
#         dereference(self._ptr).Platform_CreateVkSurface = value
    
#     @property
#     def renderer_create_window(self):
#         cdef Callable res = dereference(self._ptr).Renderer_CreateWindow
#         return res
#     @renderer_create_window.setter
#     def renderer_create_window(self, Callable value):
#         dereference(self._ptr).Renderer_CreateWindow = value
    
#     @property
#     def renderer_destroy_window(self):
#         cdef Callable res = dereference(self._ptr).Renderer_DestroyWindow
#         return res
#     @renderer_destroy_window.setter
#     def renderer_destroy_window(self, Callable value):
#         dereference(self._ptr).Renderer_DestroyWindow = value
    
#     @property
#     def renderer_set_window_size(self):
#         cdef Callable res = dereference(self._ptr).Renderer_SetWindowSize
#         return res
#     @renderer_set_window_size.setter
#     def renderer_set_window_size(self, Callable value):
#         dereference(self._ptr).Renderer_SetWindowSize = value
    
#     @property
#     def renderer_render_window(self):
#         cdef Callable res = dereference(self._ptr).Renderer_RenderWindow
#         return res
#     @renderer_render_window.setter
#     def renderer_render_window(self, Callable value):
#         dereference(self._ptr).Renderer_RenderWindow = value
    
#     @property
#     def renderer_swap_buffers(self):
#         cdef Callable res = dereference(self._ptr).Renderer_SwapBuffers
#         return res
#     @renderer_swap_buffers.setter
#     def renderer_swap_buffers(self, Callable value):
#         dereference(self._ptr).Renderer_SwapBuffers = value
    
#     @property
#     def monitors(self):
#         cdef ccimgui.ImVector_ImGuiPlatformMonitor res = dereference(self._ptr).Monitors
#         return _ImVector_ImGuiPlatformMonitor.from_ptr(res)
#     @monitors.setter
#     def monitors(self, Any value):
#         dereference(self._ptr).Monitors = value
    
#     @property
#     def viewports(self):
#         cdef ccimgui.ImVector_ImGuiViewportPtr res = dereference(self._ptr).Viewports
#         return _ImVector_ImGuiViewportPtr.from_ptr(res)
#     @viewports.setter
#     def viewports(self, Any value):
#         dereference(self._ptr).Viewports = value
    

# cdef class _ImGuiPlatformImeData:
#     cdef ccimgui.ImGuiPlatformImeData* _ptr
    
#     @staticmethod
#     cdef _ImGuiPlatformImeData from_ptr(ccimgui.ImGuiPlatformImeData* _ptr):
#        cdef _ImGuiPlatformImeData wrapper = _ImGuiPlatformImeData.__new__(_ImGuiPlatformImeData)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_platform_ime_data():
#         cdef ccimgui.ImGuiPlatformImeData* _ptr = ccimgui.ImGuiPlatformImeData_ImGuiPlatformImeData()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiPlatformImeData.from_ptr(_ptr)
    
#     def destroy(_ImGuiPlatformImeData self):
#         ccimgui.ImGuiPlatformImeData_destroy(self._ptr)
    
#     @property
#     def want_visible(self):
#         cdef Any res = dereference(self._ptr).WantVisible
#         return res
#     @want_visible.setter
#     def want_visible(self, Any value):
#         dereference(self._ptr).WantVisible = value
    
#     @property
#     def input_pos(self):
#         cdef tuple res = dereference(self._ptr).InputPos
#         return res
#     @input_pos.setter
#     def input_pos(self, tuple value):
#         dereference(self._ptr).InputPos = value
    
#     @property
#     def input_line_height(self):
#         cdef float res = dereference(self._ptr).InputLineHeight
#         return res
#     @input_line_height.setter
#     def input_line_height(self, float value):
#         dereference(self._ptr).InputLineHeight = value
    

# cdef class _ImGuiPlatformMonitor:
#     cdef ccimgui.ImGuiPlatformMonitor* _ptr
    
#     @staticmethod
#     cdef _ImGuiPlatformMonitor from_ptr(ccimgui.ImGuiPlatformMonitor* _ptr):
#        cdef _ImGuiPlatformMonitor wrapper = _ImGuiPlatformMonitor.__new__(_ImGuiPlatformMonitor)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_platform_monitor():
#         cdef ccimgui.ImGuiPlatformMonitor* _ptr = ccimgui.ImGuiPlatformMonitor_ImGuiPlatformMonitor()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiPlatformMonitor.from_ptr(_ptr)
    
#     def destroy(_ImGuiPlatformMonitor self):
#         ccimgui.ImGuiPlatformMonitor_destroy(self._ptr)
    
#     @property
#     def main_pos(self):
#         cdef tuple res = dereference(self._ptr).MainPos
#         return res
#     @main_pos.setter
#     def main_pos(self, tuple value):
#         dereference(self._ptr).MainPos = value
    
#     @property
#     def main_size(self):
#         cdef tuple res = dereference(self._ptr).MainSize
#         return res
#     @main_size.setter
#     def main_size(self, tuple value):
#         dereference(self._ptr).MainSize = value
    
#     @property
#     def work_pos(self):
#         cdef tuple res = dereference(self._ptr).WorkPos
#         return res
#     @work_pos.setter
#     def work_pos(self, tuple value):
#         dereference(self._ptr).WorkPos = value
    
#     @property
#     def work_size(self):
#         cdef tuple res = dereference(self._ptr).WorkSize
#         return res
#     @work_size.setter
#     def work_size(self, tuple value):
#         dereference(self._ptr).WorkSize = value
    
#     @property
#     def dpi_scale(self):
#         cdef float res = dereference(self._ptr).DpiScale
#         return res
#     @dpi_scale.setter
#     def dpi_scale(self, float value):
#         dereference(self._ptr).DpiScale = value
    

# cdef class _ImGuiStorage:
#     cdef ccimgui.ImGuiStorage* _ptr
    
#     @staticmethod
#     cdef _ImGuiStorage from_ptr(ccimgui.ImGuiStorage* _ptr):
#        cdef _ImGuiStorage wrapper = _ImGuiStorage.__new__(_ImGuiStorage)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     def build_sort_by_key(_ImGuiStorage self):
#         ccimgui.ImGuiStorage_BuildSortByKey(self._ptr)
    
#     def clear_(_ImGuiStorage self):
#         ccimgui.ImGuiStorage_Clear(self._ptr)
    
#     def get_bool(_ImGuiStorage self, ccimgui.ImGuiID key, Any default_val=False):
#         cdef ccimgui.bool res = ccimgui.ImGuiStorage_GetBool(self._ptr, key, default_val)
#         return res
    
#     def get_bool_ref(_ImGuiStorage self, ccimgui.ImGuiID key, Any default_val=False):
#         cdef ccimgui.bool* res = ccimgui.ImGuiStorage_GetBoolRef(self._ptr, key, default_val)
#         return res
    
#     def get_float(_ImGuiStorage self, ccimgui.ImGuiID key, float default_val=0.0):
#         cdef float res = ccimgui.ImGuiStorage_GetFloat(self._ptr, key, default_val)
#         return res
    
#     def get_float_ref(_ImGuiStorage self, ccimgui.ImGuiID key, float default_val=0.0):
#         cdef float* res = ccimgui.ImGuiStorage_GetFloatRef(self._ptr, key, default_val)
#         return res
    
#     def get_int(_ImGuiStorage self, ccimgui.ImGuiID key, int default_val=0):
#         cdef int res = ccimgui.ImGuiStorage_GetInt(self._ptr, key, default_val)
#         return res
    
#     def get_int_ref(_ImGuiStorage self, ccimgui.ImGuiID key, int default_val=0):
#         cdef int* res = ccimgui.ImGuiStorage_GetIntRef(self._ptr, key, default_val)
#         return res
    
#     def get_void_ptr(_ImGuiStorage self, ccimgui.ImGuiID key):
#         cdef void* res = ccimgui.ImGuiStorage_GetVoidPtr(self._ptr, key)
#         return res
    
#     def get_void_ptr_ref(_ImGuiStorage self, ccimgui.ImGuiID key, Any default_val=None):
#         cdef void** res = ccimgui.ImGuiStorage_GetVoidPtrRef(self._ptr, key, default_val)
#         return res
    
#     def set_all_int(_ImGuiStorage self, int val):
#         ccimgui.ImGuiStorage_SetAllInt(self._ptr, val)
    
#     def set_bool(_ImGuiStorage self, ccimgui.ImGuiID key, Any val):
#         ccimgui.ImGuiStorage_SetBool(self._ptr, key, val)
    
#     def set_float(_ImGuiStorage self, ccimgui.ImGuiID key, float val):
#         ccimgui.ImGuiStorage_SetFloat(self._ptr, key, val)
    
#     def set_int(_ImGuiStorage self, ccimgui.ImGuiID key, int val):
#         ccimgui.ImGuiStorage_SetInt(self._ptr, key, val)
    
#     def set_void_ptr(_ImGuiStorage self, ccimgui.ImGuiID key, Any val):
#         ccimgui.ImGuiStorage_SetVoidPtr(self._ptr, key, val)
    
#     @property
#     def data(self):
#         cdef ccimgui.ImVector_ImGuiStoragePair res = dereference(self._ptr).Data
#         return _ImVector_ImGuiStoragePair.from_ptr(res)
#     @data.setter
#     def data(self, Any value):
#         dereference(self._ptr).Data = value
    

# cdef class _ImGuiStyle:
#     cdef ccimgui.ImGuiStyle* _ptr
    
#     @staticmethod
#     cdef _ImGuiStyle from_ptr(ccimgui.ImGuiStyle* _ptr):
#        cdef _ImGuiStyle wrapper = _ImGuiStyle.__new__(_ImGuiStyle)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_style():
#         cdef ccimgui.ImGuiStyle* _ptr = ccimgui.ImGuiStyle_ImGuiStyle()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiStyle.from_ptr(_ptr)
    
#     def destroy(_ImGuiStyle self):
#         ccimgui.ImGuiStyle_destroy(self._ptr)
    
#     def scale_all_sizes(_ImGuiStyle self, float scale_factor):
#         ccimgui.ImGuiStyle_ScaleAllSizes(self._ptr, scale_factor)
    
#     @property
#     def alpha(self):
#         cdef float res = dereference(self._ptr).Alpha
#         return res
#     @alpha.setter
#     def alpha(self, float value):
#         dereference(self._ptr).Alpha = value
    
#     @property
#     def disabled_alpha(self):
#         cdef float res = dereference(self._ptr).DisabledAlpha
#         return res
#     @disabled_alpha.setter
#     def disabled_alpha(self, float value):
#         dereference(self._ptr).DisabledAlpha = value
    
#     @property
#     def window_padding(self):
#         cdef tuple res = dereference(self._ptr).WindowPadding
#         return res
#     @window_padding.setter
#     def window_padding(self, tuple value):
#         dereference(self._ptr).WindowPadding = value
    
#     @property
#     def window_rounding(self):
#         cdef float res = dereference(self._ptr).WindowRounding
#         return res
#     @window_rounding.setter
#     def window_rounding(self, float value):
#         dereference(self._ptr).WindowRounding = value
    
#     @property
#     def window_border_size(self):
#         cdef float res = dereference(self._ptr).WindowBorderSize
#         return res
#     @window_border_size.setter
#     def window_border_size(self, float value):
#         dereference(self._ptr).WindowBorderSize = value
    
#     @property
#     def window_min_size(self):
#         cdef tuple res = dereference(self._ptr).WindowMinSize
#         return res
#     @window_min_size.setter
#     def window_min_size(self, tuple value):
#         dereference(self._ptr).WindowMinSize = value
    
#     @property
#     def window_title_align(self):
#         cdef tuple res = dereference(self._ptr).WindowTitleAlign
#         return res
#     @window_title_align.setter
#     def window_title_align(self, tuple value):
#         dereference(self._ptr).WindowTitleAlign = value
    
#     @property
#     def window_menu_button_position(self):
#         cdef ccimgui.ImGuiDir res = dereference(self._ptr).WindowMenuButtonPosition
#         return res
#     @window_menu_button_position.setter
#     def window_menu_button_position(self, ccimgui.ImGuiDir value):
#         dereference(self._ptr).WindowMenuButtonPosition = value
    
#     @property
#     def child_rounding(self):
#         cdef float res = dereference(self._ptr).ChildRounding
#         return res
#     @child_rounding.setter
#     def child_rounding(self, float value):
#         dereference(self._ptr).ChildRounding = value
    
#     @property
#     def child_border_size(self):
#         cdef float res = dereference(self._ptr).ChildBorderSize
#         return res
#     @child_border_size.setter
#     def child_border_size(self, float value):
#         dereference(self._ptr).ChildBorderSize = value
    
#     @property
#     def popup_rounding(self):
#         cdef float res = dereference(self._ptr).PopupRounding
#         return res
#     @popup_rounding.setter
#     def popup_rounding(self, float value):
#         dereference(self._ptr).PopupRounding = value
    
#     @property
#     def popup_border_size(self):
#         cdef float res = dereference(self._ptr).PopupBorderSize
#         return res
#     @popup_border_size.setter
#     def popup_border_size(self, float value):
#         dereference(self._ptr).PopupBorderSize = value
    
#     @property
#     def frame_padding(self):
#         cdef tuple res = dereference(self._ptr).FramePadding
#         return res
#     @frame_padding.setter
#     def frame_padding(self, tuple value):
#         dereference(self._ptr).FramePadding = value
    
#     @property
#     def frame_rounding(self):
#         cdef float res = dereference(self._ptr).FrameRounding
#         return res
#     @frame_rounding.setter
#     def frame_rounding(self, float value):
#         dereference(self._ptr).FrameRounding = value
    
#     @property
#     def frame_border_size(self):
#         cdef float res = dereference(self._ptr).FrameBorderSize
#         return res
#     @frame_border_size.setter
#     def frame_border_size(self, float value):
#         dereference(self._ptr).FrameBorderSize = value
    
#     @property
#     def item_spacing(self):
#         cdef tuple res = dereference(self._ptr).ItemSpacing
#         return res
#     @item_spacing.setter
#     def item_spacing(self, tuple value):
#         dereference(self._ptr).ItemSpacing = value
    
#     @property
#     def item_inner_spacing(self):
#         cdef tuple res = dereference(self._ptr).ItemInnerSpacing
#         return res
#     @item_inner_spacing.setter
#     def item_inner_spacing(self, tuple value):
#         dereference(self._ptr).ItemInnerSpacing = value
    
#     @property
#     def cell_padding(self):
#         cdef tuple res = dereference(self._ptr).CellPadding
#         return res
#     @cell_padding.setter
#     def cell_padding(self, tuple value):
#         dereference(self._ptr).CellPadding = value
    
#     @property
#     def touch_extra_padding(self):
#         cdef tuple res = dereference(self._ptr).TouchExtraPadding
#         return res
#     @touch_extra_padding.setter
#     def touch_extra_padding(self, tuple value):
#         dereference(self._ptr).TouchExtraPadding = value
    
#     @property
#     def indent_spacing(self):
#         cdef float res = dereference(self._ptr).IndentSpacing
#         return res
#     @indent_spacing.setter
#     def indent_spacing(self, float value):
#         dereference(self._ptr).IndentSpacing = value
    
#     @property
#     def columns_min_spacing(self):
#         cdef float res = dereference(self._ptr).ColumnsMinSpacing
#         return res
#     @columns_min_spacing.setter
#     def columns_min_spacing(self, float value):
#         dereference(self._ptr).ColumnsMinSpacing = value
    
#     @property
#     def scrollbar_size(self):
#         cdef float res = dereference(self._ptr).ScrollbarSize
#         return res
#     @scrollbar_size.setter
#     def scrollbar_size(self, float value):
#         dereference(self._ptr).ScrollbarSize = value
    
#     @property
#     def scrollbar_rounding(self):
#         cdef float res = dereference(self._ptr).ScrollbarRounding
#         return res
#     @scrollbar_rounding.setter
#     def scrollbar_rounding(self, float value):
#         dereference(self._ptr).ScrollbarRounding = value
    
#     @property
#     def grab_min_size(self):
#         cdef float res = dereference(self._ptr).GrabMinSize
#         return res
#     @grab_min_size.setter
#     def grab_min_size(self, float value):
#         dereference(self._ptr).GrabMinSize = value
    
#     @property
#     def grab_rounding(self):
#         cdef float res = dereference(self._ptr).GrabRounding
#         return res
#     @grab_rounding.setter
#     def grab_rounding(self, float value):
#         dereference(self._ptr).GrabRounding = value
    
#     @property
#     def log_slider_deadzone(self):
#         cdef float res = dereference(self._ptr).LogSliderDeadzone
#         return res
#     @log_slider_deadzone.setter
#     def log_slider_deadzone(self, float value):
#         dereference(self._ptr).LogSliderDeadzone = value
    
#     @property
#     def tab_rounding(self):
#         cdef float res = dereference(self._ptr).TabRounding
#         return res
#     @tab_rounding.setter
#     def tab_rounding(self, float value):
#         dereference(self._ptr).TabRounding = value
    
#     @property
#     def tab_border_size(self):
#         cdef float res = dereference(self._ptr).TabBorderSize
#         return res
#     @tab_border_size.setter
#     def tab_border_size(self, float value):
#         dereference(self._ptr).TabBorderSize = value
    
#     @property
#     def tab_min_width_for_close_button(self):
#         cdef float res = dereference(self._ptr).TabMinWidthForCloseButton
#         return res
#     @tab_min_width_for_close_button.setter
#     def tab_min_width_for_close_button(self, float value):
#         dereference(self._ptr).TabMinWidthForCloseButton = value
    
#     @property
#     def color_button_position(self):
#         cdef ccimgui.ImGuiDir res = dereference(self._ptr).ColorButtonPosition
#         return res
#     @color_button_position.setter
#     def color_button_position(self, ccimgui.ImGuiDir value):
#         dereference(self._ptr).ColorButtonPosition = value
    
#     @property
#     def button_text_align(self):
#         cdef tuple res = dereference(self._ptr).ButtonTextAlign
#         return res
#     @button_text_align.setter
#     def button_text_align(self, tuple value):
#         dereference(self._ptr).ButtonTextAlign = value
    
#     @property
#     def selectable_text_align(self):
#         cdef tuple res = dereference(self._ptr).SelectableTextAlign
#         return res
#     @selectable_text_align.setter
#     def selectable_text_align(self, tuple value):
#         dereference(self._ptr).SelectableTextAlign = value
    
#     @property
#     def separator_text_border_size(self):
#         cdef float res = dereference(self._ptr).SeparatorTextBorderSize
#         return res
#     @separator_text_border_size.setter
#     def separator_text_border_size(self, float value):
#         dereference(self._ptr).SeparatorTextBorderSize = value
    
#     @property
#     def separator_text_align(self):
#         cdef tuple res = dereference(self._ptr).SeparatorTextAlign
#         return res
#     @separator_text_align.setter
#     def separator_text_align(self, tuple value):
#         dereference(self._ptr).SeparatorTextAlign = value
    
#     @property
#     def separator_text_padding(self):
#         cdef tuple res = dereference(self._ptr).SeparatorTextPadding
#         return res
#     @separator_text_padding.setter
#     def separator_text_padding(self, tuple value):
#         dereference(self._ptr).SeparatorTextPadding = value
    
#     @property
#     def display_window_padding(self):
#         cdef tuple res = dereference(self._ptr).DisplayWindowPadding
#         return res
#     @display_window_padding.setter
#     def display_window_padding(self, tuple value):
#         dereference(self._ptr).DisplayWindowPadding = value
    
#     @property
#     def display_safe_area_padding(self):
#         cdef tuple res = dereference(self._ptr).DisplaySafeAreaPadding
#         return res
#     @display_safe_area_padding.setter
#     def display_safe_area_padding(self, tuple value):
#         dereference(self._ptr).DisplaySafeAreaPadding = value
    
#     @property
#     def mouse_cursor_scale(self):
#         cdef float res = dereference(self._ptr).MouseCursorScale
#         return res
#     @mouse_cursor_scale.setter
#     def mouse_cursor_scale(self, float value):
#         dereference(self._ptr).MouseCursorScale = value
    
#     @property
#     def anti_aliased_lines(self):
#         cdef Any res = dereference(self._ptr).AntiAliasedLines
#         return res
#     @anti_aliased_lines.setter
#     def anti_aliased_lines(self, Any value):
#         dereference(self._ptr).AntiAliasedLines = value
    
#     @property
#     def anti_aliased_lines_use_tex(self):
#         cdef Any res = dereference(self._ptr).AntiAliasedLinesUseTex
#         return res
#     @anti_aliased_lines_use_tex.setter
#     def anti_aliased_lines_use_tex(self, Any value):
#         dereference(self._ptr).AntiAliasedLinesUseTex = value
    
#     @property
#     def anti_aliased_fill(self):
#         cdef Any res = dereference(self._ptr).AntiAliasedFill
#         return res
#     @anti_aliased_fill.setter
#     def anti_aliased_fill(self, Any value):
#         dereference(self._ptr).AntiAliasedFill = value
    
#     @property
#     def curve_tessellation_tol(self):
#         cdef float res = dereference(self._ptr).CurveTessellationTol
#         return res
#     @curve_tessellation_tol.setter
#     def curve_tessellation_tol(self, float value):
#         dereference(self._ptr).CurveTessellationTol = value
    
#     @property
#     def circle_tessellation_max_error(self):
#         cdef float res = dereference(self._ptr).CircleTessellationMaxError
#         return res
#     @circle_tessellation_max_error.setter
#     def circle_tessellation_max_error(self, float value):
#         dereference(self._ptr).CircleTessellationMaxError = value
    
#     @property
#     def colors(self):
#         cdef tuple res = dereference(self._ptr).Colors
#         return res
#     @colors.setter
#     def colors(self, tuple value):
#         dereference(self._ptr).Colors = value
    

# cdef class _ImGuiTextBuffer:
#     cdef ccimgui.ImGuiTextBuffer* _ptr
    
#     @staticmethod
#     cdef _ImGuiTextBuffer from_ptr(ccimgui.ImGuiTextBuffer* _ptr):
#        cdef _ImGuiTextBuffer wrapper = _ImGuiTextBuffer.__new__(_ImGuiTextBuffer)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_text_buffer():
#         cdef ccimgui.ImGuiTextBuffer* _ptr = ccimgui.ImGuiTextBuffer_ImGuiTextBuffer()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiTextBuffer.from_ptr(_ptr)
    
#     def destroy(_ImGuiTextBuffer self):
#         ccimgui.ImGuiTextBuffer_destroy(self._ptr)
    
#     def append(_ImGuiTextBuffer self, str str, str str_end=None):
#         ccimgui.ImGuiTextBuffer_append(self._ptr, _bytes(str), _bytes(str_end))
    
#     def appendf(_ImGuiTextBuffer self, str fmt):
#         ccimgui.ImGuiTextBuffer_appendf(self._ptr, _bytes(fmt))
    
#     def appendfv(_ImGuiTextBuffer self, str fmt, str args):
#         ccimgui.ImGuiTextBuffer_appendfv(self._ptr, _bytes(fmt), _bytes(args))
    
#     def begin(_ImGuiTextBuffer self):
#         cdef const char* res = ccimgui.ImGuiTextBuffer_begin(self._ptr)
#         return res
    
#     def c_str(_ImGuiTextBuffer self):
#         cdef const char* res = ccimgui.ImGuiTextBuffer_c_str(self._ptr)
#         return res
    
#     def clear_(_ImGuiTextBuffer self):
#         ccimgui.ImGuiTextBuffer_clear(self._ptr)
    
#     def empty(_ImGuiTextBuffer self):
#         cdef ccimgui.bool res = ccimgui.ImGuiTextBuffer_empty(self._ptr)
#         return res
    
#     def end(_ImGuiTextBuffer self):
#         cdef const char* res = ccimgui.ImGuiTextBuffer_end(self._ptr)
#         return res
    
#     def reserve(_ImGuiTextBuffer self, int capacity):
#         ccimgui.ImGuiTextBuffer_reserve(self._ptr, capacity)
    
#     def size(_ImGuiTextBuffer self):
#         cdef int res = ccimgui.ImGuiTextBuffer_size(self._ptr)
#         return res
    
#     @property
#     def buf(self):
#         cdef ccimgui.ImVector_char res = dereference(self._ptr).Buf
#         return _ImVector_char.from_ptr(res)
#     @buf.setter
#     def buf(self, Any value):
#         dereference(self._ptr).Buf = value
    

# cdef class _ImGuiTextFilter:
#     cdef ccimgui.ImGuiTextFilter* _ptr
    
#     @staticmethod
#     cdef _ImGuiTextFilter from_ptr(ccimgui.ImGuiTextFilter* _ptr):
#        cdef _ImGuiTextFilter wrapper = _ImGuiTextFilter.__new__(_ImGuiTextFilter)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_text_filter(str default_filter=""):
#         cdef ccimgui.ImGuiTextFilter* _ptr = ccimgui.ImGuiTextFilter_ImGuiTextFilter(_bytes(default_filter))
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiTextFilter.from_ptr(_ptr)
    
#     def destroy(_ImGuiTextFilter self):
#         ccimgui.ImGuiTextFilter_destroy(self._ptr)
    
#     def build(_ImGuiTextFilter self):
#         ccimgui.ImGuiTextFilter_Build(self._ptr)
    
#     def clear_(_ImGuiTextFilter self):
#         ccimgui.ImGuiTextFilter_Clear(self._ptr)
    
#     def draw(_ImGuiTextFilter self, str label="Filter(inc, -exc)", float width=0.0):
#         cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_Draw(self._ptr, _bytes(label), width)
#         return res
    
#     def is_active(_ImGuiTextFilter self):
#         cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_IsActive(self._ptr)
#         return res
    
#     def pass_filter(_ImGuiTextFilter self, str text, str text_end=None):
#         cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_PassFilter(self._ptr, _bytes(text), _bytes(text_end))
#         return res
    
#     @property
#     def input_buf(self):
#         cdef Any res = dereference(self._ptr).InputBuf
#         return res
#     @input_buf.setter
#     def input_buf(self, Any value):
#         dereference(self._ptr).InputBuf = value
    
#     @property
#     def filters(self):
#         cdef ccimgui.ImVector_ImGuiTextRange res = dereference(self._ptr).Filters
#         return _ImVector_ImGuiTextRange.from_ptr(res)
#     @filters.setter
#     def filters(self, Any value):
#         dereference(self._ptr).Filters = value
    
#     @property
#     def count_grep(self):
#         cdef int res = dereference(self._ptr).CountGrep
#         return res
#     @count_grep.setter
#     def count_grep(self, int value):
#         dereference(self._ptr).CountGrep = value
    

# cdef class _ImGuiViewport:
#     cdef ccimgui.ImGuiViewport* _ptr
    
#     @staticmethod
#     cdef _ImGuiViewport from_ptr(ccimgui.ImGuiViewport* _ptr):
#        cdef _ImGuiViewport wrapper = _ImGuiViewport.__new__(_ImGuiViewport)
#        wrapper._ptr = _ptr
#        return wrapper
    
#     def __init__(self):
#         raise TypeError('This class cannot be instantiated directly.')

#     @staticmethod
#     def gui_viewport():
#         cdef ccimgui.ImGuiViewport* _ptr = ccimgui.ImGuiViewport_ImGuiViewport()
#         if _ptr is NULL:
#             raise MemoryError
#         return _ImGuiViewport.from_ptr(_ptr)
    
#     def destroy(_ImGuiViewport self):
#         ccimgui.ImGuiViewport_destroy(self._ptr)
    
#     def get_center(_ImVec2 pOut, _ImGuiViewport self):
#         ccimgui.ImGuiViewport_GetCenter(pOut._ptr, self._ptr)
    
#     def get_work_center(_ImVec2 pOut, _ImGuiViewport self):
#         ccimgui.ImGuiViewport_GetWorkCenter(pOut._ptr, self._ptr)
    
#     @property
#     def id(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).ID
#         return res
#     @id.setter
#     def id(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).ID = value
    
#     @property
#     def flags(self):
#         cdef ccimgui.ImGuiViewportFlags res = dereference(self._ptr).Flags
#         return res
#     @flags.setter
#     def flags(self, ccimgui.ImGuiViewportFlags value):
#         dereference(self._ptr).Flags = value
    
#     @property
#     def pos(self):
#         cdef tuple res = dereference(self._ptr).Pos
#         return res
#     @pos.setter
#     def pos(self, tuple value):
#         dereference(self._ptr).Pos = value
    
#     @property
#     def size(self):
#         cdef tuple res = dereference(self._ptr).Size
#         return res
#     @size.setter
#     def size(self, tuple value):
#         dereference(self._ptr).Size = value
    
#     @property
#     def work_pos(self):
#         cdef tuple res = dereference(self._ptr).WorkPos
#         return res
#     @work_pos.setter
#     def work_pos(self, tuple value):
#         dereference(self._ptr).WorkPos = value
    
#     @property
#     def work_size(self):
#         cdef tuple res = dereference(self._ptr).WorkSize
#         return res
#     @work_size.setter
#     def work_size(self, tuple value):
#         dereference(self._ptr).WorkSize = value
    
#     @property
#     def dpi_scale(self):
#         cdef float res = dereference(self._ptr).DpiScale
#         return res
#     @dpi_scale.setter
#     def dpi_scale(self, float value):
#         dereference(self._ptr).DpiScale = value
    
#     @property
#     def parent_viewport_id(self):
#         cdef ccimgui.ImGuiID res = dereference(self._ptr).ParentViewportId
#         return res
#     @parent_viewport_id.setter
#     def parent_viewport_id(self, ccimgui.ImGuiID value):
#         dereference(self._ptr).ParentViewportId = value
    
#     @property
#     def draw_data(self):
#         cdef ccimgui.ImDrawData res = dereference(self._ptr).DrawData
#         return _ImDrawData.from_ptr(res)
#     @draw_data.setter
#     def draw_data(self, Any value):
#         dereference(self._ptr).DrawData = value
    
#     @property
#     def renderer_user_data(self):
#         cdef Any res = dereference(self._ptr).RendererUserData
#         return res
#     @renderer_user_data.setter
#     def renderer_user_data(self, Any value):
#         dereference(self._ptr).RendererUserData = value
    
#     @property
#     def platform_user_data(self):
#         cdef Any res = dereference(self._ptr).PlatformUserData
#         return res
#     @platform_user_data.setter
#     def platform_user_data(self, Any value):
#         dereference(self._ptr).PlatformUserData = value
    
#     @property
#     def platform_handle(self):
#         cdef Any res = dereference(self._ptr).PlatformHandle
#         return res
#     @platform_handle.setter
#     def platform_handle(self, Any value):
#         dereference(self._ptr).PlatformHandle = value
    
#     @property
#     def platform_handle_raw(self):
#         cdef Any res = dereference(self._ptr).PlatformHandleRaw
#         return res
#     @platform_handle_raw.setter
#     def platform_handle_raw(self, Any value):
#         dereference(self._ptr).PlatformHandleRaw = value
    
#     @property
#     def platform_window_created(self):
#         cdef Any res = dereference(self._ptr).PlatformWindowCreated
#         return res
#     @platform_window_created.setter
#     def platform_window_created(self, Any value):
#         dereference(self._ptr).PlatformWindowCreated = value
    
#     @property
#     def platform_request_move(self):
#         cdef Any res = dereference(self._ptr).PlatformRequestMove
#         return res
#     @platform_request_move.setter
#     def platform_request_move(self, Any value):
#         dereference(self._ptr).PlatformRequestMove = value
    
#     @property
#     def platform_request_resize(self):
#         cdef Any res = dereference(self._ptr).PlatformRequestResize
#         return res
#     @platform_request_resize.setter
#     def platform_request_resize(self, Any value):
#         dereference(self._ptr).PlatformRequestResize = value
    
#     @property
#     def platform_request_close(self):
#         cdef Any res = dereference(self._ptr).PlatformRequestClose
#         return res
#     @platform_request_close.setter
#     def platform_request_close(self, Any value):
#         dereference(self._ptr).PlatformRequestClose = value
    

cdef class _ImDrawList:
    cdef ccimgui.ImDrawList* _ptr
    
    @staticmethod
    cdef _ImDrawList from_ptr(ccimgui.ImDrawList* _ptr):
       cdef _ImDrawList wrapper = _ImDrawList.__new__(_ImDrawList)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # @staticmethod
    # def draw_list(_ImDrawListSharedData shared_data):
    #     cdef ccimgui.ImDrawList* _ptr = ccimgui.ImDrawList_ImDrawList(shared_data._ptr)
    #     if _ptr is NULL:
    #         raise MemoryError
    #     return _ImDrawList.from_ptr(_ptr)
    
    def destroy(_ImDrawList self):
        ccimgui.ImDrawList_destroy(self._ptr)
    
#     def add_bezier_cubic(
#         _ImDrawList self,
#         tuple p1,
#         tuple p2,
#         tuple p3,
#         tuple p4,
#         ccimgui.ImU32 col,
#         float thickness,
#         int num_segments=0
#     ):
#         ccimgui.ImDrawList_AddBezierCubic(
#             self._ptr,
#             _cast_tuple_ImVec2(p1),
#             _cast_tuple_ImVec2(p2),
#             _cast_tuple_ImVec2(p3),
#             _cast_tuple_ImVec2(p4),
#             col,
#             thickness,
#             num_segments
#         )
    
#     def add_bezier_quadratic(
#         _ImDrawList self,
#         tuple p1,
#         tuple p2,
#         tuple p3,
#         ccimgui.ImU32 col,
#         float thickness,
#         int num_segments=0
#     ):
#         ccimgui.ImDrawList_AddBezierQuadratic(
#             self._ptr,
#             _cast_tuple_ImVec2(p1),
#             _cast_tuple_ImVec2(p2),
#             _cast_tuple_ImVec2(p3),
#             col,
#             thickness,
#             num_segments
#         )
    
#     def add_circle(
#         _ImDrawList self,
#         tuple center,
#         float radius,
#         ccimgui.ImU32 col,
#         int num_segments=0,
#         float thickness=1.0
#     ):
#         ccimgui.ImDrawList_AddCircle(
#             self._ptr,
#             _cast_tuple_ImVec2(center),
#             radius,
#             col,
#             num_segments,
#             thickness
#         )
    
#     def add_circle_filled(_ImDrawList self, tuple center, float radius, ccimgui.ImU32 col, int num_segments=0):
#         ccimgui.ImDrawList_AddCircleFilled(self._ptr, _cast_tuple_ImVec2(center), radius, col, num_segments)
    
#     def add_convex_poly_filled(_ImDrawList self, _ImVec2 points, int num_points, ccimgui.ImU32 col):
#         ccimgui.ImDrawList_AddConvexPolyFilled(self._ptr, points._ptr, num_points, col)
    
#     def add_draw_cmd(_ImDrawList self):
#         ccimgui.ImDrawList_AddDrawCmd(self._ptr)
    
#     def add_image(
#         _ImDrawList self,
#         ccimgui.ImTextureID user_texture_id,
#         tuple p_min,
#         tuple p_max,
#         tuple uv_min=(0, 0),
#         tuple uv_max=(1, 1),
#         ccimgui.ImU32 col=4294967295
#     ):
#         ccimgui.ImDrawList_AddImage(
#             self._ptr,
#             user_texture_id,
#             _cast_tuple_ImVec2(p_min),
#             _cast_tuple_ImVec2(p_max),
#             _cast_tuple_ImVec2(uv_min),
#             _cast_tuple_ImVec2(uv_max),
#             col
#         )
    
#     def add_image_quad(
#         _ImDrawList self,
#         ccimgui.ImTextureID user_texture_id,
#         tuple p1,
#         tuple p2,
#         tuple p3,
#         tuple p4,
#         tuple uv1=(0, 0),
#         tuple uv2=(1, 0),
#         tuple uv3=(1, 1),
#         tuple uv4=(0, 1),
#         ccimgui.ImU32 col=4294967295
#     ):
#         ccimgui.ImDrawList_AddImageQuad(
#             self._ptr,
#             user_texture_id,
#             _cast_tuple_ImVec2(p1),
#             _cast_tuple_ImVec2(p2),
#             _cast_tuple_ImVec2(p3),
#             _cast_tuple_ImVec2(p4),
#             _cast_tuple_ImVec2(uv1),
#             _cast_tuple_ImVec2(uv2),
#             _cast_tuple_ImVec2(uv3),
#             _cast_tuple_ImVec2(uv4),
#             col
#         )
    
#     def add_image_rounded(
#         _ImDrawList self,
#         ccimgui.ImTextureID user_texture_id,
#         tuple p_min,
#         tuple p_max,
#         tuple uv_min,
#         tuple uv_max,
#         ccimgui.ImU32 col,
#         float rounding,
#         ccimgui.ImDrawFlags flags=0
#     ):
#         ccimgui.ImDrawList_AddImageRounded(
#             self._ptr,
#             user_texture_id,
#             _cast_tuple_ImVec2(p_min),
#             _cast_tuple_ImVec2(p_max),
#             _cast_tuple_ImVec2(uv_min),
#             _cast_tuple_ImVec2(uv_max),
#             col,
#             rounding,
#             flags
#         )
    
#     def add_line(_ImDrawList self, tuple p1, tuple p2, ccimgui.ImU32 col, float thickness=1.0):
#         ccimgui.ImDrawList_AddLine(self._ptr, _cast_tuple_ImVec2(p1), _cast_tuple_ImVec2(p2), col, thickness)
    
#     def add_ngon(
#         _ImDrawList self,
#         tuple center,
#         float radius,
#         ccimgui.ImU32 col,
#         int num_segments,
#         float thickness=1.0
#     ):
#         ccimgui.ImDrawList_AddNgon(
#             self._ptr,
#             _cast_tuple_ImVec2(center),
#             radius,
#             col,
#             num_segments,
#             thickness
#         )
    
#     def add_ngon_filled(_ImDrawList self, tuple center, float radius, ccimgui.ImU32 col, int num_segments):
#         ccimgui.ImDrawList_AddNgonFilled(self._ptr, _cast_tuple_ImVec2(center), radius, col, num_segments)
    
#     def add_polyline(
#         _ImDrawList self,
#         _ImVec2 points,
#         int num_points,
#         ccimgui.ImU32 col,
#         ccimgui.ImDrawFlags flags,
#         float thickness
#     ):
#         ccimgui.ImDrawList_AddPolyline(
#             self._ptr,
#             points._ptr,
#             num_points,
#             col,
#             flags,
#             thickness
#         )
    
#     def add_quad(
#         _ImDrawList self,
#         tuple p1,
#         tuple p2,
#         tuple p3,
#         tuple p4,
#         ccimgui.ImU32 col,
#         float thickness=1.0
#     ):
#         ccimgui.ImDrawList_AddQuad(
#             self._ptr,
#             _cast_tuple_ImVec2(p1),
#             _cast_tuple_ImVec2(p2),
#             _cast_tuple_ImVec2(p3),
#             _cast_tuple_ImVec2(p4),
#             col,
#             thickness
#         )
    
#     def add_quad_filled(
#         _ImDrawList self,
#         tuple p1,
#         tuple p2,
#         tuple p3,
#         tuple p4,
#         ccimgui.ImU32 col
#     ):
#         ccimgui.ImDrawList_AddQuadFilled(
#             self._ptr,
#             _cast_tuple_ImVec2(p1),
#             _cast_tuple_ImVec2(p2),
#             _cast_tuple_ImVec2(p3),
#             _cast_tuple_ImVec2(p4),
#             col
#         )
    
#     def add_rect(
#         _ImDrawList self,
#         tuple p_min,
#         tuple p_max,
#         ccimgui.ImU32 col,
#         float rounding=0.0,
#         ccimgui.ImDrawFlags flags=0,
#         float thickness=1.0
#     ):
#         ccimgui.ImDrawList_AddRect(
#             self._ptr,
#             _cast_tuple_ImVec2(p_min),
#             _cast_tuple_ImVec2(p_max),
#             col,
#             rounding,
#             flags,
#             thickness
#         )
    
#     def add_rect_filled(
#         _ImDrawList self,
#         tuple p_min,
#         tuple p_max,
#         ccimgui.ImU32 col,
#         float rounding=0.0,
#         ccimgui.ImDrawFlags flags=0
#     ):
#         ccimgui.ImDrawList_AddRectFilled(
#             self._ptr,
#             _cast_tuple_ImVec2(p_min),
#             _cast_tuple_ImVec2(p_max),
#             col,
#             rounding,
#             flags
#         )
    
#     def add_rect_filled_multi_color(
#         _ImDrawList self,
#         tuple p_min,
#         tuple p_max,
#         ccimgui.ImU32 col_upr_left,
#         ccimgui.ImU32 col_upr_right,
#         ccimgui.ImU32 col_bot_right,
#         ccimgui.ImU32 col_bot_left
#     ):
#         ccimgui.ImDrawList_AddRectFilledMultiColor(
#             self._ptr,
#             _cast_tuple_ImVec2(p_min),
#             _cast_tuple_ImVec2(p_max),
#             col_upr_left,
#             col_upr_right,
#             col_bot_right,
#             col_bot_left
#         )
    
#     def add_text_font_ptr(
#         _ImDrawList self,
#         _ImFont font,
#         float font_size,
#         tuple pos,
#         ccimgui.ImU32 col,
#         str text_begin,
#         str text_end=None,
#         float wrap_width=0.0,
#         _ImVec4 cpu_fine_clip_rect=None
#     ):
#         ccimgui.ImDrawList_AddText_FontPtr(
#             self._ptr,
#             font._ptr,
#             font_size,
#             _cast_tuple_ImVec2(pos),
#             col,
#             _bytes(text_begin),
#             _bytes(text_end),
#             wrap_width,
#             cpu_fine_clip_rect._ptr
#         )
    
#     def add_text_vec2(_ImDrawList self, tuple pos, ccimgui.ImU32 col, str text_begin, str text_end=None):
#         ccimgui.ImDrawList_AddText_Vec2(self._ptr, _cast_tuple_ImVec2(pos), col, _bytes(text_begin), _bytes(text_end))
    
#     def add_triangle(
#         _ImDrawList self,
#         tuple p1,
#         tuple p2,
#         tuple p3,
#         ccimgui.ImU32 col,
#         float thickness=1.0
#     ):
#         ccimgui.ImDrawList_AddTriangle(
#             self._ptr,
#             _cast_tuple_ImVec2(p1),
#             _cast_tuple_ImVec2(p2),
#             _cast_tuple_ImVec2(p3),
#             col,
#             thickness
#         )
    
#     def add_triangle_filled(_ImDrawList self, tuple p1, tuple p2, tuple p3, ccimgui.ImU32 col):
#         ccimgui.ImDrawList_AddTriangleFilled(self._ptr, _cast_tuple_ImVec2(p1), _cast_tuple_ImVec2(p2), _cast_tuple_ImVec2(p3), col)
    
#     def channels_merge(_ImDrawList self):
#         ccimgui.ImDrawList_ChannelsMerge(self._ptr)
    
#     def channels_set_current(_ImDrawList self, int n):
#         ccimgui.ImDrawList_ChannelsSetCurrent(self._ptr, n)
    
#     def channels_split(_ImDrawList self, int count):
#         ccimgui.ImDrawList_ChannelsSplit(self._ptr, count)
    
#     def clone_output(_ImDrawList self):
#         cdef ccimgui.ImDrawList* res = ccimgui.ImDrawList_CloneOutput(self._ptr)
#         return res
    
#     def get_clip_rect_max(_ImVec2 pOut, _ImDrawList self):
#         ccimgui.ImDrawList_GetClipRectMax(pOut._ptr, self._ptr)
    
#     def get_clip_rect_min(_ImVec2 pOut, _ImDrawList self):
#         ccimgui.ImDrawList_GetClipRectMin(pOut._ptr, self._ptr)
    
#     def path_arc_to(
#         _ImDrawList self,
#         tuple center,
#         float radius,
#         float a_min,
#         float a_max,
#         int num_segments=0
#     ):
#         ccimgui.ImDrawList_PathArcTo(
#             self._ptr,
#             _cast_tuple_ImVec2(center),
#             radius,
#             a_min,
#             a_max,
#             num_segments
#         )
    
#     def path_arc_to_fast(_ImDrawList self, tuple center, float radius, int a_min_of_12, int a_max_of_12):
#         ccimgui.ImDrawList_PathArcToFast(self._ptr, _cast_tuple_ImVec2(center), radius, a_min_of_12, a_max_of_12)
    
#     def path_bezier_cubic_curve_to(_ImDrawList self, tuple p2, tuple p3, tuple p4, int num_segments=0):
#         ccimgui.ImDrawList_PathBezierCubicCurveTo(self._ptr, _cast_tuple_ImVec2(p2), _cast_tuple_ImVec2(p3), _cast_tuple_ImVec2(p4), num_segments)
    
#     def path_bezier_quadratic_curve_to(_ImDrawList self, tuple p2, tuple p3, int num_segments=0):
#         ccimgui.ImDrawList_PathBezierQuadraticCurveTo(self._ptr, _cast_tuple_ImVec2(p2), _cast_tuple_ImVec2(p3), num_segments)
    
#     def path_clear(_ImDrawList self):
#         ccimgui.ImDrawList_PathClear(self._ptr)
    
#     def path_fill_convex(_ImDrawList self, ccimgui.ImU32 col):
#         ccimgui.ImDrawList_PathFillConvex(self._ptr, col)
    
#     def path_line_to(_ImDrawList self, tuple pos):
#         ccimgui.ImDrawList_PathLineTo(self._ptr, _cast_tuple_ImVec2(pos))
    
#     def path_line_to_merge_duplicate(_ImDrawList self, tuple pos):
#         ccimgui.ImDrawList_PathLineToMergeDuplicate(self._ptr, _cast_tuple_ImVec2(pos))
    
#     def path_rect(_ImDrawList self, tuple rect_min, tuple rect_max, float rounding=0.0, ccimgui.ImDrawFlags flags=0):
#         ccimgui.ImDrawList_PathRect(self._ptr, _cast_tuple_ImVec2(rect_min), _cast_tuple_ImVec2(rect_max), rounding, flags)
    
#     def path_stroke(_ImDrawList self, ccimgui.ImU32 col, ccimgui.ImDrawFlags flags=0, float thickness=1.0):
#         ccimgui.ImDrawList_PathStroke(self._ptr, col, flags, thickness)
    
#     def pop_clip_rect(_ImDrawList self):
#         ccimgui.ImDrawList_PopClipRect(self._ptr)
    
#     def pop_texture_id(_ImDrawList self):
#         ccimgui.ImDrawList_PopTextureID(self._ptr)
    
#     def prim_quad_uv(
#         _ImDrawList self,
#         tuple a,
#         tuple b,
#         tuple c,
#         tuple d,
#         tuple uv_a,
#         tuple uv_b,
#         tuple uv_c,
#         tuple uv_d,
#         ccimgui.ImU32 col
#     ):
#         ccimgui.ImDrawList_PrimQuadUV(
#             self._ptr,
#             _cast_tuple_ImVec2(a),
#             _cast_tuple_ImVec2(b),
#             _cast_tuple_ImVec2(c),
#             _cast_tuple_ImVec2(d),
#             _cast_tuple_ImVec2(uv_a),
#             _cast_tuple_ImVec2(uv_b),
#             _cast_tuple_ImVec2(uv_c),
#             _cast_tuple_ImVec2(uv_d),
#             col
#         )
    
#     def prim_rect(_ImDrawList self, tuple a, tuple b, ccimgui.ImU32 col):
#         ccimgui.ImDrawList_PrimRect(self._ptr, _cast_tuple_ImVec2(a), _cast_tuple_ImVec2(b), col)
    
#     def prim_rect_uv(
#         _ImDrawList self,
#         tuple a,
#         tuple b,
#         tuple uv_a,
#         tuple uv_b,
#         ccimgui.ImU32 col
#     ):
#         ccimgui.ImDrawList_PrimRectUV(
#             self._ptr,
#             _cast_tuple_ImVec2(a),
#             _cast_tuple_ImVec2(b),
#             _cast_tuple_ImVec2(uv_a),
#             _cast_tuple_ImVec2(uv_b),
#             col
#         )
    
#     def prim_reserve(_ImDrawList self, int idx_count, int vtx_count):
#         ccimgui.ImDrawList_PrimReserve(self._ptr, idx_count, vtx_count)
    
#     def prim_unreserve(_ImDrawList self, int idx_count, int vtx_count):
#         ccimgui.ImDrawList_PrimUnreserve(self._ptr, idx_count, vtx_count)
    
#     def prim_vtx(_ImDrawList self, tuple pos, tuple uv, ccimgui.ImU32 col):
#         ccimgui.ImDrawList_PrimVtx(self._ptr, _cast_tuple_ImVec2(pos), _cast_tuple_ImVec2(uv), col)
    
#     def prim_write_idx(_ImDrawList self, ccimgui.ImDrawIdx idx):
#         ccimgui.ImDrawList_PrimWriteIdx(self._ptr, idx)
    
#     def prim_write_vtx(_ImDrawList self, tuple pos, tuple uv, ccimgui.ImU32 col):
#         ccimgui.ImDrawList_PrimWriteVtx(self._ptr, _cast_tuple_ImVec2(pos), _cast_tuple_ImVec2(uv), col)
    
#     def push_clip_rect(_ImDrawList self, tuple clip_rect_min, tuple clip_rect_max, Any intersect_with_current_clip_rect=False):
#         ccimgui.ImDrawList_PushClipRect(self._ptr, _cast_tuple_ImVec2(clip_rect_min), _cast_tuple_ImVec2(clip_rect_max), intersect_with_current_clip_rect)
    
#     def push_clip_rect_full_screen(_ImDrawList self):
#         ccimgui.ImDrawList_PushClipRectFullScreen(self._ptr)
    
#     def push_texture_id(_ImDrawList self, ccimgui.ImTextureID texture_id):
#         ccimgui.ImDrawList_PushTextureID(self._ptr, texture_id)
    
#     def _calc_circle_auto_segment_count(_ImDrawList self, float radius):
#         cdef int res = ccimgui.ImDrawList__CalcCircleAutoSegmentCount(self._ptr, radius)
#         return res
    
#     def _clear_free_memory(_ImDrawList self):
#         ccimgui.ImDrawList__ClearFreeMemory(self._ptr)
    
#     def _on_changed_clip_rect(_ImDrawList self):
#         ccimgui.ImDrawList__OnChangedClipRect(self._ptr)
    
#     def _on_changed_texture_id(_ImDrawList self):
#         ccimgui.ImDrawList__OnChangedTextureID(self._ptr)
    
#     def _on_changed_vtx_offset(_ImDrawList self):
#         ccimgui.ImDrawList__OnChangedVtxOffset(self._ptr)
    
#     def _path_arc_to_fast_ex(
#         _ImDrawList self,
#         tuple center,
#         float radius,
#         int a_min_sample,
#         int a_max_sample,
#         int a_step
#     ):
#         ccimgui.ImDrawList__PathArcToFastEx(
#             self._ptr,
#             _cast_tuple_ImVec2(center),
#             radius,
#             a_min_sample,
#             a_max_sample,
#             a_step
#         )
    
#     def _path_arc_ton(
#         _ImDrawList self,
#         tuple center,
#         float radius,
#         float a_min,
#         float a_max,
#         int num_segments
#     ):
#         ccimgui.ImDrawList__PathArcToN(
#             self._ptr,
#             _cast_tuple_ImVec2(center),
#             radius,
#             a_min,
#             a_max,
#             num_segments
#         )
    
#     def _pop_unused_draw_cmd(_ImDrawList self):
#         ccimgui.ImDrawList__PopUnusedDrawCmd(self._ptr)
    
#     def _reset_for_new_frame(_ImDrawList self):
#         ccimgui.ImDrawList__ResetForNewFrame(self._ptr)
    
#     def _try_merge_draw_cmds(_ImDrawList self):
#         ccimgui.ImDrawList__TryMergeDrawCmds(self._ptr)
    
    @property
    def cmd_buffer(self):
        return [
            _ImDrawCmd.from_ptr(&dereference(self._ptr).CmdBuffer.Data[idx])
            for idx in range(dereference(self._ptr).CmdBuffer.Size)
        ]
    # @cmd_buffer.setter
    # def cmd_buffer(self, Any value):
    #     dereference(self._ptr).CmdBuffer = value
    
    @property
    def idx_buffer_size(self):
        cdef int res = dereference(self._ptr).IdxBuffer.Size
        return res
    @property
    def idx_buffer_data(self):
        cdef size_t res = <uintptr_t>dereference(self._ptr).IdxBuffer.Data
        return res
    # @idx_buffer.setter
    # def idx_buffer(self, Any value):
    #     dereference(self._ptr).IdxBuffer = value
    
    @property
    def vtx_buffer_size(self):
        cdef int res = dereference(self._ptr).VtxBuffer.Size
        return res
    @property
    def vtx_buffer_data(self):
        cdef size_t res = <uintptr_t>dereference(self._ptr).VtxBuffer.Data
        return res
    # @vtx_buffer.setter
    # def vtx_buffer(self, Any value):
    #     dereference(self._ptr).VtxBuffer = value
    
    # @property
    # def flags(self):
    #     cdef ccimgui.ImDrawListFlags res = dereference(self._ptr).Flags
    #     return res
    # @flags.setter
    # def flags(self, ccimgui.ImDrawListFlags value):
    #     dereference(self._ptr).Flags = value
    
    # @property
    # def _vtx_current_idx(self):
    #     cdef Any res = dereference(self._ptr)._VtxCurrentIdx
    #     return res
    # @_vtx_current_idx.setter
    # def _vtx_current_idx(self, Any value):
    #     dereference(self._ptr)._VtxCurrentIdx = value
    
    # @property
    # def _data(self):
    #     cdef ccimgui.ImDrawListSharedData res = dereference(self._ptr)._Data
    #     return _ImDrawListSharedData.from_ptr(res)
    # @_data.setter
    # def _data(self, Any value):
    #     dereference(self._ptr)._Data = value
    
    # @property
    # def _owner_name(self):
    #     cdef str res = dereference(self._ptr)._OwnerName
    #     return res
    # @_owner_name.setter
    # def _owner_name(self, str value):
    #     dereference(self._ptr)._OwnerName = value
    
    # @property
    # def _vtx_write_ptr(self):
    #     cdef ccimgui.ImDrawVert res = dereference(self._ptr)._VtxWritePtr
    #     return _ImDrawVert.from_ptr(res)
    # @_vtx_write_ptr.setter
    # def _vtx_write_ptr(self, Any value):
    #     dereference(self._ptr)._VtxWritePtr = value
    
    # @property
    # def _idx_write_ptr(self):
    #     cdef Any res = dereference(self._ptr)._IdxWritePtr
    #     return res
    # @_idx_write_ptr.setter
    # def _idx_write_ptr(self, Any value):
    #     dereference(self._ptr)._IdxWritePtr = value
    
    # @property
    # def _clip_rect_stack(self):
    #     cdef ccimgui.ImVector_ImVec4 res = dereference(self._ptr)._ClipRectStack
    #     return _ImVector_ImVec4.from_ptr(res)
    # @_clip_rect_stack.setter
    # def _clip_rect_stack(self, Any value):
    #     dereference(self._ptr)._ClipRectStack = value
    
    # @property
    # def _texture_id_stack(self):
    #     cdef ccimgui.ImVector_ImTextureID res = dereference(self._ptr)._TextureIdStack
    #     return _ImVector_ImTextureID.from_ptr(res)
    # @_texture_id_stack.setter
    # def _texture_id_stack(self, Any value):
    #     dereference(self._ptr)._TextureIdStack = value
    
    # @property
    # def _path(self):
    #     cdef ccimgui.ImVector_ImVec2 res = dereference(self._ptr)._Path
    #     return _ImVector_ImVec2.from_ptr(res)
    # @_path.setter
    # def _path(self, Any value):
    #     dereference(self._ptr)._Path = value
    
    # @property
    # def _cmd_header(self):
    #     cdef ccimgui.ImDrawCmdHeader res = dereference(self._ptr)._CmdHeader
    #     return _ImDrawCmdHeader.from_ptr(res)
    # @_cmd_header.setter
    # def _cmd_header(self, Any value):
    #     dereference(self._ptr)._CmdHeader = value
    
    # @property
    # def _splitter(self):
    #     cdef ccimgui.ImDrawListSplitter res = dereference(self._ptr)._Splitter
    #     return _ImDrawListSplitter.from_ptr(res)
    # @_splitter.setter
    # def _splitter(self, Any value):
    #     dereference(self._ptr)._Splitter = value
    
    # @property
    # def _fringe_scale(self):
    #     cdef float res = dereference(self._ptr)._FringeScale
    #     return res
    # @_fringe_scale.setter
    # def _fringe_scale(self, float value):
    #     dereference(self._ptr)._FringeScale = value
    

cdef class _ImDrawListSharedData:
    cdef ccimgui.ImDrawListSharedData* _ptr
    
    @staticmethod
    cdef _ImDrawListSharedData from_ptr(ccimgui.ImDrawListSharedData* _ptr):
       cdef _ImDrawListSharedData wrapper = _ImDrawListSharedData.__new__(_ImDrawListSharedData)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')


cdef class _ImFontBuilderIO:
    cdef ccimgui.ImFontBuilderIO* _ptr
    
    @staticmethod
    cdef _ImFontBuilderIO from_ptr(ccimgui.ImFontBuilderIO* _ptr):
       cdef _ImFontBuilderIO wrapper = _ImFontBuilderIO.__new__(_ImFontBuilderIO)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')


cdef class _ImGuiContext:
    cdef ccimgui.ImGuiContext* _ptr
    
    @staticmethod
    cdef _ImGuiContext from_ptr(ccimgui.ImGuiContext* _ptr):
       cdef _ImGuiContext wrapper = _ImGuiContext.__new__(_ImGuiContext)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')


