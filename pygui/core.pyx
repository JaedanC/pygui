import cython
from cython.operator import dereference

from collections import namedtuple
from typing import Callable, Any

from . cimport ccimgui
from libcpp cimport bool
from libc.stdint cimport uintptr_t
from libc.float cimport FLT_MAX, FLT_MIN
from cython.view cimport array as cvarray
from cpython.version cimport PY_MAJOR_VERSION


IM_DRAW_FLAGS_NONE = ccimgui.ImDrawFlags_None
IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_

IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset

IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines

IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None
IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad
IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors
IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset
IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports
IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports

IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_

IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text
IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled
IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg
IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg
IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg
IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border
IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow
IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg
IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered
IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive
IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg
IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive
IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed
IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg
IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg
IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab
IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered
IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive
IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark
IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab
IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive
IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button
IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered
IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive
IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header
IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered
IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive
IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator
IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered
IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive
IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip
IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered
IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive
IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab
IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered
IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive
IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused
IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive
IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview
IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg
IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines
IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered
IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram
IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered
IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg
IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong
IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight
IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg
IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt
IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg
IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget
IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight
IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight
IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg
IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg
IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT

IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None
IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha
IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker
IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions
IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview
IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs
IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip
IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel
IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview
IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop
IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder
IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf
IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex
IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8
IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel
IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB
IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV
IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_
IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_
IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_
IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_

IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None
IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft
IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall
IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular
IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge
IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest
IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton
IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview
IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_

IMGUI_COND_NONE = ccimgui.ImGuiCond_None
IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always
IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once
IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver
IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing

IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None
IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard
IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad
IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos
IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard
IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse
IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange
IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable
IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts
IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB
IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen

IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8
IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8
IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16
IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16
IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32
IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32
IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64
IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64
IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float
IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double
IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT

IMGUI_DIR_NONE = ccimgui.ImGuiDir_None
IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left
IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right
IMGUI_DIR_UP = ccimgui.ImGuiDir_Up
IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down
IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT

IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None
IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly
IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode
IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode
IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit
IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize
IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar

IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID
IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern
IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload
IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly

IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None
IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows
IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow
IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow
IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy
IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy
IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows

IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None
IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows
IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow
IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow
IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy
IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled
IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride
IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly
IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows
IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal
IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort
IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay

IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None
IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase
IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank
IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll
IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter
IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput
IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine
IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll
IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite
IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly
IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password
IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo
IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit
IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll

IMGUI_KEY_NONE = ccimgui.ImGuiKey_None
IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab
IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow
IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow
IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow
IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow
IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp
IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown
IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home
IMGUI_KEY_END = ccimgui.ImGuiKey_End
IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert
IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete
IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace
IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space
IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter
IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape
IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl
IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift
IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt
IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper
IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl
IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift
IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt
IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper
IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu
IMGUI_KEY_0 = ccimgui.ImGuiKey_0
IMGUI_KEY_1 = ccimgui.ImGuiKey_1
IMGUI_KEY_2 = ccimgui.ImGuiKey_2
IMGUI_KEY_3 = ccimgui.ImGuiKey_3
IMGUI_KEY_4 = ccimgui.ImGuiKey_4
IMGUI_KEY_5 = ccimgui.ImGuiKey_5
IMGUI_KEY_6 = ccimgui.ImGuiKey_6
IMGUI_KEY_7 = ccimgui.ImGuiKey_7
IMGUI_KEY_8 = ccimgui.ImGuiKey_8
IMGUI_KEY_9 = ccimgui.ImGuiKey_9
IMGUI_KEY_A = ccimgui.ImGuiKey_A
IMGUI_KEY_B = ccimgui.ImGuiKey_B
IMGUI_KEY_C = ccimgui.ImGuiKey_C
IMGUI_KEY_D = ccimgui.ImGuiKey_D
IMGUI_KEY_E = ccimgui.ImGuiKey_E
IMGUI_KEY_F = ccimgui.ImGuiKey_F
IMGUI_KEY_G = ccimgui.ImGuiKey_G
IMGUI_KEY_H = ccimgui.ImGuiKey_H
IMGUI_KEY_I = ccimgui.ImGuiKey_I
IMGUI_KEY_J = ccimgui.ImGuiKey_J
IMGUI_KEY_K = ccimgui.ImGuiKey_K
IMGUI_KEY_L = ccimgui.ImGuiKey_L
IMGUI_KEY_M = ccimgui.ImGuiKey_M
IMGUI_KEY_N = ccimgui.ImGuiKey_N
IMGUI_KEY_O = ccimgui.ImGuiKey_O
IMGUI_KEY_P = ccimgui.ImGuiKey_P
IMGUI_KEY_Q = ccimgui.ImGuiKey_Q
IMGUI_KEY_R = ccimgui.ImGuiKey_R
IMGUI_KEY_S = ccimgui.ImGuiKey_S
IMGUI_KEY_T = ccimgui.ImGuiKey_T
IMGUI_KEY_U = ccimgui.ImGuiKey_U
IMGUI_KEY_V = ccimgui.ImGuiKey_V
IMGUI_KEY_W = ccimgui.ImGuiKey_W
IMGUI_KEY_X = ccimgui.ImGuiKey_X
IMGUI_KEY_Y = ccimgui.ImGuiKey_Y
IMGUI_KEY_Z = ccimgui.ImGuiKey_Z
IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1
IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2
IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3
IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4
IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5
IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6
IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7
IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8
IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9
IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10
IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11
IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12
IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe
IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma
IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus
IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period
IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash
IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon
IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal
IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket
IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash
IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket
IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent
IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock
IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock
IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock
IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen
IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause
IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0
IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1
IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2
IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3
IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4
IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5
IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6
IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7
IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8
IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9
IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal
IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide
IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply
IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract
IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd
IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter
IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual
IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart
IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack
IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft
IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight
IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp
IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown
IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft
IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight
IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp
IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown
IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1
IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1
IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2
IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2
IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3
IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3
IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft
IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight
IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp
IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown
IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft
IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight
IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp
IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown
IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft
IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight
IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle
IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1
IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2
IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX
IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY
IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl
IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift
IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt
IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper
IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT
IMGUI_MOD_NONE = ccimgui.ImGuiMod_None
IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl
IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift
IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt
IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super
IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut
IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_
IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN
IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END
IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT
IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE
IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET

IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left
IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right
IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle
IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT

IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None
IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow
IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput
IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll
IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS
IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW
IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW
IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE
IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand
IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed
IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT

IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate
IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel
IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input
IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu
IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft
IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight
IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp
IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown
IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft
IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight
IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp
IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown
IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev
IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext
IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow
IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast
IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT

IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems
IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId
IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel
IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup

IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None
IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups
IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns
IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick
IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled
IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap

IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None
IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp
IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic
IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat
IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput
IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_

IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None
IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending
IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending

IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha
IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha
IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding
IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding
IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize
IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize
IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign
IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding
IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize
IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding
IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize
IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding
IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding
IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize
IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing
IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing
IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing
IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding
IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize
IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding
IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize
IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding
IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding
IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign
IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize
IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding
IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT

IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None
IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable
IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs
IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton
IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons
IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_

IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None
IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument
IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected
IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId
IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip
IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder
IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading
IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing

IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None
IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0
IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1
IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg

IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None
IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed
IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize
IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder
IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide
IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending
IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable
IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable
IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled
IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible
IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted
IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_
IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_
IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_
IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_

IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None
IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable
IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable
IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable
IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable
IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings
IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody
IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg
IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH
IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH
IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV
IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV
IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH
IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV
IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner
IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter
IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize
IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit
IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame
IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp
IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY
IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible
IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths
IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip
IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX
IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX
IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY
IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti
IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate
IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_

IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None
IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers

IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None
IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected
IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed
IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap
IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen
IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog
IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen
IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick
IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow
IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf
IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet
IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding
IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth
IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth
IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader

IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor
IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp
IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration
IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick
IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs
IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear
IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost
IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized
IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge
IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows

IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None
IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar
IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize
IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove
IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar
IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse
IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse
IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize
IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground
IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings
IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs
IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar
IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar
IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing
IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus
IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding
IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs
IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus
IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument
IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking
IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav
IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration
IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs
IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened
IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow
IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip
IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup
IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal
IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImGuiWindowFlags_ChildMenu
IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST = ccimgui.ImGuiWindowFlags_DockNodeHost


cdef bytes _bytes(str text):
    return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))

cdef str _from_bytes(bytes text):
    return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))


def accept_drag_drop_payload(str type_, ccimgui.ImGuiDragDropFlags flags):
    cdef ccimgui.ImGuiPayload* res = ccimgui.igAcceptDragDropPayload(_bytes(type_), flags)
    return res

def align_text_to_frame_padding():
    ccimgui.igAlignTextToFramePadding()

def arrow_button(str str_id, ccimgui.ImGuiDir dir_):
    cdef ccimgui.bool res = ccimgui.igArrowButton(_bytes(str_id), dir_)
    return res

def begin(str name, Any p_open, ccimgui.ImGuiWindowFlags flags):
    cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), p_open, flags)
    return res

def begin_child_frame(ccimgui.ImGuiID id_, tuple size, ccimgui.ImGuiWindowFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginChildFrame(id_, size, flags)
    return res

def begin_child_id(ccimgui.ImGuiID id_, tuple size, Any border, ccimgui.ImGuiWindowFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginChild_ID(id_, size, border, flags)
    return res

def begin_child_str(str str_id, tuple size, Any border, ccimgui.ImGuiWindowFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginChild_Str(_bytes(str_id), size, border, flags)
    return res

def begin_combo(str label, str preview_value, ccimgui.ImGuiComboFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginCombo(_bytes(label), _bytes(preview_value), flags)
    return res

def begin_disabled(Any disabled):
    ccimgui.igBeginDisabled(disabled)

def begin_drag_drop_source(ccimgui.ImGuiDragDropFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginDragDropSource(flags)
    return res

def begin_drag_drop_target():
    cdef ccimgui.bool res = ccimgui.igBeginDragDropTarget()
    return res

def begin_group():
    ccimgui.igBeginGroup()

def begin_list_box(str label, tuple size):
    cdef ccimgui.bool res = ccimgui.igBeginListBox(_bytes(label), size)
    return res

def begin_main_menu_bar():
    cdef ccimgui.bool res = ccimgui.igBeginMainMenuBar()
    return res

def begin_menu(str label, Any enabled):
    cdef ccimgui.bool res = ccimgui.igBeginMenu(_bytes(label), enabled)
    return res

def begin_menu_bar():
    cdef ccimgui.bool res = ccimgui.igBeginMenuBar()
    return res

def begin_popup(str str_id, ccimgui.ImGuiWindowFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginPopup(_bytes(str_id), flags)
    return res

def begin_popup_context_item(str str_id, ccimgui.ImGuiPopupFlags popup_flags):
    cdef ccimgui.bool res = ccimgui.igBeginPopupContextItem(_bytes(str_id), popup_flags)
    return res

def begin_popup_context_void(str str_id, ccimgui.ImGuiPopupFlags popup_flags):
    cdef ccimgui.bool res = ccimgui.igBeginPopupContextVoid(_bytes(str_id), popup_flags)
    return res

def begin_popup_context_window(str str_id, ccimgui.ImGuiPopupFlags popup_flags):
    cdef ccimgui.bool res = ccimgui.igBeginPopupContextWindow(_bytes(str_id), popup_flags)
    return res

def begin_popup_modal(str name, Any p_open, ccimgui.ImGuiWindowFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginPopupModal(_bytes(name), p_open, flags)
    return res

def begin_tab_bar(str str_id, ccimgui.ImGuiTabBarFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginTabBar(_bytes(str_id), flags)
    return res

def begin_tab_item(str label, Any p_open, ccimgui.ImGuiTabItemFlags flags):
    cdef ccimgui.bool res = ccimgui.igBeginTabItem(_bytes(label), p_open, flags)
    return res

def begin_table(str str_id, int column, ccimgui.ImGuiTableFlags flags, tuple outer_size, float inner_width):
    cdef ccimgui.bool res = ccimgui.igBeginTable(_bytes(str_id), column, flags, outer_size, inner_width)
    return res

def begin_tooltip():
    ccimgui.igBeginTooltip()

def bullet():
    ccimgui.igBullet()

def bullet_text(str fmt):
    ccimgui.igBulletText(_bytes(fmt))

def bullet_textv(str fmt, str args):
    ccimgui.igBulletTextV(_bytes(fmt), _bytes(args))

def button(str label, tuple size):
    cdef ccimgui.bool res = ccimgui.igButton(_bytes(label), size)
    return res

def calc_item_width():
    cdef float res = ccimgui.igCalcItemWidth()
    return res

def calc_text_size(Any pOut, str text, str text_end, Any hide_text_after_double_hash, float wrap_width):
    ccimgui.igCalcTextSize(pOut, _bytes(text), _bytes(text_end), hide_text_after_double_hash, wrap_width)

def checkbox(str label, Any value):
    cdef ccimgui.bool res = ccimgui.igCheckbox(_bytes(label), value)
    return res

def checkbox_flags_int_ptr(str label, int flags, int flags_value):
    cdef ccimgui.bool res = ccimgui.igCheckboxFlags_IntPtr(_bytes(label), flags, flags_value)
    return res

def checkbox_flags_uint_ptr(str label, Any flags, Any flags_value):
    cdef ccimgui.bool res = ccimgui.igCheckboxFlags_UintPtr(_bytes(label), flags, flags_value)
    return res

def close_current_popup():
    ccimgui.igCloseCurrentPopup()

def collapsing_header_bool_ptr(str label, Any p_visible, ccimgui.ImGuiTreeNodeFlags flags):
    cdef ccimgui.bool res = ccimgui.igCollapsingHeader_BoolPtr(_bytes(label), p_visible, flags)
    return res

def collapsing_header_tree_node_flags(str label, ccimgui.ImGuiTreeNodeFlags flags):
    cdef ccimgui.bool res = ccimgui.igCollapsingHeader_TreeNodeFlags(_bytes(label), flags)
    return res

def color_button(str desc_id, tuple col, ccimgui.ImGuiColorEditFlags flags, tuple size):
    cdef ccimgui.bool res = ccimgui.igColorButton(_bytes(desc_id), col, flags, size)
    return res

def color_convert_float_4_to_u32(tuple in_):
    cdef ccimgui.ImU32 res = ccimgui.igColorConvertFloat4ToU32(in_)
    return res

def color_convert_hs_vto_rgb(
    float h,
    float s,
    float value,
    float out_r,
    float out_g,
    float out_b
):
    ccimgui.igColorConvertHSVtoRGB(
        h,
        s,
        value,
        out_r,
        out_g,
        out_b
    )

def color_convert_rg_bto_hsv(
    float r,
    float g,
    float b,
    float out_h,
    float out_s,
    float out_v
):
    ccimgui.igColorConvertRGBtoHSV(
        r,
        g,
        b,
        out_h,
        out_s,
        out_v
    )

def color_convert_u32_to_float4(Any pOut, ccimgui.ImU32 in_):
    ccimgui.igColorConvertU32ToFloat4(pOut, in_)

def color_edit3(str label, float col0, float col1, float col2, ccimgui.ImGuiColorEditFlags flags):
    cdef float[3] io_float_col0 = [col0, col1, col2]
    cdef ccimgui.bool res = ccimgui.igColorEdit3(_bytes(label), <float*>&io_float_col0, flags)
    return res

def color_edit4(
    str label,
    float col0,
    float col1,
    float col2,
    float col3,
    ccimgui.ImGuiColorEditFlags flags
):
    cdef float[4] io_float_col0 = [col0, col1, col2, col3]
    cdef ccimgui.bool res = ccimgui.igColorEdit4(
        _bytes(label),
        <float*>&io_float_col0,
        flags
    )
    return res

def color_picker3(str label, float col0, float col1, float col2, ccimgui.ImGuiColorEditFlags flags):
    cdef float[3] io_float_col0 = [col0, col1, col2]
    cdef ccimgui.bool res = ccimgui.igColorPicker3(_bytes(label), <float*>&io_float_col0, flags)
    return res

def color_picker4(
    str label,
    float col0,
    float col1,
    float col2,
    float col3,
    ccimgui.ImGuiColorEditFlags flags,
    Any ref_col
):
    cdef float[4] io_float_col0 = [col0, col1, col2, col3]
    cdef ccimgui.bool res = ccimgui.igColorPicker4(
        _bytes(label),
        <float*>&io_float_col0,
        flags,
        ref_col
    )
    return res

def columns(int count, str id_, Any border):
    ccimgui.igColumns(count, _bytes(id_), border)

def combo_fn_bool_ptr(
    str label,
    int current_item,
    Callable items_getter,
    Any data,
    int items_count,
    int popup_max_height_in_items
):
    cdef ccimgui.bool res = ccimgui.igCombo_FnBoolPtr(
        _bytes(label),
        current_item,
        items_getter,
        data,
        items_count,
        popup_max_height_in_items
    )
    return res

def combo_str(str label, int current_item, str items_separated_by_zeros, int popup_max_height_in_items):
    cdef ccimgui.bool res = ccimgui.igCombo_Str(_bytes(label), current_item, _bytes(items_separated_by_zeros), popup_max_height_in_items)
    return res

def combo_str_arr(str label, int current_item, Any items, int items_count, int popup_max_height_in_items):
    cdef ccimgui.bool res = ccimgui.igCombo_Str_arr(_bytes(label), current_item, items, items_count, popup_max_height_in_items)
    return res

def create_context(Any shared_font_atlas):
    cdef ccimgui.ImGuiContext* res = ccimgui.igCreateContext(shared_font_atlas)
    return res

def debug_check_version_and_data_layout(
    str version_str,
    Any sz_io,
    Any sz_style,
    Any sz_vec2,
    Any sz_vec4,
    Any sz_drawvert,
    Any sz_drawidx
):
    cdef ccimgui.bool res = ccimgui.igDebugCheckVersionAndDataLayout(
        _bytes(version_str),
        sz_io,
        sz_style,
        sz_vec2,
        sz_vec4,
        sz_drawvert,
        sz_drawidx
    )
    return res

def debug_text_encoding(str text):
    ccimgui.igDebugTextEncoding(_bytes(text))

def destroy_context(Any ctx):
    ccimgui.igDestroyContext(ctx)

def destroy_platform_windows():
    ccimgui.igDestroyPlatformWindows()

def dock_space(ccimgui.ImGuiID id_, tuple size, ccimgui.ImGuiDockNodeFlags flags, Any window_class):
    cdef ccimgui.ImGuiID res = ccimgui.igDockSpace(id_, size, flags, window_class)
    return res

def dock_space_over_viewport(Any viewport, ccimgui.ImGuiDockNodeFlags flags, Any window_class):
    cdef ccimgui.ImGuiID res = ccimgui.igDockSpaceOverViewport(viewport, flags, window_class)
    return res

def drag_float(
    str label,
    float value,
    float v_speed,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igDragFloat(
        _bytes(label),
        value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_float2(
    str label,
    float value0,
    float value1,
    float v_speed,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef float[2] io_float_value0 = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igDragFloat2(
        _bytes(label),
        <float*>&io_float_value0,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_float3(
    str label,
    float value0,
    float value1,
    float value2,
    float v_speed,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef float[3] io_float_value0 = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igDragFloat3(
        _bytes(label),
        <float*>&io_float_value0,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_float4(
    str label,
    float value0,
    float value1,
    float value2,
    float value3,
    float v_speed,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef float[4] io_float_value0 = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igDragFloat4(
        _bytes(label),
        <float*>&io_float_value0,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_float_range2(
    str label,
    float v_current_min,
    float v_current_max,
    float v_speed,
    float v_min,
    float v_max,
    str format_,
    str format_max,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igDragFloatRange2(
        _bytes(label),
        v_current_min,
        v_current_max,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        _bytes(format_max),
        flags
    )
    return res

def drag_int(
    str label,
    int value,
    float v_speed,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igDragInt(
        _bytes(label),
        value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_int2(
    str label,
    int value0,
    int value1,
    float v_speed,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef int[2] io_int_value0 = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igDragInt2(
        _bytes(label),
        <int*>&io_int_value0,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_int3(
    str label,
    int value0,
    int value1,
    int value2,
    float v_speed,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef int[3] io_int_value0 = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igDragInt3(
        _bytes(label),
        <int*>&io_int_value0,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_int4(
    str label,
    int value0,
    int value1,
    int value2,
    int value3,
    float v_speed,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef int[4] io_int_value0 = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igDragInt4(
        _bytes(label),
        <int*>&io_int_value0,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def drag_int_range2(
    str label,
    int v_current_min,
    int v_current_max,
    float v_speed,
    int v_min,
    int v_max,
    str format_,
    str format_max,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igDragIntRange2(
        _bytes(label),
        v_current_min,
        v_current_max,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        _bytes(format_max),
        flags
    )
    return res

def drag_scalar(
    str label,
    ccimgui.ImGuiDataType data_type,
    Any p_data,
    float v_speed,
    Any p_min,
    Any p_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igDragScalar(
        _bytes(label),
        data_type,
        p_data,
        v_speed,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res

def drag_scalarn(
    str label,
    ccimgui.ImGuiDataType data_type,
    Any p_data,
    int components,
    float v_speed,
    Any p_min,
    Any p_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igDragScalarN(
        _bytes(label),
        data_type,
        p_data,
        components,
        v_speed,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res

def dummy(tuple size):
    ccimgui.igDummy(size)

def end():
    ccimgui.igEnd()

def end_child():
    ccimgui.igEndChild()

def end_child_frame():
    ccimgui.igEndChildFrame()

def end_combo():
    ccimgui.igEndCombo()

def end_disabled():
    ccimgui.igEndDisabled()

def end_drag_drop_source():
    ccimgui.igEndDragDropSource()

def end_drag_drop_target():
    ccimgui.igEndDragDropTarget()

def end_frame():
    ccimgui.igEndFrame()

def end_group():
    ccimgui.igEndGroup()

def end_list_box():
    ccimgui.igEndListBox()

def end_main_menu_bar():
    ccimgui.igEndMainMenuBar()

def end_menu():
    ccimgui.igEndMenu()

def end_menu_bar():
    ccimgui.igEndMenuBar()

def end_popup():
    ccimgui.igEndPopup()

def end_tab_bar():
    ccimgui.igEndTabBar()

def end_tab_item():
    ccimgui.igEndTabItem()

def end_table():
    ccimgui.igEndTable()

def end_tooltip():
    ccimgui.igEndTooltip()

def find_viewport_by_id(ccimgui.ImGuiID id_):
    cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByID(id_)
    return res

def find_viewport_by_platform_handle(Any platform_handle):
    cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByPlatformHandle(platform_handle)
    return res

def get_background_draw_list_nil():
    cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_Nil()
    return res

def get_background_draw_list_viewport_ptr(Any viewport):
    cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_ViewportPtr(viewport)
    return res

def get_clipboard_text():
    cdef const char* res = ccimgui.igGetClipboardText()
    return res

def get_color_u32_col(ccimgui.ImGuiCol idx, float alpha_mul):
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Col(idx, alpha_mul)
    return res

def get_color_u32_u32(ccimgui.ImU32 col):
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_U32(col)
    return res

def get_color_u32_vec4(tuple col):
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Vec4(col)
    return res

def get_column_index():
    cdef int res = ccimgui.igGetColumnIndex()
    return res

def get_column_offset(int column_index):
    cdef float res = ccimgui.igGetColumnOffset(column_index)
    return res

def get_column_width(int column_index):
    cdef float res = ccimgui.igGetColumnWidth(column_index)
    return res

def get_columns_count():
    cdef int res = ccimgui.igGetColumnsCount()
    return res

def get_content_region_avail(Any pOut):
    ccimgui.igGetContentRegionAvail(pOut)

def get_content_region_max(Any pOut):
    ccimgui.igGetContentRegionMax(pOut)

def get_current_context():
    cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
    return res

def get_cursor_pos(Any pOut):
    ccimgui.igGetCursorPos(pOut)

def get_cursor_posx():
    cdef float res = ccimgui.igGetCursorPosX()
    return res

def get_cursor_posy():
    cdef float res = ccimgui.igGetCursorPosY()
    return res

def get_cursor_screen_pos(Any pOut):
    ccimgui.igGetCursorScreenPos(pOut)

def get_cursor_start_pos(Any pOut):
    ccimgui.igGetCursorStartPos(pOut)

def get_drag_drop_payload():
    cdef ccimgui.ImGuiPayload* res = ccimgui.igGetDragDropPayload()
    return res

def get_draw_data():
    cdef ccimgui.ImDrawData* res = ccimgui.igGetDrawData()
    return res

def get_draw_list_shared_data():
    cdef ccimgui.ImDrawListSharedData* res = ccimgui.igGetDrawListSharedData()
    return res

def get_font():
    cdef ccimgui.ImFont* res = ccimgui.igGetFont()
    return res

def get_font_size():
    cdef float res = ccimgui.igGetFontSize()
    return res

def get_font_tex_uv_white_pixel(Any pOut):
    ccimgui.igGetFontTexUvWhitePixel(pOut)

def get_foreground_draw_list_nil():
    cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_Nil()
    return res

def get_foreground_draw_list_viewport_ptr(Any viewport):
    cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_ViewportPtr(viewport)
    return res

def get_frame_count():
    cdef int res = ccimgui.igGetFrameCount()
    return res

def get_frame_height():
    cdef float res = ccimgui.igGetFrameHeight()
    return res

def get_frame_height_with_spacing():
    cdef float res = ccimgui.igGetFrameHeightWithSpacing()
    return res

def get_id_ptr(Any ptr_id):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_Ptr(ptr_id)
    return res

def get_id_str(str str_id):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_Str(_bytes(str_id))
    return res

def get_id_str_str(str str_id_begin, str str_id_end):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_StrStr(_bytes(str_id_begin), _bytes(str_id_end))
    return res

def get_io():
    cdef ccimgui.ImGuiIO* res = ccimgui.igGetIO()
    return res

def get_item_id():
    cdef ccimgui.ImGuiID res = ccimgui.igGetItemID()
    return res

def get_item_rect_max(Any pOut):
    ccimgui.igGetItemRectMax(pOut)

def get_item_rect_min(Any pOut):
    ccimgui.igGetItemRectMin(pOut)

def get_item_rect_size(Any pOut):
    ccimgui.igGetItemRectSize(pOut)

def get_key_index(Any key):
    cdef ccimgui.ImGuiKey res = ccimgui.igGetKeyIndex(key)
    return res

def get_key_name(Any key):
    cdef const char* res = ccimgui.igGetKeyName(key)
    return res

def get_key_pressed_amount(Any key, float repeat_delay, float rate):
    cdef int res = ccimgui.igGetKeyPressedAmount(key, repeat_delay, rate)
    return res

def get_main_viewport():
    cdef ccimgui.ImGuiViewport* res = ccimgui.igGetMainViewport()
    return res

def get_mouse_clicked_count(ccimgui.ImGuiMouseButton button):
    cdef int res = ccimgui.igGetMouseClickedCount(button)
    return res

def get_mouse_cursor():
    cdef ccimgui.ImGuiMouseCursor res = ccimgui.igGetMouseCursor()
    return res

def get_mouse_drag_delta(Any pOut, ccimgui.ImGuiMouseButton button, float lock_threshold):
    ccimgui.igGetMouseDragDelta(pOut, button, lock_threshold)

def get_mouse_pos(Any pOut):
    ccimgui.igGetMousePos(pOut)

def get_mouse_pos_on_opening_current_popup(Any pOut):
    ccimgui.igGetMousePosOnOpeningCurrentPopup(pOut)

def get_platform_io():
    cdef ccimgui.ImGuiPlatformIO* res = ccimgui.igGetPlatformIO()
    return res

def get_scroll_maxx():
    cdef float res = ccimgui.igGetScrollMaxX()
    return res

def get_scroll_maxy():
    cdef float res = ccimgui.igGetScrollMaxY()
    return res

def get_scrollx():
    cdef float res = ccimgui.igGetScrollX()
    return res

def get_scrolly():
    cdef float res = ccimgui.igGetScrollY()
    return res

def get_state_storage():
    cdef ccimgui.ImGuiStorage* res = ccimgui.igGetStateStorage()
    return res

def get_style():
    cdef ccimgui.ImGuiStyle* res = ccimgui.igGetStyle()
    return res

def get_style_color_name(ccimgui.ImGuiCol idx):
    cdef const char* res = ccimgui.igGetStyleColorName(idx)
    return res

def get_style_color_vec4(ccimgui.ImGuiCol idx):
    cdef ccimgui.ImVec4* res = ccimgui.igGetStyleColorVec4(idx)
    return res

def get_text_line_height():
    cdef float res = ccimgui.igGetTextLineHeight()
    return res

def get_text_line_height_with_spacing():
    cdef float res = ccimgui.igGetTextLineHeightWithSpacing()
    return res

def get_time():
    cdef double res = ccimgui.igGetTime()
    return res

def get_tree_node_to_label_spacing():
    cdef float res = ccimgui.igGetTreeNodeToLabelSpacing()
    return res

def get_version():
    cdef const char* res = ccimgui.igGetVersion()
    return res

def get_window_content_region_max(Any pOut):
    ccimgui.igGetWindowContentRegionMax(pOut)

def get_window_content_region_min(Any pOut):
    ccimgui.igGetWindowContentRegionMin(pOut)

def get_window_dock_id():
    cdef ccimgui.ImGuiID res = ccimgui.igGetWindowDockID()
    return res

def get_window_dpi_scale():
    cdef float res = ccimgui.igGetWindowDpiScale()
    return res

def get_window_draw_list():
    cdef ccimgui.ImDrawList* res = ccimgui.igGetWindowDrawList()
    return res

def get_window_height():
    cdef float res = ccimgui.igGetWindowHeight()
    return res

def get_window_pos(Any pOut):
    ccimgui.igGetWindowPos(pOut)

def get_window_size(Any pOut):
    ccimgui.igGetWindowSize(pOut)

def get_window_viewport():
    cdef ccimgui.ImGuiViewport* res = ccimgui.igGetWindowViewport()
    return res

def get_window_width():
    cdef float res = ccimgui.igGetWindowWidth()
    return res

def image(
    ccimgui.ImTextureID user_texture_id,
    tuple size,
    tuple uv0,
    tuple uv1,
    tuple tint_col,
    tuple border_col
):
    ccimgui.igImage(
        user_texture_id,
        size,
        uv0,
        uv1,
        tint_col,
        border_col
    )

def image_button(
    str str_id,
    ccimgui.ImTextureID user_texture_id,
    tuple size,
    tuple uv0,
    tuple uv1,
    tuple bg_col,
    tuple tint_col
):
    cdef ccimgui.bool res = ccimgui.igImageButton(
        _bytes(str_id),
        user_texture_id,
        size,
        uv0,
        uv1,
        bg_col,
        tint_col
    )
    return res

def indent(float indent_w):
    ccimgui.igIndent(indent_w)

def input_double(
    str label,
    Any value,
    Any step,
    Any step_fast,
    str format_,
    ccimgui.ImGuiInputTextFlags flags
):
    cdef ccimgui.bool res = ccimgui.igInputDouble(
        _bytes(label),
        value,
        step,
        step_fast,
        _bytes(format_),
        flags
    )
    return res

def input_float(
    str label,
    float value,
    float step,
    float step_fast,
    str format_,
    ccimgui.ImGuiInputTextFlags flags
):
    cdef ccimgui.bool res = ccimgui.igInputFloat(
        _bytes(label),
        value,
        step,
        step_fast,
        _bytes(format_),
        flags
    )
    return res

def input_float2(str label, float value0, float value1, str format_, ccimgui.ImGuiInputTextFlags flags):
    cdef float[2] io_float_value0 = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igInputFloat2(_bytes(label), <float*>&io_float_value0, _bytes(format_), flags)
    return res

def input_float3(
    str label,
    float value0,
    float value1,
    float value2,
    str format_,
    ccimgui.ImGuiInputTextFlags flags
):
    cdef float[3] io_float_value0 = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igInputFloat3(
        _bytes(label),
        <float*>&io_float_value0,
        _bytes(format_),
        flags
    )
    return res

def input_float4(
    str label,
    float value0,
    float value1,
    float value2,
    float value3,
    str format_,
    ccimgui.ImGuiInputTextFlags flags
):
    cdef float[4] io_float_value0 = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igInputFloat4(
        _bytes(label),
        <float*>&io_float_value0,
        _bytes(format_),
        flags
    )
    return res

def input_int(str label, int value, int step, int step_fast, ccimgui.ImGuiInputTextFlags flags):
    cdef ccimgui.bool res = ccimgui.igInputInt(_bytes(label), value, step, step_fast, flags)
    return res

def input_int2(str label, int value0, int value1, ccimgui.ImGuiInputTextFlags flags):
    cdef int[2] io_int_value0 = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igInputInt2(_bytes(label), <int*>&io_int_value0, flags)
    return res

def input_int3(str label, int value0, int value1, int value2, ccimgui.ImGuiInputTextFlags flags):
    cdef int[3] io_int_value0 = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igInputInt3(_bytes(label), <int*>&io_int_value0, flags)
    return res

def input_int4(
    str label,
    int value0,
    int value1,
    int value2,
    int value3,
    ccimgui.ImGuiInputTextFlags flags
):
    cdef int[4] io_int_value0 = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igInputInt4(
        _bytes(label),
        <int*>&io_int_value0,
        flags
    )
    return res

def input_scalar(
    str label,
    ccimgui.ImGuiDataType data_type,
    Any p_data,
    Any p_step,
    Any p_step_fast,
    str format_,
    ccimgui.ImGuiInputTextFlags flags
):
    cdef ccimgui.bool res = ccimgui.igInputScalar(
        _bytes(label),
        data_type,
        p_data,
        p_step,
        p_step_fast,
        _bytes(format_),
        flags
    )
    return res

def input_scalarn(
    str label,
    ccimgui.ImGuiDataType data_type,
    Any p_data,
    int components,
    Any p_step,
    Any p_step_fast,
    str format_,
    ccimgui.ImGuiInputTextFlags flags
):
    cdef ccimgui.bool res = ccimgui.igInputScalarN(
        _bytes(label),
        data_type,
        p_data,
        components,
        p_step,
        p_step_fast,
        _bytes(format_),
        flags
    )
    return res

def invisible_button(str str_id, tuple size, ccimgui.ImGuiButtonFlags flags):
    cdef ccimgui.bool res = ccimgui.igInvisibleButton(_bytes(str_id), size, flags)
    return res

def is_any_item_active():
    cdef ccimgui.bool res = ccimgui.igIsAnyItemActive()
    return res

def is_any_item_focused():
    cdef ccimgui.bool res = ccimgui.igIsAnyItemFocused()
    return res

def is_any_item_hovered():
    cdef ccimgui.bool res = ccimgui.igIsAnyItemHovered()
    return res

def is_any_mouse_down():
    cdef ccimgui.bool res = ccimgui.igIsAnyMouseDown()
    return res

def is_item_activated():
    cdef ccimgui.bool res = ccimgui.igIsItemActivated()
    return res

def is_item_active():
    cdef ccimgui.bool res = ccimgui.igIsItemActive()
    return res

def is_item_clicked(ccimgui.ImGuiMouseButton mouse_button):
    cdef ccimgui.bool res = ccimgui.igIsItemClicked(mouse_button)
    return res

def is_item_deactivated():
    cdef ccimgui.bool res = ccimgui.igIsItemDeactivated()
    return res

def is_item_deactivated_after_edit():
    cdef ccimgui.bool res = ccimgui.igIsItemDeactivatedAfterEdit()
    return res

def is_item_edited():
    cdef ccimgui.bool res = ccimgui.igIsItemEdited()
    return res

def is_item_focused():
    cdef ccimgui.bool res = ccimgui.igIsItemFocused()
    return res

def is_item_hovered(ccimgui.ImGuiHoveredFlags flags):
    cdef ccimgui.bool res = ccimgui.igIsItemHovered(flags)
    return res

def is_item_toggled_open():
    cdef ccimgui.bool res = ccimgui.igIsItemToggledOpen()
    return res

def is_item_visible():
    cdef ccimgui.bool res = ccimgui.igIsItemVisible()
    return res

def is_key_down(Any key):
    cdef ccimgui.bool res = ccimgui.igIsKeyDown(key)
    return res

def is_key_pressed(Any key, Any repeat):
    cdef ccimgui.bool res = ccimgui.igIsKeyPressed(key, repeat)
    return res

def is_key_released(Any key):
    cdef ccimgui.bool res = ccimgui.igIsKeyReleased(key)
    return res

def is_mouse_clicked(ccimgui.ImGuiMouseButton button, Any repeat):
    cdef ccimgui.bool res = ccimgui.igIsMouseClicked(button, repeat)
    return res

def is_mouse_double_clicked(ccimgui.ImGuiMouseButton button):
    cdef ccimgui.bool res = ccimgui.igIsMouseDoubleClicked(button)
    return res

def is_mouse_down(ccimgui.ImGuiMouseButton button):
    cdef ccimgui.bool res = ccimgui.igIsMouseDown(button)
    return res

def is_mouse_dragging(ccimgui.ImGuiMouseButton button, float lock_threshold):
    cdef ccimgui.bool res = ccimgui.igIsMouseDragging(button, lock_threshold)
    return res

def is_mouse_hovering_rect(tuple r_min, tuple r_max, Any clip):
    cdef ccimgui.bool res = ccimgui.igIsMouseHoveringRect(r_min, r_max, clip)
    return res

def is_mouse_pos_valid(Any mouse_pos):
    cdef ccimgui.bool res = ccimgui.igIsMousePosValid(mouse_pos)
    return res

def is_mouse_released(ccimgui.ImGuiMouseButton button):
    cdef ccimgui.bool res = ccimgui.igIsMouseReleased(button)
    return res

def is_popup_open(str str_id, ccimgui.ImGuiPopupFlags flags):
    cdef ccimgui.bool res = ccimgui.igIsPopupOpen(_bytes(str_id), flags)
    return res

def is_rect_visible_nil(tuple size):
    cdef ccimgui.bool res = ccimgui.igIsRectVisible_Nil(size)
    return res

def is_rect_visible_vec2(tuple rect_min, tuple rect_max):
    cdef ccimgui.bool res = ccimgui.igIsRectVisible_Vec2(rect_min, rect_max)
    return res

def is_window_appearing():
    cdef ccimgui.bool res = ccimgui.igIsWindowAppearing()
    return res

def is_window_collapsed():
    cdef ccimgui.bool res = ccimgui.igIsWindowCollapsed()
    return res

def is_window_docked():
    cdef ccimgui.bool res = ccimgui.igIsWindowDocked()
    return res

def is_window_focused(ccimgui.ImGuiFocusedFlags flags):
    cdef ccimgui.bool res = ccimgui.igIsWindowFocused(flags)
    return res

def is_window_hovered(ccimgui.ImGuiHoveredFlags flags):
    cdef ccimgui.bool res = ccimgui.igIsWindowHovered(flags)
    return res

def label_text(str label, str fmt):
    ccimgui.igLabelText(_bytes(label), _bytes(fmt))

def label_textv(str label, str fmt, str args):
    ccimgui.igLabelTextV(_bytes(label), _bytes(fmt), _bytes(args))

def list_box_fn_bool_ptr(
    str label,
    int current_item,
    Callable items_getter,
    Any data,
    int items_count,
    int height_in_items
):
    cdef ccimgui.bool res = ccimgui.igListBox_FnBoolPtr(
        _bytes(label),
        current_item,
        items_getter,
        data,
        items_count,
        height_in_items
    )
    return res

def list_box_str_arr(str label, int current_item, Any items, int items_count, int height_in_items):
    cdef ccimgui.bool res = ccimgui.igListBox_Str_arr(_bytes(label), current_item, items, items_count, height_in_items)
    return res

def load_ini_settings_from_disk(str ini_filename):
    ccimgui.igLoadIniSettingsFromDisk(_bytes(ini_filename))

def load_ini_settings_from_memory(str ini_data, Any ini_size):
    ccimgui.igLoadIniSettingsFromMemory(_bytes(ini_data), ini_size)

def log_buttons():
    ccimgui.igLogButtons()

def log_finish():
    ccimgui.igLogFinish()

def log_text(str fmt):
    ccimgui.igLogText(_bytes(fmt))

def log_textv(str fmt, str args):
    ccimgui.igLogTextV(_bytes(fmt), _bytes(args))

def log_to_clipboard(int auto_open_depth):
    ccimgui.igLogToClipboard(auto_open_depth)

def log_to_file(int auto_open_depth, str filename):
    ccimgui.igLogToFile(auto_open_depth, _bytes(filename))

def log_to_tty(int auto_open_depth):
    ccimgui.igLogToTTY(auto_open_depth)

def mem_alloc(Any size):
    cdef void* res = ccimgui.igMemAlloc(size)
    return res

def mem_free(Any ptr):
    ccimgui.igMemFree(ptr)

def menu_item_bool(str label, str shortcut, Any selected, Any enabled):
    cdef ccimgui.bool res = ccimgui.igMenuItem_Bool(_bytes(label), _bytes(shortcut), selected, enabled)
    return res

def menu_item_bool_ptr(str label, str shortcut, Any p_selected, Any enabled):
    cdef ccimgui.bool res = ccimgui.igMenuItem_BoolPtr(_bytes(label), _bytes(shortcut), p_selected, enabled)
    return res

def new_frame():
    ccimgui.igNewFrame()

def new_line():
    ccimgui.igNewLine()

def next_column():
    ccimgui.igNextColumn()

def open_popup_on_item_click(str str_id, ccimgui.ImGuiPopupFlags popup_flags):
    ccimgui.igOpenPopupOnItemClick(_bytes(str_id), popup_flags)

def open_popup_id(ccimgui.ImGuiID id_, ccimgui.ImGuiPopupFlags popup_flags):
    ccimgui.igOpenPopup_ID(id_, popup_flags)

def open_popup_str(str str_id, ccimgui.ImGuiPopupFlags popup_flags):
    ccimgui.igOpenPopup_Str(_bytes(str_id), popup_flags)

def plot_histogram_float_ptr(
    str label,
    Any values,
    int values_count,
    int values_offset,
    str overlay_text,
    float scale_min,
    float scale_max,
    tuple graph_size,
    int stride
):
    ccimgui.igPlotHistogram_FloatPtr(
        _bytes(label),
        values,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        graph_size,
        stride
    )

def plot_histogram_fn_float_ptr(
    str label,
    Callable values_getter,
    Any data,
    int values_count,
    int values_offset,
    str overlay_text,
    float scale_min,
    float scale_max,
    tuple graph_size
):
    ccimgui.igPlotHistogram_FnFloatPtr(
        _bytes(label),
        values_getter,
        data,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        graph_size
    )

def plot_lines_float_ptr(
    str label,
    Any values,
    int values_count,
    int values_offset,
    str overlay_text,
    float scale_min,
    float scale_max,
    tuple graph_size,
    int stride
):
    ccimgui.igPlotLines_FloatPtr(
        _bytes(label),
        values,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        graph_size,
        stride
    )

def plot_lines_fn_float_ptr(
    str label,
    Callable values_getter,
    Any data,
    int values_count,
    int values_offset,
    str overlay_text,
    float scale_min,
    float scale_max,
    tuple graph_size
):
    ccimgui.igPlotLines_FnFloatPtr(
        _bytes(label),
        values_getter,
        data,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        graph_size
    )

def pop_allow_keyboard_focus():
    ccimgui.igPopAllowKeyboardFocus()

def pop_button_repeat():
    ccimgui.igPopButtonRepeat()

def pop_clip_rect():
    ccimgui.igPopClipRect()

def pop_font():
    ccimgui.igPopFont()

def pop_id():
    ccimgui.igPopID()

def pop_item_width():
    ccimgui.igPopItemWidth()

def pop_style_color(int count):
    ccimgui.igPopStyleColor(count)

def pop_style_var(int count):
    ccimgui.igPopStyleVar(count)

def pop_text_wrap_pos():
    ccimgui.igPopTextWrapPos()

def progress_bar(float fraction, tuple size_arg, str overlay):
    ccimgui.igProgressBar(fraction, size_arg, _bytes(overlay))

def push_allow_keyboard_focus(Any allow_keyboard_focus):
    ccimgui.igPushAllowKeyboardFocus(allow_keyboard_focus)

def push_button_repeat(Any repeat):
    ccimgui.igPushButtonRepeat(repeat)

def push_clip_rect(tuple clip_rect_min, tuple clip_rect_max, Any intersect_with_current_clip_rect):
    ccimgui.igPushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect)

def push_font(Any font):
    ccimgui.igPushFont(font)

def push_id_int(int int_id):
    ccimgui.igPushID_Int(int_id)

def push_id_ptr(Any ptr_id):
    ccimgui.igPushID_Ptr(ptr_id)

def push_id_str(str str_id):
    ccimgui.igPushID_Str(_bytes(str_id))

def push_id_str_str(str str_id_begin, str str_id_end):
    ccimgui.igPushID_StrStr(_bytes(str_id_begin), _bytes(str_id_end))

def push_item_width(float item_width):
    ccimgui.igPushItemWidth(item_width)

def push_style_color_u32(ccimgui.ImGuiCol idx, ccimgui.ImU32 col):
    ccimgui.igPushStyleColor_U32(idx, col)

def push_style_color_vec4(ccimgui.ImGuiCol idx, tuple col):
    ccimgui.igPushStyleColor_Vec4(idx, col)

def push_style_var_float(ccimgui.ImGuiStyleVar idx, float val):
    ccimgui.igPushStyleVar_Float(idx, val)

def push_style_var_vec2(ccimgui.ImGuiStyleVar idx, tuple val):
    ccimgui.igPushStyleVar_Vec2(idx, val)

def push_text_wrap_pos(float wrap_local_pos_x):
    ccimgui.igPushTextWrapPos(wrap_local_pos_x)

def radio_button_bool(str label, Any active):
    cdef ccimgui.bool res = ccimgui.igRadioButton_Bool(_bytes(label), active)
    return res

def radio_button_int_ptr(str label, int value, int v_button):
    cdef ccimgui.bool res = ccimgui.igRadioButton_IntPtr(_bytes(label), value, v_button)
    return res

def render():
    ccimgui.igRender()

def render_platform_windows_default(Any platform_render_arg, Any renderer_render_arg):
    ccimgui.igRenderPlatformWindowsDefault(platform_render_arg, renderer_render_arg)

def reset_mouse_drag_delta(ccimgui.ImGuiMouseButton button):
    ccimgui.igResetMouseDragDelta(button)

def same_line(float offset_from_start_x, float spacing):
    ccimgui.igSameLine(offset_from_start_x, spacing)

def save_ini_settings_to_disk(str ini_filename):
    ccimgui.igSaveIniSettingsToDisk(_bytes(ini_filename))

def save_ini_settings_to_memory(Any out_ini_size):
    cdef const char* res = ccimgui.igSaveIniSettingsToMemory(out_ini_size)
    return res

def selectable_bool(str label, Any selected, ccimgui.ImGuiSelectableFlags flags, tuple size):
    cdef ccimgui.bool res = ccimgui.igSelectable_Bool(_bytes(label), selected, flags, size)
    return res

def selectable_bool_ptr(str label, Any p_selected, ccimgui.ImGuiSelectableFlags flags, tuple size):
    cdef ccimgui.bool res = ccimgui.igSelectable_BoolPtr(_bytes(label), p_selected, flags, size)
    return res

def separator():
    ccimgui.igSeparator()

def separator_text(str label):
    ccimgui.igSeparatorText(_bytes(label))

def set_clipboard_text(str text):
    ccimgui.igSetClipboardText(_bytes(text))

def set_color_edit_options(ccimgui.ImGuiColorEditFlags flags):
    ccimgui.igSetColorEditOptions(flags)

def set_column_offset(int column_index, float offset_x):
    ccimgui.igSetColumnOffset(column_index, offset_x)

def set_column_width(int column_index, float width):
    ccimgui.igSetColumnWidth(column_index, width)

def set_current_context(Any ctx):
    ccimgui.igSetCurrentContext(ctx)

def set_cursor_pos(tuple local_pos):
    ccimgui.igSetCursorPos(local_pos)

def set_cursor_posx(float local_x):
    ccimgui.igSetCursorPosX(local_x)

def set_cursor_posy(float local_y):
    ccimgui.igSetCursorPosY(local_y)

def set_cursor_screen_pos(tuple pos):
    ccimgui.igSetCursorScreenPos(pos)

def set_drag_drop_payload(str type_, Any data, Any sz, ccimgui.ImGuiCond cond):
    cdef ccimgui.bool res = ccimgui.igSetDragDropPayload(_bytes(type_), data, sz, cond)
    return res

def set_item_allow_overlap():
    ccimgui.igSetItemAllowOverlap()

def set_item_default_focus():
    ccimgui.igSetItemDefaultFocus()

def set_keyboard_focus_here(int offset):
    ccimgui.igSetKeyboardFocusHere(offset)

def set_mouse_cursor(ccimgui.ImGuiMouseCursor cursor_type):
    ccimgui.igSetMouseCursor(cursor_type)

def set_next_frame_want_capture_keyboard(Any want_capture_keyboard):
    ccimgui.igSetNextFrameWantCaptureKeyboard(want_capture_keyboard)

def set_next_frame_want_capture_mouse(Any want_capture_mouse):
    ccimgui.igSetNextFrameWantCaptureMouse(want_capture_mouse)

def set_next_item_open(Any is_open, ccimgui.ImGuiCond cond):
    ccimgui.igSetNextItemOpen(is_open, cond)

def set_next_item_width(float item_width):
    ccimgui.igSetNextItemWidth(item_width)

def set_next_window_bg_alpha(float alpha):
    ccimgui.igSetNextWindowBgAlpha(alpha)

def set_next_window_class(Any window_class):
    ccimgui.igSetNextWindowClass(window_class)

def set_next_window_collapsed(Any collapsed, ccimgui.ImGuiCond cond):
    ccimgui.igSetNextWindowCollapsed(collapsed, cond)

def set_next_window_content_size(tuple size):
    ccimgui.igSetNextWindowContentSize(size)

def set_next_window_dock_id(ccimgui.ImGuiID dock_id, ccimgui.ImGuiCond cond):
    ccimgui.igSetNextWindowDockID(dock_id, cond)

def set_next_window_focus():
    ccimgui.igSetNextWindowFocus()

def set_next_window_pos(tuple pos, ccimgui.ImGuiCond cond, tuple pivot):
    ccimgui.igSetNextWindowPos(pos, cond, pivot)

def set_next_window_scroll(tuple scroll):
    ccimgui.igSetNextWindowScroll(scroll)

def set_next_window_size(tuple size, ccimgui.ImGuiCond cond):
    ccimgui.igSetNextWindowSize(size, cond)

def set_next_window_viewport(ccimgui.ImGuiID viewport_id):
    ccimgui.igSetNextWindowViewport(viewport_id)

def set_scroll_from_posx(float local_x, float center_x_ratio):
    ccimgui.igSetScrollFromPosX(local_x, center_x_ratio)

def set_scroll_from_posy(float local_y, float center_y_ratio):
    ccimgui.igSetScrollFromPosY(local_y, center_y_ratio)

def set_scroll_herex(float center_x_ratio):
    ccimgui.igSetScrollHereX(center_x_ratio)

def set_scroll_herey(float center_y_ratio):
    ccimgui.igSetScrollHereY(center_y_ratio)

def set_scrollx(float scroll_x):
    ccimgui.igSetScrollX(scroll_x)

def set_scrolly(float scroll_y):
    ccimgui.igSetScrollY(scroll_y)

def set_state_storage(Any storage):
    ccimgui.igSetStateStorage(storage)

def set_tab_item_closed(str tab_or_docked_window_label):
    ccimgui.igSetTabItemClosed(_bytes(tab_or_docked_window_label))

def set_tooltip(str fmt):
    ccimgui.igSetTooltip(_bytes(fmt))

def set_tooltipv(str fmt, str args):
    ccimgui.igSetTooltipV(_bytes(fmt), _bytes(args))

def set_window_collapsed_bool(Any collapsed, ccimgui.ImGuiCond cond):
    ccimgui.igSetWindowCollapsed_Bool(collapsed, cond)

def set_window_collapsed_str(str name, Any collapsed, ccimgui.ImGuiCond cond):
    ccimgui.igSetWindowCollapsed_Str(_bytes(name), collapsed, cond)

def set_window_focus_nil():
    ccimgui.igSetWindowFocus_Nil()

def set_window_focus_str(str name):
    ccimgui.igSetWindowFocus_Str(_bytes(name))

def set_window_font_scale(float scale):
    ccimgui.igSetWindowFontScale(scale)

def set_window_pos_str(str name, tuple pos, ccimgui.ImGuiCond cond):
    ccimgui.igSetWindowPos_Str(_bytes(name), pos, cond)

def set_window_pos_vec2(tuple pos, ccimgui.ImGuiCond cond):
    ccimgui.igSetWindowPos_Vec2(pos, cond)

def set_window_size_str(str name, tuple size, ccimgui.ImGuiCond cond):
    ccimgui.igSetWindowSize_Str(_bytes(name), size, cond)

def set_window_size_vec2(tuple size, ccimgui.ImGuiCond cond):
    ccimgui.igSetWindowSize_Vec2(size, cond)

def show_about_window(Any p_open):
    ccimgui.igShowAboutWindow(p_open)

def show_debug_log_window(Any p_open):
    ccimgui.igShowDebugLogWindow(p_open)

def show_demo_window(Any p_open):
    ccimgui.igShowDemoWindow(p_open)

def show_font_selector(str label):
    ccimgui.igShowFontSelector(_bytes(label))

def show_metrics_window(Any p_open):
    ccimgui.igShowMetricsWindow(p_open)

def show_stack_tool_window(Any p_open):
    ccimgui.igShowStackToolWindow(p_open)

def show_style_editor(Any ref):
    ccimgui.igShowStyleEditor(ref)

def show_style_selector(str label):
    cdef ccimgui.bool res = ccimgui.igShowStyleSelector(_bytes(label))
    return res

def show_user_guide():
    ccimgui.igShowUserGuide()

def slider_angle(
    str label,
    float v_rad,
    float v_degrees_min,
    float v_degrees_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igSliderAngle(
        _bytes(label),
        v_rad,
        v_degrees_min,
        v_degrees_max,
        _bytes(format_),
        flags
    )
    return res

def slider_float(
    str label,
    float value,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igSliderFloat(
        _bytes(label),
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_float2(
    str label,
    float value0,
    float value1,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef float[2] io_float_value0 = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igSliderFloat2(
        _bytes(label),
        <float*>&io_float_value0,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_float3(
    str label,
    float value0,
    float value1,
    float value2,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef float[3] io_float_value0 = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igSliderFloat3(
        _bytes(label),
        <float*>&io_float_value0,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_float4(
    str label,
    float value0,
    float value1,
    float value2,
    float value3,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef float[4] io_float_value0 = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igSliderFloat4(
        _bytes(label),
        <float*>&io_float_value0,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_int(
    str label,
    int value,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igSliderInt(
        _bytes(label),
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_int2(
    str label,
    int value0,
    int value1,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef int[2] io_int_value0 = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igSliderInt2(
        _bytes(label),
        <int*>&io_int_value0,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_int3(
    str label,
    int value0,
    int value1,
    int value2,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef int[3] io_int_value0 = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igSliderInt3(
        _bytes(label),
        <int*>&io_int_value0,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_int4(
    str label,
    int value0,
    int value1,
    int value2,
    int value3,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef int[4] io_int_value0 = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igSliderInt4(
        _bytes(label),
        <int*>&io_int_value0,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def slider_scalar(
    str label,
    ccimgui.ImGuiDataType data_type,
    Any p_data,
    Any p_min,
    Any p_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igSliderScalar(
        _bytes(label),
        data_type,
        p_data,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res

def slider_scalarn(
    str label,
    ccimgui.ImGuiDataType data_type,
    Any p_data,
    int components,
    Any p_min,
    Any p_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igSliderScalarN(
        _bytes(label),
        data_type,
        p_data,
        components,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res

def small_button(str label):
    cdef ccimgui.bool res = ccimgui.igSmallButton(_bytes(label))
    return res

def spacing():
    ccimgui.igSpacing()

def style_colors_classic(Any dst):
    ccimgui.igStyleColorsClassic(dst)

def style_colors_dark(Any dst):
    ccimgui.igStyleColorsDark(dst)

def style_colors_light(Any dst):
    ccimgui.igStyleColorsLight(dst)

def tab_item_button(str label, ccimgui.ImGuiTabItemFlags flags):
    cdef ccimgui.bool res = ccimgui.igTabItemButton(_bytes(label), flags)
    return res

def table_get_column_count():
    cdef int res = ccimgui.igTableGetColumnCount()
    return res

def table_get_column_flags(int column_n):
    cdef ccimgui.ImGuiTableColumnFlags res = ccimgui.igTableGetColumnFlags(column_n)
    return res

def table_get_column_index():
    cdef int res = ccimgui.igTableGetColumnIndex()
    return res

def table_get_column_name(int column_n):
    cdef const char* res = ccimgui.igTableGetColumnName(column_n)
    return res

def table_get_row_index():
    cdef int res = ccimgui.igTableGetRowIndex()
    return res

def table_get_sort_specs():
    cdef ccimgui.ImGuiTableSortSpecs* res = ccimgui.igTableGetSortSpecs()
    return res

def table_header(str label):
    ccimgui.igTableHeader(_bytes(label))

def table_headers_row():
    ccimgui.igTableHeadersRow()

def table_next_column():
    cdef ccimgui.bool res = ccimgui.igTableNextColumn()
    return res

def table_next_row(ccimgui.ImGuiTableRowFlags row_flags, float min_row_height):
    ccimgui.igTableNextRow(row_flags, min_row_height)

def table_set_bg_color(ccimgui.ImGuiTableBgTarget target, ccimgui.ImU32 color, int column_n):
    ccimgui.igTableSetBgColor(target, color, column_n)

def table_set_column_enabled(int column_n, Any value):
    ccimgui.igTableSetColumnEnabled(column_n, value)

def table_set_column_index(int column_n):
    cdef ccimgui.bool res = ccimgui.igTableSetColumnIndex(column_n)
    return res

def table_setup_column(str label, ccimgui.ImGuiTableColumnFlags flags, float init_width_or_weight, ccimgui.ImGuiID user_id):
    ccimgui.igTableSetupColumn(_bytes(label), flags, init_width_or_weight, user_id)

def table_setup_scroll_freeze(int cols, int rows):
    ccimgui.igTableSetupScrollFreeze(cols, rows)

def text(str fmt):
    ccimgui.igText(_bytes(fmt))

def text_colored(tuple col, str fmt):
    ccimgui.igTextColored(col, _bytes(fmt))

def text_coloredv(tuple col, str fmt, str args):
    ccimgui.igTextColoredV(col, _bytes(fmt), _bytes(args))

def text_disabled(str fmt):
    ccimgui.igTextDisabled(_bytes(fmt))

def text_disabledv(str fmt, str args):
    ccimgui.igTextDisabledV(_bytes(fmt), _bytes(args))

def text_unformatted(str text, str text_end):
    ccimgui.igTextUnformatted(_bytes(text), _bytes(text_end))

def textv(str fmt, str args):
    ccimgui.igTextV(_bytes(fmt), _bytes(args))

def text_wrapped(str fmt):
    ccimgui.igTextWrapped(_bytes(fmt))

def text_wrappedv(str fmt, str args):
    ccimgui.igTextWrappedV(_bytes(fmt), _bytes(args))

def tree_node_ex_v_ptr(Any ptr_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt, str args):
    cdef ccimgui.bool res = ccimgui.igTreeNodeExV_Ptr(ptr_id, flags, _bytes(fmt), _bytes(args))
    return res

def tree_node_ex_v_str(str str_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt, str args):
    cdef ccimgui.bool res = ccimgui.igTreeNodeExV_Str(_bytes(str_id), flags, _bytes(fmt), _bytes(args))
    return res

def tree_node_ex_ptr(Any ptr_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt):
    cdef ccimgui.bool res = ccimgui.igTreeNodeEx_Ptr(ptr_id, flags, _bytes(fmt))
    return res

def tree_node_ex_str(str label, ccimgui.ImGuiTreeNodeFlags flags):
    cdef ccimgui.bool res = ccimgui.igTreeNodeEx_Str(_bytes(label), flags)
    return res

def tree_node_ex_str_str(str str_id, ccimgui.ImGuiTreeNodeFlags flags, str fmt):
    cdef ccimgui.bool res = ccimgui.igTreeNodeEx_StrStr(_bytes(str_id), flags, _bytes(fmt))
    return res

def tree_node_v_ptr(Any ptr_id, str fmt, str args):
    cdef ccimgui.bool res = ccimgui.igTreeNodeV_Ptr(ptr_id, _bytes(fmt), _bytes(args))
    return res

def tree_node_v_str(str str_id, str fmt, str args):
    cdef ccimgui.bool res = ccimgui.igTreeNodeV_Str(_bytes(str_id), _bytes(fmt), _bytes(args))
    return res

def tree_node_ptr(Any ptr_id, str fmt):
    cdef ccimgui.bool res = ccimgui.igTreeNode_Ptr(ptr_id, _bytes(fmt))
    return res

def tree_node_str(str label):
    cdef ccimgui.bool res = ccimgui.igTreeNode_Str(_bytes(label))
    return res

def tree_node_str_str(str str_id, str fmt):
    cdef ccimgui.bool res = ccimgui.igTreeNode_StrStr(_bytes(str_id), _bytes(fmt))
    return res

def tree_pop():
    ccimgui.igTreePop()

def tree_push_ptr(Any ptr_id):
    ccimgui.igTreePush_Ptr(ptr_id)

def tree_push_str(str str_id):
    ccimgui.igTreePush_Str(_bytes(str_id))

def unindent(float indent_w):
    ccimgui.igUnindent(indent_w)

def update_platform_windows():
    ccimgui.igUpdatePlatformWindows()

def v_slider_float(
    str label,
    tuple size,
    float value,
    float v_min,
    float v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igVSliderFloat(
        _bytes(label),
        size,
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def v_slider_int(
    str label,
    tuple size,
    int value,
    int v_min,
    int v_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igVSliderInt(
        _bytes(label),
        size,
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res

def v_slider_scalar(
    str label,
    tuple size,
    ccimgui.ImGuiDataType data_type,
    Any p_data,
    Any p_min,
    Any p_max,
    str format_,
    ccimgui.ImGuiSliderFlags flags
):
    cdef ccimgui.bool res = ccimgui.igVSliderScalar(
        _bytes(label),
        size,
        data_type,
        p_data,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res

def value_bool(str prefix, Any b):
    ccimgui.igValue_Bool(_bytes(prefix), b)

def value_float(str prefix, float value, str float_format):
    ccimgui.igValue_Float(_bytes(prefix), value, _bytes(float_format))

def value_int(str prefix, int value):
    ccimgui.igValue_Int(_bytes(prefix), value)

def value_uint(str prefix, Any value):
    ccimgui.igValue_Uint(_bytes(prefix), value)


cdef class _ImGuiListClipper:
    cdef ccimgui.ImGuiListClipper* _ptr
    
    @staticmethod
    cdef _ImGuiListClipper from_ptr(ccimgui.ImGuiListClipper* _ptr):
       cdef _ImGuiListClipper wrapper = _ImGuiListClipper.__new__(_ImGuiListClipper)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_list_clipper():
        cdef ccimgui.ImGuiListClipper* _ptr = ccimgui.ImGuiListClipper_ImGuiListClipper()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiListClipper.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiListClipper_destroy(self)

    def begin(self, int items_count, float items_height):
        ccimgui.ImGuiListClipper_Begin(self, items_count, items_height)

    def end(self):
        ccimgui.ImGuiListClipper_End(self)

    def force_display_range_by_indices(self, int item_min, int item_max):
        ccimgui.ImGuiListClipper_ForceDisplayRangeByIndices(self, item_min, item_max)

    def step(self):
        cdef ccimgui.bool res = ccimgui.ImGuiListClipper_Step(self)
        return res


cdef class _ImGuiOnceUponAFrame:
    cdef ccimgui.ImGuiOnceUponAFrame* _ptr
    
    @staticmethod
    cdef _ImGuiOnceUponAFrame from_ptr(ccimgui.ImGuiOnceUponAFrame* _ptr):
       cdef _ImGuiOnceUponAFrame wrapper = _ImGuiOnceUponAFrame.__new__(_ImGuiOnceUponAFrame)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_once_upon_a_frame():
        cdef ccimgui.ImGuiOnceUponAFrame* _ptr = ccimgui.ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiOnceUponAFrame.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiOnceUponAFrame_destroy(self)


cdef class _ImGuiPayload:
    cdef ccimgui.ImGuiPayload* _ptr
    
    @staticmethod
    cdef _ImGuiPayload from_ptr(ccimgui.ImGuiPayload* _ptr):
       cdef _ImGuiPayload wrapper = _ImGuiPayload.__new__(_ImGuiPayload)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_payload():
        cdef ccimgui.ImGuiPayload* _ptr = ccimgui.ImGuiPayload_ImGuiPayload()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiPayload.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiPayload_destroy(self)

    def clear(self):
        ccimgui.ImGuiPayload_Clear(self)

    def is_data_type(self, str type_):
        cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsDataType(self, _bytes(type_))
        return res

    def is_delivery(self):
        cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsDelivery(self)
        return res

    def is_preview(self):
        cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsPreview(self)
        return res


cdef class _ImGuiStoragePair:
    cdef ccimgui.ImGuiStoragePair* _ptr
    
    @staticmethod
    cdef _ImGuiStoragePair from_ptr(ccimgui.ImGuiStoragePair* _ptr):
       cdef _ImGuiStoragePair wrapper = _ImGuiStoragePair.__new__(_ImGuiStoragePair)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def float_(ccimgui.ImGuiID _key, float _val_f):
        cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Float(_key, _val_f)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiStoragePair.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def int_(ccimgui.ImGuiID _key, int _val_i):
        cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Int(_key, _val_i)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiStoragePair.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def ptr(ccimgui.ImGuiID _key, Any _val_p):
        cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Ptr(_key, _val_p)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiStoragePair.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiStoragePair_destroy(self)


cdef class _ImGuiTableColumnSortSpecs:
    cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr
    
    @staticmethod
    cdef _ImGuiTableColumnSortSpecs from_ptr(ccimgui.ImGuiTableColumnSortSpecs* _ptr):
       cdef _ImGuiTableColumnSortSpecs wrapper = _ImGuiTableColumnSortSpecs.__new__(_ImGuiTableColumnSortSpecs)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_table_column_sort_specs():
        cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr = ccimgui.ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiTableColumnSortSpecs.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiTableColumnSortSpecs_destroy(self)


cdef class _ImGuiTableSortSpecs:
    cdef ccimgui.ImGuiTableSortSpecs* _ptr
    
    @staticmethod
    cdef _ImGuiTableSortSpecs from_ptr(ccimgui.ImGuiTableSortSpecs* _ptr):
       cdef _ImGuiTableSortSpecs wrapper = _ImGuiTableSortSpecs.__new__(_ImGuiTableSortSpecs)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_table_sort_specs():
        cdef ccimgui.ImGuiTableSortSpecs* _ptr = ccimgui.ImGuiTableSortSpecs_ImGuiTableSortSpecs()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiTableSortSpecs.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiTableSortSpecs_destroy(self)


cdef class _ImGuiTextRange:
    cdef ccimgui.ImGuiTextRange* _ptr
    
    @staticmethod
    cdef _ImGuiTextRange from_ptr(ccimgui.ImGuiTextRange* _ptr):
       cdef _ImGuiTextRange wrapper = _ImGuiTextRange.__new__(_ImGuiTextRange)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def nil():
        cdef ccimgui.ImGuiTextRange* _ptr = ccimgui.ImGuiTextRange_ImGuiTextRange_Nil()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiTextRange.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def str_(str _b, str _e):
        cdef ccimgui.ImGuiTextRange* _ptr = ccimgui.ImGuiTextRange_ImGuiTextRange_Str(_bytes(_b), _bytes(_e))
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiTextRange.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiTextRange_destroy(self)

    def empty(self):
        cdef ccimgui.bool res = ccimgui.ImGuiTextRange_empty(self)
        return res

    def split(self, Any separator, Any out):
        ccimgui.ImGuiTextRange_split(self, separator, out)


cdef class _ImGuiWindowClass:
    cdef ccimgui.ImGuiWindowClass* _ptr
    
    @staticmethod
    cdef _ImGuiWindowClass from_ptr(ccimgui.ImGuiWindowClass* _ptr):
       cdef _ImGuiWindowClass wrapper = _ImGuiWindowClass.__new__(_ImGuiWindowClass)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_window_class():
        cdef ccimgui.ImGuiWindowClass* _ptr = ccimgui.ImGuiWindowClass_ImGuiWindowClass()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiWindowClass.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiWindowClass_destroy(self)


cdef class _ImVec2:
    cdef ccimgui.ImVec2* _ptr
    
    @staticmethod
    cdef _ImVec2 from_ptr(ccimgui.ImVec2* _ptr):
       cdef _ImVec2 wrapper = _ImVec2.__new__(_ImVec2)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def float_(float _x, float _y):
        cdef ccimgui.ImVec2* _ptr = ccimgui.ImVec2_ImVec2_Float(_x, _y)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImVec2.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def nil():
        cdef ccimgui.ImVec2* _ptr = ccimgui.ImVec2_ImVec2_Nil()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImVec2.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImVec2_destroy(self)


cdef class _ImVec4:
    cdef ccimgui.ImVec4* _ptr
    
    @staticmethod
    cdef _ImVec4 from_ptr(ccimgui.ImVec4* _ptr):
       cdef _ImVec4 wrapper = _ImVec4.__new__(_ImVec4)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def float_(float _x, float _y, float _z, float _w):
        cdef ccimgui.ImVec4* _ptr = ccimgui.ImVec4_ImVec4_Float(_x, _y, _z, _w)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImVec4.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def nil():
        cdef ccimgui.ImVec4* _ptr = ccimgui.ImVec4_ImVec4_Nil()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImVec4.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImVec4_destroy(self)


cdef class _ImColor:
    cdef ccimgui.ImColor* _ptr
    
    @staticmethod
    cdef _ImColor from_ptr(ccimgui.ImColor* _ptr):
       cdef _ImColor wrapper = _ImColor.__new__(_ImColor)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def float_(float r, float g, float b, float a):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Float(r, g, b, a)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImColor.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def int_(int r, int g, int b, int a):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Int(r, g, b, a)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImColor.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def nil():
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Nil()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImColor.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def u32(ccimgui.ImU32 rgba):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_U32(rgba)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImColor.from_ptr(_ptr)

    # Constructor
    @staticmethod
    def vec4(tuple col):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Vec4(col)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImColor.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImColor_destroy(self)

    def hsv(
        Any pOut,
        float h,
        float s,
        float value,
        float a
    ):
        ccimgui.ImColor_HSV(
            pOut,
            h,
            s,
            value,
            a
        )

    def set_hsv(
        self,
        float h,
        float s,
        float value,
        float a
    ):
        ccimgui.ImColor_SetHSV(
            self,
            h,
            s,
            value,
            a
        )


cdef class _ImDrawCmd:
    cdef ccimgui.ImDrawCmd* _ptr
    
    @staticmethod
    cdef _ImDrawCmd from_ptr(ccimgui.ImDrawCmd* _ptr):
       cdef _ImDrawCmd wrapper = _ImDrawCmd.__new__(_ImDrawCmd)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def draw_cmd():
        cdef ccimgui.ImDrawCmd* _ptr = ccimgui.ImDrawCmd_ImDrawCmd()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImDrawCmd.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImDrawCmd_destroy(self)

    def get_tex_id(self):
        cdef ccimgui.ImTextureID res = ccimgui.ImDrawCmd_GetTexID(self)
        return res


cdef class _ImDrawData:
    cdef ccimgui.ImDrawData* _ptr
    
    @staticmethod
    cdef _ImDrawData from_ptr(ccimgui.ImDrawData* _ptr):
       cdef _ImDrawData wrapper = _ImDrawData.__new__(_ImDrawData)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def draw_data():
        cdef ccimgui.ImDrawData* _ptr = ccimgui.ImDrawData_ImDrawData()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImDrawData.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImDrawData_destroy(self)

    def clear(self):
        ccimgui.ImDrawData_Clear(self)

    def de_index_all_buffers(self):
        ccimgui.ImDrawData_DeIndexAllBuffers(self)

    def scale_clip_rects(self, tuple fb_scale):
        ccimgui.ImDrawData_ScaleClipRects(self, fb_scale)


cdef class _ImDrawListSplitter:
    cdef ccimgui.ImDrawListSplitter* _ptr
    
    @staticmethod
    cdef _ImDrawListSplitter from_ptr(ccimgui.ImDrawListSplitter* _ptr):
       cdef _ImDrawListSplitter wrapper = _ImDrawListSplitter.__new__(_ImDrawListSplitter)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def draw_list_splitter():
        cdef ccimgui.ImDrawListSplitter* _ptr = ccimgui.ImDrawListSplitter_ImDrawListSplitter()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImDrawListSplitter.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImDrawListSplitter_destroy(self)

    def clear(self):
        ccimgui.ImDrawListSplitter_Clear(self)

    def clear_free_memory(self):
        ccimgui.ImDrawListSplitter_ClearFreeMemory(self)

    def merge(self, Any draw_list):
        ccimgui.ImDrawListSplitter_Merge(self, draw_list)

    def set_current_channel(self, Any draw_list, int channel_idx):
        ccimgui.ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)

    def split(self, Any draw_list, int count):
        ccimgui.ImDrawListSplitter_Split(self, draw_list, count)


cdef class _ImFont:
    cdef ccimgui.ImFont* _ptr
    
    @staticmethod
    cdef _ImFont from_ptr(ccimgui.ImFont* _ptr):
       cdef _ImFont wrapper = _ImFont.__new__(_ImFont)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def font():
        cdef ccimgui.ImFont* _ptr = ccimgui.ImFont_ImFont()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImFont.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImFont_destroy(self)

    def add_glyph(
        self,
        Any src_cfg,
        ccimgui.ImWchar c,
        float x0,
        float y0,
        float x1,
        float y1,
        float u0,
        float v0,
        float u1,
        float v1,
        float advance_x
    ):
        ccimgui.ImFont_AddGlyph(
            self,
            src_cfg,
            c,
            x0,
            y0,
            x1,
            y1,
            u0,
            v0,
            u1,
            v1,
            advance_x
        )

    def add_remap_char(self, ccimgui.ImWchar dst, ccimgui.ImWchar src, Any overwrite_dst):
        ccimgui.ImFont_AddRemapChar(self, dst, src, overwrite_dst)

    def build_lookup_table(self):
        ccimgui.ImFont_BuildLookupTable(self)

    def calc_text_sizea(
        Any pOut,
        Any self,
        float size,
        float max_width,
        float wrap_width,
        str text_begin,
        str text_end,
        Any remaining
    ):
        ccimgui.ImFont_CalcTextSizeA(
            pOut,
            self,
            size,
            max_width,
            wrap_width,
            _bytes(text_begin),
            _bytes(text_end),
            remaining
        )

    def calc_word_wrap_positiona(
        self,
        float scale,
        str text,
        str text_end,
        float wrap_width
    ):
        cdef const char* res = ccimgui.ImFont_CalcWordWrapPositionA(
            self,
            scale,
            _bytes(text),
            _bytes(text_end),
            wrap_width
        )
        return res

    def clear_output_data(self):
        ccimgui.ImFont_ClearOutputData(self)

    def find_glyph(self, ccimgui.ImWchar c):
        cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyph(self, c)
        return res

    def find_glyph_no_fallback(self, ccimgui.ImWchar c):
        cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyphNoFallback(self, c)
        return res

    def get_char_advance(self, ccimgui.ImWchar c):
        cdef float res = ccimgui.ImFont_GetCharAdvance(self, c)
        return res

    def get_debug_name(self):
        cdef const char* res = ccimgui.ImFont_GetDebugName(self)
        return res

    def grow_index(self, int new_size):
        ccimgui.ImFont_GrowIndex(self, new_size)

    def is_glyph_range_unused(self, Any c_begin, Any c_last):
        cdef ccimgui.bool res = ccimgui.ImFont_IsGlyphRangeUnused(self, c_begin, c_last)
        return res

    def is_loaded(self):
        cdef ccimgui.bool res = ccimgui.ImFont_IsLoaded(self)
        return res

    def render_char(
        self,
        Any draw_list,
        float size,
        tuple pos,
        ccimgui.ImU32 col,
        ccimgui.ImWchar c
    ):
        ccimgui.ImFont_RenderChar(
            self,
            draw_list,
            size,
            pos,
            col,
            c
        )

    def render_text(
        self,
        Any draw_list,
        float size,
        tuple pos,
        ccimgui.ImU32 col,
        tuple clip_rect,
        str text_begin,
        str text_end,
        float wrap_width,
        Any cpu_fine_clip
    ):
        ccimgui.ImFont_RenderText(
            self,
            draw_list,
            size,
            pos,
            col,
            clip_rect,
            _bytes(text_begin),
            _bytes(text_end),
            wrap_width,
            cpu_fine_clip
        )

    def set_glyph_visible(self, ccimgui.ImWchar c, Any visible):
        ccimgui.ImFont_SetGlyphVisible(self, c, visible)


cdef class _ImFontAtlas:
    cdef ccimgui.ImFontAtlas* _ptr
    
    @staticmethod
    cdef _ImFontAtlas from_ptr(ccimgui.ImFontAtlas* _ptr):
       cdef _ImFontAtlas wrapper = _ImFontAtlas.__new__(_ImFontAtlas)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def font_atlas():
        cdef ccimgui.ImFontAtlas* _ptr = ccimgui.ImFontAtlas_ImFontAtlas()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImFontAtlas.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImFontAtlas_destroy(self)

    def add_custom_rect_font_glyph(
        self,
        Any font,
        ccimgui.ImWchar id_,
        int width,
        int height,
        float advance_x,
        tuple offset
    ):
        cdef int res = ccimgui.ImFontAtlas_AddCustomRectFontGlyph(
            self,
            font,
            id_,
            width,
            height,
            advance_x,
            offset
        )
        return res

    def add_custom_rect_regular(self, int width, int height):
        cdef int res = ccimgui.ImFontAtlas_AddCustomRectRegular(self, width, height)
        return res

    def add_font(self, Any font_cfg):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFont(self, font_cfg)
        return res

    def add_font_default(self, Any font_cfg):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontDefault(self, font_cfg)
        return res

    def add_font_from_file_ttf(
        self,
        str filename,
        float size_pixels,
        Any font_cfg,
        Any glyph_ranges
    ):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromFileTTF(
            self,
            _bytes(filename),
            size_pixels,
            font_cfg,
            glyph_ranges
        )
        return res

    def add_font_from_memory_compressed_base_85ttf(
        self,
        str compressed_font_data_base85,
        float size_pixels,
        Any font_cfg,
        Any glyph_ranges
    ):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
            self,
            _bytes(compressed_font_data_base85),
            size_pixels,
            font_cfg,
            glyph_ranges
        )
        return res

    def add_font_from_memory_compressed_ttf(
        self,
        Any compressed_font_data,
        int compressed_font_size,
        float size_pixels,
        Any font_cfg,
        Any glyph_ranges
    ):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedTTF(
            self,
            compressed_font_data,
            compressed_font_size,
            size_pixels,
            font_cfg,
            glyph_ranges
        )
        return res

    def add_font_from_memory_ttf(
        self,
        Any font_data,
        int font_size,
        float size_pixels,
        Any font_cfg,
        Any glyph_ranges
    ):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryTTF(
            self,
            font_data,
            font_size,
            size_pixels,
            font_cfg,
            glyph_ranges
        )
        return res

    def build(self):
        cdef ccimgui.bool res = ccimgui.ImFontAtlas_Build(self)
        return res

    def calc_custom_rect_uv(self, Any rect, Any out_uv_min, Any out_uv_max):
        ccimgui.ImFontAtlas_CalcCustomRectUV(self, rect, out_uv_min, out_uv_max)

    def clear(self):
        ccimgui.ImFontAtlas_Clear(self)

    def clear_fonts(self):
        ccimgui.ImFontAtlas_ClearFonts(self)

    def clear_input_data(self):
        ccimgui.ImFontAtlas_ClearInputData(self)

    def clear_tex_data(self):
        ccimgui.ImFontAtlas_ClearTexData(self)

    def get_custom_rect_by_index(self, int index):
        cdef ccimgui.ImFontAtlasCustomRect* res = ccimgui.ImFontAtlas_GetCustomRectByIndex(self, index)
        return res

    def get_glyph_ranges_chinese_full(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseFull(self)
        return res

    def get_glyph_ranges_chinese_simplified_common(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
        return res

    def get_glyph_ranges_cyrillic(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesCyrillic(self)
        return res

    def get_glyph_ranges_default(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesDefault(self)
        return res

    def get_glyph_ranges_greek(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesGreek(self)
        return res

    def get_glyph_ranges_japanese(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesJapanese(self)
        return res

    def get_glyph_ranges_korean(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesKorean(self)
        return res

    def get_glyph_ranges_thai(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesThai(self)
        return res

    def get_glyph_ranges_vietnamese(self):
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesVietnamese(self)
        return res

    def get_mouse_cursor_tex_data(
        self,
        ccimgui.ImGuiMouseCursor cursor,
        Any out_offset,
        Any out_size,
        tuple out_uv_border0,
        tuple out_uv_border1,
        tuple out_uv_fill0,
        tuple out_uv_fill1
    ):
        cdef ImVec2[2] io_ImVec2_out_uv_border0 = [out_uv_border0, out_uv_border1]
        cdef ImVec2[2] io_ImVec2_out_uv_fill0 = [out_uv_fill0, out_uv_fill1]
        cdef ccimgui.bool res = ccimgui.ImFontAtlas_GetMouseCursorTexData(
            self,
            cursor,
            out_offset,
            out_size,
            <ImVec2*>&io_ImVec2_out_uv_border0,
            <ImVec2*>&io_ImVec2_out_uv_fill0
        )
        return res

    def get_tex_data_as_alpha8(
        self,
        Any out_pixels,
        int out_width,
        int out_height,
        int out_bytes_per_pixel
    ):
        ccimgui.ImFontAtlas_GetTexDataAsAlpha8(
            self,
            out_pixels,
            out_width,
            out_height,
            out_bytes_per_pixel
        )

    def get_tex_data_as_rgba32(
        self,
        Any out_pixels,
        int out_width,
        int out_height,
        int out_bytes_per_pixel
    ):
        ccimgui.ImFontAtlas_GetTexDataAsRGBA32(
            self,
            out_pixels,
            out_width,
            out_height,
            out_bytes_per_pixel
        )

    def is_built(self):
        cdef ccimgui.bool res = ccimgui.ImFontAtlas_IsBuilt(self)
        return res

    def set_tex_id(self, ccimgui.ImTextureID id_):
        ccimgui.ImFontAtlas_SetTexID(self, id_)


cdef class _ImFontAtlasCustomRect:
    cdef ccimgui.ImFontAtlasCustomRect* _ptr
    
    @staticmethod
    cdef _ImFontAtlasCustomRect from_ptr(ccimgui.ImFontAtlasCustomRect* _ptr):
       cdef _ImFontAtlasCustomRect wrapper = _ImFontAtlasCustomRect.__new__(_ImFontAtlasCustomRect)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def font_atlas_custom_rect():
        cdef ccimgui.ImFontAtlasCustomRect* _ptr = ccimgui.ImFontAtlasCustomRect_ImFontAtlasCustomRect()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImFontAtlasCustomRect.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImFontAtlasCustomRect_destroy(self)

    def is_packed(self):
        cdef ccimgui.bool res = ccimgui.ImFontAtlasCustomRect_IsPacked(self)
        return res


cdef class _ImFontConfig:
    cdef ccimgui.ImFontConfig* _ptr
    
    @staticmethod
    cdef _ImFontConfig from_ptr(ccimgui.ImFontConfig* _ptr):
       cdef _ImFontConfig wrapper = _ImFontConfig.__new__(_ImFontConfig)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def font_config():
        cdef ccimgui.ImFontConfig* _ptr = ccimgui.ImFontConfig_ImFontConfig()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImFontConfig.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImFontConfig_destroy(self)


cdef class _ImFontGlyphRangesBuilder:
    cdef ccimgui.ImFontGlyphRangesBuilder* _ptr
    
    @staticmethod
    cdef _ImFontGlyphRangesBuilder from_ptr(ccimgui.ImFontGlyphRangesBuilder* _ptr):
       cdef _ImFontGlyphRangesBuilder wrapper = _ImFontGlyphRangesBuilder.__new__(_ImFontGlyphRangesBuilder)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def font_glyph_ranges_builder():
        cdef ccimgui.ImFontGlyphRangesBuilder* _ptr = ccimgui.ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImFontGlyphRangesBuilder.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImFontGlyphRangesBuilder_destroy(self)

    def add_char(self, ccimgui.ImWchar c):
        ccimgui.ImFontGlyphRangesBuilder_AddChar(self, c)

    def add_ranges(self, Any ranges):
        ccimgui.ImFontGlyphRangesBuilder_AddRanges(self, ranges)

    def add_text(self, str text, str text_end):
        ccimgui.ImFontGlyphRangesBuilder_AddText(self, _bytes(text), _bytes(text_end))

    def build_ranges(self, Any out_ranges):
        ccimgui.ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)

    def clear(self):
        ccimgui.ImFontGlyphRangesBuilder_Clear(self)

    def get_bit(self, Any n):
        cdef ccimgui.bool res = ccimgui.ImFontGlyphRangesBuilder_GetBit(self, n)
        return res

    def set_bit(self, Any n):
        ccimgui.ImFontGlyphRangesBuilder_SetBit(self, n)


cdef class _ImGuiIO:
    cdef ccimgui.ImGuiIO* _ptr
    
    @staticmethod
    cdef _ImGuiIO from_ptr(ccimgui.ImGuiIO* _ptr):
       cdef _ImGuiIO wrapper = _ImGuiIO.__new__(_ImGuiIO)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_io():
        cdef ccimgui.ImGuiIO* _ptr = ccimgui.ImGuiIO_ImGuiIO()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiIO.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiIO_destroy(self)

    def add_focus_event(self, Any focused):
        ccimgui.ImGuiIO_AddFocusEvent(self, focused)

    def add_input_character(self, Any c):
        ccimgui.ImGuiIO_AddInputCharacter(self, c)

    def add_input_character_utf16(self, ccimgui.ImWchar16 c):
        ccimgui.ImGuiIO_AddInputCharacterUTF16(self, c)

    def add_input_characters_utf8(self, str str_):
        ccimgui.ImGuiIO_AddInputCharactersUTF8(self, _bytes(str_))

    def add_key_analog_event(self, Any key, Any down, float value):
        ccimgui.ImGuiIO_AddKeyAnalogEvent(self, key, down, value)

    def add_key_event(self, Any key, Any down):
        ccimgui.ImGuiIO_AddKeyEvent(self, key, down)

    def add_mouse_button_event(self, int button, Any down):
        ccimgui.ImGuiIO_AddMouseButtonEvent(self, button, down)

    def add_mouse_pos_event(self, float x, float y):
        ccimgui.ImGuiIO_AddMousePosEvent(self, x, y)

    def add_mouse_viewport_event(self, ccimgui.ImGuiID id_):
        ccimgui.ImGuiIO_AddMouseViewportEvent(self, id_)

    def add_mouse_wheel_event(self, float wheel_x, float wheel_y):
        ccimgui.ImGuiIO_AddMouseWheelEvent(self, wheel_x, wheel_y)

    def clear_input_characters(self):
        ccimgui.ImGuiIO_ClearInputCharacters(self)

    def clear_input_keys(self):
        ccimgui.ImGuiIO_ClearInputKeys(self)

    def set_app_accepting_events(self, Any accepting_events):
        ccimgui.ImGuiIO_SetAppAcceptingEvents(self, accepting_events)

    def set_key_event_native_data(
        self,
        Any key,
        int native_keycode,
        int native_scancode,
        int native_legacy_index
    ):
        ccimgui.ImGuiIO_SetKeyEventNativeData(
            self,
            key,
            native_keycode,
            native_scancode,
            native_legacy_index
        )


cdef class _ImGuiPlatformIO:
    cdef ccimgui.ImGuiPlatformIO* _ptr
    
    @staticmethod
    cdef _ImGuiPlatformIO from_ptr(ccimgui.ImGuiPlatformIO* _ptr):
       cdef _ImGuiPlatformIO wrapper = _ImGuiPlatformIO.__new__(_ImGuiPlatformIO)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_platform_io():
        cdef ccimgui.ImGuiPlatformIO* _ptr = ccimgui.ImGuiPlatformIO_ImGuiPlatformIO()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiPlatformIO.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiPlatformIO_destroy(self)


cdef class _ImGuiPlatformImeData:
    cdef ccimgui.ImGuiPlatformImeData* _ptr
    
    @staticmethod
    cdef _ImGuiPlatformImeData from_ptr(ccimgui.ImGuiPlatformImeData* _ptr):
       cdef _ImGuiPlatformImeData wrapper = _ImGuiPlatformImeData.__new__(_ImGuiPlatformImeData)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_platform_ime_data():
        cdef ccimgui.ImGuiPlatformImeData* _ptr = ccimgui.ImGuiPlatformImeData_ImGuiPlatformImeData()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiPlatformImeData.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiPlatformImeData_destroy(self)


cdef class _ImGuiPlatformMonitor:
    cdef ccimgui.ImGuiPlatformMonitor* _ptr
    
    @staticmethod
    cdef _ImGuiPlatformMonitor from_ptr(ccimgui.ImGuiPlatformMonitor* _ptr):
       cdef _ImGuiPlatformMonitor wrapper = _ImGuiPlatformMonitor.__new__(_ImGuiPlatformMonitor)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_platform_monitor():
        cdef ccimgui.ImGuiPlatformMonitor* _ptr = ccimgui.ImGuiPlatformMonitor_ImGuiPlatformMonitor()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiPlatformMonitor.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiPlatformMonitor_destroy(self)


cdef class _ImGuiStorage:
    cdef ccimgui.ImGuiStorage* _ptr
    
    @staticmethod
    cdef _ImGuiStorage from_ptr(ccimgui.ImGuiStorage* _ptr):
       cdef _ImGuiStorage wrapper = _ImGuiStorage.__new__(_ImGuiStorage)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    def build_sort_by_key(self):
        ccimgui.ImGuiStorage_BuildSortByKey(self)

    def clear(self):
        ccimgui.ImGuiStorage_Clear(self)

    def get_bool(self, ccimgui.ImGuiID key, Any default_val):
        cdef ccimgui.bool res = ccimgui.ImGuiStorage_GetBool(self, key, default_val)
        return res

    def get_bool_ref(self, ccimgui.ImGuiID key, Any default_val):
        cdef ccimgui.bool* res = ccimgui.ImGuiStorage_GetBoolRef(self, key, default_val)
        return res

    def get_float(self, ccimgui.ImGuiID key, float default_val):
        cdef float res = ccimgui.ImGuiStorage_GetFloat(self, key, default_val)
        return res

    def get_float_ref(self, ccimgui.ImGuiID key, float default_val):
        cdef float* res = ccimgui.ImGuiStorage_GetFloatRef(self, key, default_val)
        return res

    def get_int(self, ccimgui.ImGuiID key, int default_val):
        cdef int res = ccimgui.ImGuiStorage_GetInt(self, key, default_val)
        return res

    def get_int_ref(self, ccimgui.ImGuiID key, int default_val):
        cdef int* res = ccimgui.ImGuiStorage_GetIntRef(self, key, default_val)
        return res

    def get_void_ptr(self, ccimgui.ImGuiID key):
        cdef void* res = ccimgui.ImGuiStorage_GetVoidPtr(self, key)
        return res

    def get_void_ptr_ref(self, ccimgui.ImGuiID key, Any default_val):
        cdef void** res = ccimgui.ImGuiStorage_GetVoidPtrRef(self, key, default_val)
        return res

    def set_all_int(self, int val):
        ccimgui.ImGuiStorage_SetAllInt(self, val)

    def set_bool(self, ccimgui.ImGuiID key, Any val):
        ccimgui.ImGuiStorage_SetBool(self, key, val)

    def set_float(self, ccimgui.ImGuiID key, float val):
        ccimgui.ImGuiStorage_SetFloat(self, key, val)

    def set_int(self, ccimgui.ImGuiID key, int val):
        ccimgui.ImGuiStorage_SetInt(self, key, val)

    def set_void_ptr(self, ccimgui.ImGuiID key, Any val):
        ccimgui.ImGuiStorage_SetVoidPtr(self, key, val)


cdef class _ImGuiStyle:
    cdef ccimgui.ImGuiStyle* _ptr
    
    @staticmethod
    cdef _ImGuiStyle from_ptr(ccimgui.ImGuiStyle* _ptr):
       cdef _ImGuiStyle wrapper = _ImGuiStyle.__new__(_ImGuiStyle)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_style():
        cdef ccimgui.ImGuiStyle* _ptr = ccimgui.ImGuiStyle_ImGuiStyle()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiStyle.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiStyle_destroy(self)

    def scale_all_sizes(self, float scale_factor):
        ccimgui.ImGuiStyle_ScaleAllSizes(self, scale_factor)


cdef class _ImGuiTextBuffer:
    cdef ccimgui.ImGuiTextBuffer* _ptr
    
    @staticmethod
    cdef _ImGuiTextBuffer from_ptr(ccimgui.ImGuiTextBuffer* _ptr):
       cdef _ImGuiTextBuffer wrapper = _ImGuiTextBuffer.__new__(_ImGuiTextBuffer)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_text_buffer():
        cdef ccimgui.ImGuiTextBuffer* _ptr = ccimgui.ImGuiTextBuffer_ImGuiTextBuffer()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiTextBuffer.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiTextBuffer_destroy(self)

    def append(self, str str_, str str_end):
        ccimgui.ImGuiTextBuffer_append(self, _bytes(str_), _bytes(str_end))

    def appendf(self, str fmt):
        ccimgui.ImGuiTextBuffer_appendf(self, _bytes(fmt))

    def appendfv(self, str fmt, str args):
        ccimgui.ImGuiTextBuffer_appendfv(self, _bytes(fmt), _bytes(args))

    def begin(self):
        cdef const char* res = ccimgui.ImGuiTextBuffer_begin(self)
        return res

    def c_str(self):
        cdef const char* res = ccimgui.ImGuiTextBuffer_c_str(self)
        return res

    def clear(self):
        ccimgui.ImGuiTextBuffer_clear(self)

    def empty(self):
        cdef ccimgui.bool res = ccimgui.ImGuiTextBuffer_empty(self)
        return res

    def end(self):
        cdef const char* res = ccimgui.ImGuiTextBuffer_end(self)
        return res

    def reserve(self, int capacity):
        ccimgui.ImGuiTextBuffer_reserve(self, capacity)

    def size(self):
        cdef int res = ccimgui.ImGuiTextBuffer_size(self)
        return res


cdef class _ImGuiTextFilter:
    cdef ccimgui.ImGuiTextFilter* _ptr
    
    @staticmethod
    cdef _ImGuiTextFilter from_ptr(ccimgui.ImGuiTextFilter* _ptr):
       cdef _ImGuiTextFilter wrapper = _ImGuiTextFilter.__new__(_ImGuiTextFilter)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_text_filter(str default_filter):
        cdef ccimgui.ImGuiTextFilter* _ptr = ccimgui.ImGuiTextFilter_ImGuiTextFilter(_bytes(default_filter))
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiTextFilter.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiTextFilter_destroy(self)

    def build(self):
        ccimgui.ImGuiTextFilter_Build(self)

    def clear(self):
        ccimgui.ImGuiTextFilter_Clear(self)

    def draw(self, str label, float width):
        cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_Draw(self, _bytes(label), width)
        return res

    def is_active(self):
        cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_IsActive(self)
        return res

    def pass_filter(self, str text, str text_end):
        cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_PassFilter(self, _bytes(text), _bytes(text_end))
        return res


cdef class _ImGuiViewport:
    cdef ccimgui.ImGuiViewport* _ptr
    
    @staticmethod
    cdef _ImGuiViewport from_ptr(ccimgui.ImGuiViewport* _ptr):
       cdef _ImGuiViewport wrapper = _ImGuiViewport.__new__(_ImGuiViewport)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def gui_viewport():
        cdef ccimgui.ImGuiViewport* _ptr = ccimgui.ImGuiViewport_ImGuiViewport()
        if _ptr is NULL:
            raise MemoryError
        
        return _ImGuiViewport.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImGuiViewport_destroy(self)

    def get_center(Any pOut, Any self):
        ccimgui.ImGuiViewport_GetCenter(pOut, self)

    def get_work_center(Any pOut, Any self):
        ccimgui.ImGuiViewport_GetWorkCenter(pOut, self)


cdef class _ImDrawList:
    cdef ccimgui.ImDrawList* _ptr
    
    @staticmethod
    cdef _ImDrawList from_ptr(ccimgui.ImDrawList* _ptr):
       cdef _ImDrawList wrapper = _ImDrawList.__new__(_ImDrawList)
       wrapper._ptr = _ptr
       return wrapper
    
    def __init__(self):
        raise TypeError('This class cannot be instantiated directly.')

    # Constructor
    @staticmethod
    def draw_list(Any shared_data):
        cdef ccimgui.ImDrawList* _ptr = ccimgui.ImDrawList_ImDrawList(shared_data)
        if _ptr is NULL:
            raise MemoryError
        
        return _ImDrawList.from_ptr(_ptr)

    def destroy(self):
        ccimgui.ImDrawList_destroy(self)

    def add_bezier_cubic(
        self,
        tuple p1,
        tuple p2,
        tuple p3,
        tuple p4,
        ccimgui.ImU32 col,
        float thickness,
        int num_segments
    ):
        ccimgui.ImDrawList_AddBezierCubic(
            self,
            p1,
            p2,
            p3,
            p4,
            col,
            thickness,
            num_segments
        )

    def add_bezier_quadratic(
        self,
        tuple p1,
        tuple p2,
        tuple p3,
        ccimgui.ImU32 col,
        float thickness,
        int num_segments
    ):
        ccimgui.ImDrawList_AddBezierQuadratic(
            self,
            p1,
            p2,
            p3,
            col,
            thickness,
            num_segments
        )

    def add_circle(
        self,
        tuple center,
        float radius,
        ccimgui.ImU32 col,
        int num_segments,
        float thickness
    ):
        ccimgui.ImDrawList_AddCircle(
            self,
            center,
            radius,
            col,
            num_segments,
            thickness
        )

    def add_circle_filled(
        self,
        tuple center,
        float radius,
        ccimgui.ImU32 col,
        int num_segments
    ):
        ccimgui.ImDrawList_AddCircleFilled(
            self,
            center,
            radius,
            col,
            num_segments
        )

    def add_convex_poly_filled(self, Any points, int num_points, ccimgui.ImU32 col):
        ccimgui.ImDrawList_AddConvexPolyFilled(self, points, num_points, col)

    def add_draw_cmd(self):
        ccimgui.ImDrawList_AddDrawCmd(self)

    def add_image(
        self,
        ccimgui.ImTextureID user_texture_id,
        tuple p_min,
        tuple p_max,
        tuple uv_min,
        tuple uv_max,
        ccimgui.ImU32 col
    ):
        ccimgui.ImDrawList_AddImage(
            self,
            user_texture_id,
            p_min,
            p_max,
            uv_min,
            uv_max,
            col
        )

    def add_image_quad(
        self,
        ccimgui.ImTextureID user_texture_id,
        tuple p1,
        tuple p2,
        tuple p3,
        tuple p4,
        tuple uv1,
        tuple uv2,
        tuple uv3,
        tuple uv4,
        ccimgui.ImU32 col
    ):
        ccimgui.ImDrawList_AddImageQuad(
            self,
            user_texture_id,
            p1,
            p2,
            p3,
            p4,
            uv1,
            uv2,
            uv3,
            uv4,
            col
        )

    def add_image_rounded(
        self,
        ccimgui.ImTextureID user_texture_id,
        tuple p_min,
        tuple p_max,
        tuple uv_min,
        tuple uv_max,
        ccimgui.ImU32 col,
        float rounding,
        ccimgui.ImDrawFlags flags
    ):
        ccimgui.ImDrawList_AddImageRounded(
            self,
            user_texture_id,
            p_min,
            p_max,
            uv_min,
            uv_max,
            col,
            rounding,
            flags
        )

    def add_line(
        self,
        tuple p1,
        tuple p2,
        ccimgui.ImU32 col,
        float thickness
    ):
        ccimgui.ImDrawList_AddLine(
            self,
            p1,
            p2,
            col,
            thickness
        )

    def add_ngon(
        self,
        tuple center,
        float radius,
        ccimgui.ImU32 col,
        int num_segments,
        float thickness
    ):
        ccimgui.ImDrawList_AddNgon(
            self,
            center,
            radius,
            col,
            num_segments,
            thickness
        )

    def add_ngon_filled(
        self,
        tuple center,
        float radius,
        ccimgui.ImU32 col,
        int num_segments
    ):
        ccimgui.ImDrawList_AddNgonFilled(
            self,
            center,
            radius,
            col,
            num_segments
        )

    def add_polyline(
        self,
        Any points,
        int num_points,
        ccimgui.ImU32 col,
        ccimgui.ImDrawFlags flags,
        float thickness
    ):
        ccimgui.ImDrawList_AddPolyline(
            self,
            points,
            num_points,
            col,
            flags,
            thickness
        )

    def add_quad(
        self,
        tuple p1,
        tuple p2,
        tuple p3,
        tuple p4,
        ccimgui.ImU32 col,
        float thickness
    ):
        ccimgui.ImDrawList_AddQuad(
            self,
            p1,
            p2,
            p3,
            p4,
            col,
            thickness
        )

    def add_quad_filled(
        self,
        tuple p1,
        tuple p2,
        tuple p3,
        tuple p4,
        ccimgui.ImU32 col
    ):
        ccimgui.ImDrawList_AddQuadFilled(
            self,
            p1,
            p2,
            p3,
            p4,
            col
        )

    def add_rect(
        self,
        tuple p_min,
        tuple p_max,
        ccimgui.ImU32 col,
        float rounding,
        ccimgui.ImDrawFlags flags,
        float thickness
    ):
        ccimgui.ImDrawList_AddRect(
            self,
            p_min,
            p_max,
            col,
            rounding,
            flags,
            thickness
        )

    def add_rect_filled(
        self,
        tuple p_min,
        tuple p_max,
        ccimgui.ImU32 col,
        float rounding,
        ccimgui.ImDrawFlags flags
    ):
        ccimgui.ImDrawList_AddRectFilled(
            self,
            p_min,
            p_max,
            col,
            rounding,
            flags
        )

    def add_rect_filled_multi_color(
        self,
        tuple p_min,
        tuple p_max,
        ccimgui.ImU32 col_upr_left,
        ccimgui.ImU32 col_upr_right,
        ccimgui.ImU32 col_bot_right,
        ccimgui.ImU32 col_bot_left
    ):
        ccimgui.ImDrawList_AddRectFilledMultiColor(
            self,
            p_min,
            p_max,
            col_upr_left,
            col_upr_right,
            col_bot_right,
            col_bot_left
        )

    def add_text_font_ptr(
        self,
        Any font,
        float font_size,
        tuple pos,
        ccimgui.ImU32 col,
        str text_begin,
        str text_end,
        float wrap_width,
        Any cpu_fine_clip_rect
    ):
        ccimgui.ImDrawList_AddText_FontPtr(
            self,
            font,
            font_size,
            pos,
            col,
            _bytes(text_begin),
            _bytes(text_end),
            wrap_width,
            cpu_fine_clip_rect
        )

    def add_text_vec2(
        self,
        tuple pos,
        ccimgui.ImU32 col,
        str text_begin,
        str text_end
    ):
        ccimgui.ImDrawList_AddText_Vec2(
            self,
            pos,
            col,
            _bytes(text_begin),
            _bytes(text_end)
        )

    def add_triangle(
        self,
        tuple p1,
        tuple p2,
        tuple p3,
        ccimgui.ImU32 col,
        float thickness
    ):
        ccimgui.ImDrawList_AddTriangle(
            self,
            p1,
            p2,
            p3,
            col,
            thickness
        )

    def add_triangle_filled(
        self,
        tuple p1,
        tuple p2,
        tuple p3,
        ccimgui.ImU32 col
    ):
        ccimgui.ImDrawList_AddTriangleFilled(
            self,
            p1,
            p2,
            p3,
            col
        )

    def channels_merge(self):
        ccimgui.ImDrawList_ChannelsMerge(self)

    def channels_set_current(self, int n):
        ccimgui.ImDrawList_ChannelsSetCurrent(self, n)

    def channels_split(self, int count):
        ccimgui.ImDrawList_ChannelsSplit(self, count)

    def clone_output(self):
        cdef ccimgui.ImDrawList* res = ccimgui.ImDrawList_CloneOutput(self)
        return res

    def get_clip_rect_max(Any pOut, Any self):
        ccimgui.ImDrawList_GetClipRectMax(pOut, self)

    def get_clip_rect_min(Any pOut, Any self):
        ccimgui.ImDrawList_GetClipRectMin(pOut, self)

    def path_arc_to(
        self,
        tuple center,
        float radius,
        float a_min,
        float a_max,
        int num_segments
    ):
        ccimgui.ImDrawList_PathArcTo(
            self,
            center,
            radius,
            a_min,
            a_max,
            num_segments
        )

    def path_arc_to_fast(
        self,
        tuple center,
        float radius,
        int a_min_of_12,
        int a_max_of_12
    ):
        ccimgui.ImDrawList_PathArcToFast(
            self,
            center,
            radius,
            a_min_of_12,
            a_max_of_12
        )

    def path_bezier_cubic_curve_to(
        self,
        tuple p2,
        tuple p3,
        tuple p4,
        int num_segments
    ):
        ccimgui.ImDrawList_PathBezierCubicCurveTo(
            self,
            p2,
            p3,
            p4,
            num_segments
        )

    def path_bezier_quadratic_curve_to(self, tuple p2, tuple p3, int num_segments):
        ccimgui.ImDrawList_PathBezierQuadraticCurveTo(self, p2, p3, num_segments)

    def path_clear(self):
        ccimgui.ImDrawList_PathClear(self)

    def path_fill_convex(self, ccimgui.ImU32 col):
        ccimgui.ImDrawList_PathFillConvex(self, col)

    def path_line_to(self, tuple pos):
        ccimgui.ImDrawList_PathLineTo(self, pos)

    def path_line_to_merge_duplicate(self, tuple pos):
        ccimgui.ImDrawList_PathLineToMergeDuplicate(self, pos)

    def path_rect(
        self,
        tuple rect_min,
        tuple rect_max,
        float rounding,
        ccimgui.ImDrawFlags flags
    ):
        ccimgui.ImDrawList_PathRect(
            self,
            rect_min,
            rect_max,
            rounding,
            flags
        )

    def path_stroke(self, ccimgui.ImU32 col, ccimgui.ImDrawFlags flags, float thickness):
        ccimgui.ImDrawList_PathStroke(self, col, flags, thickness)

    def pop_clip_rect(self):
        ccimgui.ImDrawList_PopClipRect(self)

    def pop_texture_id(self):
        ccimgui.ImDrawList_PopTextureID(self)

    def prim_quad_uv(
        self,
        tuple a,
        tuple b,
        tuple c,
        tuple d,
        tuple uv_a,
        tuple uv_b,
        tuple uv_c,
        tuple uv_d,
        ccimgui.ImU32 col
    ):
        ccimgui.ImDrawList_PrimQuadUV(
            self,
            a,
            b,
            c,
            d,
            uv_a,
            uv_b,
            uv_c,
            uv_d,
            col
        )

    def prim_rect(self, tuple a, tuple b, ccimgui.ImU32 col):
        ccimgui.ImDrawList_PrimRect(self, a, b, col)

    def prim_rect_uv(
        self,
        tuple a,
        tuple b,
        tuple uv_a,
        tuple uv_b,
        ccimgui.ImU32 col
    ):
        ccimgui.ImDrawList_PrimRectUV(
            self,
            a,
            b,
            uv_a,
            uv_b,
            col
        )

    def prim_reserve(self, int idx_count, int vtx_count):
        ccimgui.ImDrawList_PrimReserve(self, idx_count, vtx_count)

    def prim_unreserve(self, int idx_count, int vtx_count):
        ccimgui.ImDrawList_PrimUnreserve(self, idx_count, vtx_count)

    def prim_vtx(self, tuple pos, tuple uv, ccimgui.ImU32 col):
        ccimgui.ImDrawList_PrimVtx(self, pos, uv, col)

    def prim_write_idx(self, ccimgui.ImDrawIdx idx):
        ccimgui.ImDrawList_PrimWriteIdx(self, idx)

    def prim_write_vtx(self, tuple pos, tuple uv, ccimgui.ImU32 col):
        ccimgui.ImDrawList_PrimWriteVtx(self, pos, uv, col)

    def push_clip_rect(self, tuple clip_rect_min, tuple clip_rect_max, Any intersect_with_current_clip_rect):
        ccimgui.ImDrawList_PushClipRect(self, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect)

    def push_clip_rect_full_screen(self):
        ccimgui.ImDrawList_PushClipRectFullScreen(self)

    def push_texture_id(self, ccimgui.ImTextureID texture_id):
        ccimgui.ImDrawList_PushTextureID(self, texture_id)

    def _calc_circle_auto_segment_count(self, float radius):
        cdef int res = ccimgui.ImDrawList__CalcCircleAutoSegmentCount(self, radius)
        return res

    def _clear_free_memory(self):
        ccimgui.ImDrawList__ClearFreeMemory(self)

    def _on_changed_clip_rect(self):
        ccimgui.ImDrawList__OnChangedClipRect(self)

    def _on_changed_texture_id(self):
        ccimgui.ImDrawList__OnChangedTextureID(self)

    def _on_changed_vtx_offset(self):
        ccimgui.ImDrawList__OnChangedVtxOffset(self)

    def _path_arc_to_fast_ex(
        self,
        tuple center,
        float radius,
        int a_min_sample,
        int a_max_sample,
        int a_step
    ):
        ccimgui.ImDrawList__PathArcToFastEx(
            self,
            center,
            radius,
            a_min_sample,
            a_max_sample,
            a_step
        )

    def _path_arc_ton(
        self,
        tuple center,
        float radius,
        float a_min,
        float a_max,
        int num_segments
    ):
        ccimgui.ImDrawList__PathArcToN(
            self,
            center,
            radius,
            a_min,
            a_max,
            num_segments
        )

    def _pop_unused_draw_cmd(self):
        ccimgui.ImDrawList__PopUnusedDrawCmd(self)

    def _reset_for_new_frame(self):
        ccimgui.ImDrawList__ResetForNewFrame(self)

    def _try_merge_draw_cmds(self):
        ccimgui.ImDrawList__TryMergeDrawCmds(self)


