typedef ImWchar16 ImWchar;
typedef enum{ImDrawFlags_None,ImDrawFlags_Closed,ImDrawFlags_RoundCornersTopLeft,ImDrawFlags_RoundCornersTopRight,ImDrawFlags_RoundCornersBottomLeft,ImDrawFlags_RoundCornersBottomRight,ImDrawFlags_RoundCornersNone,ImDrawFlags_RoundCornersTop,ImDrawFlags_RoundCornersBottom,ImDrawFlags_RoundCornersLeft,ImDrawFlags_RoundCornersRight,ImDrawFlags_RoundCornersAll,ImDrawFlags_RoundCornersDefault_,ImDrawFlags_RoundCornersMask_,}ImDrawFlags_;
typedef enum{ImDrawListFlags_None,ImDrawListFlags_AntiAliasedLines,ImDrawListFlags_AntiAliasedLinesUseTex,ImDrawListFlags_AntiAliasedFill,ImDrawListFlags_AllowVtxOffset,}ImDrawListFlags_;
typedef enum{ImFontAtlasFlags_None,ImFontAtlasFlags_NoPowerOfTwoHeight,ImFontAtlasFlags_NoMouseCursors,ImFontAtlasFlags_NoBakedLines,}ImFontAtlasFlags_;
typedef enum{ImGuiBackendFlags_None,ImGuiBackendFlags_HasGamepad,ImGuiBackendFlags_HasMouseCursors,ImGuiBackendFlags_HasSetMousePos,ImGuiBackendFlags_RendererHasVtxOffset,ImGuiBackendFlags_PlatformHasViewports,ImGuiBackendFlags_HasMouseHoveredViewport,ImGuiBackendFlags_RendererHasViewports,}ImGuiBackendFlags_;
typedef enum{ImGuiButtonFlags_None,ImGuiButtonFlags_MouseButtonLeft,ImGuiButtonFlags_MouseButtonRight,ImGuiButtonFlags_MouseButtonMiddle,ImGuiButtonFlags_MouseButtonMask_,ImGuiButtonFlags_MouseButtonDefault_,}ImGuiButtonFlags_;
typedef enum{ImGuiCol_Text,ImGuiCol_TextDisabled,ImGuiCol_WindowBg,ImGuiCol_ChildBg,ImGuiCol_PopupBg,ImGuiCol_Border,ImGuiCol_BorderShadow,ImGuiCol_FrameBg,ImGuiCol_FrameBgHovered,ImGuiCol_FrameBgActive,ImGuiCol_TitleBg,ImGuiCol_TitleBgActive,ImGuiCol_TitleBgCollapsed,ImGuiCol_MenuBarBg,ImGuiCol_ScrollbarBg,ImGuiCol_ScrollbarGrab,ImGuiCol_ScrollbarGrabHovered,ImGuiCol_ScrollbarGrabActive,ImGuiCol_CheckMark,ImGuiCol_SliderGrab,ImGuiCol_SliderGrabActive,ImGuiCol_Button,ImGuiCol_ButtonHovered,ImGuiCol_ButtonActive,ImGuiCol_Header,ImGuiCol_HeaderHovered,ImGuiCol_HeaderActive,ImGuiCol_Separator,ImGuiCol_SeparatorHovered,ImGuiCol_SeparatorActive,ImGuiCol_ResizeGrip,ImGuiCol_ResizeGripHovered,ImGuiCol_ResizeGripActive,ImGuiCol_Tab,ImGuiCol_TabHovered,ImGuiCol_TabActive,ImGuiCol_TabUnfocused,ImGuiCol_TabUnfocusedActive,ImGuiCol_DockingPreview,ImGuiCol_DockingEmptyBg,ImGuiCol_PlotLines,ImGuiCol_PlotLinesHovered,ImGuiCol_PlotHistogram,ImGuiCol_PlotHistogramHovered,ImGuiCol_TableHeaderBg,ImGuiCol_TableBorderStrong,ImGuiCol_TableBorderLight,ImGuiCol_TableRowBg,ImGuiCol_TableRowBgAlt,ImGuiCol_TextSelectedBg,ImGuiCol_DragDropTarget,ImGuiCol_NavHighlight,ImGuiCol_NavWindowingHighlight,ImGuiCol_NavWindowingDimBg,ImGuiCol_ModalWindowDimBg,ImGuiCol_COUNT}ImGuiCol_;
typedef enum{ImGuiColorEditFlags_None,ImGuiColorEditFlags_NoAlpha,ImGuiColorEditFlags_NoPicker,ImGuiColorEditFlags_NoOptions,ImGuiColorEditFlags_NoSmallPreview,ImGuiColorEditFlags_NoInputs,ImGuiColorEditFlags_NoTooltip,ImGuiColorEditFlags_NoLabel,ImGuiColorEditFlags_NoSidePreview,ImGuiColorEditFlags_NoDragDrop,ImGuiColorEditFlags_NoBorder,ImGuiColorEditFlags_AlphaBar,ImGuiColorEditFlags_AlphaPreview,ImGuiColorEditFlags_AlphaPreviewHalf,ImGuiColorEditFlags_HDR,ImGuiColorEditFlags_DisplayRGB,ImGuiColorEditFlags_DisplayHSV,ImGuiColorEditFlags_DisplayHex,ImGuiColorEditFlags_Uint8,ImGuiColorEditFlags_Float,ImGuiColorEditFlags_PickerHueBar,ImGuiColorEditFlags_PickerHueWheel,ImGuiColorEditFlags_InputRGB,ImGuiColorEditFlags_InputHSV,ImGuiColorEditFlags_DefaultOptions_,ImGuiColorEditFlags_DisplayMask_,ImGuiColorEditFlags_DataTypeMask_,ImGuiColorEditFlags_PickerMask_,ImGuiColorEditFlags_InputMask_,}ImGuiColorEditFlags_;
typedef enum{ImGuiComboFlags_None,ImGuiComboFlags_PopupAlignLeft,ImGuiComboFlags_HeightSmall,ImGuiComboFlags_HeightRegular,ImGuiComboFlags_HeightLarge,ImGuiComboFlags_HeightLargest,ImGuiComboFlags_NoArrowButton,ImGuiComboFlags_NoPreview,ImGuiComboFlags_HeightMask_,}ImGuiComboFlags_;
typedef enum{ImGuiCond_None,ImGuiCond_Always,ImGuiCond_Once,ImGuiCond_FirstUseEver,ImGuiCond_Appearing,}ImGuiCond_;
typedef enum{ImGuiConfigFlags_None,ImGuiConfigFlags_NavEnableKeyboard,ImGuiConfigFlags_NavEnableGamepad,ImGuiConfigFlags_NavEnableSetMousePos,ImGuiConfigFlags_NavNoCaptureKeyboard,ImGuiConfigFlags_NoMouse,ImGuiConfigFlags_NoMouseCursorChange,ImGuiConfigFlags_DockingEnable,ImGuiConfigFlags_ViewportsEnable,ImGuiConfigFlags_DpiEnableScaleViewports,ImGuiConfigFlags_DpiEnableScaleFonts,ImGuiConfigFlags_IsSRGB,ImGuiConfigFlags_IsTouchScreen,}ImGuiConfigFlags_;
typedef enum{ImGuiDataType_S8,ImGuiDataType_U8,ImGuiDataType_S16,ImGuiDataType_U16,ImGuiDataType_S32,ImGuiDataType_U32,ImGuiDataType_S64,ImGuiDataType_U64,ImGuiDataType_Float,ImGuiDataType_Double,ImGuiDataType_COUNT}ImGuiDataType_;
typedef enum{ImGuiDir_None,ImGuiDir_Left,ImGuiDir_Right,ImGuiDir_Up,ImGuiDir_Down,ImGuiDir_COUNT}ImGuiDir_;
typedef enum{ImGuiDockNodeFlags_None,ImGuiDockNodeFlags_KeepAliveOnly,ImGuiDockNodeFlags_NoDockingInCentralNode,ImGuiDockNodeFlags_PassthruCentralNode,ImGuiDockNodeFlags_NoSplit,ImGuiDockNodeFlags_NoResize,ImGuiDockNodeFlags_AutoHideTabBar,}ImGuiDockNodeFlags_;
typedef enum{ImGuiDragDropFlags_None,ImGuiDragDropFlags_SourceNoPreviewTooltip,ImGuiDragDropFlags_SourceNoDisableHover,ImGuiDragDropFlags_SourceNoHoldToOpenOthers,ImGuiDragDropFlags_SourceAllowNullID,ImGuiDragDropFlags_SourceExtern,ImGuiDragDropFlags_SourceAutoExpirePayload,ImGuiDragDropFlags_AcceptBeforeDelivery,ImGuiDragDropFlags_AcceptNoDrawDefaultRect,ImGuiDragDropFlags_AcceptNoPreviewTooltip,ImGuiDragDropFlags_AcceptPeekOnly,}ImGuiDragDropFlags_;
typedef enum{ImGuiFocusedFlags_None,ImGuiFocusedFlags_ChildWindows,ImGuiFocusedFlags_RootWindow,ImGuiFocusedFlags_AnyWindow,ImGuiFocusedFlags_NoPopupHierarchy,ImGuiFocusedFlags_DockHierarchy,ImGuiFocusedFlags_RootAndChildWindows,}ImGuiFocusedFlags_;
typedef enum{ImGuiHoveredFlags_None,ImGuiHoveredFlags_ChildWindows,ImGuiHoveredFlags_RootWindow,ImGuiHoveredFlags_AnyWindow,ImGuiHoveredFlags_NoPopupHierarchy,ImGuiHoveredFlags_DockHierarchy,ImGuiHoveredFlags_AllowWhenBlockedByPopup,ImGuiHoveredFlags_AllowWhenBlockedByActiveItem,ImGuiHoveredFlags_AllowWhenOverlapped,ImGuiHoveredFlags_AllowWhenDisabled,ImGuiHoveredFlags_NoNavOverride,ImGuiHoveredFlags_RectOnly,ImGuiHoveredFlags_RootAndChildWindows,ImGuiHoveredFlags_DelayNormal,ImGuiHoveredFlags_DelayShort,ImGuiHoveredFlags_NoSharedDelay,}ImGuiHoveredFlags_;
typedef enum{ImGuiInputTextFlags_None,ImGuiInputTextFlags_CharsDecimal,ImGuiInputTextFlags_CharsHexadecimal,ImGuiInputTextFlags_CharsUppercase,ImGuiInputTextFlags_CharsNoBlank,ImGuiInputTextFlags_AutoSelectAll,ImGuiInputTextFlags_EnterReturnsTrue,ImGuiInputTextFlags_CallbackCompletion,ImGuiInputTextFlags_CallbackHistory,ImGuiInputTextFlags_CallbackAlways,ImGuiInputTextFlags_CallbackCharFilter,ImGuiInputTextFlags_AllowTabInput,ImGuiInputTextFlags_CtrlEnterForNewLine,ImGuiInputTextFlags_NoHorizontalScroll,ImGuiInputTextFlags_AlwaysOverwrite,ImGuiInputTextFlags_ReadOnly,ImGuiInputTextFlags_Password,ImGuiInputTextFlags_NoUndoRedo,ImGuiInputTextFlags_CharsScientific,ImGuiInputTextFlags_CallbackResize,ImGuiInputTextFlags_CallbackEdit,ImGuiInputTextFlags_EscapeClearsAll,}ImGuiInputTextFlags_;
typedef enum{ImGuiKey_None,ImGuiKey_Tab,ImGuiKey_LeftArrow,ImGuiKey_RightArrow,ImGuiKey_UpArrow,ImGuiKey_DownArrow,ImGuiKey_PageUp,ImGuiKey_PageDown,ImGuiKey_Home,ImGuiKey_End,ImGuiKey_Insert,ImGuiKey_Delete,ImGuiKey_Backspace,ImGuiKey_Space,ImGuiKey_Enter,ImGuiKey_Escape,ImGuiKey_LeftCtrl,ImGuiKey_LeftShift,ImGuiKey_LeftAlt,ImGuiKey_LeftSuper,ImGuiKey_RightCtrl,ImGuiKey_RightShift,ImGuiKey_RightAlt,ImGuiKey_RightSuper,ImGuiKey_Menu,ImGuiKey_0,ImGuiKey_1,ImGuiKey_2,ImGuiKey_3,ImGuiKey_4,ImGuiKey_5,ImGuiKey_6,ImGuiKey_7,ImGuiKey_8,ImGuiKey_9,ImGuiKey_A,ImGuiKey_B,ImGuiKey_C,ImGuiKey_D,ImGuiKey_E,ImGuiKey_F,ImGuiKey_G,ImGuiKey_H,ImGuiKey_I,ImGuiKey_J,ImGuiKey_K,ImGuiKey_L,ImGuiKey_M,ImGuiKey_N,ImGuiKey_O,ImGuiKey_P,ImGuiKey_Q,ImGuiKey_R,ImGuiKey_S,ImGuiKey_T,ImGuiKey_U,ImGuiKey_V,ImGuiKey_W,ImGuiKey_X,ImGuiKey_Y,ImGuiKey_Z,ImGuiKey_F1,ImGuiKey_F2,ImGuiKey_F3,ImGuiKey_F4,ImGuiKey_F5,ImGuiKey_F6,ImGuiKey_F7,ImGuiKey_F8,ImGuiKey_F9,ImGuiKey_F10,ImGuiKey_F11,ImGuiKey_F12,ImGuiKey_Apostrophe,ImGuiKey_Comma,ImGuiKey_Minus,ImGuiKey_Period,ImGuiKey_Slash,ImGuiKey_Semicolon,ImGuiKey_Equal,ImGuiKey_LeftBracket,ImGuiKey_Backslash,ImGuiKey_RightBracket,ImGuiKey_GraveAccent,ImGuiKey_CapsLock,ImGuiKey_ScrollLock,ImGuiKey_NumLock,ImGuiKey_PrintScreen,ImGuiKey_Pause,ImGuiKey_Keypad0,ImGuiKey_Keypad1,ImGuiKey_Keypad2,ImGuiKey_Keypad3,ImGuiKey_Keypad4,ImGuiKey_Keypad5,ImGuiKey_Keypad6,ImGuiKey_Keypad7,ImGuiKey_Keypad8,ImGuiKey_Keypad9,ImGuiKey_KeypadDecimal,ImGuiKey_KeypadDivide,ImGuiKey_KeypadMultiply,ImGuiKey_KeypadSubtract,ImGuiKey_KeypadAdd,ImGuiKey_KeypadEnter,ImGuiKey_KeypadEqual,ImGuiKey_GamepadStart,ImGuiKey_GamepadBack,ImGuiKey_GamepadFaceLeft,ImGuiKey_GamepadFaceRight,ImGuiKey_GamepadFaceUp,ImGuiKey_GamepadFaceDown,ImGuiKey_GamepadDpadLeft,ImGuiKey_GamepadDpadRight,ImGuiKey_GamepadDpadUp,ImGuiKey_GamepadDpadDown,ImGuiKey_GamepadL1,ImGuiKey_GamepadR1,ImGuiKey_GamepadL2,ImGuiKey_GamepadR2,ImGuiKey_GamepadL3,ImGuiKey_GamepadR3,ImGuiKey_GamepadLStickLeft,ImGuiKey_GamepadLStickRight,ImGuiKey_GamepadLStickUp,ImGuiKey_GamepadLStickDown,ImGuiKey_GamepadRStickLeft,ImGuiKey_GamepadRStickRight,ImGuiKey_GamepadRStickUp,ImGuiKey_GamepadRStickDown,ImGuiKey_MouseLeft,ImGuiKey_MouseRight,ImGuiKey_MouseMiddle,ImGuiKey_MouseX1,ImGuiKey_MouseX2,ImGuiKey_MouseWheelX,ImGuiKey_MouseWheelY,ImGuiKey_ReservedForModCtrl,ImGuiKey_ReservedForModShift,ImGuiKey_ReservedForModAlt,ImGuiKey_ReservedForModSuper,ImGuiKey_COUNT,ImGuiMod_None,ImGuiMod_Ctrl,ImGuiMod_Shift,ImGuiMod_Alt,ImGuiMod_Super,ImGuiMod_Shortcut,ImGuiMod_Mask_,ImGuiKey_NamedKey_BEGIN,ImGuiKey_NamedKey_END,ImGuiKey_NamedKey_COUNT,ImGuiKey_KeysData_SIZE,ImGuiKey_KeysData_OFFSET,}ImGuiKey;
typedef enum{ImGuiMouseButton_Left,ImGuiMouseButton_Right,ImGuiMouseButton_Middle,ImGuiMouseButton_COUNT}ImGuiMouseButton_;
typedef enum{ImGuiMouseCursor_None,ImGuiMouseCursor_Arrow,ImGuiMouseCursor_TextInput,ImGuiMouseCursor_ResizeAll,ImGuiMouseCursor_ResizeNS,ImGuiMouseCursor_ResizeEW,ImGuiMouseCursor_ResizeNESW,ImGuiMouseCursor_ResizeNWSE,ImGuiMouseCursor_Hand,ImGuiMouseCursor_NotAllowed,ImGuiMouseCursor_COUNT}ImGuiMouseCursor_;
typedef enum{ImGuiNavInput_Activate,ImGuiNavInput_Cancel,ImGuiNavInput_Input,ImGuiNavInput_Menu,ImGuiNavInput_DpadLeft,ImGuiNavInput_DpadRight,ImGuiNavInput_DpadUp,ImGuiNavInput_DpadDown,ImGuiNavInput_LStickLeft,ImGuiNavInput_LStickRight,ImGuiNavInput_LStickUp,ImGuiNavInput_LStickDown,ImGuiNavInput_FocusPrev,ImGuiNavInput_FocusNext,ImGuiNavInput_TweakSlow,ImGuiNavInput_TweakFast,ImGuiNavInput_COUNT,}ImGuiNavInput;
typedef enum{ImGuiPopupFlags_None,ImGuiPopupFlags_MouseButtonLeft,ImGuiPopupFlags_MouseButtonRight,ImGuiPopupFlags_MouseButtonMiddle,ImGuiPopupFlags_MouseButtonMask_,ImGuiPopupFlags_MouseButtonDefault_,ImGuiPopupFlags_NoOpenOverExistingPopup,ImGuiPopupFlags_NoOpenOverItems,ImGuiPopupFlags_AnyPopupId,ImGuiPopupFlags_AnyPopupLevel,ImGuiPopupFlags_AnyPopup,}ImGuiPopupFlags_;
typedef enum{ImGuiSelectableFlags_None,ImGuiSelectableFlags_DontClosePopups,ImGuiSelectableFlags_SpanAllColumns,ImGuiSelectableFlags_AllowDoubleClick,ImGuiSelectableFlags_Disabled,ImGuiSelectableFlags_AllowItemOverlap,}ImGuiSelectableFlags_;
typedef enum{ImGuiSliderFlags_None,ImGuiSliderFlags_AlwaysClamp,ImGuiSliderFlags_Logarithmic,ImGuiSliderFlags_NoRoundToFormat,ImGuiSliderFlags_NoInput,ImGuiSliderFlags_InvalidMask_,}ImGuiSliderFlags_;
typedef enum{ImGuiSortDirection_None,ImGuiSortDirection_Ascending,ImGuiSortDirection_Descending}ImGuiSortDirection_;
typedef enum{ImGuiStyleVar_Alpha,ImGuiStyleVar_DisabledAlpha,ImGuiStyleVar_WindowPadding,ImGuiStyleVar_WindowRounding,ImGuiStyleVar_WindowBorderSize,ImGuiStyleVar_WindowMinSize,ImGuiStyleVar_WindowTitleAlign,ImGuiStyleVar_ChildRounding,ImGuiStyleVar_ChildBorderSize,ImGuiStyleVar_PopupRounding,ImGuiStyleVar_PopupBorderSize,ImGuiStyleVar_FramePadding,ImGuiStyleVar_FrameRounding,ImGuiStyleVar_FrameBorderSize,ImGuiStyleVar_ItemSpacing,ImGuiStyleVar_ItemInnerSpacing,ImGuiStyleVar_IndentSpacing,ImGuiStyleVar_CellPadding,ImGuiStyleVar_ScrollbarSize,ImGuiStyleVar_ScrollbarRounding,ImGuiStyleVar_GrabMinSize,ImGuiStyleVar_GrabRounding,ImGuiStyleVar_TabRounding,ImGuiStyleVar_ButtonTextAlign,ImGuiStyleVar_SelectableTextAlign,ImGuiStyleVar_SeparatorTextBorderSize,ImGuiStyleVar_SeparatorTextAlign,ImGuiStyleVar_SeparatorTextPadding,ImGuiStyleVar_COUNT}ImGuiStyleVar_;
typedef enum{ImGuiTabBarFlags_None,ImGuiTabBarFlags_Reorderable,ImGuiTabBarFlags_AutoSelectNewTabs,ImGuiTabBarFlags_TabListPopupButton,ImGuiTabBarFlags_NoCloseWithMiddleMouseButton,ImGuiTabBarFlags_NoTabListScrollingButtons,ImGuiTabBarFlags_NoTooltip,ImGuiTabBarFlags_FittingPolicyResizeDown,ImGuiTabBarFlags_FittingPolicyScroll,ImGuiTabBarFlags_FittingPolicyMask_,ImGuiTabBarFlags_FittingPolicyDefault_,}ImGuiTabBarFlags_;
typedef enum{ImGuiTabItemFlags_None,ImGuiTabItemFlags_UnsavedDocument,ImGuiTabItemFlags_SetSelected,ImGuiTabItemFlags_NoCloseWithMiddleMouseButton,ImGuiTabItemFlags_NoPushId,ImGuiTabItemFlags_NoTooltip,ImGuiTabItemFlags_NoReorder,ImGuiTabItemFlags_Leading,ImGuiTabItemFlags_Trailing,}ImGuiTabItemFlags_;
typedef enum{ImGuiTableBgTarget_None,ImGuiTableBgTarget_RowBg0,ImGuiTableBgTarget_RowBg1,ImGuiTableBgTarget_CellBg,}ImGuiTableBgTarget_;
typedef enum{ImGuiTableColumnFlags_None,ImGuiTableColumnFlags_Disabled,ImGuiTableColumnFlags_DefaultHide,ImGuiTableColumnFlags_DefaultSort,ImGuiTableColumnFlags_WidthStretch,ImGuiTableColumnFlags_WidthFixed,ImGuiTableColumnFlags_NoResize,ImGuiTableColumnFlags_NoReorder,ImGuiTableColumnFlags_NoHide,ImGuiTableColumnFlags_NoClip,ImGuiTableColumnFlags_NoSort,ImGuiTableColumnFlags_NoSortAscending,ImGuiTableColumnFlags_NoSortDescending,ImGuiTableColumnFlags_NoHeaderLabel,ImGuiTableColumnFlags_NoHeaderWidth,ImGuiTableColumnFlags_PreferSortAscending,ImGuiTableColumnFlags_PreferSortDescending,ImGuiTableColumnFlags_IndentEnable,ImGuiTableColumnFlags_IndentDisable,ImGuiTableColumnFlags_IsEnabled,ImGuiTableColumnFlags_IsVisible,ImGuiTableColumnFlags_IsSorted,ImGuiTableColumnFlags_IsHovered,ImGuiTableColumnFlags_WidthMask_,ImGuiTableColumnFlags_IndentMask_,ImGuiTableColumnFlags_StatusMask_,ImGuiTableColumnFlags_NoDirectResize_,}ImGuiTableColumnFlags_;
typedef enum{ImGuiTableFlags_None,ImGuiTableFlags_Resizable,ImGuiTableFlags_Reorderable,ImGuiTableFlags_Hideable,ImGuiTableFlags_Sortable,ImGuiTableFlags_NoSavedSettings,ImGuiTableFlags_ContextMenuInBody,ImGuiTableFlags_RowBg,ImGuiTableFlags_BordersInnerH,ImGuiTableFlags_BordersOuterH,ImGuiTableFlags_BordersInnerV,ImGuiTableFlags_BordersOuterV,ImGuiTableFlags_BordersH,ImGuiTableFlags_BordersV,ImGuiTableFlags_BordersInner,ImGuiTableFlags_BordersOuter,ImGuiTableFlags_Borders,ImGuiTableFlags_NoBordersInBody,ImGuiTableFlags_NoBordersInBodyUntilResize,ImGuiTableFlags_SizingFixedFit,ImGuiTableFlags_SizingFixedSame,ImGuiTableFlags_SizingStretchProp,ImGuiTableFlags_SizingStretchSame,ImGuiTableFlags_NoHostExtendX,ImGuiTableFlags_NoHostExtendY,ImGuiTableFlags_NoKeepColumnsVisible,ImGuiTableFlags_PreciseWidths,ImGuiTableFlags_NoClip,ImGuiTableFlags_PadOuterX,ImGuiTableFlags_NoPadOuterX,ImGuiTableFlags_NoPadInnerX,ImGuiTableFlags_ScrollX,ImGuiTableFlags_ScrollY,ImGuiTableFlags_SortMulti,ImGuiTableFlags_SortTristate,ImGuiTableFlags_SizingMask_,}ImGuiTableFlags_;
typedef enum{ImGuiTableRowFlags_None,ImGuiTableRowFlags_Headers,}ImGuiTableRowFlags_;
typedef enum{ImGuiTreeNodeFlags_None,ImGuiTreeNodeFlags_Selected,ImGuiTreeNodeFlags_Framed,ImGuiTreeNodeFlags_AllowItemOverlap,ImGuiTreeNodeFlags_NoTreePushOnOpen,ImGuiTreeNodeFlags_NoAutoOpenOnLog,ImGuiTreeNodeFlags_DefaultOpen,ImGuiTreeNodeFlags_OpenOnDoubleClick,ImGuiTreeNodeFlags_OpenOnArrow,ImGuiTreeNodeFlags_Leaf,ImGuiTreeNodeFlags_Bullet,ImGuiTreeNodeFlags_FramePadding,ImGuiTreeNodeFlags_SpanAvailWidth,ImGuiTreeNodeFlags_SpanFullWidth,ImGuiTreeNodeFlags_NavLeftJumpsBackHere,ImGuiTreeNodeFlags_CollapsingHeader,}ImGuiTreeNodeFlags_;
typedef enum{ImGuiViewportFlags_None,ImGuiViewportFlags_IsPlatformWindow,ImGuiViewportFlags_IsPlatformMonitor,ImGuiViewportFlags_OwnedByApp,ImGuiViewportFlags_NoDecoration,ImGuiViewportFlags_NoTaskBarIcon,ImGuiViewportFlags_NoFocusOnAppearing,ImGuiViewportFlags_NoFocusOnClick,ImGuiViewportFlags_NoInputs,ImGuiViewportFlags_NoRendererClear,ImGuiViewportFlags_TopMost,ImGuiViewportFlags_Minimized,ImGuiViewportFlags_NoAutoMerge,ImGuiViewportFlags_CanHostOtherWindows,}ImGuiViewportFlags_;
typedef enum{ImGuiWindowFlags_None,ImGuiWindowFlags_NoTitleBar,ImGuiWindowFlags_NoResize,ImGuiWindowFlags_NoMove,ImGuiWindowFlags_NoScrollbar,ImGuiWindowFlags_NoScrollWithMouse,ImGuiWindowFlags_NoCollapse,ImGuiWindowFlags_AlwaysAutoResize,ImGuiWindowFlags_NoBackground,ImGuiWindowFlags_NoSavedSettings,ImGuiWindowFlags_NoMouseInputs,ImGuiWindowFlags_MenuBar,ImGuiWindowFlags_HorizontalScrollbar,ImGuiWindowFlags_NoFocusOnAppearing,ImGuiWindowFlags_NoBringToFrontOnFocus,ImGuiWindowFlags_AlwaysVerticalScrollbar,ImGuiWindowFlags_AlwaysHorizontalScrollbar,ImGuiWindowFlags_AlwaysUseWindowPadding,ImGuiWindowFlags_NoNavInputs,ImGuiWindowFlags_NoNavFocus,ImGuiWindowFlags_UnsavedDocument,ImGuiWindowFlags_NoDocking,ImGuiWindowFlags_NoNav,ImGuiWindowFlags_NoDecoration,ImGuiWindowFlags_NoInputs,ImGuiWindowFlags_NavFlattened,ImGuiWindowFlags_ChildWindow,ImGuiWindowFlags_Tooltip,ImGuiWindowFlags_Popup,ImGuiWindowFlags_Modal,ImGuiWindowFlags_ChildMenu,ImGuiWindowFlags_DockNodeHost,}ImGuiWindowFlags_;
typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);
typedef int ImDrawFlags;
typedef int ImDrawListFlags;
typedef int ImFontAtlasFlags;
typedef int ImGuiBackendFlags;
typedef int ImGuiButtonFlags;
typedef int ImGuiCol;
typedef int ImGuiColorEditFlags;
typedef int ImGuiComboFlags;
typedef int ImGuiCond;
typedef int ImGuiConfigFlags;
typedef int ImGuiDataType;
typedef int ImGuiDir;
typedef int ImGuiDockNodeFlags;
typedef int ImGuiDragDropFlags;
typedef int ImGuiFocusedFlags;
typedef int ImGuiHoveredFlags;
typedef int ImGuiInputTextFlags;
typedef int ImGuiKeyChord;
typedef int ImGuiMouseButton;
typedef int ImGuiMouseCursor;
typedef int ImGuiPopupFlags;
typedef int ImGuiSelectableFlags;
typedef int ImGuiSliderFlags;
typedef int ImGuiSortDirection;
typedef int ImGuiStyleVar;
typedef int ImGuiTabBarFlags;
typedef int ImGuiTabItemFlags;
typedef int ImGuiTableBgTarget;
typedef int ImGuiTableColumnFlags;
typedef int ImGuiTableFlags;
typedef int ImGuiTableRowFlags;
typedef int ImGuiTreeNodeFlags;
typedef int ImGuiViewportFlags;
typedef int ImGuiWindowFlags;
typedef signed char ImS8;
typedef signed int ImS32;
typedef signed long long ImS64;
typedef signed short ImS16;
typedef struct ImColor ImColor;
typedef struct ImDrawChannel ImDrawChannel;
typedef struct ImDrawCmd ImDrawCmd;
typedef struct ImDrawCmdHeader ImDrawCmdHeader;
typedef struct ImDrawData ImDrawData;
typedef struct ImDrawList ImDrawList;
typedef struct ImDrawListSharedData ImDrawListSharedData;
typedef struct ImDrawListSplitter ImDrawListSplitter;
typedef struct ImDrawVert ImDrawVert;
typedef struct ImFont ImFont;
typedef struct ImFontAtlas ImFontAtlas;
typedef struct ImFontAtlasCustomRect ImFontAtlasCustomRect;
typedef struct ImFontBuilderIO ImFontBuilderIO;
typedef struct ImFontConfig ImFontConfig;
typedef struct ImFontGlyph ImFontGlyph;
typedef struct ImFontGlyphRangesBuilder ImFontGlyphRangesBuilder;
typedef struct ImGuiContext ImGuiContext;
typedef struct ImGuiIO ImGuiIO;
typedef struct ImGuiInputTextCallbackData ImGuiInputTextCallbackData;
typedef struct ImGuiKeyData ImGuiKeyData;
typedef struct ImGuiListClipper ImGuiListClipper;
typedef struct ImGuiOnceUponAFrame ImGuiOnceUponAFrame;
typedef struct ImGuiPayload ImGuiPayload;
typedef struct ImGuiPlatformIO ImGuiPlatformIO;
typedef struct ImGuiPlatformImeData ImGuiPlatformImeData;
typedef struct ImGuiPlatformMonitor ImGuiPlatformMonitor;
typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
typedef struct ImGuiStorage ImGuiStorage;
typedef struct ImGuiStoragePair ImGuiStoragePair;
typedef struct ImGuiStoragePair ImGuiStoragePair;
typedef struct ImGuiStyle ImGuiStyle;
typedef struct ImGuiTableColumnSortSpecs ImGuiTableColumnSortSpecs;
typedef struct ImGuiTableSortSpecs ImGuiTableSortSpecs;
typedef struct ImGuiTextBuffer ImGuiTextBuffer;
typedef struct ImGuiTextFilter ImGuiTextFilter;
typedef struct ImGuiTextRange ImGuiTextRange;
typedef struct ImGuiTextRange ImGuiTextRange;
typedef struct ImGuiViewport ImGuiViewport;
typedef struct ImGuiWindowClass ImGuiWindowClass;
typedef struct ImVec2 ImVec2;
typedef struct ImVec4 ImVec4;
typedef struct ImVector_ImDrawChannel{int Size;int Capacity;ImDrawChannel* Data;}ImVector_ImDrawChannel;
typedef struct ImVector_ImDrawCmd{int Size;int Capacity;ImDrawCmd* Data;}ImVector_ImDrawCmd;
typedef struct ImVector_ImDrawIdx{int Size;int Capacity;ImDrawIdx* Data;}ImVector_ImDrawIdx;
typedef struct ImVector_ImDrawVert{int Size;int Capacity;ImDrawVert* Data;}ImVector_ImDrawVert;
typedef struct ImVector_ImFontAtlasCustomRect{int Size;int Capacity;ImFontAtlasCustomRect* Data;}ImVector_ImFontAtlasCustomRect;
typedef struct ImVector_ImFontConfig{int Size;int Capacity;ImFontConfig* Data;}ImVector_ImFontConfig;
typedef struct ImVector_ImFontGlyph{int Size;int Capacity;ImFontGlyph* Data;}ImVector_ImFontGlyph;
typedef struct ImVector_ImFontPtr{int Size;int Capacity;ImFont** Data;}ImVector_ImFontPtr;
typedef struct ImVector_ImGuiPlatformMonitor{int Size;int Capacity;ImGuiPlatformMonitor* Data;}ImVector_ImGuiPlatformMonitor;
typedef struct ImVector_ImGuiStoragePair{int Size;int Capacity;ImGuiStoragePair* Data;}ImVector_ImGuiStoragePair;
typedef struct ImVector_ImGuiTextRange{int Size;int Capacity;ImGuiTextRange* Data;}ImVector_ImGuiTextRange;
typedef struct ImVector_ImGuiViewportPtr{int Size;int Capacity;ImGuiViewport** Data;}ImVector_ImGuiViewportPtr;
typedef struct ImVector_ImTextureID{int Size;int Capacity;ImTextureID* Data;}ImVector_ImTextureID;
typedef struct ImVector_ImU32{int Size;int Capacity;ImU32* Data;}ImVector_ImU32;
typedef struct ImVector_ImVec2{int Size;int Capacity;ImVec2* Data;}ImVector_ImVec2;
typedef struct ImVector_ImVec4{int Size;int Capacity;ImVec4* Data;}ImVector_ImVec4;
typedef struct ImVector_ImWchar{int Size;int Capacity;ImWchar* Data;}ImVector_ImWchar;
typedef struct ImVector_char{int Size;int Capacity;char* Data;}ImVector_char;
typedef struct ImVector_float{int Size;int Capacity;float* Data;}ImVector_float;
typedef unsigned char ImU8;
typedef unsigned int ImGuiID;
typedef unsigned int ImU32;
typedef unsigned int ImWchar32;
typedef unsigned long long ImU64;
typedef unsigned short ImDrawIdx;
typedef unsigned short ImU16;
typedef unsigned short ImWchar16;
typedef void (*ImDrawCallback)(const ImDrawList* parent_list,const ImDrawCmd* cmd);
typedef void (*ImGuiMemFreeFunc)(void* ptr,void* user_data);
typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);
typedef void* (*ImGuiMemAllocFunc)(size_t sz,void* user_data);
typedef void* ImTextureID;
struct GLFWwindow;
struct ImColor;
struct ImColor{ImVec4 Value;};
struct ImDrawChannel;
struct ImDrawChannel{ImVector_ImDrawCmd _CmdBuffer; ImVector_ImDrawIdx _IdxBuffer;};
struct ImDrawCmd;
struct ImDrawCmdHeader{ImVec4 ClipRect; ImTextureID TextureId; unsigned int VtxOffset;};
struct ImDrawCmd{ImVec4 ClipRect; ImTextureID TextureId; unsigned int VtxOffset; unsigned int IdxOffset; unsigned int ElemCount; ImDrawCallback UserCallback; void* UserCallbackData;};
struct ImDrawData;
struct ImDrawData{bool Valid; int CmdListsCount; int TotalIdxCount; int TotalVtxCount; ImDrawList** CmdLists; ImVec2 DisplayPos; ImVec2 DisplaySize; ImVec2 FramebufferScale; ImGuiViewport* OwnerViewport;};
struct ImDrawList;
struct ImDrawListSharedData;
struct ImDrawListSplitter;
struct ImDrawListSplitter{int _Current; int _Count; ImVector_ImDrawChannel _Channels;};
struct ImDrawList{ImVector_ImDrawCmd CmdBuffer; ImVector_ImDrawIdx IdxBuffer; ImVector_ImDrawVert VtxBuffer; ImDrawListFlags Flags; unsigned int _VtxCurrentIdx; ImDrawListSharedData* _Data; const char* _OwnerName; ImDrawVert* _VtxWritePtr; ImDrawIdx* _IdxWritePtr; ImVector_ImVec4 _ClipRectStack; ImVector_ImTextureID _TextureIdStack; ImVector_ImVec2 _Path; ImDrawCmdHeader _CmdHeader; ImDrawListSplitter _Splitter; float _FringeScale;};
struct ImDrawVert;
struct ImDrawVert{ImVec2 pos; ImVec2 uv; ImU32 col;};
struct ImFont;
struct ImFontAtlas;
struct ImFontAtlasCustomRect{unsigned short Width,Height; unsigned short X,Y; unsigned int GlyphID; float GlyphAdvanceX; ImVec2 GlyphOffset; ImFont* Font;};
struct ImFontAtlas{ImFontAtlasFlags Flags; ImTextureID TexID; int TexDesiredWidth; int TexGlyphPadding; bool Locked; void* UserData; bool TexReady; bool TexPixelsUseColors; unsigned char* TexPixelsAlpha8; unsigned int* TexPixelsRGBA32; int TexWidth; int TexHeight; ImVec2 TexUvScale; ImVec2 TexUvWhitePixel; ImVector_ImFontPtr Fonts; ImVector_ImFontAtlasCustomRect CustomRects; ImVector_ImFontConfig ConfigData; ImVec4 TexUvLines; const ImFontBuilderIO* FontBuilderIO; unsigned int FontBuilderFlags; int PackIdMouseCursors; int PackIdLines;};
struct ImFontBuilderIO;
struct ImFontConfig;
struct ImFontConfig{void* FontData; int FontDataSize; bool FontDataOwnedByAtlas; int FontNo; float SizePixels; int OversampleH; int OversampleV; bool PixelSnapH; ImVec2 GlyphExtraSpacing; ImVec2 GlyphOffset; const ImWchar* GlyphRanges; float GlyphMinAdvanceX; float GlyphMaxAdvanceX; bool MergeMode; unsigned int FontBuilderFlags; float RasterizerMultiply; ImWchar EllipsisChar; char Name; ImFont* DstFont;};
struct ImFontGlyph;
struct ImFontGlyphRangesBuilder;
struct ImFontGlyphRangesBuilder{ImVector_ImU32 UsedChars;};
struct ImFontGlyph{unsigned int Colored; unsigned int Visible; unsigned int Codepoint; float AdvanceX; float X0,Y0,X1,Y1; float U0,V0,U1,V1;};
struct ImFont{ImVector_float IndexAdvanceX; float FallbackAdvanceX; float FontSize; ImVector_ImWchar IndexLookup; ImVector_ImFontGlyph Glyphs; const ImFontGlyph* FallbackGlyph; ImFontAtlas* ContainerAtlas; const ImFontConfig* ConfigData; short ConfigDataCount; ImWchar FallbackChar; ImWchar EllipsisChar; short EllipsisCharCount; float EllipsisWidth; float EllipsisCharStep; bool DirtyLookupTables; float Scale; float Ascent,Descent; int MetricsTotalSurface; ImU8 Used4kPagesMap;};
struct ImGuiContext;
struct ImGuiIO;
struct ImGuiIO{ImGuiConfigFlags ConfigFlags; ImGuiBackendFlags BackendFlags; ImVec2 DisplaySize; float DeltaTime; float IniSavingRate; const char* IniFilename; const char* LogFilename; float MouseDoubleClickTime; float MouseDoubleClickMaxDist; float MouseDragThreshold; float KeyRepeatDelay; float KeyRepeatRate; float HoverDelayNormal; float HoverDelayShort; void* UserData; ImFontAtlas*Fonts; float FontGlobalScale; bool FontAllowUserScaling; ImFont* FontDefault; ImVec2 DisplayFramebufferScale; bool ConfigDockingNoSplit; bool ConfigDockingWithShift; bool ConfigDockingAlwaysTabBar; bool ConfigDockingTransparentPayload; bool ConfigViewportsNoAutoMerge; bool ConfigViewportsNoTaskBarIcon; bool ConfigViewportsNoDecoration; bool ConfigViewportsNoDefaultParent; bool MouseDrawCursor; bool ConfigMacOSXBehaviors; bool ConfigInputTrickleEventQueue; bool ConfigInputTextCursorBlink; bool ConfigInputTextEnterKeepActive; bool ConfigDragClickToInputText; bool ConfigWindowsResizeFromEdges; bool ConfigWindowsMoveFromTitleBarOnly; float ConfigMemoryCompactTimer; const char* BackendPlatformName; const char* BackendRendererName; void* BackendPlatformUserData; void* BackendRendererUserData; void* BackendLanguageUserData; const char* (*GetClipboardTextFn)(void* user_data); void (*SetClipboardTextFn)(void* user_data,const char* text); void* ClipboardUserData; void (*SetPlatformImeDataFn)(ImGuiViewport* viewport,ImGuiPlatformImeData* data); void* _UnusedPadding; bool WantCaptureMouse; bool WantCaptureKeyboard; bool WantTextInput; bool WantSetMousePos; bool WantSaveIniSettings; bool NavActive; bool NavVisible; float Framerate; int MetricsRenderVertices; int MetricsRenderIndices; int MetricsRenderWindows; int MetricsActiveWindows; int MetricsActiveAllocations; ImVec2 MouseDelta; int KeyMap; bool KeysDown; float NavInputs; ImVec2 MousePos; bool MouseDown; float MouseWheel; float MouseWheelH; ImGuiID MouseHoveredViewport; bool KeyCtrl; bool KeyShift; bool KeyAlt; bool KeySuper; ImGuiKeyChord KeyMods; ImGuiKeyData KeysData; bool WantCaptureMouseUnlessPopupClose; ImVec2 MousePosPrev; ImVec2 MouseClickedPos; double MouseClickedTime; bool MouseClicked; bool MouseDoubleClicked; ImU16 MouseClickedCount; ImU16 MouseClickedLastCount; bool MouseReleased; bool MouseDownOwned; bool MouseDownOwnedUnlessPopupClose; float MouseDownDuration; float MouseDownDurationPrev; ImVec2 MouseDragMaxDistanceAbs; float MouseDragMaxDistanceSqr; float PenPressure; bool AppFocusLost; bool AppAcceptingEvents; ImS8 BackendUsingLegacyKeyArrays; bool BackendUsingLegacyNavInputArray; ImWchar16 InputQueueSurrogate; ImVector_ImWchar InputQueueCharacters;};
struct ImGuiInputTextCallbackData;
struct ImGuiInputTextCallbackData{ImGuiInputTextFlags EventFlag; ImGuiInputTextFlags Flags; void* UserData; ImWchar EventChar; ImGuiKey EventKey; char* Buf; int BufTextLen; int BufSize; bool BufDirty; int CursorPos; int SelectionStart; int SelectionEnd;};
struct ImGuiKeyData;
struct ImGuiKeyData{bool Down; float DownDuration; float DownDurationPrev; float AnalogValue;};
struct ImGuiListClipper;
struct ImGuiListClipper{int DisplayStart; int DisplayEnd; int ItemsCount; float ItemsHeight; float StartPosY; void* TempData;};
struct ImGuiOnceUponAFrame;
struct ImGuiOnceUponAFrame{int RefFrame;};
struct ImGuiPayload;
struct ImGuiPayload{void* Data; int DataSize; ImGuiID SourceId; ImGuiID SourceParentId; int DataFrameCount; char DataType; bool Preview; bool Delivery;};
struct ImGuiPlatformIO;
struct ImGuiPlatformIO{void (*Platform_CreateWindow)(ImGuiViewport* vp); void (*Platform_DestroyWindow)(ImGuiViewport* vp); void (*Platform_ShowWindow)(ImGuiViewport* vp); void (*Platform_SetWindowPos)(ImGuiViewport* vp,ImVec2 pos); ImVec2 (*Platform_GetWindowPos)(ImGuiViewport* vp); void (*Platform_SetWindowSize)(ImGuiViewport* vp,ImVec2 size); ImVec2 (*Platform_GetWindowSize)(ImGuiViewport* vp); void (*Platform_SetWindowFocus)(ImGuiViewport* vp); bool (*Platform_GetWindowFocus)(ImGuiViewport* vp); bool (*Platform_GetWindowMinimized)(ImGuiViewport* vp); void (*Platform_SetWindowTitle)(ImGuiViewport* vp,const char* str); void (*Platform_SetWindowAlpha)(ImGuiViewport* vp,float alpha); void (*Platform_UpdateWindow)(ImGuiViewport* vp); void (*Platform_RenderWindow)(ImGuiViewport* vp,void* render_arg); void (*Platform_SwapBuffers)(ImGuiViewport* vp,void* render_arg); float (*Platform_GetWindowDpiScale)(ImGuiViewport* vp); void (*Platform_OnChangedViewport)(ImGuiViewport* vp); int (*Platform_CreateVkSurface)(ImGuiViewport* vp,ImU64 vk_inst,const void* vk_allocators,ImU64* out_vk_surface); void (*Renderer_CreateWindow)(ImGuiViewport* vp); void (*Renderer_DestroyWindow)(ImGuiViewport* vp); void (*Renderer_SetWindowSize)(ImGuiViewport* vp,ImVec2 size); void (*Renderer_RenderWindow)(ImGuiViewport* vp,void* render_arg); void (*Renderer_SwapBuffers)(ImGuiViewport* vp,void* render_arg); ImVector_ImGuiPlatformMonitor Monitors; ImVector_ImGuiViewportPtr Viewports;};
struct ImGuiPlatformImeData;
struct ImGuiPlatformImeData{bool WantVisible; ImVec2 InputPos; float InputLineHeight;};
struct ImGuiPlatformMonitor;
struct ImGuiPlatformMonitor{ImVec2 MainPos,MainSize; ImVec2 WorkPos,WorkSize; float DpiScale;};
struct ImGuiSizeCallbackData;
struct ImGuiSizeCallbackData{void* UserData; ImVec2 Pos; ImVec2 CurrentSize; ImVec2 DesiredSize;};
struct ImGuiStorage;
struct ImGuiStoragePair{ImGuiID key; int val_i; float val_f; void* val_p;};
struct ImGuiStorage{ImVector_ImGuiStoragePair Data;};
struct ImGuiStyle;
struct ImGuiStyle{float Alpha; float DisabledAlpha; ImVec2 WindowPadding; float WindowRounding; float WindowBorderSize; ImVec2 WindowMinSize; ImVec2 WindowTitleAlign; ImGuiDir WindowMenuButtonPosition; float ChildRounding; float ChildBorderSize; float PopupRounding; float PopupBorderSize; ImVec2 FramePadding; float FrameRounding; float FrameBorderSize; ImVec2 ItemSpacing; ImVec2 ItemInnerSpacing; ImVec2 CellPadding; ImVec2 TouchExtraPadding; float IndentSpacing; float ColumnsMinSpacing; float ScrollbarSize; float ScrollbarRounding; float GrabMinSize; float GrabRounding; float LogSliderDeadzone; float TabRounding; float TabBorderSize; float TabMinWidthForCloseButton; ImGuiDir ColorButtonPosition; ImVec2 ButtonTextAlign; ImVec2 SelectableTextAlign; float SeparatorTextBorderSize; ImVec2 SeparatorTextAlign; ImVec2 SeparatorTextPadding; ImVec2 DisplayWindowPadding; ImVec2 DisplaySafeAreaPadding; float MouseCursorScale; bool AntiAliasedLines; bool AntiAliasedLinesUseTex; bool AntiAliasedFill; float CurveTessellationTol; float CircleTessellationMaxError; ImVec4 Colors;};
struct ImGuiTableColumnSortSpecs;
struct ImGuiTableColumnSortSpecs{ImGuiID ColumnUserID; ImS16 ColumnIndex; ImS16 SortOrder; ImGuiSortDirection SortDirection;};
struct ImGuiTableSortSpecs;
struct ImGuiTableSortSpecs{const ImGuiTableColumnSortSpecs* Specs; int SpecsCount; bool SpecsDirty;};
struct ImGuiTextBuffer;
struct ImGuiTextBuffer{ImVector_char Buf;};
struct ImGuiTextFilter;
struct ImGuiTextFilter{char InputBuf; ImVector_ImGuiTextRange Filters; int CountGrep;};
struct ImGuiTextRange{const char* b; const char* e;};
struct ImGuiViewport;
struct ImGuiViewport{ImGuiID ID; ImGuiViewportFlags Flags; ImVec2 Pos; ImVec2 Size; ImVec2 WorkPos; ImVec2 WorkSize; float DpiScale; ImGuiID ParentViewportId; ImDrawData* DrawData; void* RendererUserData; void* PlatformUserData; void* PlatformHandle; void* PlatformHandleRaw; bool PlatformWindowCreated; bool PlatformRequestMove; bool PlatformRequestResize; bool PlatformRequestClose;};
struct ImGuiWindowClass;
struct ImGuiWindowClass{ImGuiID ClassId; ImGuiID ParentViewportId; ImGuiViewportFlags ViewportFlagsOverrideSet; ImGuiViewportFlags ViewportFlagsOverrideClear; ImGuiTabItemFlags TabItemFlagsOverrideSet; ImGuiDockNodeFlags DockNodeFlagsOverrideSet; bool DockingAlwaysTabBar; bool DockingAllowUnclassed;};
struct ImVec2{float x,y;};
struct ImVec4{float x,y,z,w;};
struct SDL_Window;
ImColor* ImColor_ImColor_Float(float r,float g,float b,float a);
ImColor* ImColor_ImColor_Int(int r,int g,int b,int a);
ImColor* ImColor_ImColor_Nil(void);
ImColor* ImColor_ImColor_U32(ImU32 rgba);
ImColor* ImColor_ImColor_Vec4(const ImVec4 col);
ImDrawCmd* ImDrawCmd_ImDrawCmd(void);
ImDrawData* ImDrawData_ImDrawData(void);
ImDrawData* igGetDrawData(void);
ImDrawList* ImDrawList_CloneOutput(ImDrawList* self);
ImDrawList* ImDrawList_ImDrawList(ImDrawListSharedData* shared_data);
ImDrawList* igGetBackgroundDrawList_Nil(void);
ImDrawList* igGetBackgroundDrawList_ViewportPtr(ImGuiViewport* viewport);
ImDrawList* igGetForegroundDrawList_Nil(void);
ImDrawList* igGetForegroundDrawList_ViewportPtr(ImGuiViewport* viewport);
ImDrawList* igGetWindowDrawList(void);
ImDrawListSharedData* igGetDrawListSharedData(void);
ImDrawListSplitter* ImDrawListSplitter_ImDrawListSplitter(void);
ImFont* ImFontAtlas_AddFont(ImFontAtlas* self,const ImFontConfig* font_cfg);
ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self,const ImFontConfig* font_cfg);
ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
ImFont* ImFont_ImFont(void);
ImFont* igGetFont(void);
ImFontAtlas* ImFontAtlas_ImFontAtlas(void);
ImFontAtlasCustomRect* ImFontAtlasCustomRect_ImFontAtlasCustomRect(void);
ImFontAtlasCustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self,int index);
ImFontConfig* ImFontConfig_ImFontConfig(void);
ImFontGlyphRangesBuilder* ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(void);
ImGuiContext* igCreateContext(ImFontAtlas* shared_font_atlas);
ImGuiContext* igGetCurrentContext(void);
ImGuiID igDockSpace(ImGuiID id,const ImVec2 size,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
ImGuiID igDockSpaceOverViewport(const ImGuiViewport* viewport,ImGuiDockNodeFlags flags,const ImGuiWindowClass* window_class);
ImGuiID igGetID_Ptr(const void* ptr_id);
ImGuiID igGetID_Str(const char* str_id);
ImGuiID igGetID_StrStr(const char* str_id_begin,const char* str_id_end);
ImGuiID igGetItemID(void);
ImGuiID igGetWindowDockID(void);
ImGuiIO* ImGuiIO_ImGuiIO(void);
ImGuiIO* igGetIO(void);
ImGuiInputTextCallbackData* ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(void);
ImGuiKey igGetKeyIndex(ImGuiKey key);
ImGuiListClipper* ImGuiListClipper_ImGuiListClipper(void);
ImGuiMouseCursor igGetMouseCursor(void);
ImGuiOnceUponAFrame* ImGuiOnceUponAFrame_ImGuiOnceUponAFrame(void);
ImGuiPayload* ImGuiPayload_ImGuiPayload(void);
ImGuiPlatformIO* ImGuiPlatformIO_ImGuiPlatformIO(void);
ImGuiPlatformIO* igGetPlatformIO(void);
ImGuiPlatformImeData* ImGuiPlatformImeData_ImGuiPlatformImeData(void);
ImGuiPlatformMonitor* ImGuiPlatformMonitor_ImGuiPlatformMonitor(void);
ImGuiStorage* igGetStateStorage(void);
ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Float(ImGuiID _key,float _val_f);
ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Int(ImGuiID _key,int _val_i);
ImGuiStoragePair* ImGuiStoragePair_ImGuiStoragePair_Ptr(ImGuiID _key,void* _val_p);
ImGuiStyle* ImGuiStyle_ImGuiStyle(void);
ImGuiStyle* igGetStyle(void);
ImGuiTableColumnFlags igTableGetColumnFlags(int column_n);
ImGuiTableColumnSortSpecs* ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs(void);
ImGuiTableSortSpecs* ImGuiTableSortSpecs_ImGuiTableSortSpecs(void);
ImGuiTableSortSpecs* igTableGetSortSpecs(void);
ImGuiTextBuffer* ImGuiTextBuffer_ImGuiTextBuffer(void);
ImGuiTextFilter* ImGuiTextFilter_ImGuiTextFilter(const char* default_filter);
ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Nil(void);
ImGuiTextRange* ImGuiTextRange_ImGuiTextRange_Str(const char* _b,const char* _e);
ImGuiViewport* ImGuiViewport_ImGuiViewport(void);
ImGuiViewport* igFindViewportByID(ImGuiID id);
ImGuiViewport* igFindViewportByPlatformHandle(void* platform_handle);
ImGuiViewport* igGetMainViewport(void);
ImGuiViewport* igGetWindowViewport(void);
ImGuiWindowClass* ImGuiWindowClass_ImGuiWindowClass(void);
ImTextureID ImDrawCmd_GetTexID(ImDrawCmd* self);
ImU32 igColorConvertFloat4ToU32(const ImVec4 in);
ImU32 igGetColorU32_Col(ImGuiCol idx,float alpha_mul);
ImU32 igGetColorU32_U32(ImU32 col);
ImU32 igGetColorU32_Vec4(const ImVec4 col);
ImVec2* ImVec2_ImVec2_Float(float _x,float _y);
ImVec2* ImVec2_ImVec2_Nil(void);
ImVec4* ImVec4_ImVec4_Float(float _x,float _y,float _z,float _w);
ImVec4* ImVec4_ImVec4_Nil(void);
ImVector_ImWchar* ImVector_ImWchar_create(void);
bool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect* self);
bool ImFontAtlas_Build(ImFontAtlas* self);
bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border,ImVec2 out_uv_fill);
bool ImFontAtlas_IsBuilt(ImFontAtlas* self);
bool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder* self,size_t n);
bool ImFont_IsGlyphRangeUnused(ImFont* self,unsigned int c_begin,unsigned int c_last);
bool ImFont_IsLoaded(ImFont* self);
bool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData* self);
bool ImGuiListClipper_Step(ImGuiListClipper* self);
bool ImGuiPayload_IsDataType(ImGuiPayload* self,const char* type);
bool ImGuiPayload_IsDelivery(ImGuiPayload* self);
bool ImGuiPayload_IsPreview(ImGuiPayload* self);
bool ImGuiStorage_GetBool(ImGuiStorage* self,ImGuiID key,bool default_val);
bool ImGuiTextBuffer_empty(ImGuiTextBuffer* self);
bool ImGuiTextFilter_Draw(ImGuiTextFilter* self,const char* label,float width);
bool ImGuiTextFilter_IsActive(ImGuiTextFilter* self);
bool ImGuiTextFilter_PassFilter(ImGuiTextFilter* self,const char* text,const char* text_end);
bool ImGuiTextRange_empty(ImGuiTextRange* self);
bool igArrowButton(const char* str_id,ImGuiDir dir);
bool igBegin(const char* name,bool* p_open,ImGuiWindowFlags flags);
bool igBeginChildFrame(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags);
bool igBeginChild_ID(ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
bool igBeginChild_Str(const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags);
bool igBeginCombo(const char* label,const char* preview_value,ImGuiComboFlags flags);
bool igBeginDragDropSource(ImGuiDragDropFlags flags);
bool igBeginDragDropTarget(void);
bool igBeginListBox(const char* label,const ImVec2 size);
bool igBeginMainMenuBar(void);
bool igBeginMenu(const char* label,bool enabled);
bool igBeginMenuBar(void);
bool igBeginPopup(const char* str_id,ImGuiWindowFlags flags);
bool igBeginPopupContextItem(const char* str_id,ImGuiPopupFlags popup_flags);
bool igBeginPopupContextVoid(const char* str_id,ImGuiPopupFlags popup_flags);
bool igBeginPopupContextWindow(const char* str_id,ImGuiPopupFlags popup_flags);
bool igBeginPopupModal(const char* name,bool* p_open,ImGuiWindowFlags flags);
bool igBeginTabBar(const char* str_id,ImGuiTabBarFlags flags);
bool igBeginTabItem(const char* label,bool* p_open,ImGuiTabItemFlags flags);
bool igBeginTable(const char* str_id,int column,ImGuiTableFlags flags,const ImVec2 outer_size,float inner_width);
bool igButton(const char* label,const ImVec2 size);
bool igCheckbox(const char* label,bool* v);
bool igCheckboxFlags_IntPtr(const char* label,int* flags,int flags_value);
bool igCheckboxFlags_UintPtr(const char* label,unsigned int* flags,unsigned int flags_value);
bool igCollapsingHeader_BoolPtr(const char* label,bool* p_visible,ImGuiTreeNodeFlags flags);
bool igCollapsingHeader_TreeNodeFlags(const char* label,ImGuiTreeNodeFlags flags);
bool igColorButton(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,const ImVec2 size);
bool igColorEdit3(const char* label,float col,ImGuiColorEditFlags flags);
bool igColorEdit4(const char* label,float col,ImGuiColorEditFlags flags);
bool igColorPicker3(const char* label,float col,ImGuiColorEditFlags flags);
bool igColorPicker4(const char* label,float col,ImGuiColorEditFlags flags,const float* ref_col);
bool igCombo_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items);
bool igCombo_Str(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
bool igCombo_Str_arr(const char* label,int* current_item,const char* const items,int items_count,int popup_max_height_in_items);
bool igDebugCheckVersionAndDataLayout(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert,size_t sz_drawidx);
bool igDragFloat(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igDragFloat2(const char* label,float v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igDragFloat3(const char* label,float v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igDragFloat4(const char* label,float v,float v_speed,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igDragFloatRange2(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
bool igDragInt(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igDragInt2(const char* label,int v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igDragInt3(const char* label,int v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igDragInt4(const char* label,int v,float v_speed,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igDragIntRange2(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max,ImGuiSliderFlags flags);
bool igDragScalar(const char* label,ImGuiDataType data_type,void* p_data,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
bool igDragScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,float v_speed,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
bool igImageButton(const char* str_id,ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 bg_col,const ImVec4 tint_col);
bool igInputDouble(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags flags);
bool igInputFloat(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags flags);
bool igInputFloat2(const char* label,float v,const char* format,ImGuiInputTextFlags flags);
bool igInputFloat3(const char* label,float v,const char* format,ImGuiInputTextFlags flags);
bool igInputFloat4(const char* label,float v,const char* format,ImGuiInputTextFlags flags);
bool igInputInt(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags flags);
bool igInputInt2(const char* label,int v,ImGuiInputTextFlags flags);
bool igInputInt3(const char* label,int v,ImGuiInputTextFlags flags);
bool igInputInt4(const char* label,int v,ImGuiInputTextFlags flags);
bool igInputScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
bool igInputScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_step,const void* p_step_fast,const char* format,ImGuiInputTextFlags flags);
bool igInputText(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
bool igInputTextMultiline(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
bool igInputTextWithHint(const char* label,const char* hint,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiInputTextCallback callback,void* user_data);
bool igInvisibleButton(const char* str_id,const ImVec2 size,ImGuiButtonFlags flags);
bool igIsAnyItemActive(void);
bool igIsAnyItemFocused(void);
bool igIsAnyItemHovered(void);
bool igIsAnyMouseDown(void);
bool igIsItemActivated(void);
bool igIsItemActive(void);
bool igIsItemClicked(ImGuiMouseButton mouse_button);
bool igIsItemDeactivated(void);
bool igIsItemDeactivatedAfterEdit(void);
bool igIsItemEdited(void);
bool igIsItemFocused(void);
bool igIsItemHovered(ImGuiHoveredFlags flags);
bool igIsItemToggledOpen(void);
bool igIsItemVisible(void);
bool igIsKeyDown(ImGuiKey key);
bool igIsKeyPressed(ImGuiKey key,bool repeat);
bool igIsKeyReleased(ImGuiKey key);
bool igIsMouseClicked(ImGuiMouseButton button,bool repeat);
bool igIsMouseDoubleClicked(ImGuiMouseButton button);
bool igIsMouseDown(ImGuiMouseButton button);
bool igIsMouseDragging(ImGuiMouseButton button,float lock_threshold);
bool igIsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max,bool clip);
bool igIsMousePosValid(const ImVec2* mouse_pos);
bool igIsMouseReleased(ImGuiMouseButton button);
bool igIsPopupOpen(const char* str_id,ImGuiPopupFlags flags);
bool igIsRectVisible_Nil(const ImVec2 size);
bool igIsRectVisible_Vec2(const ImVec2 rect_min,const ImVec2 rect_max);
bool igIsWindowAppearing(void);
bool igIsWindowCollapsed(void);
bool igIsWindowDocked(void);
bool igIsWindowFocused(ImGuiFocusedFlags flags);
bool igIsWindowHovered(ImGuiHoveredFlags flags);
bool igListBox_FnBoolPtr(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items);
bool igListBox_Str_arr(const char* label,int* current_item,const char* const items,int items_count,int height_in_items);
bool igMenuItem_Bool(const char* label,const char* shortcut,bool selected,bool enabled);
bool igMenuItem_BoolPtr(const char* label,const char* shortcut,bool* p_selected,bool enabled);
bool igRadioButton_Bool(const char* label,bool active);
bool igRadioButton_IntPtr(const char* label,int* v,int v_button);
bool igSelectable_Bool(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
bool igSelectable_BoolPtr(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
bool igSetDragDropPayload(const char* type,const void* data,size_t sz,ImGuiCond cond);
bool igShowStyleSelector(const char* label);
bool igSliderAngle(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max,const char* format,ImGuiSliderFlags flags);
bool igSliderFloat(const char* label,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderFloat2(const char* label,float v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderFloat3(const char* label,float v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderFloat4(const char* label,float v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderInt(const char* label,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderInt2(const char* label,int v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderInt3(const char* label,int v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderInt4(const char* label,int v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igSliderScalar(const char* label,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
bool igSliderScalarN(const char* label,ImGuiDataType data_type,void* p_data,int components,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
bool igSmallButton(const char* label);
bool igTabItemButton(const char* label,ImGuiTabItemFlags flags);
bool igTableNextColumn(void);
bool igTableSetColumnIndex(int column_n);
bool igTreeNodeExV_Ptr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,char* args);
bool igTreeNodeExV_Str(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,char* args);
bool igTreeNodeEx_Ptr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt);
bool igTreeNodeEx_Str(const char* label,ImGuiTreeNodeFlags flags);
bool igTreeNodeEx_StrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt);
bool igTreeNodeV_Ptr(const void* ptr_id,const char* fmt,char* args);
bool igTreeNodeV_Str(const char* str_id,const char* fmt,char* args);
bool igTreeNode_Ptr(const void* ptr_id,const char* fmt);
bool igTreeNode_Str(const char* label);
bool igTreeNode_StrStr(const char* str_id,const char* fmt);
bool igVSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,ImGuiSliderFlags flags);
bool igVSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format,ImGuiSliderFlags flags);
bool igVSliderScalar(const char* label,const ImVec2 size,ImGuiDataType data_type,void* p_data,const void* p_min,const void* p_max,const char* format,ImGuiSliderFlags flags);
bool* ImGuiStorage_GetBoolRef(ImGuiStorage* self,ImGuiID key,bool default_val);
const ImFontGlyph* ImFont_FindGlyph(ImFont* self,ImWchar c);
const ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self,ImWchar c);
const ImGuiPayload* igAcceptDragDropPayload(const char* type,ImGuiDragDropFlags flags);
const ImGuiPayload* igGetDragDropPayload(void);
const ImVec4* igGetStyleColorVec4(ImGuiCol idx);
const ImWchar* ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
const ImWchar* ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas* self);
const char* ImFont_CalcWordWrapPositionA(ImFont* self,float scale,const char* text,const char* text_end,float wrap_width);
const char* ImFont_GetDebugName(ImFont* self);
const char* ImGuiTextBuffer_begin(ImGuiTextBuffer* self);
const char* ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);
const char* ImGuiTextBuffer_end(ImGuiTextBuffer* self);
const char* igGetClipboardText(void);
const char* igGetKeyName(ImGuiKey key);
const char* igGetStyleColorName(ImGuiCol idx);
const char* igGetVersion(void);
const char* igSaveIniSettingsToMemory(size_t* out_ini_size);
const char* igTableGetColumnName(int column_n);
double igGetTime(void);
float ImFont_GetCharAdvance(ImFont* self,ImWchar c);
float ImGuiStorage_GetFloat(ImGuiStorage* self,ImGuiID key,float default_val);
float igCalcItemWidth(void);
float igGET_FLT_MAX(void);
float igGET_FLT_MIN(void);
float igGetColumnOffset(int column_index);
float igGetColumnWidth(int column_index);
float igGetCursorPosX(void);
float igGetCursorPosY(void);
float igGetFontSize(void);
float igGetFrameHeight(void);
float igGetFrameHeightWithSpacing(void);
float igGetScrollMaxX(void);
float igGetScrollMaxY(void);
float igGetScrollX(void);
float igGetScrollY(void);
float igGetTextLineHeight(void);
float igGetTextLineHeightWithSpacing(void);
float igGetTreeNodeToLabelSpacing(void);
float igGetWindowDpiScale(void);
float igGetWindowHeight(void);
float igGetWindowWidth(void);
float* ImGuiStorage_GetFloatRef(ImGuiStorage* self,ImGuiID key,float default_val);
int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList* self,float radius);
int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self,int width,int height);
int ImGuiStorage_GetInt(ImGuiStorage* self,ImGuiID key,int default_val);
int ImGuiTextBuffer_size(ImGuiTextBuffer* self);
int igGetColumnIndex(void);
int igGetColumnsCount(void);
int igGetFrameCount(void);
int igGetKeyPressedAmount(ImGuiKey key,float repeat_delay,float rate);
int igGetMouseClickedCount(ImGuiMouseButton button);
int igTableGetColumnCount(void);
int igTableGetColumnIndex(void);
int igTableGetRowIndex(void);
int* ImGuiStorage_GetIntRef(ImGuiStorage* self,ImGuiID key,int default_val);
void ImColor_HSV(ImColor *pOut,float h,float s,float v,float a);
void ImColor_SetHSV(ImColor* self,float h,float s,float v,float a);
void ImColor_destroy(ImColor* self);
void ImDrawCmd_destroy(ImDrawCmd* self);
void ImDrawData_Clear(ImDrawData* self);
void ImDrawData_DeIndexAllBuffers(ImDrawData* self);
void ImDrawData_ScaleClipRects(ImDrawData* self,const ImVec2 fb_scale);
void ImDrawData_destroy(ImDrawData* self);
void ImDrawListSplitter_Clear(ImDrawListSplitter* self);
void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter* self);
void ImDrawListSplitter_Merge(ImDrawListSplitter* self,ImDrawList* draw_list);
void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter* self,ImDrawList* draw_list,int channel_idx);
void ImDrawListSplitter_Split(ImDrawListSplitter* self,ImDrawList* draw_list,int count);
void ImDrawListSplitter_destroy(ImDrawListSplitter* self);
void ImDrawList_AddBezierCubic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness,int num_segments);
void ImDrawList_AddBezierQuadratic(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness,int num_segments);
void ImDrawList_AddCallback(ImDrawList* self,ImDrawCallback callback,void* callback_data);
void ImDrawList_AddCircle(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
void ImDrawList_AddCircleFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
void ImDrawList_AddConvexPolyFilled(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col);
void ImDrawList_AddDrawCmd(ImDrawList* self);
void ImDrawList_AddImage(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col);
void ImDrawList_AddImageQuad(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,const ImVec2 uv1,const ImVec2 uv2,const ImVec2 uv3,const ImVec2 uv4,ImU32 col);
void ImDrawList_AddImageRounded(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 p_min,const ImVec2 p_max,const ImVec2 uv_min,const ImVec2 uv_max,ImU32 col,float rounding,ImDrawFlags flags);
void ImDrawList_AddLine(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,ImU32 col,float thickness);
void ImDrawList_AddNgon(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments,float thickness);
void ImDrawList_AddNgonFilled(ImDrawList* self,const ImVec2 center,float radius,ImU32 col,int num_segments);
void ImDrawList_AddPolyline(ImDrawList* self,const ImVec2* points,int num_points,ImU32 col,ImDrawFlags flags,float thickness);
void ImDrawList_AddQuad(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col,float thickness);
void ImDrawList_AddQuadFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,ImU32 col);
void ImDrawList_AddRect(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags,float thickness);
void ImDrawList_AddRectFilled(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col,float rounding,ImDrawFlags flags);
void ImDrawList_AddRectFilledMultiColor(ImDrawList* self,const ImVec2 p_min,const ImVec2 p_max,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
void ImDrawList_AddText_FontPtr(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect);
void ImDrawList_AddText_Vec2(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
void ImDrawList_AddTriangle(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col,float thickness);
void ImDrawList_AddTriangleFilled(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,ImU32 col);
void ImDrawList_ChannelsMerge(ImDrawList* self);
void ImDrawList_ChannelsSetCurrent(ImDrawList* self,int n);
void ImDrawList_ChannelsSplit(ImDrawList* self,int count);
void ImDrawList_GetClipRectMax(ImVec2 *pOut,ImDrawList* self);
void ImDrawList_GetClipRectMin(ImVec2 *pOut,ImDrawList* self);
void ImDrawList_PathArcTo(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
void ImDrawList_PathArcToFast(ImDrawList* self,const ImVec2 center,float radius,int a_min_of_12,int a_max_of_12);
void ImDrawList_PathBezierCubicCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,const ImVec2 p4,int num_segments);
void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList* self,const ImVec2 p2,const ImVec2 p3,int num_segments);
void ImDrawList_PathClear(ImDrawList* self);
void ImDrawList_PathFillConvex(ImDrawList* self,ImU32 col);
void ImDrawList_PathLineTo(ImDrawList* self,const ImVec2 pos);
void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self,const ImVec2 pos);
void ImDrawList_PathRect(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,ImDrawFlags flags);
void ImDrawList_PathStroke(ImDrawList* self,ImU32 col,ImDrawFlags flags,float thickness);
void ImDrawList_PopClipRect(ImDrawList* self);
void ImDrawList_PopTextureID(ImDrawList* self);
void ImDrawList_PrimQuadUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
void ImDrawList_PrimRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
void ImDrawList_PrimRectUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
void ImDrawList_PrimReserve(ImDrawList* self,int idx_count,int vtx_count);
void ImDrawList_PrimUnreserve(ImDrawList* self,int idx_count,int vtx_count);
void ImDrawList_PrimVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
void ImDrawList_PrimWriteIdx(ImDrawList* self,ImDrawIdx idx);
void ImDrawList_PrimWriteVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
void ImDrawList_PushClipRect(ImDrawList* self,const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
void ImDrawList_PushClipRectFullScreen(ImDrawList* self);
void ImDrawList_PushTextureID(ImDrawList* self,ImTextureID texture_id);
void ImDrawList__ClearFreeMemory(ImDrawList* self);
void ImDrawList__OnChangedClipRect(ImDrawList* self);
void ImDrawList__OnChangedTextureID(ImDrawList* self);
void ImDrawList__OnChangedVtxOffset(ImDrawList* self);
void ImDrawList__PathArcToFastEx(ImDrawList* self,const ImVec2 center,float radius,int a_min_sample,int a_max_sample,int a_step);
void ImDrawList__PathArcToN(ImDrawList* self,const ImVec2 center,float radius,float a_min,float a_max,int num_segments);
void ImDrawList__PopUnusedDrawCmd(ImDrawList* self);
void ImDrawList__ResetForNewFrame(ImDrawList* self);
void ImDrawList__TryMergeDrawCmds(ImDrawList* self);
void ImDrawList_destroy(ImDrawList* self);
void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect* self);
void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self,const ImFontAtlasCustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
void ImFontAtlas_Clear(ImFontAtlas* self);
void ImFontAtlas_ClearFonts(ImFontAtlas* self);
void ImFontAtlas_ClearInputData(ImFontAtlas* self);
void ImFontAtlas_ClearTexData(ImFontAtlas* self);
void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
void ImFontAtlas_SetTexID(ImFontAtlas* self,ImTextureID id);
void ImFontAtlas_destroy(ImFontAtlas* self);
void ImFontConfig_destroy(ImFontConfig* self);
void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder* self,ImWchar c);
void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder* self,const ImWchar* ranges);
void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder* self,const char* text,const char* text_end);
void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder* self);
void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder* self,size_t n);
void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder* self);
void ImFont_AddGlyph(ImFont* self,const ImFontConfig* src_cfg,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
void ImFont_AddRemapChar(ImFont* self,ImWchar dst,ImWchar src,bool overwrite_dst);
void ImFont_BuildLookupTable(ImFont* self);
void ImFont_CalcTextSizeA(ImVec2 *pOut,ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining);
void ImFont_ClearOutputData(ImFont* self);
void ImFont_GrowIndex(ImFont* self,int new_size);
void ImFont_RenderChar(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,ImWchar c);
void ImFont_RenderText(ImFont* self,ImDrawList* draw_list,float size,const ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,bool cpu_fine_clip);
void ImFont_SetGlyphVisible(ImFont* self,ImWchar c,bool visible);
void ImFont_destroy(ImFont* self);
void ImGuiIO_AddFocusEvent(ImGuiIO* self,bool focused);
void ImGuiIO_AddInputCharacter(ImGuiIO* self,unsigned int c);
void ImGuiIO_AddInputCharacterUTF16(ImGuiIO* self,ImWchar16 c);
void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self,const char* str);
void ImGuiIO_AddKeyAnalogEvent(ImGuiIO* self,ImGuiKey key,bool down,float v);
void ImGuiIO_AddKeyEvent(ImGuiIO* self,ImGuiKey key,bool down);
void ImGuiIO_AddMouseButtonEvent(ImGuiIO* self,int button,bool down);
void ImGuiIO_AddMousePosEvent(ImGuiIO* self,float x,float y);
void ImGuiIO_AddMouseViewportEvent(ImGuiIO* self,ImGuiID id);
void ImGuiIO_AddMouseWheelEvent(ImGuiIO* self,float wheel_x,float wheel_y);
void ImGuiIO_ClearInputCharacters(ImGuiIO* self);
void ImGuiIO_ClearInputKeys(ImGuiIO* self);
void ImGuiIO_SetAppAcceptingEvents(ImGuiIO* self,bool accepting_events);
void ImGuiIO_SetKeyEventNativeData(ImGuiIO* self,ImGuiKey key,int native_keycode,int native_scancode,int native_legacy_index);
void ImGuiIO_destroy(ImGuiIO* self);
void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData* self);
void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData* self,int pos,int bytes_count);
void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData* self,int pos,const char* text,const char* text_end);
void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData* self);
void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData* self);
void ImGuiListClipper_Begin(ImGuiListClipper* self,int items_count,float items_height);
void ImGuiListClipper_End(ImGuiListClipper* self);
void ImGuiListClipper_ForceDisplayRangeByIndices(ImGuiListClipper* self,int item_min,int item_max);
void ImGuiListClipper_destroy(ImGuiListClipper* self);
void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame* self);
void ImGuiPayload_Clear(ImGuiPayload* self);
void ImGuiPayload_destroy(ImGuiPayload* self);
void ImGuiPlatformIO_destroy(ImGuiPlatformIO* self);
void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData* self);
void ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor* self);
void ImGuiStoragePair_destroy(ImGuiStoragePair* self);
void ImGuiStorage_BuildSortByKey(ImGuiStorage* self);
void ImGuiStorage_Clear(ImGuiStorage* self);
void ImGuiStorage_SetAllInt(ImGuiStorage* self,int val);
void ImGuiStorage_SetBool(ImGuiStorage* self,ImGuiID key,bool val);
void ImGuiStorage_SetFloat(ImGuiStorage* self,ImGuiID key,float val);
void ImGuiStorage_SetInt(ImGuiStorage* self,ImGuiID key,int val);
void ImGuiStorage_SetVoidPtr(ImGuiStorage* self,ImGuiID key,void* val);
void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self,float scale_factor);
void ImGuiStyle_destroy(ImGuiStyle* self);
void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs* self);
void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs* self);
void ImGuiTextBuffer_append(ImGuiTextBuffer* self,const char* str,const char* str_end);
void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer,const char *fmt);
void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self,const char* fmt,char* args);
void ImGuiTextBuffer_clear(ImGuiTextBuffer* self);
void ImGuiTextBuffer_destroy(ImGuiTextBuffer* self);
void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self,int capacity);
void ImGuiTextFilter_Build(ImGuiTextFilter* self);
void ImGuiTextFilter_Clear(ImGuiTextFilter* self);
void ImGuiTextFilter_destroy(ImGuiTextFilter* self);
void ImGuiTextRange_destroy(ImGuiTextRange* self);
void ImGuiTextRange_split(ImGuiTextRange* self,char separator,ImVector_ImGuiTextRange* out);
void ImGuiViewport_GetCenter(ImVec2 *pOut,ImGuiViewport* self);
void ImGuiViewport_GetWorkCenter(ImVec2 *pOut,ImGuiViewport* self);
void ImGuiViewport_destroy(ImGuiViewport* self);
void ImGuiWindowClass_destroy(ImGuiWindowClass* self);
void ImVec2_destroy(ImVec2* self);
void ImVec4_destroy(ImVec4* self);
void ImVector_ImWchar_Init(ImVector_ImWchar* p);
void ImVector_ImWchar_UnInit(ImVector_ImWchar* p);
void ImVector_ImWchar_destroy(ImVector_ImWchar* self);
void igAlignTextToFramePadding(void);
void igBeginDisabled(bool disabled);
void igBeginGroup(void);
void igBeginTooltip(void);
void igBullet(void);
void igBulletText(const char* fmt);
void igBulletTextV(const char* fmt,char* args);
void igCalcTextSize(ImVec2 *pOut,const char* text,const char* text_end,bool hide_text_after_double_hash,float wrap_width);
void igCloseCurrentPopup(void);
void igColorConvertHSVtoRGB(float h,float s,float v,float* out_r,float* out_g,float* out_b);
void igColorConvertRGBtoHSV(float r,float g,float b,float* out_h,float* out_s,float* out_v);
void igColorConvertU32ToFloat4(ImVec4 *pOut,ImU32 in);
void igColumns(int count,const char* id,bool border);
void igDebugTextEncoding(const char* text);
void igDestroyContext(ImGuiContext* ctx);
void igDestroyPlatformWindows(void);
void igDummy(const ImVec2 size);
void igEnd(void);
void igEndChild(void);
void igEndChildFrame(void);
void igEndCombo(void);
void igEndDisabled(void);
void igEndDragDropSource(void);
void igEndDragDropTarget(void);
void igEndFrame(void);
void igEndGroup(void);
void igEndListBox(void);
void igEndMainMenuBar(void);
void igEndMenu(void);
void igEndMenuBar(void);
void igEndPopup(void);
void igEndTabBar(void);
void igEndTabItem(void);
void igEndTable(void);
void igEndTooltip(void);
void igGetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func,ImGuiMemFreeFunc* p_free_func,void** p_user_data);
void igGetContentRegionAvail(ImVec2 *pOut);
void igGetContentRegionMax(ImVec2 *pOut);
void igGetCursorPos(ImVec2 *pOut);
void igGetCursorScreenPos(ImVec2 *pOut);
void igGetCursorStartPos(ImVec2 *pOut);
void igGetFontTexUvWhitePixel(ImVec2 *pOut);
void igGetItemRectMax(ImVec2 *pOut);
void igGetItemRectMin(ImVec2 *pOut);
void igGetItemRectSize(ImVec2 *pOut);
void igGetMouseDragDelta(ImVec2 *pOut,ImGuiMouseButton button,float lock_threshold);
void igGetMousePos(ImVec2 *pOut);
void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut);
void igGetWindowContentRegionMax(ImVec2 *pOut);
void igGetWindowContentRegionMin(ImVec2 *pOut);
void igGetWindowPos(ImVec2 *pOut);
void igGetWindowSize(ImVec2 *pOut);
void igImage(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
void igIndent(float indent_w);
void igLabelText(const char* label,const char* fmt);
void igLabelTextV(const char* label,const char* fmt,char* args);
void igLoadIniSettingsFromDisk(const char* ini_filename);
void igLoadIniSettingsFromMemory(const char* ini_data,size_t ini_size);
void igLogButtons(void);
void igLogFinish(void);
void igLogText(const char *fmt);
void igLogTextV(const char* fmt,char* args);
void igLogToClipboard(int auto_open_depth);
void igLogToFile(int auto_open_depth,const char* filename);
void igLogToTTY(int auto_open_depth);
void igMemFree(void* ptr);
void igNewFrame(void);
void igNewLine(void);
void igNextColumn(void);
void igOpenPopupOnItemClick(const char* str_id,ImGuiPopupFlags popup_flags);
void igOpenPopup_ID(ImGuiID id,ImGuiPopupFlags popup_flags);
void igOpenPopup_Str(const char* str_id,ImGuiPopupFlags popup_flags);
void igPlotHistogram_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
void igPlotHistogram_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
void igPlotLines_FloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
void igPlotLines_FnFloatPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
void igPopAllowKeyboardFocus(void);
void igPopButtonRepeat(void);
void igPopClipRect(void);
void igPopFont(void);
void igPopID(void);
void igPopItemWidth(void);
void igPopStyleColor(int count);
void igPopStyleVar(int count);
void igPopTextWrapPos(void);
void igProgressBar(float fraction,const ImVec2 size_arg,const char* overlay);
void igPushAllowKeyboardFocus(bool allow_keyboard_focus);
void igPushButtonRepeat(bool repeat);
void igPushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect);
void igPushFont(ImFont* font);
void igPushID_Int(int int_id);
void igPushID_Ptr(const void* ptr_id);
void igPushID_Str(const char* str_id);
void igPushID_StrStr(const char* str_id_begin,const char* str_id_end);
void igPushItemWidth(float item_width);
void igPushStyleColor_U32(ImGuiCol idx,ImU32 col);
void igPushStyleColor_Vec4(ImGuiCol idx,const ImVec4 col);
void igPushStyleVar_Float(ImGuiStyleVar idx,float val);
void igPushStyleVar_Vec2(ImGuiStyleVar idx,const ImVec2 val);
void igPushTextWrapPos(float wrap_local_pos_x);
void igRender(void);
void igRenderPlatformWindowsDefault(void* platform_render_arg,void* renderer_render_arg);
void igResetMouseDragDelta(ImGuiMouseButton button);
void igSameLine(float offset_from_start_x,float spacing);
void igSaveIniSettingsToDisk(const char* ini_filename);
void igSeparator(void);
void igSeparatorText(const char* label);
void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func,ImGuiMemFreeFunc free_func,void* user_data);
void igSetClipboardText(const char* text);
void igSetColorEditOptions(ImGuiColorEditFlags flags);
void igSetColumnOffset(int column_index,float offset_x);
void igSetColumnWidth(int column_index,float width);
void igSetCurrentContext(ImGuiContext* ctx);
void igSetCursorPos(const ImVec2 local_pos);
void igSetCursorPosX(float local_x);
void igSetCursorPosY(float local_y);
void igSetCursorScreenPos(const ImVec2 pos);
void igSetItemAllowOverlap(void);
void igSetItemDefaultFocus(void);
void igSetKeyboardFocusHere(int offset);
void igSetMouseCursor(ImGuiMouseCursor cursor_type);
void igSetNextFrameWantCaptureKeyboard(bool want_capture_keyboard);
void igSetNextFrameWantCaptureMouse(bool want_capture_mouse);
void igSetNextItemOpen(bool is_open,ImGuiCond cond);
void igSetNextItemWidth(float item_width);
void igSetNextWindowBgAlpha(float alpha);
void igSetNextWindowClass(const ImGuiWindowClass* window_class);
void igSetNextWindowCollapsed(bool collapsed,ImGuiCond cond);
void igSetNextWindowContentSize(const ImVec2 size);
void igSetNextWindowDockID(ImGuiID dock_id,ImGuiCond cond);
void igSetNextWindowFocus(void);
void igSetNextWindowPos(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
void igSetNextWindowScroll(const ImVec2 scroll);
void igSetNextWindowSize(const ImVec2 size,ImGuiCond cond);
void igSetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
void igSetNextWindowViewport(ImGuiID viewport_id);
void igSetScrollFromPosX(float local_x,float center_x_ratio);
void igSetScrollFromPosY(float local_y,float center_y_ratio);
void igSetScrollHereX(float center_x_ratio);
void igSetScrollHereY(float center_y_ratio);
void igSetScrollX(float scroll_x);
void igSetScrollY(float scroll_y);
void igSetStateStorage(ImGuiStorage* storage);
void igSetTabItemClosed(const char* tab_or_docked_window_label);
void igSetTooltip(const char* fmt);
void igSetTooltipV(const char* fmt,char* args);
void igSetWindowCollapsed_Bool(bool collapsed,ImGuiCond cond);
void igSetWindowCollapsed_Str(const char* name,bool collapsed,ImGuiCond cond);
void igSetWindowFocus_Nil(void);
void igSetWindowFocus_Str(const char* name);
void igSetWindowFontScale(float scale);
void igSetWindowPos_Str(const char* name,const ImVec2 pos,ImGuiCond cond);
void igSetWindowPos_Vec2(const ImVec2 pos,ImGuiCond cond);
void igSetWindowSize_Str(const char* name,const ImVec2 size,ImGuiCond cond);
void igSetWindowSize_Vec2(const ImVec2 size,ImGuiCond cond);
void igShowAboutWindow(bool* p_open);
void igShowDebugLogWindow(bool* p_open);
void igShowDemoWindow(bool* p_open);
void igShowFontSelector(const char* label);
void igShowMetricsWindow(bool* p_open);
void igShowStackToolWindow(bool* p_open);
void igShowStyleEditor(ImGuiStyle* ref);
void igShowUserGuide(void);
void igSpacing(void);
void igStyleColorsClassic(ImGuiStyle* dst);
void igStyleColorsDark(ImGuiStyle* dst);
void igStyleColorsLight(ImGuiStyle* dst);
void igTableHeader(const char* label);
void igTableHeadersRow(void);
void igTableNextRow(ImGuiTableRowFlags row_flags,float min_row_height);
void igTableSetBgColor(ImGuiTableBgTarget target,ImU32 color,int column_n);
void igTableSetColumnEnabled(int column_n,bool v);
void igTableSetupColumn(const char* label,ImGuiTableColumnFlags flags,float init_width_or_weight,ImGuiID user_id);
void igTableSetupScrollFreeze(int cols,int rows);
void igText(const char* fmt);
void igTextColored(const ImVec4 col,const char* fmt);
void igTextColoredV(const ImVec4 col,const char* fmt,char* args);
void igTextDisabled(const char* fmt);
void igTextDisabledV(const char* fmt,char* args);
void igTextUnformatted(const char* text,const char* text_end);
void igTextV(const char* fmt,char* args);
void igTextWrapped(const char* fmt);
void igTextWrappedV(const char* fmt,char* args);
void igTreePop(void);
void igTreePush_Ptr(const void* ptr_id);
void igTreePush_Str(const char* str_id);
void igUnindent(float indent_w);
void igUpdatePlatformWindows(void);
void igValue_Bool(const char* prefix,bool b);
void igValue_Float(const char* prefix,float v,const char* float_format);
void igValue_Int(const char* prefix,int v);
void igValue_Uint(const char* prefix,unsigned int v);
void* ImGuiStorage_GetVoidPtr(ImGuiStorage* self,ImGuiID key);
void* igMemAlloc(size_t size);
void** ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self,ImGuiID key,void* default_val);