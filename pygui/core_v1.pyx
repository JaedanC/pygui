import cython
from cython.operator import dereference

from collections import namedtuple
from typing import Callable

from . cimport ccimgui
from libcpp cimport bool
from libc.stdint cimport uintptr_t
from cython.view cimport array as cvarray
from cpython.version cimport PY_MAJOR_VERSION

IM_DRAW_FLAGS_NONE = ccimgui.ImDrawFlags_None
IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_

IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset

IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines

IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImguiBackendFlags_None
IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImguiBackendFlags_HasGamepad
IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImguiBackendFlags_HasMouseCursors
IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImguiBackendFlags_HasSetMousePos
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImguiBackendFlags_RendererHasVtxOffset
IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImguiBackendFlags_PlatformHasViewports
IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImguiBackendFlags_HasMouseHoveredViewport
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImguiBackendFlags_RendererHasViewports

IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImguiButtonFlags_None
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImguiButtonFlags_MouseButtonLeft
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImguiButtonFlags_MouseButtonRight
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImguiButtonFlags_MouseButtonMiddle
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImguiButtonFlags_MouseButtonMask_
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImguiButtonFlags_MouseButtonDefault_

IMGUI_COL_TEXT = ccimgui.ImguiCol_Text
IMGUI_COL_TEXT_DISABLED = ccimgui.ImguiCol_TextDisabled
IMGUI_COL_WINDOW_BG = ccimgui.ImguiCol_WindowBg
IMGUI_COL_CHILD_BG = ccimgui.ImguiCol_ChildBg
IMGUI_COL_POPUP_BG = ccimgui.ImguiCol_PopupBg
IMGUI_COL_BORDER = ccimgui.ImguiCol_Border
IMGUI_COL_BORDER_SHADOW = ccimgui.ImguiCol_BorderShadow
IMGUI_COL_FRAME_BG = ccimgui.ImguiCol_FrameBg
IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImguiCol_FrameBgHovered
IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImguiCol_FrameBgActive
IMGUI_COL_TITLE_BG = ccimgui.ImguiCol_TitleBg
IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImguiCol_TitleBgActive
IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImguiCol_TitleBgCollapsed
IMGUI_COL_MENU_BAR_BG = ccimgui.ImguiCol_MenuBarBg
IMGUI_COL_SCROLLBAR_BG = ccimgui.ImguiCol_ScrollbarBg
IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImguiCol_ScrollbarGrab
IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImguiCol_ScrollbarGrabHovered
IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImguiCol_ScrollbarGrabActive
IMGUI_COL_CHECK_MARK = ccimgui.ImguiCol_CheckMark
IMGUI_COL_SLIDER_GRAB = ccimgui.ImguiCol_SliderGrab
IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImguiCol_SliderGrabActive
IMGUI_COL_BUTTON = ccimgui.ImguiCol_Button
IMGUI_COL_BUTTON_HOVERED = ccimgui.ImguiCol_ButtonHovered
IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImguiCol_ButtonActive
IMGUI_COL_HEADER = ccimgui.ImguiCol_Header
IMGUI_COL_HEADER_HOVERED = ccimgui.ImguiCol_HeaderHovered
IMGUI_COL_HEADER_ACTIVE = ccimgui.ImguiCol_HeaderActive
IMGUI_COL_SEPARATOR = ccimgui.ImguiCol_Separator
IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImguiCol_SeparatorHovered
IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImguiCol_SeparatorActive
IMGUI_COL_RESIZE_GRIP = ccimgui.ImguiCol_ResizeGrip
IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImguiCol_ResizeGripHovered
IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImguiCol_ResizeGripActive
IMGUI_COL_TAB = ccimgui.ImguiCol_Tab
IMGUI_COL_TAB_HOVERED = ccimgui.ImguiCol_TabHovered
IMGUI_COL_TAB_ACTIVE = ccimgui.ImguiCol_TabActive
IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImguiCol_TabUnfocused
IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImguiCol_TabUnfocusedActive
IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImguiCol_DockingPreview
IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImguiCol_DockingEmptyBg
IMGUI_COL_PLOT_LINES = ccimgui.ImguiCol_PlotLines
IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImguiCol_PlotLinesHovered
IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImguiCol_PlotHistogram
IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImguiCol_PlotHistogramHovered
IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImguiCol_TableHeaderBg
IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImguiCol_TableBorderStrong
IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImguiCol_TableBorderLight
IMGUI_COL_TABLE_ROW_BG = ccimgui.ImguiCol_TableRowBg
IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImguiCol_TableRowBgAlt
IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImguiCol_TextSelectedBg
IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImguiCol_DragDropTarget
IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImguiCol_NavHighlight
IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImguiCol_NavWindowingHighlight
IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImguiCol_NavWindowingDimBg
IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImguiCol_ModalWindowDimBg
IMGUI_COL_COUNT = ccimgui.ImguiCol_COUNT

IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImguiColorEditFlags_None
IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImguiColorEditFlags_NoAlpha
IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImguiColorEditFlags_NoPicker
IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImguiColorEditFlags_NoOptions
IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImguiColorEditFlags_NoSmallPreview
IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImguiColorEditFlags_NoInputs
IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImguiColorEditFlags_NoTooltip
IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImguiColorEditFlags_NoLabel
IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImguiColorEditFlags_NoSidePreview
IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImguiColorEditFlags_NoDragDrop
IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImguiColorEditFlags_NoBorder
IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImguiColorEditFlags_AlphaBar
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImguiColorEditFlags_AlphaPreview
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImguiColorEditFlags_AlphaPreviewHalf
IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImguiColorEditFlags_HDR
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImguiColorEditFlags_DisplayRGB
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImguiColorEditFlags_DisplayHSV
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImguiColorEditFlags_DisplayHex
IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImguiColorEditFlags_Uint8
IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImguiColorEditFlags_Float
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImguiColorEditFlags_PickerHueBar
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImguiColorEditFlags_PickerHueWheel
IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImguiColorEditFlags_InputRGB
IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImguiColorEditFlags_InputHSV
IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImguiColorEditFlags_DefaultOptions_
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImguiColorEditFlags_DisplayMask_
IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImguiColorEditFlags_DataTypeMask_
IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImguiColorEditFlags_PickerMask_
IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImguiColorEditFlags_InputMask_

IMGUI_COMBO_FLAGS_NONE = ccimgui.ImguiComboFlags_None
IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImguiComboFlags_PopupAlignLeft
IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImguiComboFlags_HeightSmall
IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImguiComboFlags_HeightRegular
IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImguiComboFlags_HeightLarge
IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImguiComboFlags_HeightLargest
IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImguiComboFlags_NoArrowButton
IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImguiComboFlags_NoPreview
IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImguiComboFlags_HeightMask_

IMGUI_COND_NONE = ccimgui.ImguiCond_None
IMGUI_COND_ALWAYS = ccimgui.ImguiCond_Always
IMGUI_COND_ONCE = ccimgui.ImguiCond_Once
IMGUI_COND_FIRST_USE_EVER = ccimgui.ImguiCond_FirstUseEver
IMGUI_COND_APPEARING = ccimgui.ImguiCond_Appearing

IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImguiConfigFlags_None
IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImguiConfigFlags_NavEnableKeyboard
IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImguiConfigFlags_NavEnableGamepad
IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImguiConfigFlags_NavEnableSetMousePos
IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImguiConfigFlags_NavNoCaptureKeyboard
IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImguiConfigFlags_NoMouse
IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImguiConfigFlags_NoMouseCursorChange
IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImguiConfigFlags_DockingEnable
IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImguiConfigFlags_ViewportsEnable
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImguiConfigFlags_DpiEnableScaleViewports
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImguiConfigFlags_DpiEnableScaleFonts
IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImguiConfigFlags_IsSRGB
IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImguiConfigFlags_IsTouchScreen

IMGUI_DATA_TYPE_S8 = ccimgui.ImguiDataType_S8
IMGUI_DATA_TYPE_U8 = ccimgui.ImguiDataType_U8
IMGUI_DATA_TYPE_S16 = ccimgui.ImguiDataType_S16
IMGUI_DATA_TYPE_U16 = ccimgui.ImguiDataType_U16
IMGUI_DATA_TYPE_S32 = ccimgui.ImguiDataType_S32
IMGUI_DATA_TYPE_U32 = ccimgui.ImguiDataType_U32
IMGUI_DATA_TYPE_S64 = ccimgui.ImguiDataType_S64
IMGUI_DATA_TYPE_U64 = ccimgui.ImguiDataType_U64
IMGUI_DATA_TYPE_FLOAT = ccimgui.ImguiDataType_Float
IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImguiDataType_Double
IMGUI_DATA_TYPE_COUNT = ccimgui.ImguiDataType_COUNT

IMGUI_DIR_NONE = ccimgui.ImguiDir_None
IMGUI_DIR_LEFT = ccimgui.ImguiDir_Left
IMGUI_DIR_RIGHT = ccimgui.ImguiDir_Right
IMGUI_DIR_UP = ccimgui.ImguiDir_Up
IMGUI_DIR_DOWN = ccimgui.ImguiDir_Down
IMGUI_DIR_COUNT = ccimgui.ImguiDir_COUNT

IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImguiDockNodeFlags_None
IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImguiDockNodeFlags_KeepAliveOnly
IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImguiDockNodeFlags_NoDockingInCentralNode
IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImguiDockNodeFlags_PassthruCentralNode
IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImguiDockNodeFlags_NoSplit
IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImguiDockNodeFlags_NoResize
IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImguiDockNodeFlags_AutoHideTabBar

IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImguiDragDropFlags_None
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImguiDragDropFlags_SourceNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImguiDragDropFlags_SourceNoDisableHover
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImguiDragDropFlags_SourceNoHoldToOpenOthers
IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImguiDragDropFlags_SourceAllowNullID
IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImguiDragDropFlags_SourceExtern
IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImguiDragDropFlags_SourceAutoExpirePayload
IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImguiDragDropFlags_AcceptBeforeDelivery
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImguiDragDropFlags_AcceptNoDrawDefaultRect
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImguiDragDropFlags_AcceptNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImguiDragDropFlags_AcceptPeekOnly

IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImguiFocusedFlags_None
IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImguiFocusedFlags_ChildWindows
IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImguiFocusedFlags_RootWindow
IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImguiFocusedFlags_AnyWindow
IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImguiFocusedFlags_NoPopupHierarchy
IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImguiFocusedFlags_DockHierarchy
IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImguiFocusedFlags_RootAndChildWindows

IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImguiHoveredFlags_None
IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImguiHoveredFlags_ChildWindows
IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImguiHoveredFlags_RootWindow
IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImguiHoveredFlags_AnyWindow
IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImguiHoveredFlags_NoPopupHierarchy
IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImguiHoveredFlags_DockHierarchy
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImguiHoveredFlags_AllowWhenBlockedByPopup
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImguiHoveredFlags_AllowWhenBlockedByActiveItem
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImguiHoveredFlags_AllowWhenOverlapped
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImguiHoveredFlags_AllowWhenDisabled
IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImguiHoveredFlags_NoNavOverride
IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImguiHoveredFlags_RectOnly
IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImguiHoveredFlags_RootAndChildWindows
IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImguiHoveredFlags_DelayNormal
IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImguiHoveredFlags_DelayShort
IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImguiHoveredFlags_NoSharedDelay

IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImguiInputTextFlags_None
IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImguiInputTextFlags_CharsDecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImguiInputTextFlags_CharsHexadecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImguiInputTextFlags_CharsUppercase
IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImguiInputTextFlags_CharsNoBlank
IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImguiInputTextFlags_AutoSelectAll
IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImguiInputTextFlags_EnterReturnsTrue
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImguiInputTextFlags_CallbackCompletion
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImguiInputTextFlags_CallbackHistory
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImguiInputTextFlags_CallbackAlways
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImguiInputTextFlags_CallbackCharFilter
IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImguiInputTextFlags_AllowTabInput
IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImguiInputTextFlags_CtrlEnterForNewLine
IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImguiInputTextFlags_NoHorizontalScroll
IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImguiInputTextFlags_AlwaysOverwrite
IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImguiInputTextFlags_ReadOnly
IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImguiInputTextFlags_Password
IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImguiInputTextFlags_NoUndoRedo
IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImguiInputTextFlags_CharsScientific
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImguiInputTextFlags_CallbackResize
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImguiInputTextFlags_CallbackEdit
IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImguiInputTextFlags_EscapeClearsAll

IMGUI_KEY_NONE = ccimgui.ImguiKey_None
IMGUI_KEY_TAB = ccimgui.ImguiKey_Tab
IMGUI_KEY_LEFT_ARROW = ccimgui.ImguiKey_LeftArrow
IMGUI_KEY_RIGHT_ARROW = ccimgui.ImguiKey_RightArrow
IMGUI_KEY_UP_ARROW = ccimgui.ImguiKey_UpArrow
IMGUI_KEY_DOWN_ARROW = ccimgui.ImguiKey_DownArrow
IMGUI_KEY_PAGE_UP = ccimgui.ImguiKey_PageUp
IMGUI_KEY_PAGE_DOWN = ccimgui.ImguiKey_PageDown
IMGUI_KEY_HOME = ccimgui.ImguiKey_Home
IMGUI_KEY_END = ccimgui.ImguiKey_End
IMGUI_KEY_INSERT = ccimgui.ImguiKey_Insert
IMGUI_KEY_DELETE = ccimgui.ImguiKey_Delete
IMGUI_KEY_BACKSPACE = ccimgui.ImguiKey_Backspace
IMGUI_KEY_SPACE = ccimgui.ImguiKey_Space
IMGUI_KEY_ENTER = ccimgui.ImguiKey_Enter
IMGUI_KEY_ESCAPE = ccimgui.ImguiKey_Escape
IMGUI_KEY_LEFT_CTRL = ccimgui.ImguiKey_LeftCtrl
IMGUI_KEY_LEFT_SHIFT = ccimgui.ImguiKey_LeftShift
IMGUI_KEY_LEFT_ALT = ccimgui.ImguiKey_LeftAlt
IMGUI_KEY_LEFT_SUPER = ccimgui.ImguiKey_LeftSuper
IMGUI_KEY_RIGHT_CTRL = ccimgui.ImguiKey_RightCtrl
IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImguiKey_RightShift
IMGUI_KEY_RIGHT_ALT = ccimgui.ImguiKey_RightAlt
IMGUI_KEY_RIGHT_SUPER = ccimgui.ImguiKey_RightSuper
IMGUI_KEY_MENU = ccimgui.ImguiKey_Menu
IMGUI_KEY_0 = ccimgui.ImguiKey_0
IMGUI_KEY_1 = ccimgui.ImguiKey_1
IMGUI_KEY_2 = ccimgui.ImguiKey_2
IMGUI_KEY_3 = ccimgui.ImguiKey_3
IMGUI_KEY_4 = ccimgui.ImguiKey_4
IMGUI_KEY_5 = ccimgui.ImguiKey_5
IMGUI_KEY_6 = ccimgui.ImguiKey_6
IMGUI_KEY_7 = ccimgui.ImguiKey_7
IMGUI_KEY_8 = ccimgui.ImguiKey_8
IMGUI_KEY_9 = ccimgui.ImguiKey_9
IMGUI_KEY_A = ccimgui.ImguiKey_A
IMGUI_KEY_B = ccimgui.ImguiKey_B
IMGUI_KEY_C = ccimgui.ImguiKey_C
IMGUI_KEY_D = ccimgui.ImguiKey_D
IMGUI_KEY_E = ccimgui.ImguiKey_E
IMGUI_KEY_F = ccimgui.ImguiKey_F
IMGUI_KEY_G = ccimgui.ImguiKey_G
IMGUI_KEY_H = ccimgui.ImguiKey_H
IMGUI_KEY_I = ccimgui.ImguiKey_I
IMGUI_KEY_J = ccimgui.ImguiKey_J
IMGUI_KEY_K = ccimgui.ImguiKey_K
IMGUI_KEY_L = ccimgui.ImguiKey_L
IMGUI_KEY_M = ccimgui.ImguiKey_M
IMGUI_KEY_N = ccimgui.ImguiKey_N
IMGUI_KEY_O = ccimgui.ImguiKey_O
IMGUI_KEY_P = ccimgui.ImguiKey_P
IMGUI_KEY_Q = ccimgui.ImguiKey_Q
IMGUI_KEY_R = ccimgui.ImguiKey_R
IMGUI_KEY_S = ccimgui.ImguiKey_S
IMGUI_KEY_T = ccimgui.ImguiKey_T
IMGUI_KEY_U = ccimgui.ImguiKey_U
IMGUI_KEY_V = ccimgui.ImguiKey_V
IMGUI_KEY_W = ccimgui.ImguiKey_W
IMGUI_KEY_X = ccimgui.ImguiKey_X
IMGUI_KEY_Y = ccimgui.ImguiKey_Y
IMGUI_KEY_Z = ccimgui.ImguiKey_Z
IMGUI_KEY_F1 = ccimgui.ImguiKey_F1
IMGUI_KEY_F2 = ccimgui.ImguiKey_F2
IMGUI_KEY_F3 = ccimgui.ImguiKey_F3
IMGUI_KEY_F4 = ccimgui.ImguiKey_F4
IMGUI_KEY_F5 = ccimgui.ImguiKey_F5
IMGUI_KEY_F6 = ccimgui.ImguiKey_F6
IMGUI_KEY_F7 = ccimgui.ImguiKey_F7
IMGUI_KEY_F8 = ccimgui.ImguiKey_F8
IMGUI_KEY_F9 = ccimgui.ImguiKey_F9
IMGUI_KEY_F10 = ccimgui.ImguiKey_F10
IMGUI_KEY_F11 = ccimgui.ImguiKey_F11
IMGUI_KEY_F12 = ccimgui.ImguiKey_F12
IMGUI_KEY_APOSTROPHE = ccimgui.ImguiKey_Apostrophe
IMGUI_KEY_COMMA = ccimgui.ImguiKey_Comma
IMGUI_KEY_MINUS = ccimgui.ImguiKey_Minus
IMGUI_KEY_PERIOD = ccimgui.ImguiKey_Period
IMGUI_KEY_SLASH = ccimgui.ImguiKey_Slash
IMGUI_KEY_SEMICOLON = ccimgui.ImguiKey_Semicolon
IMGUI_KEY_EQUAL = ccimgui.ImguiKey_Equal
IMGUI_KEY_LEFT_BRACKET = ccimgui.ImguiKey_LeftBracket
IMGUI_KEY_BACKSLASH = ccimgui.ImguiKey_Backslash
IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImguiKey_RightBracket
IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImguiKey_GraveAccent
IMGUI_KEY_CAPS_LOCK = ccimgui.ImguiKey_CapsLock
IMGUI_KEY_SCROLL_LOCK = ccimgui.ImguiKey_ScrollLock
IMGUI_KEY_NUM_LOCK = ccimgui.ImguiKey_NumLock
IMGUI_KEY_PRINT_SCREEN = ccimgui.ImguiKey_PrintScreen
IMGUI_KEY_PAUSE = ccimgui.ImguiKey_Pause
IMGUI_KEY_KEYPAD0 = ccimgui.ImguiKey_Keypad0
IMGUI_KEY_KEYPAD1 = ccimgui.ImguiKey_Keypad1
IMGUI_KEY_KEYPAD2 = ccimgui.ImguiKey_Keypad2
IMGUI_KEY_KEYPAD3 = ccimgui.ImguiKey_Keypad3
IMGUI_KEY_KEYPAD4 = ccimgui.ImguiKey_Keypad4
IMGUI_KEY_KEYPAD5 = ccimgui.ImguiKey_Keypad5
IMGUI_KEY_KEYPAD6 = ccimgui.ImguiKey_Keypad6
IMGUI_KEY_KEYPAD7 = ccimgui.ImguiKey_Keypad7
IMGUI_KEY_KEYPAD8 = ccimgui.ImguiKey_Keypad8
IMGUI_KEY_KEYPAD9 = ccimgui.ImguiKey_Keypad9
IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImguiKey_KeypadDecimal
IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImguiKey_KeypadDivide
IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImguiKey_KeypadMultiply
IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImguiKey_KeypadSubtract
IMGUI_KEY_KEYPAD_ADD = ccimgui.ImguiKey_KeypadAdd
IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImguiKey_KeypadEnter
IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImguiKey_KeypadEqual
IMGUI_KEY_GAMEPAD_START = ccimgui.ImguiKey_GamepadStart
IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImguiKey_GamepadBack
IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImguiKey_GamepadFaceLeft
IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImguiKey_GamepadFaceRight
IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImguiKey_GamepadFaceUp
IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImguiKey_GamepadFaceDown
IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImguiKey_GamepadDpadLeft
IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImguiKey_GamepadDpadRight
IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImguiKey_GamepadDpadUp
IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImguiKey_GamepadDpadDown
IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImguiKey_GamepadL1
IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImguiKey_GamepadR1
IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImguiKey_GamepadL2
IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImguiKey_GamepadR2
IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImguiKey_GamepadL3
IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImguiKey_GamepadR3
IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImguiKey_GamepadLStickLeft
IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImguiKey_GamepadLStickRight
IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImguiKey_GamepadLStickUp
IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImguiKey_GamepadLStickDown
IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImguiKey_GamepadRStickLeft
IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImguiKey_GamepadRStickRight
IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImguiKey_GamepadRStickUp
IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImguiKey_GamepadRStickDown
IMGUI_KEY_MOUSE_LEFT = ccimgui.ImguiKey_MouseLeft
IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImguiKey_MouseRight
IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImguiKey_MouseMiddle
IMGUI_KEY_MOUSE_X1 = ccimgui.ImguiKey_MouseX1
IMGUI_KEY_MOUSE_X2 = ccimgui.ImguiKey_MouseX2
IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImguiKey_MouseWheelX
IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImguiKey_MouseWheelY
IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImguiKey_ReservedForModCtrl
IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImguiKey_ReservedForModShift
IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImguiKey_ReservedForModAlt
IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImguiKey_ReservedForModSuper
IMGUI_KEY_COUNT = ccimgui.ImguiKey_COUNT
IMGUI_MOD_NONE = ccimgui.ImguiMod_None
IMGUI_MOD_CTRL = ccimgui.ImguiMod_Ctrl
IMGUI_MOD_SHIFT = ccimgui.ImguiMod_Shift
IMGUI_MOD_ALT = ccimgui.ImguiMod_Alt
IMGUI_MOD_SUPER = ccimgui.ImguiMod_Super
IMGUI_MOD_SHORTCUT = ccimgui.ImguiMod_Shortcut
IMGUI_MOD_MASK_ = ccimgui.ImguiMod_Mask_
IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImguiKey_NamedKey_BEGIN
IMGUI_KEY_NAMED_KEY_END = ccimgui.ImguiKey_NamedKey_END
IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImguiKey_NamedKey_COUNT
IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImguiKey_KeysData_SIZE
IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImguiKey_KeysData_OFFSET

IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImguiMouseButton_Left
IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImguiMouseButton_Right
IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImguiMouseButton_Middle
IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImguiMouseButton_COUNT

IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImguiMouseCursor_None
IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImguiMouseCursor_Arrow
IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImguiMouseCursor_TextInput
IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImguiMouseCursor_ResizeAll
IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImguiMouseCursor_ResizeNS
IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImguiMouseCursor_ResizeEW
IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImguiMouseCursor_ResizeNESW
IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImguiMouseCursor_ResizeNWSE
IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImguiMouseCursor_Hand
IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImguiMouseCursor_NotAllowed
IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImguiMouseCursor_COUNT

IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImguiNavInput_Activate
IMGUI_NAV_INPUT_CANCEL = ccimgui.ImguiNavInput_Cancel
IMGUI_NAV_INPUT_INPUT = ccimgui.ImguiNavInput_Input
IMGUI_NAV_INPUT_MENU = ccimgui.ImguiNavInput_Menu
IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImguiNavInput_DpadLeft
IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImguiNavInput_DpadRight
IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImguiNavInput_DpadUp
IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImguiNavInput_DpadDown
IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImguiNavInput_LStickLeft
IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImguiNavInput_LStickRight
IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImguiNavInput_LStickUp
IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImguiNavInput_LStickDown
IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImguiNavInput_FocusPrev
IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImguiNavInput_FocusNext
IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImguiNavInput_TweakSlow
IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImguiNavInput_TweakFast
IMGUI_NAV_INPUT_COUNT = ccimgui.ImguiNavInput_COUNT

IMGUI_POPUP_FLAGS_NONE = ccimgui.ImguiPopupFlags_None
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImguiPopupFlags_MouseButtonLeft
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImguiPopupFlags_MouseButtonRight
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImguiPopupFlags_MouseButtonMiddle
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImguiPopupFlags_MouseButtonMask_
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImguiPopupFlags_MouseButtonDefault_
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImguiPopupFlags_NoOpenOverExistingPopup
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImguiPopupFlags_NoOpenOverItems
IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImguiPopupFlags_AnyPopupId
IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImguiPopupFlags_AnyPopupLevel
IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImguiPopupFlags_AnyPopup

IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImguiSelectableFlags_None
IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImguiSelectableFlags_DontClosePopups
IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImguiSelectableFlags_SpanAllColumns
IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImguiSelectableFlags_AllowDoubleClick
IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImguiSelectableFlags_Disabled
IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImguiSelectableFlags_AllowItemOverlap

IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImguiSliderFlags_None
IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImguiSliderFlags_AlwaysClamp
IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImguiSliderFlags_Logarithmic
IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImguiSliderFlags_NoRoundToFormat
IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImguiSliderFlags_NoInput
IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImguiSliderFlags_InvalidMask_

IMGUI_SORT_DIRECTION_NONE = ccimgui.ImguiSortDirection_None
IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImguiSortDirection_Ascending
IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImguiSortDirection_Descending

IMGUI_STYLE_VAR_ALPHA = ccimgui.ImguiStyleVar_Alpha
IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImguiStyleVar_DisabledAlpha
IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImguiStyleVar_WindowPadding
IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImguiStyleVar_WindowRounding
IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImguiStyleVar_WindowBorderSize
IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImguiStyleVar_WindowMinSize
IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImguiStyleVar_WindowTitleAlign
IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImguiStyleVar_ChildRounding
IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImguiStyleVar_ChildBorderSize
IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImguiStyleVar_PopupRounding
IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImguiStyleVar_PopupBorderSize
IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImguiStyleVar_FramePadding
IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImguiStyleVar_FrameRounding
IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImguiStyleVar_FrameBorderSize
IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImguiStyleVar_ItemSpacing
IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImguiStyleVar_ItemInnerSpacing
IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImguiStyleVar_IndentSpacing
IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImguiStyleVar_CellPadding
IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImguiStyleVar_ScrollbarSize
IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImguiStyleVar_ScrollbarRounding
IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImguiStyleVar_GrabMinSize
IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImguiStyleVar_GrabRounding
IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImguiStyleVar_TabRounding
IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImguiStyleVar_ButtonTextAlign
IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImguiStyleVar_SelectableTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImguiStyleVar_SeparatorTextBorderSize
IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImguiStyleVar_SeparatorTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImguiStyleVar_SeparatorTextPadding
IMGUI_STYLE_VAR_COUNT = ccimgui.ImguiStyleVar_COUNT

IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImguiTabBarFlags_None
IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImguiTabBarFlags_Reorderable
IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImguiTabBarFlags_AutoSelectNewTabs
IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImguiTabBarFlags_TabListPopupButton
IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImguiTabBarFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImguiTabBarFlags_NoTabListScrollingButtons
IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImguiTabBarFlags_NoTooltip
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImguiTabBarFlags_FittingPolicyResizeDown
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImguiTabBarFlags_FittingPolicyScroll
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImguiTabBarFlags_FittingPolicyMask_
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImguiTabBarFlags_FittingPolicyDefault_

IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImguiTabItemFlags_None
IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImguiTabItemFlags_UnsavedDocument
IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImguiTabItemFlags_SetSelected
IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImguiTabItemFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImguiTabItemFlags_NoPushId
IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImguiTabItemFlags_NoTooltip
IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImguiTabItemFlags_NoReorder
IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImguiTabItemFlags_Leading
IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImguiTabItemFlags_Trailing

IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImguiTableBgTarget_None
IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImguiTableBgTarget_RowBg0
IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImguiTableBgTarget_RowBg1
IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImguiTableBgTarget_CellBg

IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImguiTableColumnFlags_None
IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImguiTableColumnFlags_Disabled
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImguiTableColumnFlags_DefaultHide
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImguiTableColumnFlags_DefaultSort
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImguiTableColumnFlags_WidthStretch
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImguiTableColumnFlags_WidthFixed
IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImguiTableColumnFlags_NoResize
IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImguiTableColumnFlags_NoReorder
IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImguiTableColumnFlags_NoHide
IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImguiTableColumnFlags_NoClip
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImguiTableColumnFlags_NoSort
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImguiTableColumnFlags_NoSortAscending
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImguiTableColumnFlags_NoSortDescending
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImguiTableColumnFlags_NoHeaderLabel
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImguiTableColumnFlags_NoHeaderWidth
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImguiTableColumnFlags_PreferSortAscending
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImguiTableColumnFlags_PreferSortDescending
IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImguiTableColumnFlags_IndentEnable
IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImguiTableColumnFlags_IndentDisable
IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImguiTableColumnFlags_IsEnabled
IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImguiTableColumnFlags_IsVisible
IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImguiTableColumnFlags_IsSorted
IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImguiTableColumnFlags_IsHovered
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImguiTableColumnFlags_WidthMask_
IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImguiTableColumnFlags_IndentMask_
IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImguiTableColumnFlags_StatusMask_
IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImguiTableColumnFlags_NoDirectResize_

IMGUI_TABLE_FLAGS_NONE = ccimgui.ImguiTableFlags_None
IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImguiTableFlags_Resizable
IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImguiTableFlags_Reorderable
IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImguiTableFlags_Hideable
IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImguiTableFlags_Sortable
IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImguiTableFlags_NoSavedSettings
IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImguiTableFlags_ContextMenuInBody
IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImguiTableFlags_RowBg
IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImguiTableFlags_BordersInnerH
IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImguiTableFlags_BordersOuterH
IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImguiTableFlags_BordersInnerV
IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImguiTableFlags_BordersOuterV
IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImguiTableFlags_BordersH
IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImguiTableFlags_BordersV
IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImguiTableFlags_BordersInner
IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImguiTableFlags_BordersOuter
IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImguiTableFlags_Borders
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImguiTableFlags_NoBordersInBody
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImguiTableFlags_NoBordersInBodyUntilResize
IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImguiTableFlags_SizingFixedFit
IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImguiTableFlags_SizingFixedSame
IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImguiTableFlags_SizingStretchProp
IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImguiTableFlags_SizingStretchSame
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImguiTableFlags_NoHostExtendX
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImguiTableFlags_NoHostExtendY
IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImguiTableFlags_NoKeepColumnsVisible
IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImguiTableFlags_PreciseWidths
IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImguiTableFlags_NoClip
IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImguiTableFlags_PadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImguiTableFlags_NoPadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImguiTableFlags_NoPadInnerX
IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImguiTableFlags_ScrollX
IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImguiTableFlags_ScrollY
IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImguiTableFlags_SortMulti
IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImguiTableFlags_SortTristate
IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImguiTableFlags_SizingMask_

IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImguiTableRowFlags_None
IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImguiTableRowFlags_Headers

IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImguiTreeNodeFlags_None
IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImguiTreeNodeFlags_Selected
IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImguiTreeNodeFlags_Framed
IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImguiTreeNodeFlags_AllowItemOverlap
IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImguiTreeNodeFlags_NoTreePushOnOpen
IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImguiTreeNodeFlags_NoAutoOpenOnLog
IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImguiTreeNodeFlags_DefaultOpen
IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImguiTreeNodeFlags_OpenOnDoubleClick
IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImguiTreeNodeFlags_OpenOnArrow
IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImguiTreeNodeFlags_Leaf
IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImguiTreeNodeFlags_Bullet
IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImguiTreeNodeFlags_FramePadding
IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImguiTreeNodeFlags_SpanAvailWidth
IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImguiTreeNodeFlags_SpanFullWidth
IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImguiTreeNodeFlags_NavLeftJumpsBackHere
IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImguiTreeNodeFlags_CollapsingHeader

IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImguiViewportFlags_None
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImguiViewportFlags_IsPlatformWindow
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImguiViewportFlags_IsPlatformMonitor
IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImguiViewportFlags_OwnedByApp
IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImguiViewportFlags_NoDecoration
IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImguiViewportFlags_NoTaskBarIcon
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImguiViewportFlags_NoFocusOnAppearing
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImguiViewportFlags_NoFocusOnClick
IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImguiViewportFlags_NoInputs
IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImguiViewportFlags_NoRendererClear
IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImguiViewportFlags_TopMost
IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImguiViewportFlags_Minimized
IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImguiViewportFlags_NoAutoMerge
IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImguiViewportFlags_CanHostOtherWindows

IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImguiWindowFlags_None
IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImguiWindowFlags_NoTitleBar
IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImguiWindowFlags_NoResize
IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImguiWindowFlags_NoMove
IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImguiWindowFlags_NoScrollbar
IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImguiWindowFlags_NoScrollWithMouse
IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImguiWindowFlags_NoCollapse
IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImguiWindowFlags_AlwaysAutoResize
IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImguiWindowFlags_NoBackground
IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImguiWindowFlags_NoSavedSettings
IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImguiWindowFlags_NoMouseInputs
IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImguiWindowFlags_MenuBar
IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImguiWindowFlags_HorizontalScrollbar
IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImguiWindowFlags_NoFocusOnAppearing
IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImguiWindowFlags_NoBringToFrontOnFocus
IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImguiWindowFlags_AlwaysVerticalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImguiWindowFlags_AlwaysHorizontalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImguiWindowFlags_AlwaysUseWindowPadding
IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImguiWindowFlags_NoNavInputs
IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImguiWindowFlags_NoNavFocus
IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImguiWindowFlags_UnsavedDocument
IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImguiWindowFlags_NoDocking
IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImguiWindowFlags_NoNav
IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImguiWindowFlags_NoDecoration
IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImguiWindowFlags_NoInputs
IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImguiWindowFlags_NavFlattened
IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImguiWindowFlags_ChildWindow
IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImguiWindowFlags_Tooltip
IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImguiWindowFlags_Popup
IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImguiWindowFlags_Modal
IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImguiWindowFlags_ChildMenu
IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST = ccimgui.ImguiWindowFlags_DockNodeHost


def accept_drag_drop_payload(str type_, flags):
    cdef ccimgui.ImGuiPayload* res = ccimgui.igAcceptDragDropPayload(type_, flags)
    return res

def align_text_to_frame_padding():
    ccimgui.igAlignTextToFramePadding()

def arrow_button(str str_id, dir_):
    cdef bool res = ccimgui.igArrowButton(str_id, dir_)
    return res

def begin(str name, p_open, flags):
    cdef bool res = ccimgui.igBegin(name, p_open, flags)
    return res

def begin_child_frame(id_, size, flags):
    cdef bool res = ccimgui.igBeginChildFrame(id_, size, flags)
    return res

def begin_child_id(
        id_,
        size,
        ccimgui.bool border,
        flags
    ):
    cdef bool res = ccimgui.igBeginChild_ID(id_, size, border, flags)
    return res

def begin_child_str(
        str str_id,
        size,
        ccimgui.bool border,
        flags
    ):
    cdef bool res = ccimgui.igBeginChild_Str(str_id, size, border, flags)
    return res

def begin_combo(str label, str preview_value, flags):
    cdef bool res = ccimgui.igBeginCombo(label, preview_value, flags)
    return res

def begin_disabled(ccimgui.bool disabled):
    ccimgui.igBeginDisabled(disabled)

def begin_drag_drop_source(flags):
    cdef bool res = ccimgui.igBeginDragDropSource(flags)
    return res

def begin_drag_drop_target():
    cdef bool res = ccimgui.igBeginDragDropTarget()
    return res

def begin_group():
    ccimgui.igBeginGroup()

def begin_list_box(str label, size):
    cdef bool res = ccimgui.igBeginListBox(label, size)
    return res

def begin_main_menu_bar():
    cdef bool res = ccimgui.igBeginMainMenuBar()
    return res

def begin_menu(str label, ccimgui.bool enabled):
    cdef bool res = ccimgui.igBeginMenu(label, enabled)
    return res

def begin_menu_bar():
    cdef bool res = ccimgui.igBeginMenuBar()
    return res

def begin_popup(str str_id, flags):
    cdef bool res = ccimgui.igBeginPopup(str_id, flags)
    return res

def begin_popup_context_item(str str_id, popup_flags):
    cdef bool res = ccimgui.igBeginPopupContextItem(str_id, popup_flags)
    return res

def begin_popup_context_void(str str_id, popup_flags):
    cdef bool res = ccimgui.igBeginPopupContextVoid(str_id, popup_flags)
    return res

def begin_popup_context_window(str str_id, popup_flags):
    cdef bool res = ccimgui.igBeginPopupContextWindow(str_id, popup_flags)
    return res

def begin_popup_modal(str name, p_open, flags):
    cdef bool res = ccimgui.igBeginPopupModal(name, p_open, flags)
    return res

def begin_tab_bar(str str_id, flags):
    cdef bool res = ccimgui.igBeginTabBar(str_id, flags)
    return res

def begin_tab_item(str label, p_open, flags):
    cdef bool res = ccimgui.igBeginTabItem(label, p_open, flags)
    return res

def begin_table(
        str str_id,
        int column,
        flags,
        outer_size,
        float inner_width
    ):
    cdef bool res = ccimgui.igBeginTable(str_id, column, flags, outer_size, inner_width)
    return res

def begin_tooltip():
    ccimgui.igBeginTooltip()

def bullet():
    ccimgui.igBullet()

def bullet_text(str fmt):
    ccimgui.igBulletText(fmt)

def bullet_textv(str fmt, str args):
    ccimgui.igBulletTextV(fmt, args)

def button(str label, size):
    cdef bool res = ccimgui.igButton(label, size)
    return res

def calc_item_width():
    cdef float res = ccimgui.igCalcItemWidth()
    return res

def calc_text_size(
        pOut,
        str text,
        str text_end,
        ccimgui.bool hide_text_after_double_hash,
        float wrap_width
    ):
    ccimgui.igCalcTextSize(pOut, text, text_end, hide_text_after_double_hash, wrap_width)

def checkbox(str label, v):
    cdef bool res = ccimgui.igCheckbox(label, v)
    return res

def checkbox_flags_int_ptr(str label, int flags, int flags_value):
    cdef bool res = ccimgui.igCheckboxFlags_IntPtr(label, flags, flags_value)
    return res

def checkbox_flags_uint_ptr(str label, int flags, int flags_value):
    cdef bool res = ccimgui.igCheckboxFlags_UintPtr(label, flags, flags_value)
    return res

def close_current_popup():
    ccimgui.igCloseCurrentPopup()

def collapsing_header_bool_ptr(str label, p_visible, flags):
    cdef bool res = ccimgui.igCollapsingHeader_BoolPtr(label, p_visible, flags)
    return res

def collapsing_header_tree_node_flags(str label, flags):
    cdef bool res = ccimgui.igCollapsingHeader_TreeNodeFlags(label, flags)
    return res

def color_button(
        str desc_id,
        col,
        flags,
        size
    ):
    cdef bool res = ccimgui.igColorButton(desc_id, col, flags, size)
    return res

def color_convert_float_4_to_u32(in_):
    cdef ccimgui.ImU32 res = ccimgui.igColorConvertFloat4ToU32(in_)
    return res

def color_convert_hs_vto_rgb(
        float h,
        float s,
        float v,
        float out_r,
        float out_g,
        float out_b
    ):
    ccimgui.igColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b)

def color_convert_rg_bto_hsv(
        float r,
        float g,
        float b,
        float out_h,
        float out_s,
        float out_v
    ):
    ccimgui.igColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v)

def color_convert_u32_to_float4(pOut, in_):
    ccimgui.igColorConvertU32ToFloat4(pOut, in_)

def color_edit3(str label, float col, flags):
    cdef bool res = ccimgui.igColorEdit3(label, col, flags)
    return res

def color_edit4(str label, float col, flags):
    cdef bool res = ccimgui.igColorEdit4(label, col, flags)
    return res

def color_picker3(str label, float col, flags):
    cdef bool res = ccimgui.igColorPicker3(label, col, flags)
    return res

def color_picker4(
        str label,
        float col,
        flags,
        float ref_col
    ):
    cdef bool res = ccimgui.igColorPicker4(label, col, flags, ref_col)
    return res

def columns(int count, str id_, ccimgui.bool border):
    ccimgui.igColumns(count, id_, border)

def combo_fn_bool_ptr(
        str label,
        int current_item,
        Callable items_getter,
        data,
        int items_count,
        int popup_max_height_in_items
    ):
    cdef bool res = ccimgui.igCombo_FnBoolPtr(label, current_item, items_getter, data, items_count, popup_max_height_in_items)
    return res

def combo_str(
        str label,
        int current_item,
        str items_separated_by_zeros,
        int popup_max_height_in_items
    ):
    cdef bool res = ccimgui.igCombo_Str(label, current_item, items_separated_by_zeros, popup_max_height_in_items)
    return res

def combo_str_arr(
        str label,
        int current_item,
        str items,
        int items_count,
        int popup_max_height_in_items
    ):
    cdef bool res = ccimgui.igCombo_Str_arr(label, current_item, items, items_count, popup_max_height_in_items)
    return res

def create_context(shared_font_atlas):
    cdef ccimgui.ImGuiContext* res = ccimgui.igCreateContext(shared_font_atlas)
    return res

def debug_check_version_and_data_layout(
        str version_str,
        sz_io,
        sz_style,
        sz_vec2,
        sz_vec4,
        sz_drawvert,
        sz_drawidx
    ):
    cdef bool res = ccimgui.igDebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx)
    return res

def debug_text_encoding(str text):
    ccimgui.igDebugTextEncoding(text)

def destroy_context(ctx):
    ccimgui.igDestroyContext(ctx)

def destroy_platform_windows():
    ccimgui.igDestroyPlatformWindows()

def dock_space(
        id_,
        size,
        flags,
        window_class
    ):
    cdef ccimgui.ImGuiID res = ccimgui.igDockSpace(id_, size, flags, window_class)
    return res

def dock_space_over_viewport(viewport, flags, window_class):
    cdef ccimgui.ImGuiID res = ccimgui.igDockSpaceOverViewport(viewport, flags, window_class)
    return res

def drag_float(
        str label,
        float v,
        float v_speed,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragFloat(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_float2(
        str label,
        float v,
        float v_speed,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragFloat2(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_float3(
        str label,
        float v,
        float v_speed,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragFloat3(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_float4(
        str label,
        float v,
        float v_speed,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragFloat4(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_float_range2(
        str label,
        float v_current_min,
        float v_current_max,
        float v_speed,
        float v_min,
        float v_max,
        str format_,
        str format_max,
        flags
    ):
    cdef bool res = ccimgui.igDragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format_, format_max, flags)
    return res

def drag_int(
        str label,
        int v,
        float v_speed,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragInt(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_int2(
        str label,
        int v,
        float v_speed,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragInt2(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_int3(
        str label,
        int v,
        float v_speed,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragInt3(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_int4(
        str label,
        int v,
        float v_speed,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragInt4(label, v, v_speed, v_min, v_max, format_, flags)
    return res

def drag_int_range2(
        str label,
        int v_current_min,
        int v_current_max,
        float v_speed,
        int v_min,
        int v_max,
        str format_,
        str format_max,
        flags
    ):
    cdef bool res = ccimgui.igDragIntRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format_, format_max, flags)
    return res

def drag_scalar(
        str label,
        data_type,
        p_data,
        float v_speed,
        p_min,
        p_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragScalar(label, data_type, p_data, v_speed, p_min, p_max, format_, flags)
    return res

def drag_scalarn(
        str label,
        data_type,
        p_data,
        int components,
        float v_speed,
        p_min,
        p_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igDragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format_, flags)
    return res

def dummy(size):
    ccimgui.igDummy(size)

def end():
    ccimgui.igEnd()

def end_child():
    ccimgui.igEndChild()

def end_child_frame():
    ccimgui.igEndChildFrame()

def end_combo():
    ccimgui.igEndCombo()

def end_disabled():
    ccimgui.igEndDisabled()

def end_drag_drop_source():
    ccimgui.igEndDragDropSource()

def end_drag_drop_target():
    ccimgui.igEndDragDropTarget()

def end_frame():
    ccimgui.igEndFrame()

def end_group():
    ccimgui.igEndGroup()

def end_list_box():
    ccimgui.igEndListBox()

def end_main_menu_bar():
    ccimgui.igEndMainMenuBar()

def end_menu():
    ccimgui.igEndMenu()

def end_menu_bar():
    ccimgui.igEndMenuBar()

def end_popup():
    ccimgui.igEndPopup()

def end_tab_bar():
    ccimgui.igEndTabBar()

def end_tab_item():
    ccimgui.igEndTabItem()

def end_table():
    ccimgui.igEndTable()

def end_tooltip():
    ccimgui.igEndTooltip()

def find_viewport_by_id(id_):
    cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByID(id_)
    return res

def find_viewport_by_platform_handle(platform_handle):
    cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByPlatformHandle(platform_handle)
    return res

def get_allocator_functions(p_alloc_func, p_free_func, p_user_data):
    ccimgui.igGetAllocatorFunctions(p_alloc_func, p_free_func, p_user_data)

def get_background_draw_list_nil():
    cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_Nil()
    return res

def get_background_draw_list_viewport_ptr(viewport):
    cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_ViewportPtr(viewport)
    return res

def get_clipboard_text():
    cdef const char* res = ccimgui.igGetClipboardText()
    return res

def get_color_u32_col(idx, float alpha_mul):
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Col(idx, alpha_mul)
    return res

def get_color_u32_u32(col):
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_U32(col)
    return res

def get_color_u32_vec4(col):
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Vec4(col)
    return res

def get_column_index():
    cdef int res = ccimgui.igGetColumnIndex()
    return res

def get_column_offset(int column_index):
    cdef float res = ccimgui.igGetColumnOffset(column_index)
    return res

def get_column_width(int column_index):
    cdef float res = ccimgui.igGetColumnWidth(column_index)
    return res

def get_columns_count():
    cdef int res = ccimgui.igGetColumnsCount()
    return res

def get_content_region_avail(pOut):
    ccimgui.igGetContentRegionAvail(pOut)

def get_content_region_max(pOut):
    ccimgui.igGetContentRegionMax(pOut)

def get_current_context():
    cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
    return res

def get_cursor_pos(pOut):
    ccimgui.igGetCursorPos(pOut)

def get_cursor_posx():
    cdef float res = ccimgui.igGetCursorPosX()
    return res

def get_cursor_posy():
    cdef float res = ccimgui.igGetCursorPosY()
    return res

def get_cursor_screen_pos(pOut):
    ccimgui.igGetCursorScreenPos(pOut)

def get_cursor_start_pos(pOut):
    ccimgui.igGetCursorStartPos(pOut)

def get_drag_drop_payload():
    cdef ccimgui.ImGuiPayload* res = ccimgui.igGetDragDropPayload()
    return res

def get_draw_data():
    cdef ccimgui.ImDrawData* res = ccimgui.igGetDrawData()
    return res

def get_draw_list_shared_data():
    cdef ccimgui.ImDrawListSharedData* res = ccimgui.igGetDrawListSharedData()
    return res

def get_flt_max():
    cdef float res = ccimgui.igGET_FLT_MAX()
    return res

def get_flt_min():
    cdef float res = ccimgui.igGET_FLT_MIN()
    return res

def get_font():
    cdef ccimgui.ImFont* res = ccimgui.igGetFont()
    return res

def get_font_size():
    cdef float res = ccimgui.igGetFontSize()
    return res

def get_font_tex_uv_white_pixel(pOut):
    ccimgui.igGetFontTexUvWhitePixel(pOut)

def get_foreground_draw_list_nil():
    cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_Nil()
    return res

def get_foreground_draw_list_viewport_ptr(viewport):
    cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_ViewportPtr(viewport)
    return res

def get_frame_count():
    cdef int res = ccimgui.igGetFrameCount()
    return res

def get_frame_height():
    cdef float res = ccimgui.igGetFrameHeight()
    return res

def get_frame_height_with_spacing():
    cdef float res = ccimgui.igGetFrameHeightWithSpacing()
    return res

def get_id_ptr(ptr_id):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_Ptr(ptr_id)
    return res

def get_id_str(str str_id):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_Str(str_id)
    return res

def get_id_str_str(str str_id_begin, str str_id_end):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_StrStr(str_id_begin, str_id_end)
    return res

def get_io():
    cdef ccimgui.ImGuiIO* res = ccimgui.igGetIO()
    return res

def get_item_id():
    cdef ccimgui.ImGuiID res = ccimgui.igGetItemID()
    return res

def get_item_rect_max(pOut):
    ccimgui.igGetItemRectMax(pOut)

def get_item_rect_min(pOut):
    ccimgui.igGetItemRectMin(pOut)

def get_item_rect_size(pOut):
    ccimgui.igGetItemRectSize(pOut)

def get_key_index(int key):
    cdef ccimgui.ImGuiKey res = ccimgui.igGetKeyIndex(key)
    return res

def get_key_name(int key):
    cdef const char* res = ccimgui.igGetKeyName(key)
    return res

def get_key_pressed_amount(int key, float repeat_delay, float rate):
    cdef int res = ccimgui.igGetKeyPressedAmount(key, repeat_delay, rate)
    return res

def get_main_viewport():
    cdef ccimgui.ImGuiViewport* res = ccimgui.igGetMainViewport()
    return res

def get_mouse_clicked_count(button):
    cdef int res = ccimgui.igGetMouseClickedCount(button)
    return res

def get_mouse_cursor():
    cdef ccimgui.ImGuiMouseCursor res = ccimgui.igGetMouseCursor()
    return res

def get_mouse_drag_delta(pOut, button, float lock_threshold):
    ccimgui.igGetMouseDragDelta(pOut, button, lock_threshold)

def get_mouse_pos(pOut):
    ccimgui.igGetMousePos(pOut)

def get_mouse_pos_on_opening_current_popup(pOut):
    ccimgui.igGetMousePosOnOpeningCurrentPopup(pOut)

def get_platform_io():
    cdef ccimgui.ImGuiPlatformIO* res = ccimgui.igGetPlatformIO()
    return res

def get_scroll_maxx():
    cdef float res = ccimgui.igGetScrollMaxX()
    return res

def get_scroll_maxy():
    cdef float res = ccimgui.igGetScrollMaxY()
    return res

def get_scrollx():
    cdef float res = ccimgui.igGetScrollX()
    return res

def get_scrolly():
    cdef float res = ccimgui.igGetScrollY()
    return res

def get_state_storage():
    cdef ccimgui.ImGuiStorage* res = ccimgui.igGetStateStorage()
    return res

def get_style():
    cdef ccimgui.ImGuiStyle* res = ccimgui.igGetStyle()
    return res

def get_style_color_name(idx):
    cdef const char* res = ccimgui.igGetStyleColorName(idx)
    return res

def get_style_color_vec4(idx):
    cdef ccimgui.ImVec4* res = ccimgui.igGetStyleColorVec4(idx)
    return res

def get_text_line_height():
    cdef float res = ccimgui.igGetTextLineHeight()
    return res

def get_text_line_height_with_spacing():
    cdef float res = ccimgui.igGetTextLineHeightWithSpacing()
    return res

def get_time():
    cdef double res = ccimgui.igGetTime()
    return res

def get_tree_node_to_label_spacing():
    cdef float res = ccimgui.igGetTreeNodeToLabelSpacing()
    return res

def get_version():
    cdef const char* res = ccimgui.igGetVersion()
    return res

def get_window_content_region_max(pOut):
    ccimgui.igGetWindowContentRegionMax(pOut)

def get_window_content_region_min(pOut):
    ccimgui.igGetWindowContentRegionMin(pOut)

def get_window_dock_id():
    cdef ccimgui.ImGuiID res = ccimgui.igGetWindowDockID()
    return res

def get_window_dpi_scale():
    cdef float res = ccimgui.igGetWindowDpiScale()
    return res

def get_window_draw_list():
    cdef ccimgui.ImDrawList* res = ccimgui.igGetWindowDrawList()
    return res

def get_window_height():
    cdef float res = ccimgui.igGetWindowHeight()
    return res

def get_window_pos(pOut):
    ccimgui.igGetWindowPos(pOut)

def get_window_size(pOut):
    ccimgui.igGetWindowSize(pOut)

def get_window_viewport():
    cdef ccimgui.ImGuiViewport* res = ccimgui.igGetWindowViewport()
    return res

def get_window_width():
    cdef float res = ccimgui.igGetWindowWidth()
    return res

def im_color_destroy(self):
    ccimgui.ImColor_destroy(self)

def im_color_hsv(
        pOut,
        float h,
        float s,
        float v,
        float a
    ):
    ccimgui.ImColor_HSV(pOut, h, s, v, a)

def im_color_im_color_float(
        float r,
        float g,
        float b,
        float a
    ):
    cdef ccimgui.ImColor* res = ccimgui.ImColor_ImColor_Float(r, g, b, a)
    return res

def im_color_im_color_int(
        int r,
        int g,
        int b,
        int a
    ):
    cdef ccimgui.ImColor* res = ccimgui.ImColor_ImColor_Int(r, g, b, a)
    return res

def im_color_im_color_nil():
    cdef ccimgui.ImColor* res = ccimgui.ImColor_ImColor_Nil()
    return res

def im_color_im_color_u32(rgba):
    cdef ccimgui.ImColor* res = ccimgui.ImColor_ImColor_U32(rgba)
    return res

def im_color_im_color_vec4(col):
    cdef ccimgui.ImColor* res = ccimgui.ImColor_ImColor_Vec4(col)
    return res

def im_color_set_hsv(
        self,
        float h,
        float s,
        float v,
        float a
    ):
    ccimgui.ImColor_SetHSV(self, h, s, v, a)

def im_draw_cmd_destroy(self):
    ccimgui.ImDrawCmd_destroy(self)

def im_draw_cmd_get_tex_id(self):
    cdef ccimgui.ImTextureID res = ccimgui.ImDrawCmd_GetTexID(self)
    return res

def im_draw_cmd_im_draw_cmd():
    cdef ccimgui.ImDrawCmd* res = ccimgui.ImDrawCmd_ImDrawCmd()
    return res

def im_draw_data_clear(self):
    ccimgui.ImDrawData_Clear(self)

def im_draw_data_de_index_all_buffers(self):
    ccimgui.ImDrawData_DeIndexAllBuffers(self)

def im_draw_data_destroy(self):
    ccimgui.ImDrawData_destroy(self)

def im_draw_data_im_draw_data():
    cdef ccimgui.ImDrawData* res = ccimgui.ImDrawData_ImDrawData()
    return res

def im_draw_data_scale_clip_rects(self, fb_scale):
    ccimgui.ImDrawData_ScaleClipRects(self, fb_scale)

def im_draw_list__calc_circle_auto_segment_count(self, float radius):
    cdef int res = ccimgui.ImDrawList__CalcCircleAutoSegmentCount(self, radius)
    return res

def im_draw_list__clear_free_memory(self):
    ccimgui.ImDrawList__ClearFreeMemory(self)

def im_draw_list__on_changed_clip_rect(self):
    ccimgui.ImDrawList__OnChangedClipRect(self)

def im_draw_list__on_changed_texture_id(self):
    ccimgui.ImDrawList__OnChangedTextureID(self)

def im_draw_list__on_changed_vtx_offset(self):
    ccimgui.ImDrawList__OnChangedVtxOffset(self)

def im_draw_list__path_arc_to_fast_ex(
        self,
        center,
        float radius,
        int a_min_sample,
        int a_max_sample,
        int a_step
    ):
    ccimgui.ImDrawList__PathArcToFastEx(self, center, radius, a_min_sample, a_max_sample, a_step)

def im_draw_list__path_arc_ton(
        self,
        center,
        float radius,
        float a_min,
        float a_max,
        int num_segments
    ):
    ccimgui.ImDrawList__PathArcToN(self, center, radius, a_min, a_max, num_segments)

def im_draw_list__pop_unused_draw_cmd(self):
    ccimgui.ImDrawList__PopUnusedDrawCmd(self)

def im_draw_list__reset_for_new_frame(self):
    ccimgui.ImDrawList__ResetForNewFrame(self)

def im_draw_list__try_merge_draw_cmds(self):
    ccimgui.ImDrawList__TryMergeDrawCmds(self)

def im_draw_list_add_bezier_cubic(
        self,
        p1,
        p2,
        p3,
        p4,
        col,
        float thickness,
        int num_segments
    ):
    ccimgui.ImDrawList_AddBezierCubic(self, p1, p2, p3, p4, col, thickness, num_segments)

def im_draw_list_add_bezier_quadratic(
        self,
        p1,
        p2,
        p3,
        col,
        float thickness,
        int num_segments
    ):
    ccimgui.ImDrawList_AddBezierQuadratic(self, p1, p2, p3, col, thickness, num_segments)

def im_draw_list_add_callback(self, callback, callback_data):
    ccimgui.ImDrawList_AddCallback(self, callback, callback_data)

def im_draw_list_add_circle(
        self,
        center,
        float radius,
        col,
        int num_segments,
        float thickness
    ):
    ccimgui.ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness)

def im_draw_list_add_circle_filled(
        self,
        center,
        float radius,
        col,
        int num_segments
    ):
    ccimgui.ImDrawList_AddCircleFilled(self, center, radius, col, num_segments)

def im_draw_list_add_convex_poly_filled(
        self,
        points,
        int num_points,
        col
    ):
    ccimgui.ImDrawList_AddConvexPolyFilled(self, points, num_points, col)

def im_draw_list_add_draw_cmd(self):
    ccimgui.ImDrawList_AddDrawCmd(self)

def im_draw_list_add_image(
        self,
        user_texture_id,
        p_min,
        p_max,
        uv_min,
        uv_max,
        col
    ):
    ccimgui.ImDrawList_AddImage(self, user_texture_id, p_min, p_max, uv_min, uv_max, col)

def im_draw_list_add_image_quad(
        self,
        user_texture_id,
        p1,
        p2,
        p3,
        p4,
        uv1,
        uv2,
        uv3,
        uv4,
        col
    ):
    ccimgui.ImDrawList_AddImageQuad(self, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col)

def im_draw_list_add_image_rounded(
        self,
        user_texture_id,
        p_min,
        p_max,
        uv_min,
        uv_max,
        col,
        float rounding,
        flags
    ):
    ccimgui.ImDrawList_AddImageRounded(self, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags)

def im_draw_list_add_line(
        self,
        p1,
        p2,
        col,
        float thickness
    ):
    ccimgui.ImDrawList_AddLine(self, p1, p2, col, thickness)

def im_draw_list_add_ngon(
        self,
        center,
        float radius,
        col,
        int num_segments,
        float thickness
    ):
    ccimgui.ImDrawList_AddNgon(self, center, radius, col, num_segments, thickness)

def im_draw_list_add_ngon_filled(
        self,
        center,
        float radius,
        col,
        int num_segments
    ):
    ccimgui.ImDrawList_AddNgonFilled(self, center, radius, col, num_segments)

def im_draw_list_add_polyline(
        self,
        points,
        int num_points,
        col,
        flags,
        float thickness
    ):
    ccimgui.ImDrawList_AddPolyline(self, points, num_points, col, flags, thickness)

def im_draw_list_add_quad(
        self,
        p1,
        p2,
        p3,
        p4,
        col,
        float thickness
    ):
    ccimgui.ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness)

def im_draw_list_add_quad_filled(
        self,
        p1,
        p2,
        p3,
        p4,
        col
    ):
    ccimgui.ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col)

def im_draw_list_add_rect(
        self,
        p_min,
        p_max,
        col,
        float rounding,
        flags,
        float thickness
    ):
    ccimgui.ImDrawList_AddRect(self, p_min, p_max, col, rounding, flags, thickness)

def im_draw_list_add_rect_filled(
        self,
        p_min,
        p_max,
        col,
        float rounding,
        flags
    ):
    ccimgui.ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, flags)

def im_draw_list_add_rect_filled_multi_color(
        self,
        p_min,
        p_max,
        col_upr_left,
        col_upr_right,
        col_bot_right,
        col_bot_left
    ):
    ccimgui.ImDrawList_AddRectFilledMultiColor(self, p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left)

def im_draw_list_add_text_font_ptr(
        self,
        font,
        float font_size,
        pos,
        col,
        str text_begin,
        str text_end,
        float wrap_width,
        cpu_fine_clip_rect
    ):
    ccimgui.ImDrawList_AddText_FontPtr(self, font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect)

def im_draw_list_add_text_vec2(
        self,
        pos,
        col,
        str text_begin,
        str text_end
    ):
    ccimgui.ImDrawList_AddText_Vec2(self, pos, col, text_begin, text_end)

def im_draw_list_add_triangle(
        self,
        p1,
        p2,
        p3,
        col,
        float thickness
    ):
    ccimgui.ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness)

def im_draw_list_add_triangle_filled(
        self,
        p1,
        p2,
        p3,
        col
    ):
    ccimgui.ImDrawList_AddTriangleFilled(self, p1, p2, p3, col)

def im_draw_list_channels_merge(self):
    ccimgui.ImDrawList_ChannelsMerge(self)

def im_draw_list_channels_set_current(self, int n):
    ccimgui.ImDrawList_ChannelsSetCurrent(self, n)

def im_draw_list_channels_split(self, int count):
    ccimgui.ImDrawList_ChannelsSplit(self, count)

def im_draw_list_clone_output(self):
    cdef ccimgui.ImDrawList* res = ccimgui.ImDrawList_CloneOutput(self)
    return res

def im_draw_list_destroy(self):
    ccimgui.ImDrawList_destroy(self)

def im_draw_list_get_clip_rect_max(pOut, self):
    ccimgui.ImDrawList_GetClipRectMax(pOut, self)

def im_draw_list_get_clip_rect_min(pOut, self):
    ccimgui.ImDrawList_GetClipRectMin(pOut, self)

def im_draw_list_im_draw_list(shared_data):
    cdef ccimgui.ImDrawList* res = ccimgui.ImDrawList_ImDrawList(shared_data)
    return res

def im_draw_list_path_arc_to(
        self,
        center,
        float radius,
        float a_min,
        float a_max,
        int num_segments
    ):
    ccimgui.ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments)

def im_draw_list_path_arc_to_fast(
        self,
        center,
        float radius,
        int a_min_of_12,
        int a_max_of_12
    ):
    ccimgui.ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12)

def im_draw_list_path_bezier_cubic_curve_to(
        self,
        p2,
        p3,
        p4,
        int num_segments
    ):
    ccimgui.ImDrawList_PathBezierCubicCurveTo(self, p2, p3, p4, num_segments)

def im_draw_list_path_bezier_quadratic_curve_to(
        self,
        p2,
        p3,
        int num_segments
    ):
    ccimgui.ImDrawList_PathBezierQuadraticCurveTo(self, p2, p3, num_segments)

def im_draw_list_path_clear(self):
    ccimgui.ImDrawList_PathClear(self)

def im_draw_list_path_fill_convex(self, col):
    ccimgui.ImDrawList_PathFillConvex(self, col)

def im_draw_list_path_line_to(self, pos):
    ccimgui.ImDrawList_PathLineTo(self, pos)

def im_draw_list_path_line_to_merge_duplicate(self, pos):
    ccimgui.ImDrawList_PathLineToMergeDuplicate(self, pos)

def im_draw_list_path_rect(
        self,
        rect_min,
        rect_max,
        float rounding,
        flags
    ):
    ccimgui.ImDrawList_PathRect(self, rect_min, rect_max, rounding, flags)

def im_draw_list_path_stroke(
        self,
        col,
        flags,
        float thickness
    ):
    ccimgui.ImDrawList_PathStroke(self, col, flags, thickness)

def im_draw_list_pop_clip_rect(self):
    ccimgui.ImDrawList_PopClipRect(self)

def im_draw_list_pop_texture_id(self):
    ccimgui.ImDrawList_PopTextureID(self)

def im_draw_list_prim_quad_uv(
        self,
        a,
        b,
        c,
        d,
        uv_a,
        uv_b,
        uv_c,
        uv_d,
        col
    ):
    ccimgui.ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)

def im_draw_list_prim_rect(
        self,
        a,
        b,
        col
    ):
    ccimgui.ImDrawList_PrimRect(self, a, b, col)

def im_draw_list_prim_rect_uv(
        self,
        a,
        b,
        uv_a,
        uv_b,
        col
    ):
    ccimgui.ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col)

def im_draw_list_prim_reserve(self, int idx_count, int vtx_count):
    ccimgui.ImDrawList_PrimReserve(self, idx_count, vtx_count)

def im_draw_list_prim_unreserve(self, int idx_count, int vtx_count):
    ccimgui.ImDrawList_PrimUnreserve(self, idx_count, vtx_count)

def im_draw_list_prim_vtx(
        self,
        pos,
        uv,
        col
    ):
    ccimgui.ImDrawList_PrimVtx(self, pos, uv, col)

def im_draw_list_prim_write_idx(self, idx):
    ccimgui.ImDrawList_PrimWriteIdx(self, idx)

def im_draw_list_prim_write_vtx(
        self,
        pos,
        uv,
        col
    ):
    ccimgui.ImDrawList_PrimWriteVtx(self, pos, uv, col)

def im_draw_list_push_clip_rect(
        self,
        clip_rect_min,
        clip_rect_max,
        ccimgui.bool intersect_with_current_clip_rect
    ):
    ccimgui.ImDrawList_PushClipRect(self, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect)

def im_draw_list_push_clip_rect_full_screen(self):
    ccimgui.ImDrawList_PushClipRectFullScreen(self)

def im_draw_list_push_texture_id(self, texture_id):
    ccimgui.ImDrawList_PushTextureID(self, texture_id)

def im_draw_list_splitter_clear(self):
    ccimgui.ImDrawListSplitter_Clear(self)

def im_draw_list_splitter_clear_free_memory(self):
    ccimgui.ImDrawListSplitter_ClearFreeMemory(self)

def im_draw_list_splitter_destroy(self):
    ccimgui.ImDrawListSplitter_destroy(self)

def im_draw_list_splitter_im_draw_list_splitter():
    cdef ccimgui.ImDrawListSplitter* res = ccimgui.ImDrawListSplitter_ImDrawListSplitter()
    return res

def im_draw_list_splitter_merge(self, draw_list):
    ccimgui.ImDrawListSplitter_Merge(self, draw_list)

def im_draw_list_splitter_set_current_channel(self, draw_list, int channel_idx):
    ccimgui.ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)

def im_draw_list_splitter_split(self, draw_list, int count):
    ccimgui.ImDrawListSplitter_Split(self, draw_list, count)

def im_font_add_glyph(
        self,
        src_cfg,
        c,
        float x0,
        float y0,
        float x1,
        float y1,
        float u0,
        float v0,
        float u1,
        float v1,
        float advance_x
    ):
    ccimgui.ImFont_AddGlyph(self, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x)

def im_font_add_remap_char(
        self,
        dst,
        src,
        ccimgui.bool overwrite_dst
    ):
    ccimgui.ImFont_AddRemapChar(self, dst, src, overwrite_dst)

def im_font_atlas_add_custom_rect_font_glyph(
        self,
        font,
        id_,
        int width,
        int height,
        float advance_x,
        offset
    ):
    cdef int res = ccimgui.ImFontAtlas_AddCustomRectFontGlyph(self, font, id_, width, height, advance_x, offset)
    return res

def im_font_atlas_add_custom_rect_regular(self, int width, int height):
    cdef int res = ccimgui.ImFontAtlas_AddCustomRectRegular(self, width, height)
    return res

def im_font_atlas_add_font(self, font_cfg):
    cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFont(self, font_cfg)
    return res

def im_font_atlas_add_font_default(self, font_cfg):
    cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontDefault(self, font_cfg)
    return res

def im_font_atlas_add_font_from_file_ttf(
        self,
        str filename,
        float size_pixels,
        font_cfg,
        glyph_ranges
    ):
    cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges)
    return res

def im_font_atlas_add_font_from_memory_compressed_base_85ttf(
        self,
        str compressed_font_data_base85,
        float size_pixels,
        font_cfg,
        glyph_ranges
    ):
    cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges)
    return res

def im_font_atlas_add_font_from_memory_compressed_ttf(
        self,
        compressed_font_data,
        int compressed_font_size,
        float size_pixels,
        font_cfg,
        glyph_ranges
    ):
    cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedTTF(self, compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges)
    return res

def im_font_atlas_add_font_from_memory_ttf(
        self,
        font_data,
        int font_size,
        float size_pixels,
        font_cfg,
        glyph_ranges
    ):
    cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryTTF(self, font_data, font_size, size_pixels, font_cfg, glyph_ranges)
    return res

def im_font_atlas_build(self):
    cdef bool res = ccimgui.ImFontAtlas_Build(self)
    return res

def im_font_atlas_calc_custom_rect_uv(
        self,
        rect,
        out_uv_min,
        out_uv_max
    ):
    ccimgui.ImFontAtlas_CalcCustomRectUV(self, rect, out_uv_min, out_uv_max)

def im_font_atlas_clear(self):
    ccimgui.ImFontAtlas_Clear(self)

def im_font_atlas_clear_fonts(self):
    ccimgui.ImFontAtlas_ClearFonts(self)

def im_font_atlas_clear_input_data(self):
    ccimgui.ImFontAtlas_ClearInputData(self)

def im_font_atlas_clear_tex_data(self):
    ccimgui.ImFontAtlas_ClearTexData(self)

def im_font_atlas_custom_rect_destroy(self):
    ccimgui.ImFontAtlasCustomRect_destroy(self)

def im_font_atlas_custom_rect_im_font_atlas_custom_rect():
    cdef ccimgui.ImFontAtlasCustomRect* res = ccimgui.ImFontAtlasCustomRect_ImFontAtlasCustomRect()
    return res

def im_font_atlas_custom_rect_is_packed(self):
    cdef bool res = ccimgui.ImFontAtlasCustomRect_IsPacked(self)
    return res

def im_font_atlas_destroy(self):
    ccimgui.ImFontAtlas_destroy(self)

def im_font_atlas_get_custom_rect_by_index(self, int index):
    cdef ccimgui.ImFontAtlasCustomRect* res = ccimgui.ImFontAtlas_GetCustomRectByIndex(self, index)
    return res

def im_font_atlas_get_glyph_ranges_chinese_full(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseFull(self)
    return res

def im_font_atlas_get_glyph_ranges_chinese_simplified_common(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
    return res

def im_font_atlas_get_glyph_ranges_cyrillic(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesCyrillic(self)
    return res

def im_font_atlas_get_glyph_ranges_default(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesDefault(self)
    return res

def im_font_atlas_get_glyph_ranges_greek(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesGreek(self)
    return res

def im_font_atlas_get_glyph_ranges_japanese(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesJapanese(self)
    return res

def im_font_atlas_get_glyph_ranges_korean(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesKorean(self)
    return res

def im_font_atlas_get_glyph_ranges_thai(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesThai(self)
    return res

def im_font_atlas_get_glyph_ranges_vietnamese(self):
    cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesVietnamese(self)
    return res

def im_font_atlas_get_mouse_cursor_tex_data(
        self,
        cursor,
        out_offset,
        out_size,
        out_uv_border,
        out_uv_fill
    ):
    cdef bool res = ccimgui.ImFontAtlas_GetMouseCursorTexData(self, cursor, out_offset, out_size, out_uv_border, out_uv_fill)
    return res

def im_font_atlas_get_tex_data_as_alpha8(
        self,
        out_pixels,
        int out_width,
        int out_height,
        int out_bytes_per_pixel
    ):
    ccimgui.ImFontAtlas_GetTexDataAsAlpha8(self, out_pixels, out_width, out_height, out_bytes_per_pixel)

def im_font_atlas_get_tex_data_as_rgba32(
        self,
        out_pixels,
        int out_width,
        int out_height,
        int out_bytes_per_pixel
    ):
    ccimgui.ImFontAtlas_GetTexDataAsRGBA32(self, out_pixels, out_width, out_height, out_bytes_per_pixel)

def im_font_atlas_im_font_atlas():
    cdef ccimgui.ImFontAtlas* res = ccimgui.ImFontAtlas_ImFontAtlas()
    return res

def im_font_atlas_is_built(self):
    cdef bool res = ccimgui.ImFontAtlas_IsBuilt(self)
    return res

def im_font_atlas_set_tex_id(self, id_):
    ccimgui.ImFontAtlas_SetTexID(self, id_)

def im_font_build_lookup_table(self):
    ccimgui.ImFont_BuildLookupTable(self)

def im_font_calc_text_sizea(
        pOut,
        self,
        float size,
        float max_width,
        float wrap_width,
        str text_begin,
        str text_end,
        remaining
    ):
    ccimgui.ImFont_CalcTextSizeA(pOut, self, size, max_width, wrap_width, text_begin, text_end, remaining)

def im_font_calc_word_wrap_positiona(
        self,
        float scale,
        str text,
        str text_end,
        float wrap_width
    ):
    cdef const char* res = ccimgui.ImFont_CalcWordWrapPositionA(self, scale, text, text_end, wrap_width)
    return res

def im_font_clear_output_data(self):
    ccimgui.ImFont_ClearOutputData(self)

def im_font_config_destroy(self):
    ccimgui.ImFontConfig_destroy(self)

def im_font_config_im_font_config():
    cdef ccimgui.ImFontConfig* res = ccimgui.ImFontConfig_ImFontConfig()
    return res

def im_font_destroy(self):
    ccimgui.ImFont_destroy(self)

def im_font_find_glyph(self, c):
    cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyph(self, c)
    return res

def im_font_find_glyph_no_fallback(self, c):
    cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyphNoFallback(self, c)
    return res

def im_font_get_char_advance(self, c):
    cdef float res = ccimgui.ImFont_GetCharAdvance(self, c)
    return res

def im_font_get_debug_name(self):
    cdef const char* res = ccimgui.ImFont_GetDebugName(self)
    return res

def im_font_glyph_ranges_builder_add_char(self, c):
    ccimgui.ImFontGlyphRangesBuilder_AddChar(self, c)

def im_font_glyph_ranges_builder_add_ranges(self, ranges):
    ccimgui.ImFontGlyphRangesBuilder_AddRanges(self, ranges)

def im_font_glyph_ranges_builder_add_text(self, str text, str text_end):
    ccimgui.ImFontGlyphRangesBuilder_AddText(self, text, text_end)

def im_font_glyph_ranges_builder_build_ranges(self, out_ranges):
    ccimgui.ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)

def im_font_glyph_ranges_builder_clear(self):
    ccimgui.ImFontGlyphRangesBuilder_Clear(self)

def im_font_glyph_ranges_builder_destroy(self):
    ccimgui.ImFontGlyphRangesBuilder_destroy(self)

def im_font_glyph_ranges_builder_get_bit(self, n):
    cdef bool res = ccimgui.ImFontGlyphRangesBuilder_GetBit(self, n)
    return res

def im_font_glyph_ranges_builder_im_font_glyph_ranges_builder():
    cdef ccimgui.ImFontGlyphRangesBuilder* res = ccimgui.ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
    return res

def im_font_glyph_ranges_builder_set_bit(self, n):
    ccimgui.ImFontGlyphRangesBuilder_SetBit(self, n)

def im_font_grow_index(self, int new_size):
    ccimgui.ImFont_GrowIndex(self, new_size)

def im_font_im_font():
    cdef ccimgui.ImFont* res = ccimgui.ImFont_ImFont()
    return res

def im_font_is_glyph_range_unused(self, int c_begin, int c_last):
    cdef bool res = ccimgui.ImFont_IsGlyphRangeUnused(self, c_begin, c_last)
    return res

def im_font_is_loaded(self):
    cdef bool res = ccimgui.ImFont_IsLoaded(self)
    return res

def im_font_render_char(
        self,
        draw_list,
        float size,
        pos,
        col,
        c
    ):
    ccimgui.ImFont_RenderChar(self, draw_list, size, pos, col, c)

def im_font_render_text(
        self,
        draw_list,
        float size,
        pos,
        col,
        clip_rect,
        str text_begin,
        str text_end,
        float wrap_width,
        ccimgui.bool cpu_fine_clip
    ):
    ccimgui.ImFont_RenderText(self, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip)

def im_font_set_glyph_visible(self, c, ccimgui.bool visible):
    ccimgui.ImFont_SetGlyphVisible(self, c, visible)

def im_vec_2_destroy(self):
    ccimgui.ImVec2_destroy(self)

def im_vec_2_im_vec_2_float(float _x, float _y):
    cdef ccimgui.ImVec2* res = ccimgui.ImVec2_ImVec2_Float(_x, _y)
    return res

def im_vec_2_im_vec_2_nil():
    cdef ccimgui.ImVec2* res = ccimgui.ImVec2_ImVec2_Nil()
    return res

def im_vec_4_destroy(self):
    ccimgui.ImVec4_destroy(self)

def im_vec_4_im_vec_4_float(
        float _x,
        float _y,
        float _z,
        float _w
    ):
    cdef ccimgui.ImVec4* res = ccimgui.ImVec4_ImVec4_Float(_x, _y, _z, _w)
    return res

def im_vec_4_im_vec_4_nil():
    cdef ccimgui.ImVec4* res = ccimgui.ImVec4_ImVec4_Nil()
    return res

def im_vector_im_wchar_create():
    cdef ccimgui.ImVector_ImWchar* res = ccimgui.ImVector_ImWchar_create()
    return res

def im_vector_im_wchar_destroy(self):
    ccimgui.ImVector_ImWchar_destroy(self)

def im_vector_im_wchar_init(p):
    ccimgui.ImVector_ImWchar_Init(p)

def im_vector_im_wchar_un_init(p):
    ccimgui.ImVector_ImWchar_UnInit(p)

def image(
        user_texture_id,
        size,
        uv0,
        uv1,
        tint_col,
        border_col
    ):
    ccimgui.igImage(user_texture_id, size, uv0, uv1, tint_col, border_col)

def image_button(
        str str_id,
        user_texture_id,
        size,
        uv0,
        uv1,
        bg_col,
        tint_col
    ):
    cdef bool res = ccimgui.igImageButton(str_id, user_texture_id, size, uv0, uv1, bg_col, tint_col)
    return res

def imgui_input_text_callback_data_clear_selection(self):
    ccimgui.ImGuiInputTextCallbackData_ClearSelection(self)

def imgui_input_text_callback_data_delete_chars(self, int pos, int bytes_count):
    ccimgui.ImGuiInputTextCallbackData_DeleteChars(self, pos, bytes_count)

def imgui_input_text_callback_data_destroy(self):
    ccimgui.ImGuiInputTextCallbackData_destroy(self)

def imgui_input_text_callback_data_has_selection(self):
    cdef bool res = ccimgui.ImGuiInputTextCallbackData_HasSelection(self)
    return res

def imgui_input_text_callback_data_imgui_input_text_callback_data():
    cdef ccimgui.ImGuiInputTextCallbackData* res = ccimgui.ImGuiInputTextCallbackData_ImGuiInputTextCallbackData()
    return res

def imgui_input_text_callback_data_insert_chars(
        self,
        int pos,
        str text,
        str text_end
    ):
    ccimgui.ImGuiInputTextCallbackData_InsertChars(self, pos, text, text_end)

def imgui_input_text_callback_data_select_all(self):
    ccimgui.ImGuiInputTextCallbackData_SelectAll(self)

def imgui_io_add_focus_event(self, ccimgui.bool focused):
    ccimgui.ImGuiIO_AddFocusEvent(self, focused)

def imgui_io_add_input_character(self, int c):
    ccimgui.ImGuiIO_AddInputCharacter(self, c)

def imgui_io_add_input_character_utf16(self, c):
    ccimgui.ImGuiIO_AddInputCharacterUTF16(self, c)

def imgui_io_add_input_characters_utf8(self, str str_):
    ccimgui.ImGuiIO_AddInputCharactersUTF8(self, str_)

def imgui_io_add_key_analog_event(
        self,
        int key,
        ccimgui.bool down,
        float v
    ):
    ccimgui.ImGuiIO_AddKeyAnalogEvent(self, key, down, v)

def imgui_io_add_key_event(self, int key, ccimgui.bool down):
    ccimgui.ImGuiIO_AddKeyEvent(self, key, down)

def imgui_io_add_mouse_button_event(self, int button, ccimgui.bool down):
    ccimgui.ImGuiIO_AddMouseButtonEvent(self, button, down)

def imgui_io_add_mouse_pos_event(self, float x, float y):
    ccimgui.ImGuiIO_AddMousePosEvent(self, x, y)

def imgui_io_add_mouse_viewport_event(self, id_):
    ccimgui.ImGuiIO_AddMouseViewportEvent(self, id_)

def imgui_io_add_mouse_wheel_event(self, float wheel_x, float wheel_y):
    ccimgui.ImGuiIO_AddMouseWheelEvent(self, wheel_x, wheel_y)

def imgui_io_clear_input_characters(self):
    ccimgui.ImGuiIO_ClearInputCharacters(self)

def imgui_io_clear_input_keys(self):
    ccimgui.ImGuiIO_ClearInputKeys(self)

def imgui_io_destroy(self):
    ccimgui.ImGuiIO_destroy(self)

def imgui_io_imgui_io():
    cdef ccimgui.ImGuiIO* res = ccimgui.ImGuiIO_ImGuiIO()
    return res

def imgui_io_set_app_accepting_events(self, ccimgui.bool accepting_events):
    ccimgui.ImGuiIO_SetAppAcceptingEvents(self, accepting_events)

def imgui_io_set_key_event_native_data(
        self,
        int key,
        int native_keycode,
        int native_scancode,
        int native_legacy_index
    ):
    ccimgui.ImGuiIO_SetKeyEventNativeData(self, key, native_keycode, native_scancode, native_legacy_index)

def imgui_list_clipper_begin(self, int items_count, float items_height):
    ccimgui.ImGuiListClipper_Begin(self, items_count, items_height)

def imgui_list_clipper_destroy(self):
    ccimgui.ImGuiListClipper_destroy(self)

def imgui_list_clipper_end(self):
    ccimgui.ImGuiListClipper_End(self)

def imgui_list_clipper_force_display_range_by_indices(self, int item_min, int item_max):
    ccimgui.ImGuiListClipper_ForceDisplayRangeByIndices(self, item_min, item_max)

def imgui_list_clipper_imgui_list_clipper():
    cdef ccimgui.ImGuiListClipper* res = ccimgui.ImGuiListClipper_ImGuiListClipper()
    return res

def imgui_list_clipper_step(self):
    cdef bool res = ccimgui.ImGuiListClipper_Step(self)
    return res

def imgui_once_upon_a_frame_destroy(self):
    ccimgui.ImGuiOnceUponAFrame_destroy(self)

def imgui_once_upon_a_frame_imgui_once_upon_a_frame():
    cdef ccimgui.ImGuiOnceUponAFrame* res = ccimgui.ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
    return res

def imgui_payload_clear(self):
    ccimgui.ImGuiPayload_Clear(self)

def imgui_payload_destroy(self):
    ccimgui.ImGuiPayload_destroy(self)

def imgui_payload_imgui_payload():
    cdef ccimgui.ImGuiPayload* res = ccimgui.ImGuiPayload_ImGuiPayload()
    return res

def imgui_payload_is_data_type(self, str type_):
    cdef bool res = ccimgui.ImGuiPayload_IsDataType(self, type_)
    return res

def imgui_payload_is_delivery(self):
    cdef bool res = ccimgui.ImGuiPayload_IsDelivery(self)
    return res

def imgui_payload_is_preview(self):
    cdef bool res = ccimgui.ImGuiPayload_IsPreview(self)
    return res

def imgui_platform_ime_data_destroy(self):
    ccimgui.ImGuiPlatformImeData_destroy(self)

def imgui_platform_ime_data_imgui_platform_ime_data():
    cdef ccimgui.ImGuiPlatformImeData* res = ccimgui.ImGuiPlatformImeData_ImGuiPlatformImeData()
    return res

def imgui_platform_io_destroy(self):
    ccimgui.ImGuiPlatformIO_destroy(self)

def imgui_platform_io_imgui_platform_io():
    cdef ccimgui.ImGuiPlatformIO* res = ccimgui.ImGuiPlatformIO_ImGuiPlatformIO()
    return res

def imgui_platform_monitor_destroy(self):
    ccimgui.ImGuiPlatformMonitor_destroy(self)

def imgui_platform_monitor_imgui_platform_monitor():
    cdef ccimgui.ImGuiPlatformMonitor* res = ccimgui.ImGuiPlatformMonitor_ImGuiPlatformMonitor()
    return res

def imgui_storage_build_sort_by_key(self):
    ccimgui.ImGuiStorage_BuildSortByKey(self)

def imgui_storage_clear(self):
    ccimgui.ImGuiStorage_Clear(self)

def imgui_storage_get_bool(self, key, ccimgui.bool default_val):
    cdef bool res = ccimgui.ImGuiStorage_GetBool(self, key, default_val)
    return res

def imgui_storage_get_bool_ref(self, key, ccimgui.bool default_val):
    cdef bool* res = ccimgui.ImGuiStorage_GetBoolRef(self, key, default_val)
    return res

def imgui_storage_get_float(self, key, float default_val):
    cdef float res = ccimgui.ImGuiStorage_GetFloat(self, key, default_val)
    return res

def imgui_storage_get_float_ref(self, key, float default_val):
    cdef float* res = ccimgui.ImGuiStorage_GetFloatRef(self, key, default_val)
    return res

def imgui_storage_get_int(self, key, int default_val):
    cdef int res = ccimgui.ImGuiStorage_GetInt(self, key, default_val)
    return res

def imgui_storage_get_int_ref(self, key, int default_val):
    cdef int* res = ccimgui.ImGuiStorage_GetIntRef(self, key, default_val)
    return res

def imgui_storage_get_void_ptr(self, key):
    cdef void* res = ccimgui.ImGuiStorage_GetVoidPtr(self, key)
    return res

def imgui_storage_get_void_ptr_ref(self, key, default_val):
    cdef void** res = ccimgui.ImGuiStorage_GetVoidPtrRef(self, key, default_val)
    return res

def imgui_storage_pair_destroy(self):
    ccimgui.ImGuiStoragePair_destroy(self)

def imgui_storage_pair_imgui_storage_pair_float(_key, float _val_f):
    cdef ccimgui.ImGuiStoragePair* res = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Float(_key, _val_f)
    return res

def imgui_storage_pair_imgui_storage_pair_int(_key, int _val_i):
    cdef ccimgui.ImGuiStoragePair* res = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Int(_key, _val_i)
    return res

def imgui_storage_pair_imgui_storage_pair_ptr(_key, _val_p):
    cdef ccimgui.ImGuiStoragePair* res = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Ptr(_key, _val_p)
    return res

def imgui_storage_set_all_int(self, int val):
    ccimgui.ImGuiStorage_SetAllInt(self, val)

def imgui_storage_set_bool(self, key, ccimgui.bool val):
    ccimgui.ImGuiStorage_SetBool(self, key, val)

def imgui_storage_set_float(self, key, float val):
    ccimgui.ImGuiStorage_SetFloat(self, key, val)

def imgui_storage_set_int(self, key, int val):
    ccimgui.ImGuiStorage_SetInt(self, key, val)

def imgui_storage_set_void_ptr(self, key, val):
    ccimgui.ImGuiStorage_SetVoidPtr(self, key, val)

def imgui_style_destroy(self):
    ccimgui.ImGuiStyle_destroy(self)

def imgui_style_imgui_style():
    cdef ccimgui.ImGuiStyle* res = ccimgui.ImGuiStyle_ImGuiStyle()
    return res

def imgui_style_scale_all_sizes(self, float scale_factor):
    ccimgui.ImGuiStyle_ScaleAllSizes(self, scale_factor)

def imgui_table_column_sort_specs_destroy(self):
    ccimgui.ImGuiTableColumnSortSpecs_destroy(self)

def imgui_table_column_sort_specs_imgui_table_column_sort_specs():
    cdef ccimgui.ImGuiTableColumnSortSpecs* res = ccimgui.ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
    return res

def imgui_table_sort_specs_destroy(self):
    ccimgui.ImGuiTableSortSpecs_destroy(self)

def imgui_table_sort_specs_imgui_table_sort_specs():
    cdef ccimgui.ImGuiTableSortSpecs* res = ccimgui.ImGuiTableSortSpecs_ImGuiTableSortSpecs()
    return res

def imgui_text_buffer_append(self, str str_, str str_end):
    ccimgui.ImGuiTextBuffer_append(self, str_, str_end)

def imgui_text_buffer_appendf(buffer, str fmt):
    ccimgui.ImGuiTextBuffer_appendf(buffer, fmt)

def imgui_text_buffer_appendfv(self, str fmt, str args):
    ccimgui.ImGuiTextBuffer_appendfv(self, fmt, args)

def imgui_text_buffer_begin(self):
    cdef const char* res = ccimgui.ImGuiTextBuffer_begin(self)
    return res

def imgui_text_buffer_c_str(self):
    cdef const char* res = ccimgui.ImGuiTextBuffer_c_str(self)
    return res

def imgui_text_buffer_clear(self):
    ccimgui.ImGuiTextBuffer_clear(self)

def imgui_text_buffer_destroy(self):
    ccimgui.ImGuiTextBuffer_destroy(self)

def imgui_text_buffer_empty(self):
    cdef bool res = ccimgui.ImGuiTextBuffer_empty(self)
    return res

def imgui_text_buffer_end(self):
    cdef const char* res = ccimgui.ImGuiTextBuffer_end(self)
    return res

def imgui_text_buffer_imgui_text_buffer():
    cdef ccimgui.ImGuiTextBuffer* res = ccimgui.ImGuiTextBuffer_ImGuiTextBuffer()
    return res

def imgui_text_buffer_reserve(self, int capacity):
    ccimgui.ImGuiTextBuffer_reserve(self, capacity)

def imgui_text_buffer_size(self):
    cdef int res = ccimgui.ImGuiTextBuffer_size(self)
    return res

def imgui_text_filter_build(self):
    ccimgui.ImGuiTextFilter_Build(self)

def imgui_text_filter_clear(self):
    ccimgui.ImGuiTextFilter_Clear(self)

def imgui_text_filter_destroy(self):
    ccimgui.ImGuiTextFilter_destroy(self)

def imgui_text_filter_draw(self, str label, float width):
    cdef bool res = ccimgui.ImGuiTextFilter_Draw(self, label, width)
    return res

def imgui_text_filter_imgui_text_filter(str default_filter):
    cdef ccimgui.ImGuiTextFilter* res = ccimgui.ImGuiTextFilter_ImGuiTextFilter(default_filter)
    return res

def imgui_text_filter_is_active(self):
    cdef bool res = ccimgui.ImGuiTextFilter_IsActive(self)
    return res

def imgui_text_filter_pass_filter(self, str text, str text_end):
    cdef bool res = ccimgui.ImGuiTextFilter_PassFilter(self, text, text_end)
    return res

def imgui_text_range_destroy(self):
    ccimgui.ImGuiTextRange_destroy(self)

def imgui_text_range_empty(self):
    cdef bool res = ccimgui.ImGuiTextRange_empty(self)
    return res

def imgui_text_range_imgui_text_range_nil():
    cdef ccimgui.ImGuiTextRange* res = ccimgui.ImGuiTextRange_ImGuiTextRange_Nil()
    return res

def imgui_text_range_imgui_text_range_str(str _b, str _e):
    cdef ccimgui.ImGuiTextRange* res = ccimgui.ImGuiTextRange_ImGuiTextRange_Str(_b, _e)
    return res

def imgui_text_range_split(self, str separator, out):
    ccimgui.ImGuiTextRange_split(self, separator, out)

def imgui_viewport_destroy(self):
    ccimgui.ImGuiViewport_destroy(self)

def imgui_viewport_get_center(pOut, self):
    ccimgui.ImGuiViewport_GetCenter(pOut, self)

def imgui_viewport_get_work_center(pOut, self):
    ccimgui.ImGuiViewport_GetWorkCenter(pOut, self)

def imgui_viewport_imgui_viewport():
    cdef ccimgui.ImGuiViewport* res = ccimgui.ImGuiViewport_ImGuiViewport()
    return res

def imgui_window_class_destroy(self):
    ccimgui.ImGuiWindowClass_destroy(self)

def imgui_window_class_imgui_window_class():
    cdef ccimgui.ImGuiWindowClass* res = ccimgui.ImGuiWindowClass_ImGuiWindowClass()
    return res

def indent(float indent_w):
    ccimgui.igIndent(indent_w)

def input_double(
        str label,
        v,
        double step,
        double step_fast,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igInputDouble(label, v, step, step_fast, format_, flags)
    return res

def input_float(
        str label,
        float v,
        float step,
        float step_fast,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igInputFloat(label, v, step, step_fast, format_, flags)
    return res

def input_float2(
        str label,
        float v,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igInputFloat2(label, v, format_, flags)
    return res

def input_float3(
        str label,
        float v,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igInputFloat3(label, v, format_, flags)
    return res

def input_float4(
        str label,
        float v,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igInputFloat4(label, v, format_, flags)
    return res

def input_int(
        str label,
        int v,
        int step,
        int step_fast,
        flags
    ):
    cdef bool res = ccimgui.igInputInt(label, v, step, step_fast, flags)
    return res

def input_int2(str label, int v, flags):
    cdef bool res = ccimgui.igInputInt2(label, v, flags)
    return res

def input_int3(str label, int v, flags):
    cdef bool res = ccimgui.igInputInt3(label, v, flags)
    return res

def input_int4(str label, int v, flags):
    cdef bool res = ccimgui.igInputInt4(label, v, flags)
    return res

def input_scalar(
        str label,
        data_type,
        p_data,
        p_step,
        p_step_fast,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igInputScalar(label, data_type, p_data, p_step, p_step_fast, format_, flags)
    return res

def input_scalarn(
        str label,
        data_type,
        p_data,
        int components,
        p_step,
        p_step_fast,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igInputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format_, flags)
    return res

def input_text(
        str label,
        str buf,
        buf_size,
        flags,
        callback,
        user_data
    ):
    cdef bool res = ccimgui.igInputText(label, buf, buf_size, flags, callback, user_data)
    return res

def input_text_multiline(
        str label,
        str buf,
        buf_size,
        size,
        flags,
        callback,
        user_data
    ):
    cdef bool res = ccimgui.igInputTextMultiline(label, buf, buf_size, size, flags, callback, user_data)
    return res

def input_text_with_hint(
        str label,
        str hint,
        str buf,
        buf_size,
        flags,
        callback,
        user_data
    ):
    cdef bool res = ccimgui.igInputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data)
    return res

def invisible_button(str str_id, size, flags):
    cdef bool res = ccimgui.igInvisibleButton(str_id, size, flags)
    return res

def is_any_item_active():
    cdef bool res = ccimgui.igIsAnyItemActive()
    return res

def is_any_item_focused():
    cdef bool res = ccimgui.igIsAnyItemFocused()
    return res

def is_any_item_hovered():
    cdef bool res = ccimgui.igIsAnyItemHovered()
    return res

def is_any_mouse_down():
    cdef bool res = ccimgui.igIsAnyMouseDown()
    return res

def is_item_activated():
    cdef bool res = ccimgui.igIsItemActivated()
    return res

def is_item_active():
    cdef bool res = ccimgui.igIsItemActive()
    return res

def is_item_clicked(mouse_button):
    cdef bool res = ccimgui.igIsItemClicked(mouse_button)
    return res

def is_item_deactivated():
    cdef bool res = ccimgui.igIsItemDeactivated()
    return res

def is_item_deactivated_after_edit():
    cdef bool res = ccimgui.igIsItemDeactivatedAfterEdit()
    return res

def is_item_edited():
    cdef bool res = ccimgui.igIsItemEdited()
    return res

def is_item_focused():
    cdef bool res = ccimgui.igIsItemFocused()
    return res

def is_item_hovered(flags):
    cdef bool res = ccimgui.igIsItemHovered(flags)
    return res

def is_item_toggled_open():
    cdef bool res = ccimgui.igIsItemToggledOpen()
    return res

def is_item_visible():
    cdef bool res = ccimgui.igIsItemVisible()
    return res

def is_key_down(int key):
    cdef bool res = ccimgui.igIsKeyDown(key)
    return res

def is_key_pressed(int key, ccimgui.bool repeat):
    cdef bool res = ccimgui.igIsKeyPressed(key, repeat)
    return res

def is_key_released(int key):
    cdef bool res = ccimgui.igIsKeyReleased(key)
    return res

def is_mouse_clicked(button, ccimgui.bool repeat):
    cdef bool res = ccimgui.igIsMouseClicked(button, repeat)
    return res

def is_mouse_double_clicked(button):
    cdef bool res = ccimgui.igIsMouseDoubleClicked(button)
    return res

def is_mouse_down(button):
    cdef bool res = ccimgui.igIsMouseDown(button)
    return res

def is_mouse_dragging(button, float lock_threshold):
    cdef bool res = ccimgui.igIsMouseDragging(button, lock_threshold)
    return res

def is_mouse_hovering_rect(r_min, r_max, ccimgui.bool clip):
    cdef bool res = ccimgui.igIsMouseHoveringRect(r_min, r_max, clip)
    return res

def is_mouse_pos_valid(mouse_pos):
    cdef bool res = ccimgui.igIsMousePosValid(mouse_pos)
    return res

def is_mouse_released(button):
    cdef bool res = ccimgui.igIsMouseReleased(button)
    return res

def is_popup_open(str str_id, flags):
    cdef bool res = ccimgui.igIsPopupOpen(str_id, flags)
    return res

def is_rect_visible_nil(size):
    cdef bool res = ccimgui.igIsRectVisible_Nil(size)
    return res

def is_rect_visible_vec2(rect_min, rect_max):
    cdef bool res = ccimgui.igIsRectVisible_Vec2(rect_min, rect_max)
    return res

def is_window_appearing():
    cdef bool res = ccimgui.igIsWindowAppearing()
    return res

def is_window_collapsed():
    cdef bool res = ccimgui.igIsWindowCollapsed()
    return res

def is_window_docked():
    cdef bool res = ccimgui.igIsWindowDocked()
    return res

def is_window_focused(flags):
    cdef bool res = ccimgui.igIsWindowFocused(flags)
    return res

def is_window_hovered(flags):
    cdef bool res = ccimgui.igIsWindowHovered(flags)
    return res

def label_text(str label, str fmt):
    ccimgui.igLabelText(label, fmt)

def label_textv(str label, str fmt, str args):
    ccimgui.igLabelTextV(label, fmt, args)

def list_box_fn_bool_ptr(
        str label,
        int current_item,
        Callable items_getter,
        data,
        int items_count,
        int height_in_items
    ):
    cdef bool res = ccimgui.igListBox_FnBoolPtr(label, current_item, items_getter, data, items_count, height_in_items)
    return res

def list_box_str_arr(
        str label,
        int current_item,
        str items,
        int items_count,
        int height_in_items
    ):
    cdef bool res = ccimgui.igListBox_Str_arr(label, current_item, items, items_count, height_in_items)
    return res

def load_ini_settings_from_disk(str ini_filename):
    ccimgui.igLoadIniSettingsFromDisk(ini_filename)

def load_ini_settings_from_memory(str ini_data, ini_size):
    ccimgui.igLoadIniSettingsFromMemory(ini_data, ini_size)

def log_buttons():
    ccimgui.igLogButtons()

def log_finish():
    ccimgui.igLogFinish()

def log_text(str fmt):
    ccimgui.igLogText(fmt)

def log_textv(str fmt, str args):
    ccimgui.igLogTextV(fmt, args)

def log_to_clipboard(int auto_open_depth):
    ccimgui.igLogToClipboard(auto_open_depth)

def log_to_file(int auto_open_depth, str filename):
    ccimgui.igLogToFile(auto_open_depth, filename)

def log_to_tty(int auto_open_depth):
    ccimgui.igLogToTTY(auto_open_depth)

def mem_alloc(size):
    cdef void* res = ccimgui.igMemAlloc(size)
    return res

def mem_free(ptr):
    ccimgui.igMemFree(ptr)

def menu_item_bool(
        str label,
        str shortcut,
        ccimgui.bool selected,
        ccimgui.bool enabled
    ):
    cdef bool res = ccimgui.igMenuItem_Bool(label, shortcut, selected, enabled)
    return res

def menu_item_bool_ptr(
        str label,
        str shortcut,
        p_selected,
        ccimgui.bool enabled
    ):
    cdef bool res = ccimgui.igMenuItem_BoolPtr(label, shortcut, p_selected, enabled)
    return res

def new_frame():
    ccimgui.igNewFrame()

def new_line():
    ccimgui.igNewLine()

def next_column():
    ccimgui.igNextColumn()

def open_popup_id(id_, popup_flags):
    ccimgui.igOpenPopup_ID(id_, popup_flags)

def open_popup_on_item_click(str str_id, popup_flags):
    ccimgui.igOpenPopupOnItemClick(str_id, popup_flags)

def open_popup_str(str str_id, popup_flags):
    ccimgui.igOpenPopup_Str(str_id, popup_flags)

def plot_histogram_float_ptr(
        str label,
        float values,
        int values_count,
        int values_offset,
        str overlay_text,
        float scale_min,
        float scale_max,
        graph_size,
        int stride
    ):
    ccimgui.igPlotHistogram_FloatPtr(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride)

def plot_histogram_fn_float_ptr(
        str label,
        Callable values_getter,
        data,
        int values_count,
        int values_offset,
        str overlay_text,
        float scale_min,
        float scale_max,
        graph_size
    ):
    ccimgui.igPlotHistogram_FnFloatPtr(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size)

def plot_lines_float_ptr(
        str label,
        float values,
        int values_count,
        int values_offset,
        str overlay_text,
        float scale_min,
        float scale_max,
        graph_size,
        int stride
    ):
    ccimgui.igPlotLines_FloatPtr(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride)

def plot_lines_fn_float_ptr(
        str label,
        Callable values_getter,
        data,
        int values_count,
        int values_offset,
        str overlay_text,
        float scale_min,
        float scale_max,
        graph_size
    ):
    ccimgui.igPlotLines_FnFloatPtr(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size)

def pop_allow_keyboard_focus():
    ccimgui.igPopAllowKeyboardFocus()

def pop_button_repeat():
    ccimgui.igPopButtonRepeat()

def pop_clip_rect():
    ccimgui.igPopClipRect()

def pop_font():
    ccimgui.igPopFont()

def pop_id():
    ccimgui.igPopID()

def pop_item_width():
    ccimgui.igPopItemWidth()

def pop_style_color(int count):
    ccimgui.igPopStyleColor(count)

def pop_style_var(int count):
    ccimgui.igPopStyleVar(count)

def pop_text_wrap_pos():
    ccimgui.igPopTextWrapPos()

def progress_bar(float fraction, size_arg, str overlay):
    ccimgui.igProgressBar(fraction, size_arg, overlay)

def push_allow_keyboard_focus(ccimgui.bool allow_keyboard_focus):
    ccimgui.igPushAllowKeyboardFocus(allow_keyboard_focus)

def push_button_repeat(ccimgui.bool repeat):
    ccimgui.igPushButtonRepeat(repeat)

def push_clip_rect(clip_rect_min, clip_rect_max, ccimgui.bool intersect_with_current_clip_rect):
    ccimgui.igPushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect)

def push_font(font):
    ccimgui.igPushFont(font)

def push_id_int(int int_id):
    ccimgui.igPushID_Int(int_id)

def push_id_ptr(ptr_id):
    ccimgui.igPushID_Ptr(ptr_id)

def push_id_str(str str_id):
    ccimgui.igPushID_Str(str_id)

def push_id_str_str(str str_id_begin, str str_id_end):
    ccimgui.igPushID_StrStr(str_id_begin, str_id_end)

def push_item_width(float item_width):
    ccimgui.igPushItemWidth(item_width)

def push_style_color_u32(idx, col):
    ccimgui.igPushStyleColor_U32(idx, col)

def push_style_color_vec4(idx, col):
    ccimgui.igPushStyleColor_Vec4(idx, col)

def push_style_var_float(idx, float val):
    ccimgui.igPushStyleVar_Float(idx, val)

def push_style_var_vec2(idx, val):
    ccimgui.igPushStyleVar_Vec2(idx, val)

def push_text_wrap_pos(float wrap_local_pos_x):
    ccimgui.igPushTextWrapPos(wrap_local_pos_x)

def radio_button_bool(str label, ccimgui.bool active):
    cdef bool res = ccimgui.igRadioButton_Bool(label, active)
    return res

def radio_button_int_ptr(str label, int v, int v_button):
    cdef bool res = ccimgui.igRadioButton_IntPtr(label, v, v_button)
    return res

def render():
    ccimgui.igRender()

def render_platform_windows_default(platform_render_arg, renderer_render_arg):
    ccimgui.igRenderPlatformWindowsDefault(platform_render_arg, renderer_render_arg)

def reset_mouse_drag_delta(button):
    ccimgui.igResetMouseDragDelta(button)

def same_line(float offset_from_start_x, float spacing):
    ccimgui.igSameLine(offset_from_start_x, spacing)

def save_ini_settings_to_disk(str ini_filename):
    ccimgui.igSaveIniSettingsToDisk(ini_filename)

def save_ini_settings_to_memory(out_ini_size):
    cdef const char* res = ccimgui.igSaveIniSettingsToMemory(out_ini_size)
    return res

def selectable_bool(
        str label,
        ccimgui.bool selected,
        flags,
        size
    ):
    cdef bool res = ccimgui.igSelectable_Bool(label, selected, flags, size)
    return res

def selectable_bool_ptr(
        str label,
        p_selected,
        flags,
        size
    ):
    cdef bool res = ccimgui.igSelectable_BoolPtr(label, p_selected, flags, size)
    return res

def separator():
    ccimgui.igSeparator()

def separator_text(str label):
    ccimgui.igSeparatorText(label)

def set_allocator_functions(alloc_func, free_func, user_data):
    ccimgui.igSetAllocatorFunctions(alloc_func, free_func, user_data)

def set_clipboard_text(str text):
    ccimgui.igSetClipboardText(text)

def set_color_edit_options(flags):
    ccimgui.igSetColorEditOptions(flags)

def set_column_offset(int column_index, float offset_x):
    ccimgui.igSetColumnOffset(column_index, offset_x)

def set_column_width(int column_index, float width):
    ccimgui.igSetColumnWidth(column_index, width)

def set_current_context(ctx):
    ccimgui.igSetCurrentContext(ctx)

def set_cursor_pos(local_pos):
    ccimgui.igSetCursorPos(local_pos)

def set_cursor_posx(float local_x):
    ccimgui.igSetCursorPosX(local_x)

def set_cursor_posy(float local_y):
    ccimgui.igSetCursorPosY(local_y)

def set_cursor_screen_pos(pos):
    ccimgui.igSetCursorScreenPos(pos)

def set_drag_drop_payload(
        str type_,
        data,
        sz,
        cond
    ):
    cdef bool res = ccimgui.igSetDragDropPayload(type_, data, sz, cond)
    return res

def set_item_allow_overlap():
    ccimgui.igSetItemAllowOverlap()

def set_item_default_focus():
    ccimgui.igSetItemDefaultFocus()

def set_keyboard_focus_here(int offset):
    ccimgui.igSetKeyboardFocusHere(offset)

def set_mouse_cursor(cursor_type):
    ccimgui.igSetMouseCursor(cursor_type)

def set_next_frame_want_capture_keyboard(ccimgui.bool want_capture_keyboard):
    ccimgui.igSetNextFrameWantCaptureKeyboard(want_capture_keyboard)

def set_next_frame_want_capture_mouse(ccimgui.bool want_capture_mouse):
    ccimgui.igSetNextFrameWantCaptureMouse(want_capture_mouse)

def set_next_item_open(ccimgui.bool is_open, cond):
    ccimgui.igSetNextItemOpen(is_open, cond)

def set_next_item_width(float item_width):
    ccimgui.igSetNextItemWidth(item_width)

def set_next_window_bg_alpha(float alpha):
    ccimgui.igSetNextWindowBgAlpha(alpha)

def set_next_window_class(window_class):
    ccimgui.igSetNextWindowClass(window_class)

def set_next_window_collapsed(ccimgui.bool collapsed, cond):
    ccimgui.igSetNextWindowCollapsed(collapsed, cond)

def set_next_window_content_size(size):
    ccimgui.igSetNextWindowContentSize(size)

def set_next_window_dock_id(dock_id, cond):
    ccimgui.igSetNextWindowDockID(dock_id, cond)

def set_next_window_focus():
    ccimgui.igSetNextWindowFocus()

def set_next_window_pos(pos, cond, pivot):
    ccimgui.igSetNextWindowPos(pos, cond, pivot)

def set_next_window_scroll(scroll):
    ccimgui.igSetNextWindowScroll(scroll)

def set_next_window_size(size, cond):
    ccimgui.igSetNextWindowSize(size, cond)

def set_next_window_size_constraints(
        size_min,
        size_max,
        custom_callback,
        custom_callback_data
    ):
    ccimgui.igSetNextWindowSizeConstraints(size_min, size_max, custom_callback, custom_callback_data)

def set_next_window_viewport(viewport_id):
    ccimgui.igSetNextWindowViewport(viewport_id)

def set_scroll_from_posx(float local_x, float center_x_ratio):
    ccimgui.igSetScrollFromPosX(local_x, center_x_ratio)

def set_scroll_from_posy(float local_y, float center_y_ratio):
    ccimgui.igSetScrollFromPosY(local_y, center_y_ratio)

def set_scroll_herex(float center_x_ratio):
    ccimgui.igSetScrollHereX(center_x_ratio)

def set_scroll_herey(float center_y_ratio):
    ccimgui.igSetScrollHereY(center_y_ratio)

def set_scrollx(float scroll_x):
    ccimgui.igSetScrollX(scroll_x)

def set_scrolly(float scroll_y):
    ccimgui.igSetScrollY(scroll_y)

def set_state_storage(storage):
    ccimgui.igSetStateStorage(storage)

def set_tab_item_closed(str tab_or_docked_window_label):
    ccimgui.igSetTabItemClosed(tab_or_docked_window_label)

def set_tooltip(str fmt):
    ccimgui.igSetTooltip(fmt)

def set_tooltipv(str fmt, str args):
    ccimgui.igSetTooltipV(fmt, args)

def set_window_collapsed_bool(ccimgui.bool collapsed, cond):
    ccimgui.igSetWindowCollapsed_Bool(collapsed, cond)

def set_window_collapsed_str(str name, ccimgui.bool collapsed, cond):
    ccimgui.igSetWindowCollapsed_Str(name, collapsed, cond)

def set_window_focus_nil():
    ccimgui.igSetWindowFocus_Nil()

def set_window_focus_str(str name):
    ccimgui.igSetWindowFocus_Str(name)

def set_window_font_scale(float scale):
    ccimgui.igSetWindowFontScale(scale)

def set_window_pos_str(str name, pos, cond):
    ccimgui.igSetWindowPos_Str(name, pos, cond)

def set_window_pos_vec2(pos, cond):
    ccimgui.igSetWindowPos_Vec2(pos, cond)

def set_window_size_str(str name, size, cond):
    ccimgui.igSetWindowSize_Str(name, size, cond)

def set_window_size_vec2(size, cond):
    ccimgui.igSetWindowSize_Vec2(size, cond)

def show_about_window(p_open):
    ccimgui.igShowAboutWindow(p_open)

def show_debug_log_window(p_open):
    ccimgui.igShowDebugLogWindow(p_open)

def show_demo_window(p_open):
    ccimgui.igShowDemoWindow(p_open)

def show_font_selector(str label):
    ccimgui.igShowFontSelector(label)

def show_metrics_window(p_open):
    ccimgui.igShowMetricsWindow(p_open)

def show_stack_tool_window(p_open):
    ccimgui.igShowStackToolWindow(p_open)

def show_style_editor(ref):
    ccimgui.igShowStyleEditor(ref)

def show_style_selector(str label):
    cdef bool res = ccimgui.igShowStyleSelector(label)
    return res

def show_user_guide():
    ccimgui.igShowUserGuide()

def slider_angle(
        str label,
        float v_rad,
        float v_degrees_min,
        float v_degrees_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format_, flags)
    return res

def slider_float(
        str label,
        float v,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderFloat(label, v, v_min, v_max, format_, flags)
    return res

def slider_float2(
        str label,
        float v,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderFloat2(label, v, v_min, v_max, format_, flags)
    return res

def slider_float3(
        str label,
        float v,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderFloat3(label, v, v_min, v_max, format_, flags)
    return res

def slider_float4(
        str label,
        float v,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderFloat4(label, v, v_min, v_max, format_, flags)
    return res

def slider_int(
        str label,
        int v,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderInt(label, v, v_min, v_max, format_, flags)
    return res

def slider_int2(
        str label,
        int v,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderInt2(label, v, v_min, v_max, format_, flags)
    return res

def slider_int3(
        str label,
        int v,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderInt3(label, v, v_min, v_max, format_, flags)
    return res

def slider_int4(
        str label,
        int v,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderInt4(label, v, v_min, v_max, format_, flags)
    return res

def slider_scalar(
        str label,
        data_type,
        p_data,
        p_min,
        p_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderScalar(label, data_type, p_data, p_min, p_max, format_, flags)
    return res

def slider_scalarn(
        str label,
        data_type,
        p_data,
        int components,
        p_min,
        p_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igSliderScalarN(label, data_type, p_data, components, p_min, p_max, format_, flags)
    return res

def small_button(str label):
    cdef bool res = ccimgui.igSmallButton(label)
    return res

def spacing():
    ccimgui.igSpacing()

def style_colors_classic(dst):
    ccimgui.igStyleColorsClassic(dst)

def style_colors_dark(dst):
    ccimgui.igStyleColorsDark(dst)

def style_colors_light(dst):
    ccimgui.igStyleColorsLight(dst)

def tab_item_button(str label, flags):
    cdef bool res = ccimgui.igTabItemButton(label, flags)
    return res

def table_get_column_count():
    cdef int res = ccimgui.igTableGetColumnCount()
    return res

def table_get_column_flags(int column_n):
    cdef ccimgui.ImGuiTableColumnFlags res = ccimgui.igTableGetColumnFlags(column_n)
    return res

def table_get_column_index():
    cdef int res = ccimgui.igTableGetColumnIndex()
    return res

def table_get_column_name(int column_n):
    cdef const char* res = ccimgui.igTableGetColumnName(column_n)
    return res

def table_get_row_index():
    cdef int res = ccimgui.igTableGetRowIndex()
    return res

def table_get_sort_specs():
    cdef ccimgui.ImGuiTableSortSpecs* res = ccimgui.igTableGetSortSpecs()
    return res

def table_header(str label):
    ccimgui.igTableHeader(label)

def table_headers_row():
    ccimgui.igTableHeadersRow()

def table_next_column():
    cdef bool res = ccimgui.igTableNextColumn()
    return res

def table_next_row(row_flags, float min_row_height):
    ccimgui.igTableNextRow(row_flags, min_row_height)

def table_set_bg_color(target, color, int column_n):
    ccimgui.igTableSetBgColor(target, color, column_n)

def table_set_column_enabled(int column_n, ccimgui.bool v):
    ccimgui.igTableSetColumnEnabled(column_n, v)

def table_set_column_index(int column_n):
    cdef bool res = ccimgui.igTableSetColumnIndex(column_n)
    return res

def table_setup_column(
        str label,
        flags,
        float init_width_or_weight,
        user_id
    ):
    ccimgui.igTableSetupColumn(label, flags, init_width_or_weight, user_id)

def table_setup_scroll_freeze(int cols, int rows):
    ccimgui.igTableSetupScrollFreeze(cols, rows)

def text(str fmt):
    ccimgui.igText(fmt)

def text_colored(col, str fmt):
    ccimgui.igTextColored(col, fmt)

def text_coloredv(col, str fmt, str args):
    ccimgui.igTextColoredV(col, fmt, args)

def text_disabled(str fmt):
    ccimgui.igTextDisabled(fmt)

def text_disabledv(str fmt, str args):
    ccimgui.igTextDisabledV(fmt, args)

def text_unformatted(str text, str text_end):
    ccimgui.igTextUnformatted(text, text_end)

def text_wrapped(str fmt):
    ccimgui.igTextWrapped(fmt)

def text_wrappedv(str fmt, str args):
    ccimgui.igTextWrappedV(fmt, args)

def textv(str fmt, str args):
    ccimgui.igTextV(fmt, args)

def tree_node_ex_ptr(ptr_id, flags, str fmt):
    cdef bool res = ccimgui.igTreeNodeEx_Ptr(ptr_id, flags, fmt)
    return res

def tree_node_ex_str(str label, flags):
    cdef bool res = ccimgui.igTreeNodeEx_Str(label, flags)
    return res

def tree_node_ex_str_str(str str_id, flags, str fmt):
    cdef bool res = ccimgui.igTreeNodeEx_StrStr(str_id, flags, fmt)
    return res

def tree_node_ex_v_ptr(
        ptr_id,
        flags,
        str fmt,
        str args
    ):
    cdef bool res = ccimgui.igTreeNodeExV_Ptr(ptr_id, flags, fmt, args)
    return res

def tree_node_ex_v_str(
        str str_id,
        flags,
        str fmt,
        str args
    ):
    cdef bool res = ccimgui.igTreeNodeExV_Str(str_id, flags, fmt, args)
    return res

def tree_node_ptr(ptr_id, str fmt):
    cdef bool res = ccimgui.igTreeNode_Ptr(ptr_id, fmt)
    return res

def tree_node_str(str label):
    cdef bool res = ccimgui.igTreeNode_Str(label)
    return res

def tree_node_str_str(str str_id, str fmt):
    cdef bool res = ccimgui.igTreeNode_StrStr(str_id, fmt)
    return res

def tree_node_v_ptr(ptr_id, str fmt, str args):
    cdef bool res = ccimgui.igTreeNodeV_Ptr(ptr_id, fmt, args)
    return res

def tree_node_v_str(str str_id, str fmt, str args):
    cdef bool res = ccimgui.igTreeNodeV_Str(str_id, fmt, args)
    return res

def tree_pop():
    ccimgui.igTreePop()

def tree_push_ptr(ptr_id):
    ccimgui.igTreePush_Ptr(ptr_id)

def tree_push_str(str str_id):
    ccimgui.igTreePush_Str(str_id)

def unindent(float indent_w):
    ccimgui.igUnindent(indent_w)

def update_platform_windows():
    ccimgui.igUpdatePlatformWindows()

def v_slider_float(
        str label,
        size,
        float v,
        float v_min,
        float v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igVSliderFloat(label, size, v, v_min, v_max, format_, flags)
    return res

def v_slider_int(
        str label,
        size,
        int v,
        int v_min,
        int v_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igVSliderInt(label, size, v, v_min, v_max, format_, flags)
    return res

def v_slider_scalar(
        str label,
        size,
        data_type,
        p_data,
        p_min,
        p_max,
        str format_,
        flags
    ):
    cdef bool res = ccimgui.igVSliderScalar(label, size, data_type, p_data, p_min, p_max, format_, flags)
    return res

def value_bool(str prefix, ccimgui.bool b):
    ccimgui.igValue_Bool(prefix, b)

def value_float(str prefix, float v, str float_format):
    ccimgui.igValue_Float(prefix, v, float_format)

def value_int(str prefix, int v):
    ccimgui.igValue_Int(prefix, v)

def value_uint(str prefix, int v):
    ccimgui.igValue_Uint(prefix, v)
