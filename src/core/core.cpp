/* Generated by Cython 0.29.33 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CIMGUI_DEFINE_ENUMS_AND_STRUCTS",
                null
            ]
        ],
        "depends": [],
        "include_dirs": [
            "cimgui"
        ],
        "language": "c++",
        "libraries": [
            "cimgui"
        ],
        "library_dirs": [
            "pygui"
        ],
        "name": "core",
        "sources": [
            "core/core.pyx"
        ]
    },
    "module_name": "core"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_33"
#define CYTHON_HEX_VERSION 0x001D21F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__core
#define __PYX_HAVE_API__core
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "cimgui.h"
#include <stdint.h>
#include <float.h>
#include "pythread.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "core\\core.pyx",
  "stringsource",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && CYTHON_COMPILING_IN_NOGIL
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])


/*--- Type declarations ---*/
struct __pyx_obj_4core_BoolPtr;
struct __pyx_obj_4core_ImVector_ImDrawCmd;
struct __pyx_obj_4core_ImVector_ImDrawIdx;
struct __pyx_obj_4core_ImVector_ImDrawVert;
struct __pyx_obj_4core_ImVector_ImVec4;
struct __pyx_obj_4core_ImVector_ImTextureID;
struct __pyx_obj_4core_ImVector_ImVec2;
struct __pyx_obj_4core_ImVector_ImDrawChannel;
struct __pyx_obj_4core_ImVector_float;
struct __pyx_obj_4core_ImVector_ImWchar;
struct __pyx_obj_4core_ImVector_ImFontGlyph;
struct __pyx_obj_4core_ImVector_ImFontPtr;
struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect;
struct __pyx_obj_4core_ImVector_ImFontConfig;
struct __pyx_obj_4core_ImFontGlyph;
struct __pyx_obj_4core_ImVector_ImU32;
struct __pyx_obj_4core_ImGuiKeyData;
struct __pyx_obj_4core_ImGuiListClipper;
struct __pyx_obj_4core_ImGuiOnceUponAFrame;
struct __pyx_obj_4core_ImGuiPayload;
struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor;
struct __pyx_obj_4core_ImVector_ImGuiViewportPtr;
struct __pyx_obj_4core_ImVector_ImGuiStoragePair;
struct __pyx_obj_4core_ImGuiStoragePair;
struct __pyx_obj_4core_ImGuiTableColumnSortSpecs;
struct __pyx_obj_4core_ImGuiTableSortSpecs;
struct __pyx_obj_4core_ImVector_char;
struct __pyx_obj_4core_ImVector_ImGuiTextRange;
struct __pyx_obj_4core_ImGuiTextRange;
struct __pyx_obj_4core_ImGuiWindowClass;
struct __pyx_obj_4core_ImVec2;
struct __pyx_obj_4core_ImVec4;
struct __pyx_obj_4core_ImColor;
struct __pyx_obj_4core_ImDrawChannel;
struct __pyx_obj_4core_ImDrawCmd;
struct __pyx_obj_4core_ImDrawCmdHeader;
struct __pyx_obj_4core_ImDrawData;
struct __pyx_obj_4core_ImDrawListSplitter;
struct __pyx_obj_4core_ImDrawVert;
struct __pyx_obj_4core_ImFont;
struct __pyx_obj_4core_ImFontAtlas;
struct __pyx_obj_4core_ImFontAtlasCustomRect;
struct __pyx_obj_4core_ImFontConfig;
struct __pyx_obj_4core_ImFontGlyphRangesBuilder;
struct __pyx_obj_4core_ImGuiIO;
struct __pyx_obj_4core_ImGuiPlatformIO;
struct __pyx_obj_4core_ImGuiPlatformImeData;
struct __pyx_obj_4core_ImGuiPlatformMonitor;
struct __pyx_obj_4core_ImGuiStorage;
struct __pyx_obj_4core_ImGuiStyle;
struct __pyx_obj_4core_ImGuiTextBuffer;
struct __pyx_obj_4core_ImGuiTextFilter;
struct __pyx_obj_4core_ImGuiViewport;
struct __pyx_obj_4core_ImDrawList;
struct __pyx_obj_4core_ImDrawListSharedData;
struct __pyx_obj_4core_ImFontBuilderIO;
struct __pyx_obj_4core_ImGuiContext;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "core.pyx":692
 *     return sizeof(ccimgui.ImDrawIdx)
 * 
 * cdef class BoolPtr:             # <<<<<<<<<<<<<<
 *     cdef bool ptr
 * 
 */
struct __pyx_obj_4core_BoolPtr {
  PyObject_HEAD
  bool ptr;
};


/* "core.pyx":5460
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawCmd:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawCmd* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImDrawCmd {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImDrawCmd *__pyx_vtab;
  ImVector_ImDrawCmd *_ptr;
};


/* "core.pyx":5516
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawIdx:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawIdx* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImDrawIdx {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImDrawIdx *__pyx_vtab;
  ImVector_ImDrawIdx *_ptr;
};


/* "core.pyx":5574
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawVert:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawVert* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImDrawVert {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImDrawVert *__pyx_vtab;
  ImVector_ImDrawVert *_ptr;
};


/* "core.pyx":5632
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImVec4:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImVec4* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImVec4 {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImVec4 *__pyx_vtab;
  ImVector_ImVec4 *_ptr;
};


/* "core.pyx":5688
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImTextureID:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImTextureID* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImTextureID {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImTextureID *__pyx_vtab;
  ImVector_ImTextureID *_ptr;
};


/* "core.pyx":5744
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImVec2:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImVec2* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImVec2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImVec2 *__pyx_vtab;
  ImVector_ImVec2 *_ptr;
};


/* "core.pyx":5800
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawChannel:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawChannel* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImDrawChannel {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImDrawChannel *__pyx_vtab;
  ImVector_ImDrawChannel *_ptr;
};


/* "core.pyx":5856
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_float:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_float* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_float {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_float *__pyx_vtab;
  ImVector_float *_ptr;
};


/* "core.pyx":5912
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImWchar:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImWchar* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImWchar {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImWchar *__pyx_vtab;
  ImVector_ImWchar *_ptr;
};


/* "core.pyx":5968
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontGlyph:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontGlyph* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImFontGlyph {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImFontGlyph *__pyx_vtab;
  ImVector_ImFontGlyph *_ptr;
};


/* "core.pyx":6024
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontPtr:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontPtr* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImFontPtr {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImFontPtr *__pyx_vtab;
  ImVector_ImFontPtr *_ptr;
};


/* "core.pyx":6080
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontAtlasCustomRect:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontAtlasCustomRect* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImFontAtlasCustomRect *__pyx_vtab;
  ImVector_ImFontAtlasCustomRect *_ptr;
};


/* "core.pyx":6136
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontConfig:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontConfig* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImFontConfig {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImFontConfig *__pyx_vtab;
  ImVector_ImFontConfig *_ptr;
};


/* "core.pyx":6192
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontGlyph:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontGlyph* _ptr
 * 
 */
struct __pyx_obj_4core_ImFontGlyph {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImFontGlyph *__pyx_vtab;
  ImFontGlyph *_ptr;
};


/* "core.pyx":6365
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImU32:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImU32* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImU32 {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImU32 *__pyx_vtab;
  ImVector_ImU32 *_ptr;
};


/* "core.pyx":6421
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiKeyData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiKeyData* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiKeyData {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiKeyData *__pyx_vtab;
  ImGuiKeyData *_ptr;
};


/* "core.pyx":6490
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiListClipper:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiListClipper* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiListClipper {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiListClipper *__pyx_vtab;
  ImGuiListClipper *_ptr;
};


/* "core.pyx":6665
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiOnceUponAFrame:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiOnceUponAFrame* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiOnceUponAFrame {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiOnceUponAFrame *__pyx_vtab;
  ImGuiOnceUponAFrame *_ptr;
};


/* "core.pyx":6715
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPayload:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPayload* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiPayload {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiPayload *__pyx_vtab;
  ImGuiPayload *_ptr;
};


/* "core.pyx":6891
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiPlatformMonitor:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiPlatformMonitor* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImGuiPlatformMonitor *__pyx_vtab;
  ImVector_ImGuiPlatformMonitor *_ptr;
};


/* "core.pyx":6947
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiViewportPtr:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiViewportPtr* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImGuiViewportPtr {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImGuiViewportPtr *__pyx_vtab;
  ImVector_ImGuiViewportPtr *_ptr;
};


/* "core.pyx":7003
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiStoragePair:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiStoragePair* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImGuiStoragePair {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImGuiStoragePair *__pyx_vtab;
  ImVector_ImGuiStoragePair *_ptr;
};


/* "core.pyx":7059
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiStoragePair:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiStoragePair* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiStoragePair {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiStoragePair *__pyx_vtab;
  ImGuiStoragePair *_ptr;
};


/* "core.pyx":7172
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTableColumnSortSpecs:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiTableColumnSortSpecs {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiTableColumnSortSpecs *__pyx_vtab;
  ImGuiTableColumnSortSpecs *_ptr;
};


/* "core.pyx":7261
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTableSortSpecs:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTableSortSpecs* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiTableSortSpecs {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiTableSortSpecs *__pyx_vtab;
  ImGuiTableSortSpecs *_ptr;
};


/* "core.pyx":7337
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_char:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_char* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_char {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_char *__pyx_vtab;
  ImVector_char *_ptr;
};


/* "core.pyx":7393
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiTextRange:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiTextRange* _ptr
 * 
 */
struct __pyx_obj_4core_ImVector_ImGuiTextRange {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVector_ImGuiTextRange *__pyx_vtab;
  ImVector_ImGuiTextRange *_ptr;
};


/* "core.pyx":7449
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTextRange:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTextRange* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiTextRange {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiTextRange *__pyx_vtab;
  ImGuiTextRange *_ptr;
};


/* "core.pyx":7541
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiWindowClass:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiWindowClass* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiWindowClass {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiWindowClass *__pyx_vtab;
  ImGuiWindowClass *_ptr;
};


/* "core.pyx":7682
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVec2:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec2* _ptr
 * 
 */
struct __pyx_obj_4core_ImVec2 {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVec2 *__pyx_vtab;
  ImVec2 *_ptr;
};


/* "core.pyx":7757
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVec4:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec4* _ptr
 * 
 */
struct __pyx_obj_4core_ImVec4 {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImVec4 *__pyx_vtab;
  ImVec4 *_ptr;
};


/* "core.pyx":7858
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImColor:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImColor* _ptr
 * 
 */
struct __pyx_obj_4core_ImColor {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImColor *__pyx_vtab;
  ImColor *_ptr;
};


/* "core.pyx":7972
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawChannel:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawChannel* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawChannel {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawChannel *__pyx_vtab;
  ImDrawChannel *_ptr;
};


/* "core.pyx":8015
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawCmd:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawCmd* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawCmd {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawCmd *__pyx_vtab;
  ImDrawCmd *_ptr;
};


/* "core.pyx":8144
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawCmdHeader:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawCmdHeader* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawCmdHeader {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawCmdHeader *__pyx_vtab;
  ImDrawCmdHeader *_ptr;
};


/* "core.pyx":8200
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawData* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawData {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawData *__pyx_vtab;
  ImDrawData *_ptr;
};


/* "core.pyx":8395
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawListSplitter:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawListSplitter* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawListSplitter {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawListSplitter *__pyx_vtab;
  ImDrawListSplitter *_ptr;
};


/* "core.pyx":8514
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawVert:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawVert* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawVert {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawVert *__pyx_vtab;
  ImDrawVert *_ptr;
};


/* "core.pyx":8570
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFont:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFont* _ptr
 * 
 */
struct __pyx_obj_4core_ImFont {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImFont *__pyx_vtab;
  ImFont *_ptr;
};


/* "core.pyx":9049
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontAtlas:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontAtlas* _ptr
 * 
 */
struct __pyx_obj_4core_ImFontAtlas {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImFontAtlas *__pyx_vtab;
  ImFontAtlas *_ptr;
};


/* "core.pyx":9739
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontAtlasCustomRect:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontAtlasCustomRect* _ptr
 * 
 */
struct __pyx_obj_4core_ImFontAtlasCustomRect {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImFontAtlasCustomRect *__pyx_vtab;
  ImFontAtlasCustomRect *_ptr;
};


/* "core.pyx":9889
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontConfig:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontConfig* _ptr
 * 
 */
struct __pyx_obj_4core_ImFontConfig {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImFontConfig *__pyx_vtab;
  ImFontConfig *_ptr;
};


/* "core.pyx":10173
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontGlyphRangesBuilder:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontGlyphRangesBuilder* _ptr
 * 
 */
struct __pyx_obj_4core_ImFontGlyphRangesBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImFontGlyphRangesBuilder *__pyx_vtab;
  ImFontGlyphRangesBuilder *_ptr;
};


/* "core.pyx":10300
 * # ?use_template(True)
 * _io_clipboard = {}
 * cdef class ImGuiIO:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiIO* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiIO {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiIO *__pyx_vtab;
  ImGuiIO *_ptr;
};


/* "core.pyx":11845
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPlatformIO:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPlatformIO* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiPlatformIO {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiPlatformIO *__pyx_vtab;
  ImGuiPlatformIO *_ptr;
};


/* "core.pyx":12210
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPlatformImeData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPlatformImeData* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiPlatformImeData {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiPlatformImeData *__pyx_vtab;
  ImGuiPlatformImeData *_ptr;
};


/* "core.pyx":12286
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPlatformMonitor:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPlatformMonitor* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiPlatformMonitor {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiPlatformMonitor *__pyx_vtab;
  ImGuiPlatformMonitor *_ptr;
};


/* "core.pyx":12388
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiStorage:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiStorage* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiStorage {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiStorage *__pyx_vtab;
  ImGuiStorage *_ptr;
};


/* "core.pyx":12549
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiStyle:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiStyle* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiStyle {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiStyle *__pyx_vtab;
  ImGuiStyle *_ptr;
};


/* "core.pyx":13166
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTextBuffer:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTextBuffer* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiTextBuffer {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiTextBuffer *__pyx_vtab;
  ImGuiTextBuffer *_ptr;
};


/* "core.pyx":13304
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTextFilter:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTextFilter* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiTextFilter {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiTextFilter *__pyx_vtab;
  ImGuiTextFilter *_ptr;
};


/* "core.pyx":13426
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiViewport:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiViewport* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiViewport {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiViewport *__pyx_vtab;
  ImGuiViewport *_ptr;
};


/* "core.pyx":13700
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawList:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawList* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawList {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawList *__pyx_vtab;
  ImDrawList *_ptr;
};


/* "core.pyx":14630
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawListSharedData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawListSharedData* _ptr
 * 
 */
struct __pyx_obj_4core_ImDrawListSharedData {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImDrawListSharedData *__pyx_vtab;
  ImDrawListSharedData *_ptr;
};


/* "core.pyx":14647
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontBuilderIO:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontBuilderIO* _ptr
 * 
 */
struct __pyx_obj_4core_ImFontBuilderIO {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImFontBuilderIO *__pyx_vtab;
  ImFontBuilderIO *_ptr;
};


/* "core.pyx":14664
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiContext:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* _ptr
 * 
 */
struct __pyx_obj_4core_ImGuiContext {
  PyObject_HEAD
  struct __pyx_vtabstruct_4core_ImGuiContext *__pyx_vtab;
  ImGuiContext *_ptr;
};


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":280
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "core.pyx":5460
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawCmd:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawCmd* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImDrawCmd {
  struct __pyx_obj_4core_ImVector_ImDrawCmd *(*from_ptr)(ImVector_ImDrawCmd *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawCmd *__pyx_vtabptr_4core_ImVector_ImDrawCmd;


/* "core.pyx":5516
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawIdx:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawIdx* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImDrawIdx {
  struct __pyx_obj_4core_ImVector_ImDrawIdx *(*from_ptr)(ImVector_ImDrawIdx *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawIdx *__pyx_vtabptr_4core_ImVector_ImDrawIdx;


/* "core.pyx":5574
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawVert:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawVert* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImDrawVert {
  struct __pyx_obj_4core_ImVector_ImDrawVert *(*from_ptr)(ImVector_ImDrawVert *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawVert *__pyx_vtabptr_4core_ImVector_ImDrawVert;


/* "core.pyx":5632
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImVec4:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImVec4* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImVec4 {
  struct __pyx_obj_4core_ImVector_ImVec4 *(*from_ptr)(ImVector_ImVec4 *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImVec4 *__pyx_vtabptr_4core_ImVector_ImVec4;


/* "core.pyx":5688
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImTextureID:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImTextureID* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImTextureID {
  struct __pyx_obj_4core_ImVector_ImTextureID *(*from_ptr)(ImVector_ImTextureID *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImTextureID *__pyx_vtabptr_4core_ImVector_ImTextureID;


/* "core.pyx":5744
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImVec2:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImVec2* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImVec2 {
  struct __pyx_obj_4core_ImVector_ImVec2 *(*from_ptr)(ImVector_ImVec2 *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImVec2 *__pyx_vtabptr_4core_ImVector_ImVec2;


/* "core.pyx":5800
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImDrawChannel:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImDrawChannel* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImDrawChannel {
  struct __pyx_obj_4core_ImVector_ImDrawChannel *(*from_ptr)(ImVector_ImDrawChannel *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawChannel *__pyx_vtabptr_4core_ImVector_ImDrawChannel;


/* "core.pyx":5856
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_float:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_float* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_float {
  struct __pyx_obj_4core_ImVector_float *(*from_ptr)(ImVector_float *);
};
static struct __pyx_vtabstruct_4core_ImVector_float *__pyx_vtabptr_4core_ImVector_float;


/* "core.pyx":5912
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImWchar:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImWchar* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImWchar {
  struct __pyx_obj_4core_ImVector_ImWchar *(*from_ptr)(ImVector_ImWchar *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImWchar *__pyx_vtabptr_4core_ImVector_ImWchar;


/* "core.pyx":5968
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontGlyph:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontGlyph* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImFontGlyph {
  struct __pyx_obj_4core_ImVector_ImFontGlyph *(*from_ptr)(ImVector_ImFontGlyph *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontGlyph *__pyx_vtabptr_4core_ImVector_ImFontGlyph;


/* "core.pyx":6024
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontPtr:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontPtr* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImFontPtr {
  struct __pyx_obj_4core_ImVector_ImFontPtr *(*from_ptr)(ImVector_ImFontPtr *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontPtr *__pyx_vtabptr_4core_ImVector_ImFontPtr;


/* "core.pyx":6080
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontAtlasCustomRect:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontAtlasCustomRect* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImFontAtlasCustomRect {
  struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *(*from_ptr)(ImVector_ImFontAtlasCustomRect *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontAtlasCustomRect *__pyx_vtabptr_4core_ImVector_ImFontAtlasCustomRect;


/* "core.pyx":6136
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImFontConfig:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImFontConfig* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImFontConfig {
  struct __pyx_obj_4core_ImVector_ImFontConfig *(*from_ptr)(ImVector_ImFontConfig *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontConfig *__pyx_vtabptr_4core_ImVector_ImFontConfig;


/* "core.pyx":6192
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontGlyph:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontGlyph* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImFontGlyph {
  struct __pyx_obj_4core_ImFontGlyph *(*from_ptr)(ImFontGlyph *);
};
static struct __pyx_vtabstruct_4core_ImFontGlyph *__pyx_vtabptr_4core_ImFontGlyph;


/* "core.pyx":6365
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImU32:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImU32* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImU32 {
  struct __pyx_obj_4core_ImVector_ImU32 *(*from_ptr)(ImVector_ImU32 *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImU32 *__pyx_vtabptr_4core_ImVector_ImU32;


/* "core.pyx":6421
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiKeyData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiKeyData* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiKeyData {
  struct __pyx_obj_4core_ImGuiKeyData *(*from_ptr)(ImGuiKeyData *);
};
static struct __pyx_vtabstruct_4core_ImGuiKeyData *__pyx_vtabptr_4core_ImGuiKeyData;


/* "core.pyx":6490
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiListClipper:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiListClipper* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiListClipper {
  struct __pyx_obj_4core_ImGuiListClipper *(*from_ptr)(ImGuiListClipper *);
};
static struct __pyx_vtabstruct_4core_ImGuiListClipper *__pyx_vtabptr_4core_ImGuiListClipper;


/* "core.pyx":6665
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiOnceUponAFrame:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiOnceUponAFrame* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiOnceUponAFrame {
  struct __pyx_obj_4core_ImGuiOnceUponAFrame *(*from_ptr)(ImGuiOnceUponAFrame *);
};
static struct __pyx_vtabstruct_4core_ImGuiOnceUponAFrame *__pyx_vtabptr_4core_ImGuiOnceUponAFrame;


/* "core.pyx":6715
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPayload:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPayload* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiPayload {
  struct __pyx_obj_4core_ImGuiPayload *(*from_ptr)(ImGuiPayload *);
};
static struct __pyx_vtabstruct_4core_ImGuiPayload *__pyx_vtabptr_4core_ImGuiPayload;


/* "core.pyx":6891
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiPlatformMonitor:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiPlatformMonitor* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImGuiPlatformMonitor {
  struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *(*from_ptr)(ImVector_ImGuiPlatformMonitor *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiPlatformMonitor *__pyx_vtabptr_4core_ImVector_ImGuiPlatformMonitor;


/* "core.pyx":6947
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiViewportPtr:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiViewportPtr* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImGuiViewportPtr {
  struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *(*from_ptr)(ImVector_ImGuiViewportPtr *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiViewportPtr *__pyx_vtabptr_4core_ImVector_ImGuiViewportPtr;


/* "core.pyx":7003
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiStoragePair:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiStoragePair* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImGuiStoragePair {
  struct __pyx_obj_4core_ImVector_ImGuiStoragePair *(*from_ptr)(ImVector_ImGuiStoragePair *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiStoragePair *__pyx_vtabptr_4core_ImVector_ImGuiStoragePair;


/* "core.pyx":7059
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiStoragePair:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiStoragePair* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiStoragePair {
  struct __pyx_obj_4core_ImGuiStoragePair *(*from_ptr)(ImGuiStoragePair *);
};
static struct __pyx_vtabstruct_4core_ImGuiStoragePair *__pyx_vtabptr_4core_ImGuiStoragePair;


/* "core.pyx":7172
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTableColumnSortSpecs:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiTableColumnSortSpecs {
  struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *(*from_ptr)(ImGuiTableColumnSortSpecs *);
};
static struct __pyx_vtabstruct_4core_ImGuiTableColumnSortSpecs *__pyx_vtabptr_4core_ImGuiTableColumnSortSpecs;


/* "core.pyx":7261
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTableSortSpecs:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTableSortSpecs* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiTableSortSpecs {
  struct __pyx_obj_4core_ImGuiTableSortSpecs *(*from_ptr)(ImGuiTableSortSpecs *);
};
static struct __pyx_vtabstruct_4core_ImGuiTableSortSpecs *__pyx_vtabptr_4core_ImGuiTableSortSpecs;


/* "core.pyx":7337
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_char:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_char* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_char {
  struct __pyx_obj_4core_ImVector_char *(*from_ptr)(ImVector_char *);
};
static struct __pyx_vtabstruct_4core_ImVector_char *__pyx_vtabptr_4core_ImVector_char;


/* "core.pyx":7393
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVector_ImGuiTextRange:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVector_ImGuiTextRange* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVector_ImGuiTextRange {
  struct __pyx_obj_4core_ImVector_ImGuiTextRange *(*from_ptr)(ImVector_ImGuiTextRange *);
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiTextRange *__pyx_vtabptr_4core_ImVector_ImGuiTextRange;


/* "core.pyx":7449
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTextRange:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTextRange* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiTextRange {
  struct __pyx_obj_4core_ImGuiTextRange *(*from_ptr)(ImGuiTextRange *);
};
static struct __pyx_vtabstruct_4core_ImGuiTextRange *__pyx_vtabptr_4core_ImGuiTextRange;


/* "core.pyx":7541
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiWindowClass:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiWindowClass* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiWindowClass {
  struct __pyx_obj_4core_ImGuiWindowClass *(*from_ptr)(ImGuiWindowClass *);
};
static struct __pyx_vtabstruct_4core_ImGuiWindowClass *__pyx_vtabptr_4core_ImGuiWindowClass;


/* "core.pyx":7682
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVec2:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec2* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVec2 {
  struct __pyx_obj_4core_ImVec2 *(*from_ptr)(ImVec2 *);
};
static struct __pyx_vtabstruct_4core_ImVec2 *__pyx_vtabptr_4core_ImVec2;


/* "core.pyx":7757
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImVec4:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec4* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImVec4 {
  struct __pyx_obj_4core_ImVec4 *(*from_ptr)(ImVec4 *);
};
static struct __pyx_vtabstruct_4core_ImVec4 *__pyx_vtabptr_4core_ImVec4;


/* "core.pyx":7858
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImColor:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImColor* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImColor {
  struct __pyx_obj_4core_ImColor *(*from_ptr)(ImColor *);
};
static struct __pyx_vtabstruct_4core_ImColor *__pyx_vtabptr_4core_ImColor;


/* "core.pyx":7972
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawChannel:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawChannel* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawChannel {
  struct __pyx_obj_4core_ImDrawChannel *(*from_ptr)(ImDrawChannel *);
};
static struct __pyx_vtabstruct_4core_ImDrawChannel *__pyx_vtabptr_4core_ImDrawChannel;


/* "core.pyx":8015
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawCmd:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawCmd* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawCmd {
  struct __pyx_obj_4core_ImDrawCmd *(*from_ptr)(ImDrawCmd *);
};
static struct __pyx_vtabstruct_4core_ImDrawCmd *__pyx_vtabptr_4core_ImDrawCmd;


/* "core.pyx":8144
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawCmdHeader:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawCmdHeader* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawCmdHeader {
  struct __pyx_obj_4core_ImDrawCmdHeader *(*from_ptr)(ImDrawCmdHeader *);
};
static struct __pyx_vtabstruct_4core_ImDrawCmdHeader *__pyx_vtabptr_4core_ImDrawCmdHeader;


/* "core.pyx":8200
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawData* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawData {
  struct __pyx_obj_4core_ImDrawData *(*from_ptr)(ImDrawData *);
};
static struct __pyx_vtabstruct_4core_ImDrawData *__pyx_vtabptr_4core_ImDrawData;


/* "core.pyx":8395
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawListSplitter:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawListSplitter* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawListSplitter {
  struct __pyx_obj_4core_ImDrawListSplitter *(*from_ptr)(ImDrawListSplitter *);
};
static struct __pyx_vtabstruct_4core_ImDrawListSplitter *__pyx_vtabptr_4core_ImDrawListSplitter;


/* "core.pyx":8514
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawVert:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawVert* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawVert {
  struct __pyx_obj_4core_ImDrawVert *(*from_ptr)(ImDrawVert *);
};
static struct __pyx_vtabstruct_4core_ImDrawVert *__pyx_vtabptr_4core_ImDrawVert;


/* "core.pyx":8570
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFont:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFont* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImFont {
  struct __pyx_obj_4core_ImFont *(*from_ptr)(ImFont *);
};
static struct __pyx_vtabstruct_4core_ImFont *__pyx_vtabptr_4core_ImFont;


/* "core.pyx":9049
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontAtlas:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontAtlas* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImFontAtlas {
  struct __pyx_obj_4core_ImFontAtlas *(*from_ptr)(ImFontAtlas *);
};
static struct __pyx_vtabstruct_4core_ImFontAtlas *__pyx_vtabptr_4core_ImFontAtlas;


/* "core.pyx":9739
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontAtlasCustomRect:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontAtlasCustomRect* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImFontAtlasCustomRect {
  struct __pyx_obj_4core_ImFontAtlasCustomRect *(*from_ptr)(ImFontAtlasCustomRect *);
};
static struct __pyx_vtabstruct_4core_ImFontAtlasCustomRect *__pyx_vtabptr_4core_ImFontAtlasCustomRect;


/* "core.pyx":9889
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontConfig:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontConfig* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImFontConfig {
  struct __pyx_obj_4core_ImFontConfig *(*from_ptr)(ImFontConfig *);
};
static struct __pyx_vtabstruct_4core_ImFontConfig *__pyx_vtabptr_4core_ImFontConfig;


/* "core.pyx":10173
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontGlyphRangesBuilder:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontGlyphRangesBuilder* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImFontGlyphRangesBuilder {
  struct __pyx_obj_4core_ImFontGlyphRangesBuilder *(*from_ptr)(ImFontGlyphRangesBuilder *);
};
static struct __pyx_vtabstruct_4core_ImFontGlyphRangesBuilder *__pyx_vtabptr_4core_ImFontGlyphRangesBuilder;


/* "core.pyx":10300
 * # ?use_template(True)
 * _io_clipboard = {}
 * cdef class ImGuiIO:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiIO* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiIO {
  struct __pyx_obj_4core_ImGuiIO *(*from_ptr)(ImGuiIO *);
  char const *(*_get_clipboard_text)(void *);
  void (*_set_clipboard_text)(void *, char const *);
};
static struct __pyx_vtabstruct_4core_ImGuiIO *__pyx_vtabptr_4core_ImGuiIO;


/* "core.pyx":11845
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPlatformIO:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPlatformIO* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiPlatformIO {
  struct __pyx_obj_4core_ImGuiPlatformIO *(*from_ptr)(ImGuiPlatformIO *);
};
static struct __pyx_vtabstruct_4core_ImGuiPlatformIO *__pyx_vtabptr_4core_ImGuiPlatformIO;


/* "core.pyx":12210
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPlatformImeData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPlatformImeData* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiPlatformImeData {
  struct __pyx_obj_4core_ImGuiPlatformImeData *(*from_ptr)(ImGuiPlatformImeData *);
};
static struct __pyx_vtabstruct_4core_ImGuiPlatformImeData *__pyx_vtabptr_4core_ImGuiPlatformImeData;


/* "core.pyx":12286
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiPlatformMonitor:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiPlatformMonitor* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiPlatformMonitor {
  struct __pyx_obj_4core_ImGuiPlatformMonitor *(*from_ptr)(ImGuiPlatformMonitor *);
};
static struct __pyx_vtabstruct_4core_ImGuiPlatformMonitor *__pyx_vtabptr_4core_ImGuiPlatformMonitor;


/* "core.pyx":12388
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiStorage:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiStorage* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiStorage {
  struct __pyx_obj_4core_ImGuiStorage *(*from_ptr)(ImGuiStorage *);
};
static struct __pyx_vtabstruct_4core_ImGuiStorage *__pyx_vtabptr_4core_ImGuiStorage;


/* "core.pyx":12549
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiStyle:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiStyle* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiStyle {
  struct __pyx_obj_4core_ImGuiStyle *(*from_ptr)(ImGuiStyle *);
};
static struct __pyx_vtabstruct_4core_ImGuiStyle *__pyx_vtabptr_4core_ImGuiStyle;


/* "core.pyx":13166
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTextBuffer:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTextBuffer* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiTextBuffer {
  struct __pyx_obj_4core_ImGuiTextBuffer *(*from_ptr)(ImGuiTextBuffer *);
};
static struct __pyx_vtabstruct_4core_ImGuiTextBuffer *__pyx_vtabptr_4core_ImGuiTextBuffer;


/* "core.pyx":13304
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiTextFilter:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiTextFilter* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiTextFilter {
  struct __pyx_obj_4core_ImGuiTextFilter *(*from_ptr)(ImGuiTextFilter *);
};
static struct __pyx_vtabstruct_4core_ImGuiTextFilter *__pyx_vtabptr_4core_ImGuiTextFilter;


/* "core.pyx":13426
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiViewport:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiViewport* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiViewport {
  struct __pyx_obj_4core_ImGuiViewport *(*from_ptr)(ImGuiViewport *);
};
static struct __pyx_vtabstruct_4core_ImGuiViewport *__pyx_vtabptr_4core_ImGuiViewport;


/* "core.pyx":13700
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawList:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawList* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawList {
  struct __pyx_obj_4core_ImDrawList *(*from_ptr)(ImDrawList *);
};
static struct __pyx_vtabstruct_4core_ImDrawList *__pyx_vtabptr_4core_ImDrawList;


/* "core.pyx":14630
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImDrawListSharedData:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImDrawListSharedData* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImDrawListSharedData {
  struct __pyx_obj_4core_ImDrawListSharedData *(*from_ptr)(ImDrawListSharedData *);
};
static struct __pyx_vtabstruct_4core_ImDrawListSharedData *__pyx_vtabptr_4core_ImDrawListSharedData;


/* "core.pyx":14647
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImFontBuilderIO:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImFontBuilderIO* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImFontBuilderIO {
  struct __pyx_obj_4core_ImFontBuilderIO *(*from_ptr)(ImFontBuilderIO *);
};
static struct __pyx_vtabstruct_4core_ImFontBuilderIO *__pyx_vtabptr_4core_ImFontBuilderIO;


/* "core.pyx":14664
 * # [Class Constants]
 * # ?use_template(False)
 * cdef class ImGuiContext:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* _ptr
 * 
 */

struct __pyx_vtabstruct_4core_ImGuiContext {
  struct __pyx_obj_4core_ImGuiContext *(*from_ptr)(ImGuiContext *);
};
static struct __pyx_vtabstruct_4core_ImGuiContext *__pyx_vtabptr_4core_ImGuiContext;


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   (Py_TYPE(obj)->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImDrawListFlags_(ImDrawListFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImFontAtlasFlags_(ImFontAtlasFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiKey(ImGuiKey value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseButton_(ImGuiMouseButton_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSortDirection_(ImGuiSortDirection_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableBgTarget_(ImGuiTableBgTarget_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableRowFlags_(ImGuiTableRowFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_ value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiWindowFlags __Pyx_PyInt_As_ImGuiWindowFlags(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags(ImGuiConfigFlags value);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiConfigFlags __Pyx_PyInt_As_ImGuiConfigFlags(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ImGuiKey __Pyx_PyInt_As_ImGuiKey(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_f_4core_18ImVector_ImDrawCmd_from_ptr(ImVector_ImDrawCmd *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_f_4core_18ImVector_ImDrawIdx_from_ptr(ImVector_ImDrawIdx *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_f_4core_19ImVector_ImDrawVert_from_ptr(ImVector_ImDrawVert *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_f_4core_15ImVector_ImVec4_from_ptr(ImVector_ImVec4 *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_f_4core_20ImVector_ImTextureID_from_ptr(ImVector_ImTextureID *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_f_4core_15ImVector_ImVec2_from_ptr(ImVector_ImVec2 *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_f_4core_22ImVector_ImDrawChannel_from_ptr(ImVector_ImDrawChannel *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_float *__pyx_f_4core_14ImVector_float_from_ptr(ImVector_float *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImWchar *__pyx_f_4core_16ImVector_ImWchar_from_ptr(ImVector_ImWchar *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_f_4core_20ImVector_ImFontGlyph_from_ptr(ImVector_ImFontGlyph *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_f_4core_18ImVector_ImFontPtr_from_ptr(ImVector_ImFontPtr *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_f_4core_30ImVector_ImFontAtlasCustomRect_from_ptr(ImVector_ImFontAtlasCustomRect *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_f_4core_21ImVector_ImFontConfig_from_ptr(ImVector_ImFontConfig *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImFontGlyph *__pyx_f_4core_11ImFontGlyph_from_ptr(ImFontGlyph *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImU32 *__pyx_f_4core_14ImVector_ImU32_from_ptr(ImVector_ImU32 *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiKeyData *__pyx_f_4core_12ImGuiKeyData_from_ptr(ImGuiKeyData *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiListClipper *__pyx_f_4core_16ImGuiListClipper_from_ptr(ImGuiListClipper *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_f_4core_19ImGuiOnceUponAFrame_from_ptr(ImGuiOnceUponAFrame *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiPayload *__pyx_f_4core_12ImGuiPayload_from_ptr(ImGuiPayload *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_f_4core_29ImVector_ImGuiPlatformMonitor_from_ptr(ImVector_ImGuiPlatformMonitor *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_f_4core_25ImVector_ImGuiViewportPtr_from_ptr(ImVector_ImGuiViewportPtr *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_f_4core_25ImVector_ImGuiStoragePair_from_ptr(ImVector_ImGuiStoragePair *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiStoragePair *__pyx_f_4core_16ImGuiStoragePair_from_ptr(ImGuiStoragePair *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_f_4core_25ImGuiTableColumnSortSpecs_from_ptr(ImGuiTableColumnSortSpecs *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_f_4core_19ImGuiTableSortSpecs_from_ptr(ImGuiTableSortSpecs *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_char *__pyx_f_4core_13ImVector_char_from_ptr(ImVector_char *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_f_4core_23ImVector_ImGuiTextRange_from_ptr(ImVector_ImGuiTextRange *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiTextRange *__pyx_f_4core_14ImGuiTextRange_from_ptr(ImGuiTextRange *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiWindowClass *__pyx_f_4core_16ImGuiWindowClass_from_ptr(ImGuiWindowClass *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVec2 *__pyx_f_4core_6ImVec2_from_ptr(ImVec2 *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImVec4 *__pyx_f_4core_6ImVec4_from_ptr(ImVec4 *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImColor *__pyx_f_4core_7ImColor_from_ptr(ImColor *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawChannel *__pyx_f_4core_13ImDrawChannel_from_ptr(ImDrawChannel *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawCmd *__pyx_f_4core_9ImDrawCmd_from_ptr(ImDrawCmd *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_f_4core_15ImDrawCmdHeader_from_ptr(ImDrawCmdHeader *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawData *__pyx_f_4core_10ImDrawData_from_ptr(ImDrawData *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawListSplitter *__pyx_f_4core_18ImDrawListSplitter_from_ptr(ImDrawListSplitter *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawVert *__pyx_f_4core_10ImDrawVert_from_ptr(ImDrawVert *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImFont *__pyx_f_4core_6ImFont_from_ptr(ImFont *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImFontAtlas *__pyx_f_4core_11ImFontAtlas_from_ptr(ImFontAtlas *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_f_4core_21ImFontAtlasCustomRect_from_ptr(ImFontAtlasCustomRect *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImFontConfig *__pyx_f_4core_12ImFontConfig_from_ptr(ImFontConfig *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_f_4core_24ImFontGlyphRangesBuilder_from_ptr(ImFontGlyphRangesBuilder *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiIO *__pyx_f_4core_7ImGuiIO_from_ptr(ImGuiIO *__pyx_v__ptr); /* proto*/
static char const *__pyx_f_4core_7ImGuiIO__get_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data); /* proto*/
static void __pyx_f_4core_7ImGuiIO__set_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data, char const *__pyx_v_text); /* proto*/
static struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_f_4core_15ImGuiPlatformIO_from_ptr(ImGuiPlatformIO *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_f_4core_20ImGuiPlatformImeData_from_ptr(ImGuiPlatformImeData *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_f_4core_20ImGuiPlatformMonitor_from_ptr(ImGuiPlatformMonitor *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiStorage *__pyx_f_4core_12ImGuiStorage_from_ptr(ImGuiStorage *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiStyle *__pyx_f_4core_10ImGuiStyle_from_ptr(ImGuiStyle *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_f_4core_15ImGuiTextBuffer_from_ptr(ImGuiTextBuffer *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiTextFilter *__pyx_f_4core_15ImGuiTextFilter_from_ptr(ImGuiTextFilter *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiViewport *__pyx_f_4core_13ImGuiViewport_from_ptr(ImGuiViewport *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawList *__pyx_f_4core_10ImDrawList_from_ptr(ImDrawList *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImDrawListSharedData *__pyx_f_4core_20ImDrawListSharedData_from_ptr(ImDrawListSharedData *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImFontBuilderIO *__pyx_f_4core_15ImFontBuilderIO_from_ptr(ImFontBuilderIO *__pyx_v__ptr); /* proto*/
static struct __pyx_obj_4core_ImGuiContext *__pyx_f_4core_12ImGuiContext_from_ptr(ImGuiContext *__pyx_v__ptr); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'ccimgui' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.float' */

/* Module declarations from 'cpython.version' */

/* Module declarations from 'core' */
static PyTypeObject *__pyx_ptype_4core_BoolPtr = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImDrawCmd = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImDrawIdx = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImDrawVert = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImVec4 = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImTextureID = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImVec2 = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImDrawChannel = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_float = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImWchar = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImFontGlyph = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImFontPtr = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImFontAtlasCustomRect = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImFontConfig = 0;
static PyTypeObject *__pyx_ptype_4core_ImFontGlyph = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImU32 = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiKeyData = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiListClipper = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiOnceUponAFrame = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiPayload = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImGuiPlatformMonitor = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImGuiViewportPtr = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImGuiStoragePair = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiStoragePair = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiTableColumnSortSpecs = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiTableSortSpecs = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_char = 0;
static PyTypeObject *__pyx_ptype_4core_ImVector_ImGuiTextRange = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiTextRange = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiWindowClass = 0;
static PyTypeObject *__pyx_ptype_4core_ImVec2 = 0;
static PyTypeObject *__pyx_ptype_4core_ImVec4 = 0;
static PyTypeObject *__pyx_ptype_4core_ImColor = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawChannel = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawCmd = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawCmdHeader = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawData = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawListSplitter = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawVert = 0;
static PyTypeObject *__pyx_ptype_4core_ImFont = 0;
static PyTypeObject *__pyx_ptype_4core_ImFontAtlas = 0;
static PyTypeObject *__pyx_ptype_4core_ImFontAtlasCustomRect = 0;
static PyTypeObject *__pyx_ptype_4core_ImFontConfig = 0;
static PyTypeObject *__pyx_ptype_4core_ImFontGlyphRangesBuilder = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiIO = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiPlatformIO = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiPlatformImeData = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiPlatformMonitor = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiStorage = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiStyle = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiTextBuffer = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiTextFilter = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiViewport = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawList = 0;
static PyTypeObject *__pyx_ptype_4core_ImDrawListSharedData = 0;
static PyTypeObject *__pyx_ptype_4core_ImFontBuilderIO = 0;
static PyTypeObject *__pyx_ptype_4core_ImGuiContext = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static PyObject *__pyx_f_4core__bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_4core__from_bytes(PyObject *); /*proto*/
static PyObject *__pyx_f_4core__cast_ImVec2_tuple(ImVec2); /*proto*/
static ImVec2 __pyx_f_4core__cast_tuple_ImVec2(PyObject *); /*proto*/
static PyObject *__pyx_f_4core__cast_ImVec4_tuple(ImVec4); /*proto*/
static PyObject *__pyx_f_4core___pyx_unpickle_BoolPtr__set_state(struct __pyx_obj_4core_BoolPtr *, PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "core"
extern int __pyx_module_is_main_core;
int __pyx_module_is_main_core = 0;

/* Implementation of 'core' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_Any[] = "Any";
static const char __pyx_k_ctx[] = "ctx";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_fmt[] = "fmt";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_Vec2[] = "Vec2";
static const char __pyx_k_Vec4[] = "Vec4";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_core[] = "core";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_down[] = "down";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_begin[] = "begin";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_ImFont[] = "ImFont";
static const char __pyx_k_ImVec2[] = "ImVec2";
static const char __pyx_k_ImVec4[] = "ImVec4";
static const char __pyx_k_button[] = "button";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_get_io[] = "get_io";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_opened[] = "opened";
static const char __pyx_k_p_open[] = "p_open";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_render[] = "render";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_BoolPtr[] = "BoolPtr";
static const char __pyx_k_ImColor[] = "ImColor";
static const char __pyx_k_ImGuiIO[] = "ImGuiIO";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_is_open[] = "is_open";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_wheel_x[] = "wheel_x";
static const char __pyx_k_wheel_y[] = "wheel_y";
static const char __pyx_k_Callable[] = "Callable";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_closable[] = "closable";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_ImDrawCmd[] = "ImDrawCmd";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_new_frame[] = "new_frame";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ImDrawData[] = "ImDrawData";
static const char __pyx_k_ImDrawList[] = "ImDrawList";
static const char __pyx_k_ImDrawVert[] = "ImDrawVert";
static const char __pyx_k_ImGuiStyle[] = "ImGuiStyle";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_namedtuple[] = "namedtuple";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_IMGUI_KEY_0[] = "IMGUI_KEY_0";
static const char __pyx_k_IMGUI_KEY_1[] = "IMGUI_KEY_1";
static const char __pyx_k_IMGUI_KEY_2[] = "IMGUI_KEY_2";
static const char __pyx_k_IMGUI_KEY_3[] = "IMGUI_KEY_3";
static const char __pyx_k_IMGUI_KEY_4[] = "IMGUI_KEY_4";
static const char __pyx_k_IMGUI_KEY_5[] = "IMGUI_KEY_5";
static const char __pyx_k_IMGUI_KEY_6[] = "IMGUI_KEY_6";
static const char __pyx_k_IMGUI_KEY_7[] = "IMGUI_KEY_7";
static const char __pyx_k_IMGUI_KEY_8[] = "IMGUI_KEY_8";
static const char __pyx_k_IMGUI_KEY_9[] = "IMGUI_KEY_9";
static const char __pyx_k_IMGUI_KEY_A[] = "IMGUI_KEY_A";
static const char __pyx_k_IMGUI_KEY_B[] = "IMGUI_KEY_B";
static const char __pyx_k_IMGUI_KEY_C[] = "IMGUI_KEY_C";
static const char __pyx_k_IMGUI_KEY_D[] = "IMGUI_KEY_D";
static const char __pyx_k_IMGUI_KEY_E[] = "IMGUI_KEY_E";
static const char __pyx_k_IMGUI_KEY_F[] = "IMGUI_KEY_F";
static const char __pyx_k_IMGUI_KEY_G[] = "IMGUI_KEY_G";
static const char __pyx_k_IMGUI_KEY_H[] = "IMGUI_KEY_H";
static const char __pyx_k_IMGUI_KEY_I[] = "IMGUI_KEY_I";
static const char __pyx_k_IMGUI_KEY_J[] = "IMGUI_KEY_J";
static const char __pyx_k_IMGUI_KEY_K[] = "IMGUI_KEY_K";
static const char __pyx_k_IMGUI_KEY_L[] = "IMGUI_KEY_L";
static const char __pyx_k_IMGUI_KEY_M[] = "IMGUI_KEY_M";
static const char __pyx_k_IMGUI_KEY_N[] = "IMGUI_KEY_N";
static const char __pyx_k_IMGUI_KEY_O[] = "IMGUI_KEY_O";
static const char __pyx_k_IMGUI_KEY_P[] = "IMGUI_KEY_P";
static const char __pyx_k_IMGUI_KEY_Q[] = "IMGUI_KEY_Q";
static const char __pyx_k_IMGUI_KEY_R[] = "IMGUI_KEY_R";
static const char __pyx_k_IMGUI_KEY_S[] = "IMGUI_KEY_S";
static const char __pyx_k_IMGUI_KEY_T[] = "IMGUI_KEY_T";
static const char __pyx_k_IMGUI_KEY_U[] = "IMGUI_KEY_U";
static const char __pyx_k_IMGUI_KEY_V[] = "IMGUI_KEY_V";
static const char __pyx_k_IMGUI_KEY_W[] = "IMGUI_KEY_W";
static const char __pyx_k_IMGUI_KEY_X[] = "IMGUI_KEY_X";
static const char __pyx_k_IMGUI_KEY_Y[] = "IMGUI_KEY_Y";
static const char __pyx_k_IMGUI_KEY_Z[] = "IMGUI_KEY_Z";
static const char __pyx_k_ImFontAtlas[] = "ImFontAtlas";
static const char __pyx_k_ImFontGlyph[] = "ImFontGlyph";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_get_version[] = "get_version";
static const char __pyx_k_IMGUI_DIR_UP[] = "IMGUI_DIR_UP";
static const char __pyx_k_IMGUI_KEY_F1[] = "IMGUI_KEY_F1";
static const char __pyx_k_IMGUI_KEY_F2[] = "IMGUI_KEY_F2";
static const char __pyx_k_IMGUI_KEY_F3[] = "IMGUI_KEY_F3";
static const char __pyx_k_IMGUI_KEY_F4[] = "IMGUI_KEY_F4";
static const char __pyx_k_IMGUI_KEY_F5[] = "IMGUI_KEY_F5";
static const char __pyx_k_IMGUI_KEY_F6[] = "IMGUI_KEY_F6";
static const char __pyx_k_IMGUI_KEY_F7[] = "IMGUI_KEY_F7";
static const char __pyx_k_IMGUI_KEY_F8[] = "IMGUI_KEY_F8";
static const char __pyx_k_IMGUI_KEY_F9[] = "IMGUI_KEY_F9";
static const char __pyx_k_ImFontConfig[] = "ImFontConfig";
static const char __pyx_k_ImGuiContext[] = "ImGuiContext";
static const char __pyx_k_ImGuiKeyData[] = "ImGuiKeyData";
static const char __pyx_k_ImGuiPayload[] = "ImGuiPayload";
static const char __pyx_k_ImGuiStorage[] = "ImGuiStorage";
static const char __pyx_k_io_clipboard[] = "_io_clipboard";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_IMGUI_COL_TAB[] = "IMGUI_COL_TAB";
static const char __pyx_k_IMGUI_KEY_END[] = "IMGUI_KEY_END";
static const char __pyx_k_IMGUI_KEY_F10[] = "IMGUI_KEY_F10";
static const char __pyx_k_IMGUI_KEY_F11[] = "IMGUI_KEY_F11";
static const char __pyx_k_IMGUI_KEY_F12[] = "IMGUI_KEY_F12";
static const char __pyx_k_IMGUI_KEY_TAB[] = "IMGUI_KEY_TAB";
static const char __pyx_k_IMGUI_MOD_ALT[] = "IMGUI_MOD_ALT";
static const char __pyx_k_ImDrawChannel[] = "ImDrawChannel";
static const char __pyx_k_ImGuiViewport[] = "ImGuiViewport";
static const char __pyx_k_ImVector_char[] = "ImVector_char";
static const char __pyx_k_core_core_pyx[] = "core\\core.pyx";
static const char __pyx_k_get_draw_data[] = "get_draw_data";
static const char __pyx_k_initial_value[] = "initial_value";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_IMGUI_COL_TEXT[] = "IMGUI_COL_TEXT";
static const char __pyx_k_IMGUI_DIR_DOWN[] = "IMGUI_DIR_DOWN";
static const char __pyx_k_IMGUI_DIR_LEFT[] = "IMGUI_DIR_LEFT";
static const char __pyx_k_IMGUI_DIR_NONE[] = "IMGUI_DIR_NONE";
static const char __pyx_k_IMGUI_KEY_HOME[] = "IMGUI_KEY_HOME";
static const char __pyx_k_IMGUI_KEY_MENU[] = "IMGUI_KEY_MENU";
static const char __pyx_k_IMGUI_KEY_NONE[] = "IMGUI_KEY_NONE";
static const char __pyx_k_IMGUI_MOD_CTRL[] = "IMGUI_MOD_CTRL";
static const char __pyx_k_IMGUI_MOD_MASK[] = "IMGUI_MOD_MASK_";
static const char __pyx_k_IMGUI_MOD_NONE[] = "IMGUI_MOD_NONE";
static const char __pyx_k_ImGuiTextRange[] = "ImGuiTextRange";
static const char __pyx_k_ImVector_ImU32[] = "ImVector_ImU32";
static const char __pyx_k_ImVector_float[] = "ImVector_float";
static const char __pyx_k_create_context[] = "create_context";
static const char __pyx_k_IMGUI_COL_COUNT[] = "IMGUI_COL_COUNT";
static const char __pyx_k_IMGUI_COND_NONE[] = "IMGUI_COND_NONE";
static const char __pyx_k_IMGUI_COND_ONCE[] = "IMGUI_COND_ONCE";
static const char __pyx_k_IMGUI_DIR_COUNT[] = "IMGUI_DIR_COUNT";
static const char __pyx_k_IMGUI_DIR_RIGHT[] = "IMGUI_DIR_RIGHT";
static const char __pyx_k_IMGUI_KEY_COMMA[] = "IMGUI_KEY_COMMA";
static const char __pyx_k_IMGUI_KEY_COUNT[] = "IMGUI_KEY_COUNT";
static const char __pyx_k_IMGUI_KEY_ENTER[] = "IMGUI_KEY_ENTER";
static const char __pyx_k_IMGUI_KEY_EQUAL[] = "IMGUI_KEY_EQUAL";
static const char __pyx_k_IMGUI_KEY_MINUS[] = "IMGUI_KEY_MINUS";
static const char __pyx_k_IMGUI_KEY_PAUSE[] = "IMGUI_KEY_PAUSE";
static const char __pyx_k_IMGUI_KEY_SLASH[] = "IMGUI_KEY_SLASH";
static const char __pyx_k_IMGUI_KEY_SPACE[] = "IMGUI_KEY_SPACE";
static const char __pyx_k_IMGUI_MOD_SHIFT[] = "IMGUI_MOD_SHIFT";
static const char __pyx_k_IMGUI_MOD_SUPER[] = "IMGUI_MOD_SUPER";
static const char __pyx_k_ImDrawCmdHeader[] = "ImDrawCmdHeader";
static const char __pyx_k_ImFontBuilderIO[] = "ImFontBuilderIO";
static const char __pyx_k_ImGuiPlatformIO[] = "ImGuiPlatformIO";
static const char __pyx_k_ImGuiTextBuffer[] = "ImGuiTextBuffer";
static const char __pyx_k_ImGuiTextFilter[] = "ImGuiTextFilter";
static const char __pyx_k_ImVector_ImVec2[] = "ImVector_ImVec2";
static const char __pyx_k_ImVector_ImVec4[] = "ImVector_ImVec4";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_destroy_context[] = "destroy_context";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_show_user_guide[] = "show_user_guide";
static const char __pyx_k_IMGUI_COL_BORDER[] = "IMGUI_COL_BORDER";
static const char __pyx_k_IMGUI_COL_BUTTON[] = "IMGUI_COL_BUTTON";
static const char __pyx_k_IMGUI_COL_HEADER[] = "IMGUI_COL_HEADER";
static const char __pyx_k_IMGUI_KEY_DELETE[] = "IMGUI_KEY_DELETE";
static const char __pyx_k_IMGUI_KEY_ESCAPE[] = "IMGUI_KEY_ESCAPE";
static const char __pyx_k_IMGUI_KEY_INSERT[] = "IMGUI_KEY_INSERT";
static const char __pyx_k_IMGUI_KEY_PERIOD[] = "IMGUI_KEY_PERIOD";
static const char __pyx_k_ImGuiListClipper[] = "ImGuiListClipper";
static const char __pyx_k_ImGuiStoragePair[] = "ImGuiStoragePair";
static const char __pyx_k_ImGuiWindowClass[] = "ImGuiWindowClass";
static const char __pyx_k_ImVector_ImWchar[] = "ImVector_ImWchar";
static const char __pyx_k_show_demo_window[] = "show_demo_window";
static const char __pyx_k_IMGUI_COND_ALWAYS[] = "IMGUI_COND_ALWAYS";
static const char __pyx_k_IMGUI_KEY_KEYPAD0[] = "IMGUI_KEY_KEYPAD0";
static const char __pyx_k_IMGUI_KEY_KEYPAD1[] = "IMGUI_KEY_KEYPAD1";
static const char __pyx_k_IMGUI_KEY_KEYPAD2[] = "IMGUI_KEY_KEYPAD2";
static const char __pyx_k_IMGUI_KEY_KEYPAD3[] = "IMGUI_KEY_KEYPAD3";
static const char __pyx_k_IMGUI_KEY_KEYPAD4[] = "IMGUI_KEY_KEYPAD4";
static const char __pyx_k_IMGUI_KEY_KEYPAD5[] = "IMGUI_KEY_KEYPAD5";
static const char __pyx_k_IMGUI_KEY_KEYPAD6[] = "IMGUI_KEY_KEYPAD6";
static const char __pyx_k_IMGUI_KEY_KEYPAD7[] = "IMGUI_KEY_KEYPAD7";
static const char __pyx_k_IMGUI_KEY_KEYPAD8[] = "IMGUI_KEY_KEYPAD8";
static const char __pyx_k_IMGUI_KEY_KEYPAD9[] = "IMGUI_KEY_KEYPAD9";
static const char __pyx_k_IMGUI_KEY_PAGE_UP[] = "IMGUI_KEY_PAGE_UP";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_shared_font_atlas[] = "shared_font_atlas";
static const char __pyx_k_IMGUI_COL_CHILD_BG[] = "IMGUI_COL_CHILD_BG";
static const char __pyx_k_IMGUI_COL_FRAME_BG[] = "IMGUI_COL_FRAME_BG";
static const char __pyx_k_IMGUI_COL_POPUP_BG[] = "IMGUI_COL_POPUP_BG";
static const char __pyx_k_IMGUI_COL_TITLE_BG[] = "IMGUI_COL_TITLE_BG";
static const char __pyx_k_IMGUI_DATA_TYPE_S8[] = "IMGUI_DATA_TYPE_S8";
static const char __pyx_k_IMGUI_DATA_TYPE_U8[] = "IMGUI_DATA_TYPE_U8";
static const char __pyx_k_IMGUI_KEY_LEFT_ALT[] = "IMGUI_KEY_LEFT_ALT";
static const char __pyx_k_IMGUI_KEY_MOUSE_X1[] = "IMGUI_KEY_MOUSE_X1";
static const char __pyx_k_IMGUI_KEY_MOUSE_X2[] = "IMGUI_KEY_MOUSE_X2";
static const char __pyx_k_IMGUI_KEY_NUM_LOCK[] = "IMGUI_KEY_NUM_LOCK";
static const char __pyx_k_IMGUI_KEY_UP_ARROW[] = "IMGUI_KEY_UP_ARROW";
static const char __pyx_k_IMGUI_MOD_SHORTCUT[] = "IMGUI_MOD_SHORTCUT";
static const char __pyx_k_IM_DRAW_FLAGS_NONE[] = "IM_DRAW_FLAGS_NONE";
static const char __pyx_k_ImDrawListSplitter[] = "ImDrawListSplitter";
static const char __pyx_k_ImVector_ImDrawCmd[] = "ImVector_ImDrawCmd";
static const char __pyx_k_ImVector_ImDrawIdx[] = "ImVector_ImDrawIdx";
static const char __pyx_k_ImVector_ImFontPtr[] = "ImVector_ImFontPtr";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_IMGUI_COL_SEPARATOR[] = "IMGUI_COL_SEPARATOR";
static const char __pyx_k_IMGUI_COL_WINDOW_BG[] = "IMGUI_COL_WINDOW_BG";
static const char __pyx_k_IMGUI_DATA_TYPE_S16[] = "IMGUI_DATA_TYPE_S16";
static const char __pyx_k_IMGUI_DATA_TYPE_S32[] = "IMGUI_DATA_TYPE_S32";
static const char __pyx_k_IMGUI_DATA_TYPE_S64[] = "IMGUI_DATA_TYPE_S64";
static const char __pyx_k_IMGUI_DATA_TYPE_U16[] = "IMGUI_DATA_TYPE_U16";
static const char __pyx_k_IMGUI_DATA_TYPE_U32[] = "IMGUI_DATA_TYPE_U32";
static const char __pyx_k_IMGUI_DATA_TYPE_U64[] = "IMGUI_DATA_TYPE_U64";
static const char __pyx_k_IMGUI_KEY_BACKSLASH[] = "IMGUI_KEY_BACKSLASH";
static const char __pyx_k_IMGUI_KEY_BACKSPACE[] = "IMGUI_KEY_BACKSPACE";
static const char __pyx_k_IMGUI_KEY_CAPS_LOCK[] = "IMGUI_KEY_CAPS_LOCK";
static const char __pyx_k_IMGUI_KEY_LEFT_CTRL[] = "IMGUI_KEY_LEFT_CTRL";
static const char __pyx_k_IMGUI_KEY_PAGE_DOWN[] = "IMGUI_KEY_PAGE_DOWN";
static const char __pyx_k_IMGUI_KEY_RIGHT_ALT[] = "IMGUI_KEY_RIGHT_ALT";
static const char __pyx_k_IMGUI_KEY_SEMICOLON[] = "IMGUI_KEY_SEMICOLON";
static const char __pyx_k_ImGuiOnceUponAFrame[] = "ImGuiOnceUponAFrame";
static const char __pyx_k_ImGuiTableSortSpecs[] = "ImGuiTableSortSpecs";
static const char __pyx_k_ImVector_ImDrawVert[] = "ImVector_ImDrawVert";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_get_current_context[] = "get_current_context";
static const char __pyx_k_platform_render_arg[] = "platform_render_arg";
static const char __pyx_k_renderer_render_arg[] = "renderer_render_arg";
static const char __pyx_k_IMGUI_COL_CHECK_MARK[] = "IMGUI_COL_CHECK_MARK";
static const char __pyx_k_IMGUI_COL_PLOT_LINES[] = "IMGUI_COL_PLOT_LINES";
static const char __pyx_k_IMGUI_COL_TAB_ACTIVE[] = "IMGUI_COL_TAB_ACTIVE";
static const char __pyx_k_IMGUI_COND_APPEARING[] = "IMGUI_COND_APPEARING";
static const char __pyx_k_IMGUI_KEY_APOSTROPHE[] = "IMGUI_KEY_APOSTROPHE";
static const char __pyx_k_IMGUI_KEY_DOWN_ARROW[] = "IMGUI_KEY_DOWN_ARROW";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_L1[] = "IMGUI_KEY_GAMEPAD_L1";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_L2[] = "IMGUI_KEY_GAMEPAD_L2";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_L3[] = "IMGUI_KEY_GAMEPAD_L3";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_R1[] = "IMGUI_KEY_GAMEPAD_R1";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_R2[] = "IMGUI_KEY_GAMEPAD_R2";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_R3[] = "IMGUI_KEY_GAMEPAD_R3";
static const char __pyx_k_IMGUI_KEY_KEYPAD_ADD[] = "IMGUI_KEY_KEYPAD_ADD";
static const char __pyx_k_IMGUI_KEY_LEFT_ARROW[] = "IMGUI_KEY_LEFT_ARROW";
static const char __pyx_k_IMGUI_KEY_LEFT_SHIFT[] = "IMGUI_KEY_LEFT_SHIFT";
static const char __pyx_k_IMGUI_KEY_LEFT_SUPER[] = "IMGUI_KEY_LEFT_SUPER";
static const char __pyx_k_IMGUI_KEY_MOUSE_LEFT[] = "IMGUI_KEY_MOUSE_LEFT";
static const char __pyx_k_IMGUI_KEY_RIGHT_CTRL[] = "IMGUI_KEY_RIGHT_CTRL";
static const char __pyx_k_IMGUI_NAV_INPUT_MENU[] = "IMGUI_NAV_INPUT_MENU";
static const char __pyx_k_IM_DRAW_FLAGS_CLOSED[] = "IM_DRAW_FLAGS_CLOSED";
static const char __pyx_k_ImDrawListSharedData[] = "ImDrawListSharedData";
static const char __pyx_k_ImGuiPlatformImeData[] = "ImGuiPlatformImeData";
static const char __pyx_k_ImGuiPlatformMonitor[] = "ImGuiPlatformMonitor";
static const char __pyx_k_ImVector_ImFontGlyph[] = "ImVector_ImFontGlyph";
static const char __pyx_k_ImVector_ImTextureID[] = "ImVector_ImTextureID";
static const char __pyx_k_pyx_unpickle_BoolPtr[] = "__pyx_unpickle_BoolPtr";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_IMGUI_COL_MENU_BAR_BG[] = "IMGUI_COL_MENU_BAR_BG";
static const char __pyx_k_IMGUI_COL_RESIZE_GRIP[] = "IMGUI_COL_RESIZE_GRIP";
static const char __pyx_k_IMGUI_COL_SLIDER_GRAB[] = "IMGUI_COL_SLIDER_GRAB";
static const char __pyx_k_IMGUI_COL_TAB_HOVERED[] = "IMGUI_COL_TAB_HOVERED";
static const char __pyx_k_IMGUI_DATA_TYPE_COUNT[] = "IMGUI_DATA_TYPE_COUNT";
static const char __pyx_k_IMGUI_DATA_TYPE_FLOAT[] = "IMGUI_DATA_TYPE_FLOAT";
static const char __pyx_k_IMGUI_KEY_MOUSE_RIGHT[] = "IMGUI_KEY_MOUSE_RIGHT";
static const char __pyx_k_IMGUI_KEY_RIGHT_ARROW[] = "IMGUI_KEY_RIGHT_ARROW";
static const char __pyx_k_IMGUI_KEY_RIGHT_SHIFT[] = "IMGUI_KEY_RIGHT_SHIFT";
static const char __pyx_k_IMGUI_KEY_RIGHT_SUPER[] = "IMGUI_KEY_RIGHT_SUPER";
static const char __pyx_k_IMGUI_KEY_SCROLL_LOCK[] = "IMGUI_KEY_SCROLL_LOCK";
static const char __pyx_k_IMGUI_NAV_INPUT_COUNT[] = "IMGUI_NAV_INPUT_COUNT";
static const char __pyx_k_IMGUI_NAV_INPUT_INPUT[] = "IMGUI_NAV_INPUT_INPUT";
static const char __pyx_k_IMGUI_STYLE_VAR_ALPHA[] = "IMGUI_STYLE_VAR_ALPHA";
static const char __pyx_k_IMGUI_STYLE_VAR_COUNT[] = "IMGUI_STYLE_VAR_COUNT";
static const char __pyx_k_ImFontAtlasCustomRect[] = "ImFontAtlasCustomRect";
static const char __pyx_k_ImVector_ImFontConfig[] = "ImVector_ImFontConfig";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_get_clipboard_text_fn[] = "_get_clipboard_text_fn";
static const char __pyx_k_set_clipboard_text_fn[] = "_set_clipboard_text_fn";
static const char __pyx_k_IMGUI_COL_SCROLLBAR_BG[] = "IMGUI_COL_SCROLLBAR_BG";
static const char __pyx_k_IMGUI_COL_TABLE_ROW_BG[] = "IMGUI_COL_TABLE_ROW_BG";
static const char __pyx_k_IMGUI_COMBO_FLAGS_NONE[] = "IMGUI_COMBO_FLAGS_NONE";
static const char __pyx_k_IMGUI_DATA_TYPE_DOUBLE[] = "IMGUI_DATA_TYPE_DOUBLE";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_BACK[] = "IMGUI_KEY_GAMEPAD_BACK";
static const char __pyx_k_IMGUI_KEY_GRAVE_ACCENT[] = "IMGUI_KEY_GRAVE_ACCENT";
static const char __pyx_k_IMGUI_KEY_KEYPAD_ENTER[] = "IMGUI_KEY_KEYPAD_ENTER";
static const char __pyx_k_IMGUI_KEY_KEYPAD_EQUAL[] = "IMGUI_KEY_KEYPAD_EQUAL";
static const char __pyx_k_IMGUI_KEY_LEFT_BRACKET[] = "IMGUI_KEY_LEFT_BRACKET";
static const char __pyx_k_IMGUI_KEY_MOUSE_MIDDLE[] = "IMGUI_KEY_MOUSE_MIDDLE";
static const char __pyx_k_IMGUI_KEY_MOUSE_WHEELX[] = "IMGUI_KEY_MOUSE_WHEELX";
static const char __pyx_k_IMGUI_KEY_MOUSE_WHEELY[] = "IMGUI_KEY_MOUSE_WHEELY";
static const char __pyx_k_IMGUI_KEY_PRINT_SCREEN[] = "IMGUI_KEY_PRINT_SCREEN";
static const char __pyx_k_IMGUI_NAV_INPUT_CANCEL[] = "IMGUI_NAV_INPUT_CANCEL";
static const char __pyx_k_IMGUI_POPUP_FLAGS_NONE[] = "IMGUI_POPUP_FLAGS_NONE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NONE[] = "IMGUI_TABLE_FLAGS_NONE";
static const char __pyx_k_ImVector_ImDrawChannel[] = "ImVector_ImDrawChannel";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_IMGUI_BUTTON_FLAGS_NONE[] = "IMGUI_BUTTON_FLAGS_NONE";
static const char __pyx_k_IMGUI_COL_BORDER_SHADOW[] = "IMGUI_COL_BORDER_SHADOW";
static const char __pyx_k_IMGUI_COL_BUTTON_ACTIVE[] = "IMGUI_COL_BUTTON_ACTIVE";
static const char __pyx_k_IMGUI_COL_HEADER_ACTIVE[] = "IMGUI_COL_HEADER_ACTIVE";
static const char __pyx_k_IMGUI_COL_NAV_HIGHLIGHT[] = "IMGUI_COL_NAV_HIGHLIGHT";
static const char __pyx_k_IMGUI_COL_TAB_UNFOCUSED[] = "IMGUI_COL_TAB_UNFOCUSED";
static const char __pyx_k_IMGUI_COL_TEXT_DISABLED[] = "IMGUI_COL_TEXT_DISABLED";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_NONE[] = "IMGUI_CONFIG_FLAGS_NONE";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_START[] = "IMGUI_KEY_GAMEPAD_START";
static const char __pyx_k_IMGUI_KEY_KEYPAD_DIVIDE[] = "IMGUI_KEY_KEYPAD_DIVIDE";
static const char __pyx_k_IMGUI_KEY_NAMED_KEY_END[] = "IMGUI_KEY_NAMED_KEY_END";
static const char __pyx_k_IMGUI_KEY_RIGHT_BRACKET[] = "IMGUI_KEY_RIGHT_BRACKET";
static const char __pyx_k_IMGUI_MOUSE_BUTTON_LEFT[] = "IMGUI_MOUSE_BUTTON_LEFT";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_HAND[] = "IMGUI_MOUSE_CURSOR_HAND";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_NONE[] = "IMGUI_MOUSE_CURSOR_NONE";
static const char __pyx_k_IMGUI_NAV_INPUT_DPAD_UP[] = "IMGUI_NAV_INPUT_DPAD_UP";
static const char __pyx_k_IMGUI_SLIDER_FLAGS_NONE[] = "IMGUI_SLIDER_FLAGS_NONE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NONE[] = "IMGUI_WINDOW_FLAGS_NONE";
static const char __pyx_k_IM_DRAW_LIST_FLAGS_NONE[] = "IM_DRAW_LIST_FLAGS_NONE";
static const char __pyx_k_ImVector_ImGuiTextRange[] = "ImVector_ImGuiTextRange";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_update_platform_windows[] = "update_platform_windows";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_NONE[] = "IMGUI_BACKEND_FLAGS_NONE";
static const char __pyx_k_IMGUI_COL_BUTTON_HOVERED[] = "IMGUI_COL_BUTTON_HOVERED";
static const char __pyx_k_IMGUI_COL_HEADER_HOVERED[] = "IMGUI_COL_HEADER_HOVERED";
static const char __pyx_k_IMGUI_COL_PLOT_HISTOGRAM[] = "IMGUI_COL_PLOT_HISTOGRAM";
static const char __pyx_k_IMGUI_COL_SCROLLBAR_GRAB[] = "IMGUI_COL_SCROLLBAR_GRAB";
static const char __pyx_k_IMGUI_FOCUSED_FLAGS_NONE[] = "IMGUI_FOCUSED_FLAGS_NONE";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_NONE[] = "IMGUI_HOVERED_FLAGS_NONE";
static const char __pyx_k_IMGUI_KEY_KEYPAD_DECIMAL[] = "IMGUI_KEY_KEYPAD_DECIMAL";
static const char __pyx_k_IMGUI_KEY_KEYS_DATA_SIZE[] = "IMGUI_KEY_KEYS_DATA_SIZE";
static const char __pyx_k_IMGUI_MOUSE_BUTTON_COUNT[] = "IMGUI_MOUSE_BUTTON_COUNT";
static const char __pyx_k_IMGUI_MOUSE_BUTTON_RIGHT[] = "IMGUI_MOUSE_BUTTON_RIGHT";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_ARROW[] = "IMGUI_MOUSE_CURSOR_ARROW";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_COUNT[] = "IMGUI_MOUSE_CURSOR_COUNT";
static const char __pyx_k_IMGUI_NAV_INPUT_ACTIVATE[] = "IMGUI_NAV_INPUT_ACTIVATE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_ROW_BG[] = "IMGUI_TABLE_FLAGS_ROW_BG";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_NONE[] = "IMGUI_TAB_BAR_FLAGS_NONE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_MODAL[] = "IMGUI_WINDOW_FLAGS_MODAL";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_POPUP[] = "IMGUI_WINDOW_FLAGS_POPUP";
static const char __pyx_k_IM_FONT_ATLAS_FLAGS_NONE[] = "IM_FONT_ATLAS_FLAGS_NONE";
static const char __pyx_k_ImFontGlyphRangesBuilder[] = "ImFontGlyphRangesBuilder";
static const char __pyx_k_func_is_not_a_callable_s[] = "func is not a callable: %s";
static const char __pyx_k_IMGUI_COL_DOCKING_PREVIEW[] = "IMGUI_COL_DOCKING_PREVIEW";
static const char __pyx_k_IMGUI_COL_FRAME_BG_ACTIVE[] = "IMGUI_COL_FRAME_BG_ACTIVE";
static const char __pyx_k_IMGUI_COL_TABLE_HEADER_BG[] = "IMGUI_COL_TABLE_HEADER_BG";
static const char __pyx_k_IMGUI_COL_TITLE_BG_ACTIVE[] = "IMGUI_COL_TITLE_BG_ACTIVE";
static const char __pyx_k_IMGUI_COND_FIRST_USE_EVER[] = "IMGUI_COND_FIRST_USE_EVER";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_UP[] = "IMGUI_KEY_GAMEPAD_DPAD_UP";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_FACE_UP[] = "IMGUI_KEY_GAMEPAD_FACE_UP";
static const char __pyx_k_IMGUI_KEY_KEYPAD_MULTIPLY[] = "IMGUI_KEY_KEYPAD_MULTIPLY";
static const char __pyx_k_IMGUI_KEY_KEYPAD_SUBTRACT[] = "IMGUI_KEY_KEYPAD_SUBTRACT";
static const char __pyx_k_IMGUI_KEY_NAMED_KEY_BEGIN[] = "IMGUI_KEY_NAMED_KEY_BEGIN";
static const char __pyx_k_IMGUI_KEY_NAMED_KEY_COUNT[] = "IMGUI_KEY_NAMED_KEY_COUNT";
static const char __pyx_k_IMGUI_MOUSE_BUTTON_MIDDLE[] = "IMGUI_MOUSE_BUTTON_MIDDLE";
static const char __pyx_k_IMGUI_NAV_INPUT_DPAD_DOWN[] = "IMGUI_NAV_INPUT_DPAD_DOWN";
static const char __pyx_k_IMGUI_NAV_INPUT_DPAD_LEFT[] = "IMGUI_NAV_INPUT_DPAD_LEFT";
static const char __pyx_k_IMGUI_SORT_DIRECTION_NONE[] = "IMGUI_SORT_DIRECTION_NONE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERS[] = "IMGUI_TABLE_FLAGS_BORDERS";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_CLIP[] = "IMGUI_TABLE_FLAGS_NO_CLIP";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SCROLLX[] = "IMGUI_TABLE_FLAGS_SCROLLX";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SCROLLY[] = "IMGUI_TABLE_FLAGS_SCROLLY";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_NONE[] = "IMGUI_TAB_ITEM_FLAGS_NONE";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NONE[] = "IMGUI_VIEWPORT_FLAGS_NONE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV[] = "IMGUI_WINDOW_FLAGS_NO_NAV";
static const char __pyx_k_ImGuiTableColumnSortSpecs[] = "ImGuiTableColumnSortSpecs";
static const char __pyx_k_ImVector_ImGuiStoragePair[] = "ImVector_ImGuiStoragePair";
static const char __pyx_k_ImVector_ImGuiViewportPtr[] = "ImVector_ImGuiViewportPtr";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_HDR[] = "IMGUI_COLOR_EDIT_FLAGS_HDR";
static const char __pyx_k_IMGUI_COL_DOCKING_EMPTY_BG[] = "IMGUI_COL_DOCKING_EMPTY_BG";
static const char __pyx_k_IMGUI_COL_DRAG_DROP_TARGET[] = "IMGUI_COL_DRAG_DROP_TARGET";
static const char __pyx_k_IMGUI_COL_FRAME_BG_HOVERED[] = "IMGUI_COL_FRAME_BG_HOVERED";
static const char __pyx_k_IMGUI_COL_SEPARATOR_ACTIVE[] = "IMGUI_COL_SEPARATOR_ACTIVE";
static const char __pyx_k_IMGUI_COL_TABLE_ROW_BG_ALT[] = "IMGUI_COL_TABLE_ROW_BG_ALT";
static const char __pyx_k_IMGUI_COL_TEXT_SELECTED_BG[] = "IMGUI_COL_TEXT_SELECTED_BG";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_IS_SRGB[] = "IMGUI_CONFIG_FLAGS_IS_SRGB";
static const char __pyx_k_IMGUI_DOCK_NODE_FLAGS_NONE[] = "IMGUI_DOCK_NODE_FLAGS_NONE";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_NONE[] = "IMGUI_DRAG_DROP_FLAGS_NONE";
static const char __pyx_k_IMGUI_KEY_KEYS_DATA_OFFSET[] = "IMGUI_KEY_KEYS_DATA_OFFSET";
static const char __pyx_k_IMGUI_NAV_INPUT_DPAD_RIGHT[] = "IMGUI_NAV_INPUT_DPAD_RIGHT";
static const char __pyx_k_IMGUI_NAV_INPUT_FOCUS_NEXT[] = "IMGUI_NAV_INPUT_FOCUS_NEXT";
static const char __pyx_k_IMGUI_NAV_INPUT_FOCUS_PREV[] = "IMGUI_NAV_INPUT_FOCUS_PREV";
static const char __pyx_k_IMGUI_NAV_INPUT_L_STICK_UP[] = "IMGUI_NAV_INPUT_L_STICK_UP";
static const char __pyx_k_IMGUI_NAV_INPUT_TWEAK_FAST[] = "IMGUI_NAV_INPUT_TWEAK_FAST";
static const char __pyx_k_IMGUI_NAV_INPUT_TWEAK_SLOW[] = "IMGUI_NAV_INPUT_TWEAK_SLOW";
static const char __pyx_k_IMGUI_TABLE_BG_TARGET_NONE[] = "IMGUI_TABLE_BG_TARGET_NONE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERSH[] = "IMGUI_TABLE_FLAGS_BORDERSH";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERSV[] = "IMGUI_TABLE_FLAGS_BORDERSV";
static const char __pyx_k_IMGUI_TABLE_FLAGS_HIDEABLE[] = "IMGUI_TABLE_FLAGS_HIDEABLE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SORTABLE[] = "IMGUI_TABLE_FLAGS_SORTABLE";
static const char __pyx_k_IMGUI_TABLE_ROW_FLAGS_NONE[] = "IMGUI_TABLE_ROW_FLAGS_NONE";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_LEAF[] = "IMGUI_TREE_NODE_FLAGS_LEAF";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_NONE[] = "IMGUI_TREE_NODE_FLAGS_NONE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_MOVE[] = "IMGUI_WINDOW_FLAGS_NO_MOVE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_TOOLTIP[] = "IMGUI_WINDOW_FLAGS_TOOLTIP";
static const char __pyx_k_py_index_buffer_index_size[] = "_py_index_buffer_index_size";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NONE[] = "IMGUI_COLOR_EDIT_FLAGS_NONE";
static const char __pyx_k_IMGUI_COL_SEPARATOR_HOVERED[] = "IMGUI_COL_SEPARATOR_HOVERED";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_NO_MOUSE[] = "IMGUI_CONFIG_FLAGS_NO_MOUSE";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_NONE[] = "IMGUI_INPUT_TEXT_FLAGS_NONE";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_DOWN[] = "IMGUI_KEY_GAMEPAD_DPAD_DOWN";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_LEFT[] = "IMGUI_KEY_GAMEPAD_DPAD_LEFT";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_FACE_DOWN[] = "IMGUI_KEY_GAMEPAD_FACE_DOWN";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_FACE_LEFT[] = "IMGUI_KEY_GAMEPAD_FACE_LEFT";
static const char __pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP[] = "IMGUI_POPUP_FLAGS_ANY_POPUP";
static const char __pyx_k_IMGUI_SELECTABLE_FLAGS_NONE[] = "IMGUI_SELECTABLE_FLAGS_NONE";
static const char __pyx_k_IMGUI_SLIDER_FLAGS_NO_INPUT[] = "IMGUI_SLIDER_FLAGS_NO_INPUT";
static const char __pyx_k_IMGUI_TABLE_FLAGS_RESIZABLE[] = "IMGUI_TABLE_FLAGS_RESIZABLE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_MENU_BAR[] = "IMGUI_WINDOW_FLAGS_MENU_BAR";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_FLOAT[] = "IMGUI_COLOR_EDIT_FLAGS_FLOAT";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_UINT8[] = "IMGUI_COLOR_EDIT_FLAGS_UINT8";
static const char __pyx_k_IMGUI_COL_PLOT_LINES_HOVERED[] = "IMGUI_COL_PLOT_LINES_HOVERED";
static const char __pyx_k_IMGUI_COL_RESIZE_GRIP_ACTIVE[] = "IMGUI_COL_RESIZE_GRIP_ACTIVE";
static const char __pyx_k_IMGUI_COL_SLIDER_GRAB_ACTIVE[] = "IMGUI_COL_SLIDER_GRAB_ACTIVE";
static const char __pyx_k_IMGUI_COL_TABLE_BORDER_LIGHT[] = "IMGUI_COL_TABLE_BORDER_LIGHT";
static const char __pyx_k_IMGUI_COL_TITLE_BG_COLLAPSED[] = "IMGUI_COL_TITLE_BG_COLLAPSED";
static const char __pyx_k_IMGUI_COMBO_FLAGS_NO_PREVIEW[] = "IMGUI_COMBO_FLAGS_NO_PREVIEW";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_RIGHT[] = "IMGUI_KEY_GAMEPAD_DPAD_RIGHT";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_FACE_RIGHT[] = "IMGUI_KEY_GAMEPAD_FACE_RIGHT";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_UP[] = "IMGUI_KEY_GAMEPAD_L_STICK_UP";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_UP[] = "IMGUI_KEY_GAMEPAD_R_STICK_UP";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_EW[] = "IMGUI_MOUSE_CURSOR_RESIZE_EW";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NS[] = "IMGUI_MOUSE_CURSOR_RESIZE_NS";
static const char __pyx_k_IMGUI_NAV_INPUT_L_STICK_DOWN[] = "IMGUI_NAV_INPUT_L_STICK_DOWN";
static const char __pyx_k_IMGUI_NAV_INPUT_L_STICK_LEFT[] = "IMGUI_NAV_INPUT_L_STICK_LEFT";
static const char __pyx_k_IMGUI_STYLE_VAR_CELL_PADDING[] = "IMGUI_STYLE_VAR_CELL_PADDING";
static const char __pyx_k_IMGUI_STYLE_VAR_ITEM_SPACING[] = "IMGUI_STYLE_VAR_ITEM_SPACING";
static const char __pyx_k_IMGUI_STYLE_VAR_TAB_ROUNDING[] = "IMGUI_STYLE_VAR_TAB_ROUNDING";
static const char __pyx_k_IMGUI_TABLE_FLAGS_PAD_OUTERX[] = "IMGUI_TABLE_FLAGS_PAD_OUTERX";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SORT_MULTI[] = "IMGUI_TABLE_FLAGS_SORT_MULTI";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_LEADING[] = "IMGUI_TAB_ITEM_FLAGS_LEADING";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_BULLET[] = "IMGUI_TREE_NODE_FLAGS_BULLET";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_FRAMED[] = "IMGUI_TREE_NODE_FLAGS_FRAMED";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_INPUTS[] = "IMGUI_WINDOW_FLAGS_NO_INPUTS";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_RESIZE[] = "IMGUI_WINDOW_FLAGS_NO_RESIZE";
static const char __pyx_k_py_vertex_buffer_vertex_size[] = "_py_vertex_buffer_vertex_size";
static const char __pyx_k_IMGUI_COL_MODAL_WINDOW_DIM_BG[] = "IMGUI_COL_MODAL_WINDOW_DIM_BG";
static const char __pyx_k_IMGUI_COL_RESIZE_GRIP_HOVERED[] = "IMGUI_COL_RESIZE_GRIP_HOVERED";
static const char __pyx_k_IMGUI_COL_TABLE_BORDER_STRONG[] = "IMGUI_COL_TABLE_BORDER_STRONG";
static const char __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_MASK[] = "IMGUI_COMBO_FLAGS_HEIGHT_MASK_";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_RECT_ONLY[] = "IMGUI_HOVERED_FLAGS_RECT_ONLY";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_ALL[] = "IMGUI_MOUSE_CURSOR_RESIZE_ALL";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_TEXT_INPUT[] = "IMGUI_MOUSE_CURSOR_TEXT_INPUT";
static const char __pyx_k_IMGUI_NAV_INPUT_L_STICK_RIGHT[] = "IMGUI_NAV_INPUT_L_STICK_RIGHT";
static const char __pyx_k_IMGUI_STYLE_VAR_FRAME_PADDING[] = "IMGUI_STYLE_VAR_FRAME_PADDING";
static const char __pyx_k_IMGUI_STYLE_VAR_GRAB_MIN_SIZE[] = "IMGUI_STYLE_VAR_GRAB_MIN_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_GRAB_ROUNDING[] = "IMGUI_STYLE_VAR_GRAB_ROUNDING";
static const char __pyx_k_IMGUI_TABLE_BG_TARGET_CELL_BG[] = "IMGUI_TABLE_BG_TARGET_CELL_BG";
static const char __pyx_k_IMGUI_TABLE_BG_TARGET_ROW_BG0[] = "IMGUI_TABLE_BG_TARGET_ROW_BG0";
static const char __pyx_k_IMGUI_TABLE_BG_TARGET_ROW_BG1[] = "IMGUI_TABLE_BG_TARGET_ROW_BG1";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NONE[] = "IMGUI_TABLE_COLUMN_FLAGS_NONE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_REORDERABLE[] = "IMGUI_TABLE_FLAGS_REORDERABLE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SIZING_MASK[] = "IMGUI_TABLE_FLAGS_SIZING_MASK_";
static const char __pyx_k_IMGUI_TABLE_ROW_FLAGS_HEADERS[] = "IMGUI_TABLE_ROW_FLAGS_HEADERS";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_TRAILING[] = "IMGUI_TAB_ITEM_FLAGS_TRAILING";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_TOP_MOST[] = "IMGUI_VIEWPORT_FLAGS_TOP_MOST";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_CHILD_MENU[] = "IMGUI_WINDOW_FLAGS_CHILD_MENU";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_DOCKING[] = "IMGUI_WINDOW_FLAGS_NO_DOCKING";
static const char __pyx_k_ImVector_ImGuiPlatformMonitor[] = "ImVector_ImGuiPlatformMonitor";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_IMGUI_COL_NAV_WINDOWING_DIM_BG[] = "IMGUI_COL_NAV_WINDOWING_DIM_BG";
static const char __pyx_k_IMGUI_COL_TAB_UNFOCUSED_ACTIVE[] = "IMGUI_COL_TAB_UNFOCUSED_ACTIVE";
static const char __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_LARGE[] = "IMGUI_COMBO_FLAGS_HEIGHT_LARGE";
static const char __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_SMALL[] = "IMGUI_COMBO_FLAGS_HEIGHT_SMALL";
static const char __pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_SPLIT[] = "IMGUI_DOCK_NODE_FLAGS_NO_SPLIT";
static const char __pyx_k_IMGUI_FOCUSED_FLAGS_ANY_WINDOW[] = "IMGUI_FOCUSED_FLAGS_ANY_WINDOW";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_ANY_WINDOW[] = "IMGUI_HOVERED_FLAGS_ANY_WINDOW";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_DOWN[] = "IMGUI_KEY_GAMEPAD_L_STICK_DOWN";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_LEFT[] = "IMGUI_KEY_GAMEPAD_L_STICK_LEFT";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_DOWN[] = "IMGUI_KEY_GAMEPAD_R_STICK_DOWN";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_LEFT[] = "IMGUI_KEY_GAMEPAD_R_STICK_LEFT";
static const char __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_ALT[] = "IMGUI_KEY_RESERVED_FOR_MOD_ALT";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_NOT_ALLOWED[] = "IMGUI_MOUSE_CURSOR_NOT_ALLOWED";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NESW[] = "IMGUI_MOUSE_CURSOR_RESIZE_NESW";
static const char __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NWSE[] = "IMGUI_MOUSE_CURSOR_RESIZE_NWSE";
static const char __pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP_ID[] = "IMGUI_POPUP_FLAGS_ANY_POPUP_ID";
static const char __pyx_k_IMGUI_SLIDER_FLAGS_LOGARITHMIC[] = "IMGUI_SLIDER_FLAGS_LOGARITHMIC";
static const char __pyx_k_IMGUI_SORT_DIRECTION_ASCENDING[] = "IMGUI_SORT_DIRECTION_ASCENDING";
static const char __pyx_k_IMGUI_STYLE_VAR_CHILD_ROUNDING[] = "IMGUI_STYLE_VAR_CHILD_ROUNDING";
static const char __pyx_k_IMGUI_STYLE_VAR_DISABLED_ALPHA[] = "IMGUI_STYLE_VAR_DISABLED_ALPHA";
static const char __pyx_k_IMGUI_STYLE_VAR_FRAME_ROUNDING[] = "IMGUI_STYLE_VAR_FRAME_ROUNDING";
static const char __pyx_k_IMGUI_STYLE_VAR_INDENT_SPACING[] = "IMGUI_STYLE_VAR_INDENT_SPACING";
static const char __pyx_k_IMGUI_STYLE_VAR_POPUP_ROUNDING[] = "IMGUI_STYLE_VAR_POPUP_ROUNDING";
static const char __pyx_k_IMGUI_STYLE_VAR_SCROLLBAR_SIZE[] = "IMGUI_STYLE_VAR_SCROLLBAR_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_WINDOW_PADDING[] = "IMGUI_STYLE_VAR_WINDOW_PADDING";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP[] = "IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_SELECTED[] = "IMGUI_TREE_NODE_FLAGS_SELECTED";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_MINIMIZED[] = "IMGUI_VIEWPORT_FLAGS_MINIMIZED";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_INPUTS[] = "IMGUI_VIEWPORT_FLAGS_NO_INPUTS";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_COLLAPSE[] = "IMGUI_WINDOW_FLAGS_NO_COLLAPSE";
static const char __pyx_k_ImVector_ImFontAtlasCustomRect[] = "ImVector_ImFontAtlasCustomRect";
static const char __pyx_k_pair_param_must_be_length_of_2[] = "pair param must be length of 2";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_HAS_GAMEPAD[] = "IMGUI_BACKEND_FLAGS_HAS_GAMEPAD";
static const char __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON[] = "IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA[] = "IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_LABEL[] = "IMGUI_COLOR_EDIT_FLAGS_NO_LABEL";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_SMALL[] = "IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW";
static const char __pyx_k_IMGUI_COL_SCROLLBAR_GRAB_ACTIVE[] = "IMGUI_COL_SCROLLBAR_GRAB_ACTIVE";
static const char __pyx_k_IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE[] = "IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR";
static const char __pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_RESIZE[] = "IMGUI_DOCK_NODE_FLAGS_NO_RESIZE";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO[] = "IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO[] = "IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP";
static const char __pyx_k_IMGUI_FOCUSED_FLAGS_ROOT_WINDOW[] = "IMGUI_FOCUSED_FLAGS_ROOT_WINDOW";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_DELAY_SHORT[] = "IMGUI_HOVERED_FLAGS_DELAY_SHORT";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_ROOT_WINDOW[] = "IMGUI_HOVERED_FLAGS_ROOT_WINDOW";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK[] = "IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_NO[] = "IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_PASSWORD[] = "IMGUI_INPUT_TEXT_FLAGS_PASSWORD";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_RIGHT[] = "IMGUI_KEY_GAMEPAD_L_STICK_RIGHT";
static const char __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_RIGHT[] = "IMGUI_KEY_GAMEPAD_R_STICK_RIGHT";
static const char __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_CTRL[] = "IMGUI_KEY_RESERVED_FOR_MOD_CTRL";
static const char __pyx_k_IMGUI_SELECTABLE_FLAGS_DISABLED[] = "IMGUI_SELECTABLE_FLAGS_DISABLED";
static const char __pyx_k_IMGUI_SELECTABLE_FLAGS_SPAN_ALL[] = "IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS";
static const char __pyx_k_IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP[] = "IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP";
static const char __pyx_k_IMGUI_SLIDER_FLAGS_INVALID_MASK[] = "IMGUI_SLIDER_FLAGS_INVALID_MASK_";
static const char __pyx_k_IMGUI_SORT_DIRECTION_DESCENDING[] = "IMGUI_SORT_DIRECTION_DESCENDING";
static const char __pyx_k_IMGUI_STYLE_VAR_SELECTABLE_TEXT[] = "IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN";
static const char __pyx_k_IMGUI_STYLE_VAR_WINDOW_MIN_SIZE[] = "IMGUI_STYLE_VAR_WINDOW_MIN_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_WINDOW_ROUNDING[] = "IMGUI_STYLE_VAR_WINDOW_ROUNDING";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT[] = "IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_PREFER[] = "IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_STATUS[] = "IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNER[] = "IMGUI_TABLE_FLAGS_BORDERS_INNER";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTER[] = "IMGUI_TABLE_FLAGS_BORDERS_OUTER";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_BORDERS_IN[] = "IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_PAD_INNERX[] = "IMGUI_TABLE_FLAGS_NO_PAD_INNERX";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_PAD_OUTERX[] = "IMGUI_TABLE_FLAGS_NO_PAD_OUTERX";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SORT_TRISTATE[] = "IMGUI_TABLE_FLAGS_SORT_TRISTATE";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_AUTO_SELECT[] = "IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST[] = "IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_REORDERABLE[] = "IMGUI_TAB_BAR_FLAGS_REORDERABLE";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID[] = "IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_REORDER[] = "IMGUI_TAB_ITEM_FLAGS_NO_REORDER";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP[] = "IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_SPAN_FULL[] = "IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_CHILD_WINDOW[] = "IMGUI_WINDOW_FLAGS_CHILD_WINDOW";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS[] = "IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_SCROLLBAR[] = "IMGUI_WINDOW_FLAGS_NO_SCROLLBAR";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_TITLE_BAR[] = "IMGUI_WINDOW_FLAGS_NO_TITLE_BAR";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_ALL[] = "IM_DRAW_FLAGS_ROUND_CORNERS_ALL";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP[] = "IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT";
static const char __pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED[] = "IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES";
static const char __pyx_k_IM_FONT_ATLAS_FLAGS_NO_POWER_OF[] = "IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT";
static const char __pyx_k_py_vertex_buffer_vertex_col_off[] = "_py_vertex_buffer_vertex_col_offset";
static const char __pyx_k_py_vertex_buffer_vertex_pos_off[] = "_py_vertex_buffer_vertex_pos_offset";
static const char __pyx_k_py_vertex_buffer_vertex_uv_offs[] = "_py_vertex_buffer_vertex_uv_offset";
static const char __pyx_k_render_platform_windows_default[] = "render_platform_windows_default";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_HAS_MOUSE_CU[] = "IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_HAS_MOUSE_HO[] = "IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_HAS_SET_MOUS[] = "IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_PLATFORM_HAS[] = "IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_RENDERER_HAS[] = "IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR[] = "IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE[] = "IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE[] = "IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DEFAULT_O[] = "IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H[] = "IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_M[] = "IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_R[] = "IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV[] = "IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_MAS[] = "IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB[] = "IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_BORDER[] = "IMGUI_COLOR_EDIT_FLAGS_NO_BORDER";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_D[] = "IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS[] = "IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_OPTION[] = "IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_PICKER[] = "IMGUI_COLOR_EDIT_FLAGS_NO_PICKER";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_P[] = "IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTI[] = "IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU[] = "IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_MA[] = "IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_";
static const char __pyx_k_IMGUI_COL_NAV_WINDOWING_HIGHLIGH[] = "IMGUI_COL_NAV_WINDOWING_HIGHLIGHT";
static const char __pyx_k_IMGUI_COL_PLOT_HISTOGRAM_HOVERED[] = "IMGUI_COL_PLOT_HISTOGRAM_HOVERED";
static const char __pyx_k_IMGUI_COL_SCROLLBAR_GRAB_HOVERED[] = "IMGUI_COL_SCROLLBAR_GRAB_HOVERED";
static const char __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_LARGEST[] = "IMGUI_COMBO_FLAGS_HEIGHT_LARGEST";
static const char __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_REGULAR[] = "IMGUI_COMBO_FLAGS_HEIGHT_REGULAR";
static const char __pyx_k_IMGUI_COMBO_FLAGS_NO_ARROW_BUTTO[] = "IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON";
static const char __pyx_k_IMGUI_COMBO_FLAGS_POPUP_ALIGN_LE[] = "IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_DOCKING_ENABL[] = "IMGUI_CONFIG_FLAGS_DOCKING_ENABLE";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC[] = "IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_IS_TOUCH_SCRE[] = "IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_GA[] = "IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_KE[] = "IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_SE[] = "IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_NAV_NO_CAPTUR[] = "IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_NO_MOUSE_CURS[] = "IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_VIEWPORTS_ENA[] = "IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE";
static const char __pyx_k_IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE[] = "IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY";
static const char __pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_DOCKING[] = "IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE";
static const char __pyx_k_IMGUI_DOCK_NODE_FLAGS_PASSTHRU_C[] = "IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEF[] = "IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEE[] = "IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_ALL[] = "IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_AUT[] = "IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_EXT[] = "IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN";
static const char __pyx_k_IMGUI_FOCUSED_FLAGS_CHILD_WINDOW[] = "IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS";
static const char __pyx_k_IMGUI_FOCUSED_FLAGS_DOCK_HIERARC[] = "IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY";
static const char __pyx_k_IMGUI_FOCUSED_FLAGS_NO_POPUP_HIE[] = "IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY";
static const char __pyx_k_IMGUI_FOCUSED_FLAGS_ROOT_AND_CHI[] = "IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B[] = "IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_D[] = "IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_O[] = "IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_CHILD_WINDOW[] = "IMGUI_HOVERED_FLAGS_CHILD_WINDOWS";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_DELAY_NORMAL[] = "IMGUI_HOVERED_FLAGS_DELAY_NORMAL";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_DOCK_HIERARC[] = "IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_NO_NAV_OVERR[] = "IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_NO_POPUP_HIE[] = "IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_NO_SHARED_DE[] = "IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_ROOT_AND_CHI[] = "IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB[] = "IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OV[] = "IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_AUTO_SELE[] = "IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_DEC[] = "IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_HEX[] = "IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_SCI[] = "IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_UPP[] = "IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTE[] = "IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ENTER_RET[] = "IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CL[] = "IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_NO_HORIZO[] = "IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_R[] = "IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_READ_ONLY[] = "IMGUI_INPUT_TEXT_FLAGS_READ_ONLY";
static const char __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_SHIFT[] = "IMGUI_KEY_RESERVED_FOR_MOD_SHIFT";
static const char __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_SUPER[] = "IMGUI_KEY_RESERVED_FOR_MOD_SUPER";
static const char __pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP_LEVE[] = "IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL";
static const char __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_D[] = "IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_";
static const char __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_L[] = "IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT";
static const char __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M[] = "IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE";
static const char __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_R[] = "IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT";
static const char __pyx_k_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_E[] = "IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP";
static const char __pyx_k_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_I[] = "IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS";
static const char __pyx_k_IMGUI_SELECTABLE_FLAGS_ALLOW_DOU[] = "IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK";
static const char __pyx_k_IMGUI_SELECTABLE_FLAGS_ALLOW_ITE[] = "IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP";
static const char __pyx_k_IMGUI_SELECTABLE_FLAGS_DONT_CLOS[] = "IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS";
static const char __pyx_k_IMGUI_SLIDER_FLAGS_NO_ROUND_TO_F[] = "IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT";
static const char __pyx_k_IMGUI_STYLE_VAR_BUTTON_TEXT_ALIG[] = "IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN";
static const char __pyx_k_IMGUI_STYLE_VAR_CHILD_BORDER_SIZ[] = "IMGUI_STYLE_VAR_CHILD_BORDER_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_FRAME_BORDER_SIZ[] = "IMGUI_STYLE_VAR_FRAME_BORDER_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_ITEM_INNER_SPACI[] = "IMGUI_STYLE_VAR_ITEM_INNER_SPACING";
static const char __pyx_k_IMGUI_STYLE_VAR_POPUP_BORDER_SIZ[] = "IMGUI_STYLE_VAR_POPUP_BORDER_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_SCROLLBAR_ROUNDI[] = "IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING";
static const char __pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_A[] = "IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN";
static const char __pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_B[] = "IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_P[] = "IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING";
static const char __pyx_k_IMGUI_STYLE_VAR_WINDOW_BORDER_SI[] = "IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE";
static const char __pyx_k_IMGUI_STYLE_VAR_WINDOW_TITLE_ALI[] = "IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT[] = "IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DISABLE[] = "IMGUI_TABLE_COLUMN_FLAGS_DISABLED";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_ENAB[] = "IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_HOVE[] = "IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_SORT[] = "IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_VISI[] = "IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_DIRE[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_REOR[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_RESI[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_SORT";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_F[] = "IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_M[] = "IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_S[] = "IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNERH[] = "IMGUI_TABLE_FLAGS_BORDERS_INNERH";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNERV[] = "IMGUI_TABLE_FLAGS_BORDERS_INNERV";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTERH[] = "IMGUI_TABLE_FLAGS_BORDERS_OUTERH";
static const char __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTERV[] = "IMGUI_TABLE_FLAGS_BORDERS_OUTERV";
static const char __pyx_k_IMGUI_TABLE_FLAGS_CONTEXT_MENU_I[] = "IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND[] = "IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_KEEP_COLUMN[] = "IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_SAVED_SETTI[] = "IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS";
static const char __pyx_k_IMGUI_TABLE_FLAGS_PRECISE_WIDTHS[] = "IMGUI_TABLE_FLAGS_PRECISE_WIDTHS";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SIZING_FIXED_F[] = "IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SIZING_FIXED_S[] = "IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SIZING_STRETCH[] = "IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI[] = "IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WIT[] = "IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_TAB_LIST_POP[] = "IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WI[] = "IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_SET_SELECTE[] = "IMGUI_TAB_ITEM_FLAGS_SET_SELECTED";
static const char __pyx_k_IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOC[] = "IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM[] = "IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_COLLAPSING[] = "IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_DEFAULT_OP[] = "IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_FRAME_PADD[] = "IMGUI_TREE_NODE_FLAGS_FRAME_PADDING";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_NAV_LEFT_J[] = "IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_NO_AUTO_OP[] = "IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_NO_TREE_PU[] = "IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_OPEN_ON_AR[] = "IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_OPEN_ON_DO[] = "IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK";
static const char __pyx_k_IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL[] = "IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_CAN_HOST_OT[] = "IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM[] = "IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_AUTO_MER[] = "IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_DECORATI[] = "IMGUI_VIEWPORT_FLAGS_NO_DECORATION";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON[] = "IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_RENDERER[] = "IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR[] = "IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_OWNED_BY_AP[] = "IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_R[] = "IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_HORIZO[] = "IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_USE_WI[] = "IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_VERTIC[] = "IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_DOCK_NODE_HOS[] = "IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_HORIZONTAL_SC[] = "IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NAV_FLATTENED[] = "IMGUI_WINDOW_FLAGS_NAV_FLATTENED";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_BACKGROUND[] = "IMGUI_WINDOW_FLAGS_NO_BACKGROUND";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_BRING_TO_F[] = "IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_DECORATION[] = "IMGUI_WINDOW_FLAGS_NO_DECORATION";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_A[] = "IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_MOUSE_INPU[] = "IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS[] = "IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_SAVED_SETT[] = "IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_NO_SCROLL_WIT[] = "IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE";
static const char __pyx_k_IMGUI_WINDOW_FLAGS_UNSAVED_DOCUM[] = "IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT[] = "IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_DEFA[] = "IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_LEFT[] = "IM_DRAW_FLAGS_ROUND_CORNERS_LEFT";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_MASK[] = "IM_DRAW_FLAGS_ROUND_CORNERS_MASK_";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_NONE[] = "IM_DRAW_FLAGS_ROUND_CORNERS_NONE";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_RIGH[] = "IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT";
static const char __pyx_k_IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFF[] = "IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET";
static const char __pyx_k_IM_FONT_ATLAS_FLAGS_NO_BAKED_LIN[] = "IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES";
static const char __pyx_k_IM_FONT_ATLAS_FLAGS_NO_MOUSE_CUR[] = "IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_This_class_cannot_be_instantiate[] = "This class cannot be instantiated directly.";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_quadruple_param_must_be_length_o[] = "quadruple param must be length of 4";
static const char __pyx_k_self__ptr_cannot_be_converted_to[] = "self._ptr cannot be converted to a Python object for pickling";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_2[] = "IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT";
static const char __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_3[] = "IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE";
static const char __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_4[] = "IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_";
static const char __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_5[] = "IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_2[] = "IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_2[] = "IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER";
static const char __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_3[] = "IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_2[] = "IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_3[] = "IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_4[] = "IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_5[] = "IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE";
static const char __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_6[] = "IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT_2[] = "IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT_3[] = "IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_PREFER_2[] = "IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_BORDERS_IN_2[] = "IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_2[] = "IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_3[] = "IM_DRAW_FLAGS_ROUND_CORNERS_TOP";
static const char __pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_2[] = "IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX";
static const char __pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_3[] = "IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL";
static const char __pyx_k_IMGUI_BACKEND_FLAGS_RENDERER_HAS_2[] = "IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE_2[] = "IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H_2[] = "IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX";
static const char __pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU_2[] = "IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL";
static const char __pyx_k_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC_2[] = "IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS";
static const char __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B_2[] = "IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM";
static const char __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M_2[] = "IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_2[] = "IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD_2[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_2[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING";
static const char __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_3[] = "IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING";
static const char __pyx_k_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND_2[] = "IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY";
static const char __pyx_k_IMGUI_TABLE_FLAGS_SIZING_STRETCH_2[] = "IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_2[] = "IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_3[] = "IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_";
static const char __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_4[] = "IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_2[] = "IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR";
static const char __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_2[] = "IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_2[] = "IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT";
static const char __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_3[] = "IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_Any;
static PyObject *__pyx_n_s_BoolPtr;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_n_s_Callable;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_GAMEPAD;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_MOUSE_CU;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_MOUSE_HO;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_SET_MOUS;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_PLATFORM_HAS;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_RENDERER_HAS;
static PyObject *__pyx_n_s_IMGUI_BACKEND_FLAGS_RENDERER_HAS_2;
static PyObject *__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON;
static PyObject *__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_2;
static PyObject *__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_3;
static PyObject *__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_4;
static PyObject *__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_5;
static PyObject *__pyx_n_s_IMGUI_BUTTON_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE_2;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DEFAULT_O;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H_2;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_M;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_R;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_FLOAT;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_HDR;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_MAS;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_BORDER;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_D;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_LABEL;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_OPTION;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_PICKER;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_P;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_SMALL;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTI;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU_2;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_MA;
static PyObject *__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_UINT8;
static PyObject *__pyx_n_s_IMGUI_COL_BORDER;
static PyObject *__pyx_n_s_IMGUI_COL_BORDER_SHADOW;
static PyObject *__pyx_n_s_IMGUI_COL_BUTTON;
static PyObject *__pyx_n_s_IMGUI_COL_BUTTON_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_BUTTON_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_CHECK_MARK;
static PyObject *__pyx_n_s_IMGUI_COL_CHILD_BG;
static PyObject *__pyx_n_s_IMGUI_COL_COUNT;
static PyObject *__pyx_n_s_IMGUI_COL_DOCKING_EMPTY_BG;
static PyObject *__pyx_n_s_IMGUI_COL_DOCKING_PREVIEW;
static PyObject *__pyx_n_s_IMGUI_COL_DRAG_DROP_TARGET;
static PyObject *__pyx_n_s_IMGUI_COL_FRAME_BG;
static PyObject *__pyx_n_s_IMGUI_COL_FRAME_BG_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_FRAME_BG_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_HEADER;
static PyObject *__pyx_n_s_IMGUI_COL_HEADER_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_HEADER_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_MENU_BAR_BG;
static PyObject *__pyx_n_s_IMGUI_COL_MODAL_WINDOW_DIM_BG;
static PyObject *__pyx_n_s_IMGUI_COL_NAV_HIGHLIGHT;
static PyObject *__pyx_n_s_IMGUI_COL_NAV_WINDOWING_DIM_BG;
static PyObject *__pyx_n_s_IMGUI_COL_NAV_WINDOWING_HIGHLIGH;
static PyObject *__pyx_n_s_IMGUI_COL_PLOT_HISTOGRAM;
static PyObject *__pyx_n_s_IMGUI_COL_PLOT_HISTOGRAM_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_PLOT_LINES;
static PyObject *__pyx_n_s_IMGUI_COL_PLOT_LINES_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_POPUP_BG;
static PyObject *__pyx_n_s_IMGUI_COL_RESIZE_GRIP;
static PyObject *__pyx_n_s_IMGUI_COL_RESIZE_GRIP_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_RESIZE_GRIP_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_SCROLLBAR_BG;
static PyObject *__pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB;
static PyObject *__pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_SEPARATOR;
static PyObject *__pyx_n_s_IMGUI_COL_SEPARATOR_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_SEPARATOR_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_SLIDER_GRAB;
static PyObject *__pyx_n_s_IMGUI_COL_SLIDER_GRAB_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_TAB;
static PyObject *__pyx_n_s_IMGUI_COL_TABLE_BORDER_LIGHT;
static PyObject *__pyx_n_s_IMGUI_COL_TABLE_BORDER_STRONG;
static PyObject *__pyx_n_s_IMGUI_COL_TABLE_HEADER_BG;
static PyObject *__pyx_n_s_IMGUI_COL_TABLE_ROW_BG;
static PyObject *__pyx_n_s_IMGUI_COL_TABLE_ROW_BG_ALT;
static PyObject *__pyx_n_s_IMGUI_COL_TAB_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_TAB_HOVERED;
static PyObject *__pyx_n_s_IMGUI_COL_TAB_UNFOCUSED;
static PyObject *__pyx_n_s_IMGUI_COL_TAB_UNFOCUSED_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_TEXT;
static PyObject *__pyx_n_s_IMGUI_COL_TEXT_DISABLED;
static PyObject *__pyx_n_s_IMGUI_COL_TEXT_SELECTED_BG;
static PyObject *__pyx_n_s_IMGUI_COL_TITLE_BG;
static PyObject *__pyx_n_s_IMGUI_COL_TITLE_BG_ACTIVE;
static PyObject *__pyx_n_s_IMGUI_COL_TITLE_BG_COLLAPSED;
static PyObject *__pyx_n_s_IMGUI_COL_WINDOW_BG;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_LARGE;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_LARGEST;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_MASK;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_REGULAR;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_SMALL;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_NO_ARROW_BUTTO;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_NO_PREVIEW;
static PyObject *__pyx_n_s_IMGUI_COMBO_FLAGS_POPUP_ALIGN_LE;
static PyObject *__pyx_n_s_IMGUI_COND_ALWAYS;
static PyObject *__pyx_n_s_IMGUI_COND_APPEARING;
static PyObject *__pyx_n_s_IMGUI_COND_FIRST_USE_EVER;
static PyObject *__pyx_n_s_IMGUI_COND_NONE;
static PyObject *__pyx_n_s_IMGUI_COND_ONCE;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_DOCKING_ENABL;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC_2;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_IS_SRGB;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_IS_TOUCH_SCRE;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_GA;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_KE;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_SE;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_NO_CAPTUR;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_NO_MOUSE;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_NO_MOUSE_CURS;
static PyObject *__pyx_n_s_IMGUI_CONFIG_FLAGS_VIEWPORTS_ENA;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_COUNT;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_DOUBLE;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_FLOAT;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_S16;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_S32;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_S64;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_S8;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_U16;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_U32;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_U64;
static PyObject *__pyx_n_s_IMGUI_DATA_TYPE_U8;
static PyObject *__pyx_n_s_IMGUI_DIR_COUNT;
static PyObject *__pyx_n_s_IMGUI_DIR_DOWN;
static PyObject *__pyx_n_s_IMGUI_DIR_LEFT;
static PyObject *__pyx_n_s_IMGUI_DIR_NONE;
static PyObject *__pyx_n_s_IMGUI_DIR_RIGHT;
static PyObject *__pyx_n_s_IMGUI_DIR_UP;
static PyObject *__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE;
static PyObject *__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE;
static PyObject *__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_DOCKING;
static PyObject *__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_RESIZE;
static PyObject *__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_SPLIT;
static PyObject *__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_PASSTHRU_C;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEF;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_2;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEE;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_ALL;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_AUT;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_EXT;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_2;
static PyObject *__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_3;
static PyObject *__pyx_n_s_IMGUI_FOCUSED_FLAGS_ANY_WINDOW;
static PyObject *__pyx_n_s_IMGUI_FOCUSED_FLAGS_CHILD_WINDOW;
static PyObject *__pyx_n_s_IMGUI_FOCUSED_FLAGS_DOCK_HIERARC;
static PyObject *__pyx_n_s_IMGUI_FOCUSED_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_FOCUSED_FLAGS_NO_POPUP_HIE;
static PyObject *__pyx_n_s_IMGUI_FOCUSED_FLAGS_ROOT_AND_CHI;
static PyObject *__pyx_n_s_IMGUI_FOCUSED_FLAGS_ROOT_WINDOW;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B_2;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_D;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_O;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_ANY_WINDOW;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_CHILD_WINDOW;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_DELAY_NORMAL;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_DELAY_SHORT;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_DOCK_HIERARC;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_NO_NAV_OVERR;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_NO_POPUP_HIE;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_NO_SHARED_DE;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_RECT_ONLY;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_ROOT_AND_CHI;
static PyObject *__pyx_n_s_IMGUI_HOVERED_FLAGS_ROOT_WINDOW;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OV;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_AUTO_SELE;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_2;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_3;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_4;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_5;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_6;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_DEC;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_HEX;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_NO;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_SCI;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_UPP;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTE;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ENTER_RET;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CL;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NO_HORIZO;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_R;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_PASSWORD;
static PyObject *__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_READ_ONLY;
static PyObject *__pyx_n_s_IMGUI_KEY_0;
static PyObject *__pyx_n_s_IMGUI_KEY_1;
static PyObject *__pyx_n_s_IMGUI_KEY_2;
static PyObject *__pyx_n_s_IMGUI_KEY_3;
static PyObject *__pyx_n_s_IMGUI_KEY_4;
static PyObject *__pyx_n_s_IMGUI_KEY_5;
static PyObject *__pyx_n_s_IMGUI_KEY_6;
static PyObject *__pyx_n_s_IMGUI_KEY_7;
static PyObject *__pyx_n_s_IMGUI_KEY_8;
static PyObject *__pyx_n_s_IMGUI_KEY_9;
static PyObject *__pyx_n_s_IMGUI_KEY_A;
static PyObject *__pyx_n_s_IMGUI_KEY_APOSTROPHE;
static PyObject *__pyx_n_s_IMGUI_KEY_B;
static PyObject *__pyx_n_s_IMGUI_KEY_BACKSLASH;
static PyObject *__pyx_n_s_IMGUI_KEY_BACKSPACE;
static PyObject *__pyx_n_s_IMGUI_KEY_C;
static PyObject *__pyx_n_s_IMGUI_KEY_CAPS_LOCK;
static PyObject *__pyx_n_s_IMGUI_KEY_COMMA;
static PyObject *__pyx_n_s_IMGUI_KEY_COUNT;
static PyObject *__pyx_n_s_IMGUI_KEY_D;
static PyObject *__pyx_n_s_IMGUI_KEY_DELETE;
static PyObject *__pyx_n_s_IMGUI_KEY_DOWN_ARROW;
static PyObject *__pyx_n_s_IMGUI_KEY_E;
static PyObject *__pyx_n_s_IMGUI_KEY_END;
static PyObject *__pyx_n_s_IMGUI_KEY_ENTER;
static PyObject *__pyx_n_s_IMGUI_KEY_EQUAL;
static PyObject *__pyx_n_s_IMGUI_KEY_ESCAPE;
static PyObject *__pyx_n_s_IMGUI_KEY_F;
static PyObject *__pyx_n_s_IMGUI_KEY_F1;
static PyObject *__pyx_n_s_IMGUI_KEY_F10;
static PyObject *__pyx_n_s_IMGUI_KEY_F11;
static PyObject *__pyx_n_s_IMGUI_KEY_F12;
static PyObject *__pyx_n_s_IMGUI_KEY_F2;
static PyObject *__pyx_n_s_IMGUI_KEY_F3;
static PyObject *__pyx_n_s_IMGUI_KEY_F4;
static PyObject *__pyx_n_s_IMGUI_KEY_F5;
static PyObject *__pyx_n_s_IMGUI_KEY_F6;
static PyObject *__pyx_n_s_IMGUI_KEY_F7;
static PyObject *__pyx_n_s_IMGUI_KEY_F8;
static PyObject *__pyx_n_s_IMGUI_KEY_F9;
static PyObject *__pyx_n_s_IMGUI_KEY_G;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_BACK;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_DOWN;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_LEFT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_RIGHT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_UP;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_DOWN;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_LEFT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_RIGHT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_UP;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_L1;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_L2;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_L3;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_DOWN;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_LEFT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_RIGHT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_UP;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_R1;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_R2;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_R3;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_DOWN;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_LEFT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_RIGHT;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_UP;
static PyObject *__pyx_n_s_IMGUI_KEY_GAMEPAD_START;
static PyObject *__pyx_n_s_IMGUI_KEY_GRAVE_ACCENT;
static PyObject *__pyx_n_s_IMGUI_KEY_H;
static PyObject *__pyx_n_s_IMGUI_KEY_HOME;
static PyObject *__pyx_n_s_IMGUI_KEY_I;
static PyObject *__pyx_n_s_IMGUI_KEY_INSERT;
static PyObject *__pyx_n_s_IMGUI_KEY_J;
static PyObject *__pyx_n_s_IMGUI_KEY_K;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD0;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD1;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD2;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD3;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD4;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD5;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD6;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD7;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD8;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD9;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD_ADD;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD_DECIMAL;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD_DIVIDE;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD_ENTER;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD_EQUAL;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD_MULTIPLY;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYPAD_SUBTRACT;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYS_DATA_OFFSET;
static PyObject *__pyx_n_s_IMGUI_KEY_KEYS_DATA_SIZE;
static PyObject *__pyx_n_s_IMGUI_KEY_L;
static PyObject *__pyx_n_s_IMGUI_KEY_LEFT_ALT;
static PyObject *__pyx_n_s_IMGUI_KEY_LEFT_ARROW;
static PyObject *__pyx_n_s_IMGUI_KEY_LEFT_BRACKET;
static PyObject *__pyx_n_s_IMGUI_KEY_LEFT_CTRL;
static PyObject *__pyx_n_s_IMGUI_KEY_LEFT_SHIFT;
static PyObject *__pyx_n_s_IMGUI_KEY_LEFT_SUPER;
static PyObject *__pyx_n_s_IMGUI_KEY_M;
static PyObject *__pyx_n_s_IMGUI_KEY_MENU;
static PyObject *__pyx_n_s_IMGUI_KEY_MINUS;
static PyObject *__pyx_n_s_IMGUI_KEY_MOUSE_LEFT;
static PyObject *__pyx_n_s_IMGUI_KEY_MOUSE_MIDDLE;
static PyObject *__pyx_n_s_IMGUI_KEY_MOUSE_RIGHT;
static PyObject *__pyx_n_s_IMGUI_KEY_MOUSE_WHEELX;
static PyObject *__pyx_n_s_IMGUI_KEY_MOUSE_WHEELY;
static PyObject *__pyx_n_s_IMGUI_KEY_MOUSE_X1;
static PyObject *__pyx_n_s_IMGUI_KEY_MOUSE_X2;
static PyObject *__pyx_n_s_IMGUI_KEY_N;
static PyObject *__pyx_n_s_IMGUI_KEY_NAMED_KEY_BEGIN;
static PyObject *__pyx_n_s_IMGUI_KEY_NAMED_KEY_COUNT;
static PyObject *__pyx_n_s_IMGUI_KEY_NAMED_KEY_END;
static PyObject *__pyx_n_s_IMGUI_KEY_NONE;
static PyObject *__pyx_n_s_IMGUI_KEY_NUM_LOCK;
static PyObject *__pyx_n_s_IMGUI_KEY_O;
static PyObject *__pyx_n_s_IMGUI_KEY_P;
static PyObject *__pyx_n_s_IMGUI_KEY_PAGE_DOWN;
static PyObject *__pyx_n_s_IMGUI_KEY_PAGE_UP;
static PyObject *__pyx_n_s_IMGUI_KEY_PAUSE;
static PyObject *__pyx_n_s_IMGUI_KEY_PERIOD;
static PyObject *__pyx_n_s_IMGUI_KEY_PRINT_SCREEN;
static PyObject *__pyx_n_s_IMGUI_KEY_Q;
static PyObject *__pyx_n_s_IMGUI_KEY_R;
static PyObject *__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_ALT;
static PyObject *__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_CTRL;
static PyObject *__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_SHIFT;
static PyObject *__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_SUPER;
static PyObject *__pyx_n_s_IMGUI_KEY_RIGHT_ALT;
static PyObject *__pyx_n_s_IMGUI_KEY_RIGHT_ARROW;
static PyObject *__pyx_n_s_IMGUI_KEY_RIGHT_BRACKET;
static PyObject *__pyx_n_s_IMGUI_KEY_RIGHT_CTRL;
static PyObject *__pyx_n_s_IMGUI_KEY_RIGHT_SHIFT;
static PyObject *__pyx_n_s_IMGUI_KEY_RIGHT_SUPER;
static PyObject *__pyx_n_s_IMGUI_KEY_S;
static PyObject *__pyx_n_s_IMGUI_KEY_SCROLL_LOCK;
static PyObject *__pyx_n_s_IMGUI_KEY_SEMICOLON;
static PyObject *__pyx_n_s_IMGUI_KEY_SLASH;
static PyObject *__pyx_n_s_IMGUI_KEY_SPACE;
static PyObject *__pyx_n_s_IMGUI_KEY_T;
static PyObject *__pyx_n_s_IMGUI_KEY_TAB;
static PyObject *__pyx_n_s_IMGUI_KEY_U;
static PyObject *__pyx_n_s_IMGUI_KEY_UP_ARROW;
static PyObject *__pyx_n_s_IMGUI_KEY_V;
static PyObject *__pyx_n_s_IMGUI_KEY_W;
static PyObject *__pyx_n_s_IMGUI_KEY_X;
static PyObject *__pyx_n_s_IMGUI_KEY_Y;
static PyObject *__pyx_n_s_IMGUI_KEY_Z;
static PyObject *__pyx_n_s_IMGUI_MOD_ALT;
static PyObject *__pyx_n_s_IMGUI_MOD_CTRL;
static PyObject *__pyx_n_s_IMGUI_MOD_MASK;
static PyObject *__pyx_n_s_IMGUI_MOD_NONE;
static PyObject *__pyx_n_s_IMGUI_MOD_SHIFT;
static PyObject *__pyx_n_s_IMGUI_MOD_SHORTCUT;
static PyObject *__pyx_n_s_IMGUI_MOD_SUPER;
static PyObject *__pyx_n_s_IMGUI_MOUSE_BUTTON_COUNT;
static PyObject *__pyx_n_s_IMGUI_MOUSE_BUTTON_LEFT;
static PyObject *__pyx_n_s_IMGUI_MOUSE_BUTTON_MIDDLE;
static PyObject *__pyx_n_s_IMGUI_MOUSE_BUTTON_RIGHT;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_ARROW;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_COUNT;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_HAND;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_NONE;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_NOT_ALLOWED;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_ALL;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_EW;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NESW;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NS;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NWSE;
static PyObject *__pyx_n_s_IMGUI_MOUSE_CURSOR_TEXT_INPUT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_ACTIVATE;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_CANCEL;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_COUNT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_DPAD_DOWN;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_DPAD_LEFT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_DPAD_RIGHT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_DPAD_UP;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_FOCUS_NEXT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_FOCUS_PREV;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_INPUT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_DOWN;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_LEFT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_RIGHT;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_UP;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_MENU;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_TWEAK_FAST;
static PyObject *__pyx_n_s_IMGUI_NAV_INPUT_TWEAK_SLOW;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP_ID;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP_LEVE;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_D;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_L;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M_2;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_R;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_E;
static PyObject *__pyx_n_s_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_I;
static PyObject *__pyx_n_s_IMGUI_SELECTABLE_FLAGS_ALLOW_DOU;
static PyObject *__pyx_n_s_IMGUI_SELECTABLE_FLAGS_ALLOW_ITE;
static PyObject *__pyx_n_s_IMGUI_SELECTABLE_FLAGS_DISABLED;
static PyObject *__pyx_n_s_IMGUI_SELECTABLE_FLAGS_DONT_CLOS;
static PyObject *__pyx_n_s_IMGUI_SELECTABLE_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_SELECTABLE_FLAGS_SPAN_ALL;
static PyObject *__pyx_n_s_IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP;
static PyObject *__pyx_n_s_IMGUI_SLIDER_FLAGS_INVALID_MASK;
static PyObject *__pyx_n_s_IMGUI_SLIDER_FLAGS_LOGARITHMIC;
static PyObject *__pyx_n_s_IMGUI_SLIDER_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_SLIDER_FLAGS_NO_INPUT;
static PyObject *__pyx_n_s_IMGUI_SLIDER_FLAGS_NO_ROUND_TO_F;
static PyObject *__pyx_n_s_IMGUI_SORT_DIRECTION_ASCENDING;
static PyObject *__pyx_n_s_IMGUI_SORT_DIRECTION_DESCENDING;
static PyObject *__pyx_n_s_IMGUI_SORT_DIRECTION_NONE;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_ALPHA;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_BUTTON_TEXT_ALIG;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_CELL_PADDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_CHILD_BORDER_SIZ;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_CHILD_ROUNDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_COUNT;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_DISABLED_ALPHA;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_FRAME_BORDER_SIZ;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_FRAME_PADDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_FRAME_ROUNDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_GRAB_MIN_SIZE;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_GRAB_ROUNDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_INDENT_SPACING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_ITEM_INNER_SPACI;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_ITEM_SPACING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_POPUP_BORDER_SIZ;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_POPUP_ROUNDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_SCROLLBAR_ROUNDI;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_SCROLLBAR_SIZE;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_SELECTABLE_TEXT;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_A;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_B;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_P;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_TAB_ROUNDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_BORDER_SI;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_MIN_SIZE;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_PADDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_ROUNDING;
static PyObject *__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_TITLE_ALI;
static PyObject *__pyx_n_s_IMGUI_TABLE_BG_TARGET_CELL_BG;
static PyObject *__pyx_n_s_IMGUI_TABLE_BG_TARGET_NONE;
static PyObject *__pyx_n_s_IMGUI_TABLE_BG_TARGET_ROW_BG0;
static PyObject *__pyx_n_s_IMGUI_TABLE_BG_TARGET_ROW_BG1;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DISABLE;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT_3;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_ENAB;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_HOVE;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_SORT;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_VISI;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_DIRE;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_REOR;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_RESI;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_3;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_PREFER;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_PREFER_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_STATUS;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_F;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_M;
static PyObject *__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_S;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERSH;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERSV;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNER;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNERH;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNERV;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTER;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTERH;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTERV;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_CONTEXT_MENU_I;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_HIDEABLE;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_BORDERS_IN;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_BORDERS_IN_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_CLIP;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_KEEP_COLUMN;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_PAD_INNERX;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_PAD_OUTERX;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_NO_SAVED_SETTI;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_PAD_OUTERX;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_PRECISE_WIDTHS;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_REORDERABLE;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_RESIZABLE;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_ROW_BG;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SCROLLX;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SCROLLY;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_FIXED_F;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_FIXED_S;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_MASK;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_STRETCH;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_STRETCH_2;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SORTABLE;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SORT_MULTI;
static PyObject *__pyx_n_s_IMGUI_TABLE_FLAGS_SORT_TRISTATE;
static PyObject *__pyx_n_s_IMGUI_TABLE_ROW_FLAGS_HEADERS;
static PyObject *__pyx_n_s_IMGUI_TABLE_ROW_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_AUTO_SELECT;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_2;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_3;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_4;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WIT;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_REORDERABLE;
static PyObject *__pyx_n_s_IMGUI_TAB_BAR_FLAGS_TAB_LIST_POP;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_LEADING;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WI;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_REORDER;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_SET_SELECTE;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_TRAILING;
static PyObject *__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOC;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_BULLET;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_COLLAPSING;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_DEFAULT_OP;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_FRAMED;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_FRAME_PADD;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_LEAF;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NAV_LEFT_J;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NO_AUTO_OP;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NO_TREE_PU;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_OPEN_ON_AR;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_OPEN_ON_DO;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_SELECTED;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL;
static PyObject *__pyx_n_s_IMGUI_TREE_NODE_FLAGS_SPAN_FULL;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_CAN_HOST_OT;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_2;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_MINIMIZED;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_AUTO_MER;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_DECORATI;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_2;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_INPUTS;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_RENDERER;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_OWNED_BY_AP;
static PyObject *__pyx_n_s_IMGUI_VIEWPORT_FLAGS_TOP_MOST;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_R;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_HORIZO;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_USE_WI;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_VERTIC;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_CHILD_MENU;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_CHILD_WINDOW;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_DOCK_NODE_HOS;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_HORIZONTAL_SC;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_MENU_BAR;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_MODAL;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NAV_FLATTENED;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NONE;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_BACKGROUND;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_BRING_TO_F;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_COLLAPSE;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_DECORATION;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_DOCKING;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_A;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_INPUTS;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_MOUSE_INPU;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_MOVE;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_RESIZE;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SAVED_SETT;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SCROLLBAR;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SCROLL_WIT;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_TITLE_BAR;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_POPUP;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_TOOLTIP;
static PyObject *__pyx_n_s_IMGUI_WINDOW_FLAGS_UNSAVED_DOCUM;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_CLOSED;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_NONE;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_ALL;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_2;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_3;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_DEFA;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_LEFT;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_MASK;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_NONE;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_RIGH;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_2;
static PyObject *__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_3;
static PyObject *__pyx_n_s_IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFF;
static PyObject *__pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED;
static PyObject *__pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_2;
static PyObject *__pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_3;
static PyObject *__pyx_n_s_IM_DRAW_LIST_FLAGS_NONE;
static PyObject *__pyx_n_s_IM_FONT_ATLAS_FLAGS_NONE;
static PyObject *__pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_BAKED_LIN;
static PyObject *__pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_MOUSE_CUR;
static PyObject *__pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_POWER_OF;
static PyObject *__pyx_n_s_ImColor;
static PyObject *__pyx_n_s_ImDrawChannel;
static PyObject *__pyx_n_s_ImDrawCmd;
static PyObject *__pyx_n_s_ImDrawCmdHeader;
static PyObject *__pyx_n_s_ImDrawData;
static PyObject *__pyx_n_s_ImDrawList;
static PyObject *__pyx_n_s_ImDrawListSharedData;
static PyObject *__pyx_n_s_ImDrawListSplitter;
static PyObject *__pyx_n_s_ImDrawVert;
static PyObject *__pyx_n_s_ImFont;
static PyObject *__pyx_n_s_ImFontAtlas;
static PyObject *__pyx_n_s_ImFontAtlasCustomRect;
static PyObject *__pyx_n_s_ImFontBuilderIO;
static PyObject *__pyx_n_s_ImFontConfig;
static PyObject *__pyx_n_s_ImFontGlyph;
static PyObject *__pyx_n_s_ImFontGlyphRangesBuilder;
static PyObject *__pyx_n_s_ImGuiContext;
static PyObject *__pyx_n_s_ImGuiIO;
static PyObject *__pyx_n_s_ImGuiKeyData;
static PyObject *__pyx_n_s_ImGuiListClipper;
static PyObject *__pyx_n_s_ImGuiOnceUponAFrame;
static PyObject *__pyx_n_s_ImGuiPayload;
static PyObject *__pyx_n_s_ImGuiPlatformIO;
static PyObject *__pyx_n_s_ImGuiPlatformImeData;
static PyObject *__pyx_n_s_ImGuiPlatformMonitor;
static PyObject *__pyx_n_s_ImGuiStorage;
static PyObject *__pyx_n_s_ImGuiStoragePair;
static PyObject *__pyx_n_s_ImGuiStyle;
static PyObject *__pyx_n_s_ImGuiTableColumnSortSpecs;
static PyObject *__pyx_n_s_ImGuiTableSortSpecs;
static PyObject *__pyx_n_s_ImGuiTextBuffer;
static PyObject *__pyx_n_s_ImGuiTextFilter;
static PyObject *__pyx_n_s_ImGuiTextRange;
static PyObject *__pyx_n_s_ImGuiViewport;
static PyObject *__pyx_n_s_ImGuiWindowClass;
static PyObject *__pyx_n_s_ImVec2;
static PyObject *__pyx_n_s_ImVec4;
static PyObject *__pyx_n_s_ImVector_ImDrawChannel;
static PyObject *__pyx_n_s_ImVector_ImDrawCmd;
static PyObject *__pyx_n_s_ImVector_ImDrawIdx;
static PyObject *__pyx_n_s_ImVector_ImDrawVert;
static PyObject *__pyx_n_s_ImVector_ImFontAtlasCustomRect;
static PyObject *__pyx_n_s_ImVector_ImFontConfig;
static PyObject *__pyx_n_s_ImVector_ImFontGlyph;
static PyObject *__pyx_n_s_ImVector_ImFontPtr;
static PyObject *__pyx_n_s_ImVector_ImGuiPlatformMonitor;
static PyObject *__pyx_n_s_ImVector_ImGuiStoragePair;
static PyObject *__pyx_n_s_ImVector_ImGuiTextRange;
static PyObject *__pyx_n_s_ImVector_ImGuiViewportPtr;
static PyObject *__pyx_n_s_ImVector_ImTextureID;
static PyObject *__pyx_n_s_ImVector_ImU32;
static PyObject *__pyx_n_s_ImVector_ImVec2;
static PyObject *__pyx_n_s_ImVector_ImVec4;
static PyObject *__pyx_n_s_ImVector_ImWchar;
static PyObject *__pyx_n_s_ImVector_char;
static PyObject *__pyx_n_s_ImVector_float;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_u_This_class_cannot_be_instantiate;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Vec2;
static PyObject *__pyx_n_u_Vec2;
static PyObject *__pyx_n_s_Vec4;
static PyObject *__pyx_n_u_Vec4;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_u_b;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_button;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_closable;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_core;
static PyObject *__pyx_kp_s_core_core_pyx;
static PyObject *__pyx_n_s_create_context;
static PyObject *__pyx_n_s_ctx;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_destroy_context;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_down;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_errors;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_fmt;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_kp_u_func_is_not_a_callable_s;
static PyObject *__pyx_n_u_get_clipboard_text_fn;
static PyObject *__pyx_n_s_get_current_context;
static PyObject *__pyx_n_s_get_draw_data;
static PyObject *__pyx_n_s_get_io;
static PyObject *__pyx_n_s_get_version;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_u_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_u_ignore;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_initial_value;
static PyObject *__pyx_n_s_io_clipboard;
static PyObject *__pyx_n_s_is_open;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_namedtuple;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_frame;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_opened;
static PyObject *__pyx_n_s_p_open;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_kp_u_pair_param_must_be_length_of_2;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_platform_render_arg;
static PyObject *__pyx_n_s_py_index_buffer_index_size;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_col_off;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_pos_off;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_size;
static PyObject *__pyx_n_s_py_vertex_buffer_vertex_uv_offs;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_BoolPtr;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_u_quadruple_param_must_be_length_o;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_render;
static PyObject *__pyx_n_s_render_platform_windows_default;
static PyObject *__pyx_n_s_renderer_render_arg;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_kp_s_self__ptr_cannot_be_converted_to;
static PyObject *__pyx_n_u_set_clipboard_text_fn;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shared_font_atlas;
static PyObject *__pyx_n_s_show_demo_window;
static PyObject *__pyx_n_s_show_user_guide;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_platform_windows;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_s_wheel_x;
static PyObject *__pyx_n_s_wheel_y;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_u_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_u_y;
static PyObject *__pyx_n_u_z;
static PyObject *__pyx_pf_4core__py_vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_2_py_vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_4_py_vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_6_py_vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_8_py_index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_4core_7BoolPtr___init__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self, bool __pyx_v_initial_value); /* proto */
static int __pyx_pf_4core_7BoolPtr_2__bool__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_7BoolPtr_4__reduce_cython__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_7BoolPtr_6__setstate_cython__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4core_10begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, struct __pyx_obj_4core_BoolPtr *__pyx_v_p_open, PyObject *__pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4core_12create_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_ImFontAtlas *__pyx_v_shared_font_atlas); /* proto */
static PyObject *__pyx_pf_4core_14destroy_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_ImGuiContext *__pyx_v_ctx); /* proto */
static PyObject *__pyx_pf_4core_16end(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_18get_current_context(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_20get_draw_data(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_22get_io(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_24get_version(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_26new_frame(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_28render(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_30render_platform_windows_default(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_platform_render_arg, PyObject *__pyx_v_renderer_render_arg); /* proto */
static PyObject *__pyx_pf_4core_32show_demo_window(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_closable); /* proto */
static PyObject *__pyx_pf_4core_34show_user_guide(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_4core_36text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fmt); /* proto */
static PyObject *__pyx_pf_4core_38update_platform_windows(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_4core_18ImVector_ImDrawCmd___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImDrawCmd_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImDrawCmd_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_18ImVector_ImDrawIdx___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_4size___get__(struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self); /* proto */
static int __pyx_pf_4core_18ImVector_ImDrawIdx_4size_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_4data___get__(struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self); /* proto */
static int __pyx_pf_4core_18ImVector_ImDrawIdx_4data_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_19ImVector_ImDrawVert___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_4size___get__(struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self); /* proto */
static int __pyx_pf_4core_19ImVector_ImDrawVert_4size_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_4data___get__(struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self); /* proto */
static int __pyx_pf_4core_19ImVector_ImDrawVert_4data_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_15ImVector_ImVec4___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImVector_ImVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImVector_ImVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_20ImVector_ImTextureID___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImVector_ImTextureID_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImVector_ImTextureID_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_15ImVector_ImVec2___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImVector_ImVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImVector_ImVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_22ImVector_ImDrawChannel___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_22ImVector_ImDrawChannel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_22ImVector_ImDrawChannel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_14ImVector_float___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_float *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_14ImVector_float_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_float *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_14ImVector_float_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_float *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_16ImVector_ImWchar___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImWchar *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImVector_ImWchar_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImWchar *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImVector_ImWchar_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImWchar *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_20ImVector_ImFontGlyph___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImVector_ImFontGlyph_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImVector_ImFontGlyph_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_18ImVector_ImFontPtr___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImFontPtr_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImVector_ImFontPtr_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_30ImVector_ImFontAtlasCustomRect___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_30ImVector_ImFontAtlasCustomRect_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_30ImVector_ImFontAtlasCustomRect_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_21ImVector_ImFontConfig___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_21ImVector_ImFontConfig_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_21ImVector_ImFontConfig_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_11ImFontGlyph___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontGlyph_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontGlyph_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_14ImVector_ImU32___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImU32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_14ImVector_ImU32_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImU32 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_14ImVector_ImU32_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImU32 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_12ImGuiKeyData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiKeyData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiKeyData_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiKeyData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiKeyData_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiKeyData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_16ImGuiListClipper___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiListClipper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImGuiListClipper_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiListClipper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImGuiListClipper_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiListClipper *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_19ImGuiOnceUponAFrame___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_19ImGuiOnceUponAFrame_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_19ImGuiOnceUponAFrame_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_12ImGuiPayload___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPayload *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiPayload_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPayload *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiPayload_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPayload *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_29ImVector_ImGuiPlatformMonitor___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_29ImVector_ImGuiPlatformMonitor_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_29ImVector_ImGuiPlatformMonitor_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_25ImVector_ImGuiViewportPtr___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_25ImVector_ImGuiViewportPtr_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_25ImVector_ImGuiViewportPtr_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_25ImVector_ImGuiStoragePair___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_25ImVector_ImGuiStoragePair_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_25ImVector_ImGuiStoragePair_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_16ImGuiStoragePair___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStoragePair *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImGuiStoragePair_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStoragePair *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImGuiStoragePair_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStoragePair *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_25ImGuiTableColumnSortSpecs___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_25ImGuiTableColumnSortSpecs_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_25ImGuiTableColumnSortSpecs_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_19ImGuiTableSortSpecs___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_19ImGuiTableSortSpecs_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_19ImGuiTableSortSpecs_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_13ImVector_char___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_char *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_13ImVector_char_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_char *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_13ImVector_char_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_char *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_23ImVector_ImGuiTextRange___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_23ImVector_ImGuiTextRange_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_23ImVector_ImGuiTextRange_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_14ImGuiTextRange___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextRange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_14ImGuiTextRange_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextRange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_14ImGuiTextRange_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextRange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_16ImGuiWindowClass___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiWindowClass *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImGuiWindowClass_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiWindowClass *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_16ImGuiWindowClass_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiWindowClass *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_6ImVec2___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_6ImVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_6ImVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_6ImVec4___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_6ImVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_6ImVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_7ImColor___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImColor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_7ImColor_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImColor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_7ImColor_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImColor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_13ImDrawChannel___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawChannel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_13ImDrawChannel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawChannel *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_13ImDrawChannel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawChannel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_9ImDrawCmd___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9ImDrawCmd_9clip_rect___get__(struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self); /* proto */
static int __pyx_pf_4core_9ImDrawCmd_9clip_rect_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_9ImDrawCmd_10texture_id___get__(struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self); /* proto */
static int __pyx_pf_4core_9ImDrawCmd_10texture_id_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_9ImDrawCmd_10elem_count___get__(struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self); /* proto */
static int __pyx_pf_4core_9ImDrawCmd_10elem_count_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_9ImDrawCmd_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_9ImDrawCmd_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_15ImDrawCmdHeader___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImDrawCmdHeader_9clip_rect___get__(struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self); /* proto */
static int __pyx_pf_4core_15ImDrawCmdHeader_9clip_rect_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_15ImDrawCmdHeader_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImDrawCmdHeader_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_10ImDrawData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawData_9cmd_lists___get__(struct __pyx_obj_4core_ImDrawData *__pyx_v_self); /* proto */
static int __pyx_pf_4core_10ImDrawData_9cmd_lists_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawData_2scale_clip_rects(struct __pyx_obj_4core_ImDrawData *__pyx_v_self, PyObject *__pyx_v_fb_scale); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawData_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawData_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_18ImDrawListSplitter___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSplitter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImDrawListSplitter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSplitter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_18ImDrawListSplitter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSplitter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_10ImDrawVert___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawVert_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawVert_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_6ImFont___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFont *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_6ImFont_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFont *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_6ImFont_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFont *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_11ImFontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontAtlas_6tex_id___get__(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self); /* proto */
static int __pyx_pf_4core_11ImFontAtlas_6tex_id_2__set__(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_11ImFontAtlas_2destroy(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontAtlas_4clear_tex_data(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontAtlas_6get_tex_data_as_alpha8(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontAtlas_8get_tex_data_as_rgba32(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontAtlas_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_11ImFontAtlas_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_21ImFontAtlasCustomRect___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_21ImFontAtlasCustomRect_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_21ImFontAtlasCustomRect_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_12ImFontConfig___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImFontConfig_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImFontConfig_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_24ImFontGlyphRangesBuilder___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_24ImFontGlyphRangesBuilder_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_24ImFontGlyphRangesBuilder_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_7ImGuiIO___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_12config_flags___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_12config_flags_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_12display_size___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_12display_size_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_10delta_time___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_10delta_time_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_5fonts___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_5fonts_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_25display_framebuffer_scale___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_25display_framebuffer_scale_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_21get_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_21get_clipboard_text_fn_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_21set_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_21set_clipboard_text_fn_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_9framerate___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_9framerate_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_7key_map___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_7key_map_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_9keys_down___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_9keys_down_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_9mouse_pos___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_9mouse_pos_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_10mouse_down___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_10mouse_down_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_11mouse_wheel___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_11mouse_wheel_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_12mouse_wheelh___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_12mouse_wheelh_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_8key_ctrl___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_8key_ctrl_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_9key_shift___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_9key_shift_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_7key_alt___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_7key_alt_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_9key_super___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static int __pyx_pf_4core_7ImGuiIO_9key_super_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_2add_input_character(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_4add_key_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_key, bool __pyx_v_down); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_6add_mouse_button_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_button, PyObject *__pyx_v_down); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_8add_mouse_pos_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_10add_mouse_wheel_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_wheel_x, double __pyx_v_wheel_y); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_7ImGuiIO_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_15ImGuiPlatformIO___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImGuiPlatformIO_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImGuiPlatformIO_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_20ImGuiPlatformImeData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImGuiPlatformImeData_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImGuiPlatformImeData_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_20ImGuiPlatformMonitor___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImGuiPlatformMonitor_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImGuiPlatformMonitor_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_12ImGuiStorage___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStorage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiStorage_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStorage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiStorage_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStorage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_10ImGuiStyle___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImGuiStyle_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStyle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImGuiStyle_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_15ImGuiTextBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImGuiTextBuffer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImGuiTextBuffer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_15ImGuiTextFilter___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextFilter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImGuiTextFilter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextFilter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImGuiTextFilter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextFilter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_13ImGuiViewport___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiViewport *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_13ImGuiViewport_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiViewport *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_13ImGuiViewport_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiViewport *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_10ImDrawList___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawList_10cmd_buffer___get__(struct __pyx_obj_4core_ImDrawList *__pyx_v_self); /* proto */
static int __pyx_pf_4core_10ImDrawList_10cmd_buffer_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawList_10idx_buffer___get__(struct __pyx_obj_4core_ImDrawList *__pyx_v_self); /* proto */
static int __pyx_pf_4core_10ImDrawList_10idx_buffer_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawList_10vtx_buffer___get__(struct __pyx_obj_4core_ImDrawList *__pyx_v_self); /* proto */
static int __pyx_pf_4core_10ImDrawList_10vtx_buffer_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawList_2destroy(struct __pyx_obj_4core_ImDrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawList_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_10ImDrawList_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_20ImDrawListSharedData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSharedData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImDrawListSharedData_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSharedData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_20ImDrawListSharedData_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSharedData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_15ImFontBuilderIO___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontBuilderIO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImFontBuilderIO_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontBuilderIO *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_15ImFontBuilderIO_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontBuilderIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_4core_12ImGuiContext___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiContext *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiContext_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiContext *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4core_12ImGuiContext_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiContext *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_4core_40__pyx_unpickle_BoolPtr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_4core_BoolPtr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImDrawCmd(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImDrawIdx(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImDrawVert(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImTextureID(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImDrawChannel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_float(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImWchar(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImFontGlyph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImFontPtr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImFontAtlasCustomRect(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImFontConfig(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImFontGlyph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImU32(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiKeyData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiListClipper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiOnceUponAFrame(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiPayload(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImGuiPlatformMonitor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImGuiViewportPtr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImGuiStoragePair(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiStoragePair(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiTableColumnSortSpecs(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiTableSortSpecs(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_char(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVector_ImGuiTextRange(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiTextRange(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiWindowClass(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImColor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawChannel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawCmd(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawCmdHeader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawListSplitter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawVert(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImFont(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImFontAtlas(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImFontAtlasCustomRect(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImFontConfig(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImFontGlyphRangesBuilder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiIO(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiPlatformIO(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiPlatformImeData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiPlatformMonitor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiStorage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiStyle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiTextBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiTextFilter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiViewport(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImDrawListSharedData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImFontBuilderIO(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4core_ImGuiContext(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_512;
static PyObject *__pyx_int_81374507;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_138264305;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_229591698;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_slice__134;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__140;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__142;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__150;
static PyObject *__pyx_codeobj__152;
static PyObject *__pyx_codeobj__154;
static PyObject *__pyx_codeobj__156;
static PyObject *__pyx_codeobj__158;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__160;
static PyObject *__pyx_codeobj__162;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__165;
static PyObject *__pyx_codeobj__167;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__177;
/* Late includes */

/* "core.pyx":648
 * Vec4 = namedtuple('Vec4', ['x', 'y', 'z', 'w'])
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

static PyObject *__pyx_f_4core__bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bytes", 0);

  /* "core.pyx":649
 * 
 * cdef bytes _bytes(str text):
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))             # <<<<<<<<<<<<<<
 * 
 * cdef str _from_bytes(bytes text):
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    if (unlikely(__pyx_v_text == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 649, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(__pyx_v_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":648
 * Vec4 = namedtuple('Vec4', ['x', 'y', 'z', 'w'])
 * 
 * cdef bytes _bytes(str text):             # <<<<<<<<<<<<<<
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core._bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":651
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))
 * 
 */

static PyObject *__pyx_f_4core__from_bytes(PyObject *__pyx_v_text) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_bytes", 0);

  /* "core.pyx":652
 * 
 * cdef str _from_bytes(bytes text):
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (((PY_MAJOR_VERSION < 3) != 0)) {
    __Pyx_INCREF(__pyx_v_text);
    __pyx_t_1 = __pyx_v_text;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_errors, __pyx_n_u_ignore) < 0) __PYX_ERR(0, 652, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":651
 *     return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))
 * 
 * cdef str _from_bytes(bytes text):             # <<<<<<<<<<<<<<
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core._from_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":655
 * 
 * 
 * cdef _cast_ImVec2_tuple(ccimgui.ImVec2 vec):             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

static PyObject *__pyx_f_4core__cast_ImVec2_tuple(ImVec2 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec2_tuple", 0);

  /* "core.pyx":656
 * 
 * cdef _cast_ImVec2_tuple(ccimgui.ImVec2 vec):
 *     return Vec2(vec.x, vec.y)             # <<<<<<<<<<<<<<
 * 
 * cdef ccimgui.ImVec2 _cast_tuple_ImVec2(pair) except +:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":655
 * 
 * 
 * cdef _cast_ImVec2_tuple(ccimgui.ImVec2 vec):             # <<<<<<<<<<<<<<
 *     return Vec2(vec.x, vec.y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("core._cast_ImVec2_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":658
 *     return Vec2(vec.x, vec.y)
 * 
 * cdef ccimgui.ImVec2 _cast_tuple_ImVec2(pair) except +:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec2 vec
 *     if len(pair) != 2:
 */

static ImVec2 __pyx_f_4core__cast_tuple_ImVec2(PyObject *__pyx_v_pair) {
  ImVec2 __pyx_v_vec;
  ImVec2 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  float __pyx_t_7;
  float __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec2", 0);

  /* "core.pyx":660
 * cdef ccimgui.ImVec2 _cast_tuple_ImVec2(pair) except +:
 *     cdef ccimgui.ImVec2 vec
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError('pair param must be length of 2')
 *     vec.x, vec.y = pair
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_pair); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "core.pyx":661
 *     cdef ccimgui.ImVec2 vec
 *     if len(pair) != 2:
 *         raise ValueError('pair param must be length of 2')             # <<<<<<<<<<<<<<
 *     vec.x, vec.y = pair
 *     return vec
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 661, __pyx_L1_error)

    /* "core.pyx":660
 * cdef ccimgui.ImVec2 _cast_tuple_ImVec2(pair) except +:
 *     cdef ccimgui.ImVec2 vec
 *     if len(pair) != 2:             # <<<<<<<<<<<<<<
 *         raise ValueError('pair param must be length of 2')
 *     vec.x, vec.y = pair
 */
  }

  /* "core.pyx":662
 *     if len(pair) != 2:
 *         raise ValueError('pair param must be length of 2')
 *     vec.x, vec.y = pair             # <<<<<<<<<<<<<<
 *     return vec
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_pair))) || (PyList_CheckExact(__pyx_v_pair))) {
    PyObject* sequence = __pyx_v_pair;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 662, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_v_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 662, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 662, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_vec.x = __pyx_t_7;
  __pyx_v_vec.y = __pyx_t_8;

  /* "core.pyx":663
 *         raise ValueError('pair param must be length of 2')
 *     vec.x, vec.y = pair
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * cdef _cast_ImVec4_tuple(ccimgui.ImVec4 vec):
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "core.pyx":658
 *     return Vec2(vec.x, vec.y)
 * 
 * cdef ccimgui.ImVec2 _cast_tuple_ImVec2(pair) except +:             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec2 vec
 *     if len(pair) != 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core._cast_tuple_ImVec2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":665
 *     return vec
 * 
 * cdef _cast_ImVec4_tuple(ccimgui.ImVec4 vec):             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

static PyObject *__pyx_f_4core__cast_ImVec4_tuple(ImVec4 __pyx_v_vec) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_ImVec4_tuple", 0);

  /* "core.pyx":666
 * 
 * cdef _cast_ImVec4_tuple(ccimgui.ImVec4 vec):
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)             # <<<<<<<<<<<<<<
 * 
 * cdef ccimgui.ImVec4 _cast_tuple_ImVec4(quadruple):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Vec4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_vec.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec.z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec.w); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":665
 *     return vec
 * 
 * cdef _cast_ImVec4_tuple(ccimgui.ImVec4 vec):             # <<<<<<<<<<<<<<
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core._cast_ImVec4_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":668
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 * cdef ccimgui.ImVec4 _cast_tuple_ImVec4(quadruple):             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec4 vec
 *     if len(quadruple) != 4:
 */

static ImVec4 __pyx_f_4core__cast_tuple_ImVec4(PyObject *__pyx_v_quadruple) {
  ImVec4 __pyx_v_vec;
  ImVec4 __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_cast_tuple_ImVec4", 0);

  /* "core.pyx":670
 * cdef ccimgui.ImVec4 _cast_tuple_ImVec4(quadruple):
 *     cdef ccimgui.ImVec4 vec
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError('quadruple param must be length of 4')
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_quadruple); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 670, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "core.pyx":671
 *     cdef ccimgui.ImVec4 vec
 *     if len(quadruple) != 4:
 *         raise ValueError('quadruple param must be length of 4')             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 671, __pyx_L1_error)

    /* "core.pyx":670
 * cdef ccimgui.ImVec4 _cast_tuple_ImVec4(quadruple):
 *     cdef ccimgui.ImVec4 vec
 *     if len(quadruple) != 4:             # <<<<<<<<<<<<<<
 *         raise ValueError('quadruple param must be length of 4')
 * 
 */
  }

  /* "core.pyx":673
 *         raise ValueError('quadruple param must be length of 4')
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple             # <<<<<<<<<<<<<<
 *     return vec
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_quadruple))) || (PyList_CheckExact(__pyx_v_quadruple))) {
    PyObject* sequence = __pyx_v_quadruple;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 673, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 673, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_3,&__pyx_t_4,&__pyx_t_5,&__pyx_t_6};
    __pyx_t_7 = PyObject_GetIter(__pyx_v_quadruple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_8(__pyx_t_7); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 4) < 0) __PYX_ERR(0, 673, __pyx_L1_error)
    __pyx_t_8 = NULL;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 673, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_6); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_vec.x = __pyx_t_9;
  __pyx_v_vec.y = __pyx_t_10;
  __pyx_v_vec.z = __pyx_t_11;
  __pyx_v_vec.w = __pyx_t_12;

  /* "core.pyx":674
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_vec;
  goto __pyx_L0;

  /* "core.pyx":668
 *     return Vec4(vec.x, vec.y, vec.z, vec.w)
 * 
 * cdef ccimgui.ImVec4 _cast_tuple_ImVec4(quadruple):             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImVec4 vec
 *     if len(quadruple) != 4:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("core._cast_tuple_ImVec4", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":677
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_1_py_vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core__py_vertex_buffer_vertex_pos_offset[] = "_py_vertex_buffer_vertex_pos_offset()";
static PyMethodDef __pyx_mdef_4core_1_py_vertex_buffer_vertex_pos_offset = {"_py_vertex_buffer_vertex_pos_offset", (PyCFunction)__pyx_pw_4core_1_py_vertex_buffer_vertex_pos_offset, METH_NOARGS, __pyx_doc_4core__py_vertex_buffer_vertex_pos_offset};
static PyObject *__pyx_pw_4core_1_py_vertex_buffer_vertex_pos_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_pos_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_4core__py_vertex_buffer_vertex_pos_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core__py_vertex_buffer_vertex_pos_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_pos_offset", 0);

  /* "core.pyx":678
 * 
 * def _py_vertex_buffer_vertex_pos_offset():
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_uv_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->pos)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":677
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_pos_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":680
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_3_py_vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_2_py_vertex_buffer_vertex_uv_offset[] = "_py_vertex_buffer_vertex_uv_offset()";
static PyMethodDef __pyx_mdef_4core_3_py_vertex_buffer_vertex_uv_offset = {"_py_vertex_buffer_vertex_uv_offset", (PyCFunction)__pyx_pw_4core_3_py_vertex_buffer_vertex_uv_offset, METH_NOARGS, __pyx_doc_4core_2_py_vertex_buffer_vertex_uv_offset};
static PyObject *__pyx_pw_4core_3_py_vertex_buffer_vertex_uv_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_uv_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_2_py_vertex_buffer_vertex_uv_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_2_py_vertex_buffer_vertex_uv_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_uv_offset", 0);

  /* "core.pyx":681
 * 
 * def _py_vertex_buffer_vertex_uv_offset():
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_col_offset():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->uv)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":680
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_uv_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":683
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_5_py_vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_4_py_vertex_buffer_vertex_col_offset[] = "_py_vertex_buffer_vertex_col_offset()";
static PyMethodDef __pyx_mdef_4core_5_py_vertex_buffer_vertex_col_offset = {"_py_vertex_buffer_vertex_col_offset", (PyCFunction)__pyx_pw_4core_5_py_vertex_buffer_vertex_col_offset, METH_NOARGS, __pyx_doc_4core_4_py_vertex_buffer_vertex_col_offset};
static PyObject *__pyx_pw_4core_5_py_vertex_buffer_vertex_col_offset(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_col_offset (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_4_py_vertex_buffer_vertex_col_offset(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_4_py_vertex_buffer_vertex_col_offset(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_col_offset", 0);

  /* "core.pyx":684
 * 
 * def _py_vertex_buffer_vertex_col_offset():
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col             # <<<<<<<<<<<<<<
 * 
 * def _py_vertex_buffer_vertex_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)((size_t)(&((ImDrawVert *)NULL)->col)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":683
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_col_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":686
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7_py_vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_6_py_vertex_buffer_vertex_size[] = "_py_vertex_buffer_vertex_size()";
static PyMethodDef __pyx_mdef_4core_7_py_vertex_buffer_vertex_size = {"_py_vertex_buffer_vertex_size", (PyCFunction)__pyx_pw_4core_7_py_vertex_buffer_vertex_size, METH_NOARGS, __pyx_doc_4core_6_py_vertex_buffer_vertex_size};
static PyObject *__pyx_pw_4core_7_py_vertex_buffer_vertex_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6_py_vertex_buffer_vertex_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6_py_vertex_buffer_vertex_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_vertex_buffer_vertex_size", 0);

  /* "core.pyx":687
 * 
 * def _py_vertex_buffer_vertex_size():
 *     return sizeof(ccimgui.ImDrawVert)             # <<<<<<<<<<<<<<
 * 
 * def _py_index_buffer_index_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawVert))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":686
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_vertex_buffer_vertex_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":689
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawIdx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9_py_index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_8_py_index_buffer_index_size[] = "_py_index_buffer_index_size()";
static PyMethodDef __pyx_mdef_4core_9_py_index_buffer_index_size = {"_py_index_buffer_index_size", (PyCFunction)__pyx_pw_4core_9_py_index_buffer_index_size, METH_NOARGS, __pyx_doc_4core_8_py_index_buffer_index_size};
static PyObject *__pyx_pw_4core_9_py_index_buffer_index_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_py_index_buffer_index_size (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_8_py_index_buffer_index_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_8_py_index_buffer_index_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_py_index_buffer_index_size", 0);

  /* "core.pyx":690
 * 
 * def _py_index_buffer_index_size():
 *     return sizeof(ccimgui.ImDrawIdx)             # <<<<<<<<<<<<<<
 * 
 * cdef class BoolPtr:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(ImDrawIdx))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":689
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawIdx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core._py_index_buffer_index_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":695
 *     cdef bool ptr
 * 
 *     def __init__(self, initial_value: bool):             # <<<<<<<<<<<<<<
 *         self.ptr: bool = initial_value
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_7BoolPtr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_7BoolPtr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_initial_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_initial_value,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initial_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 695, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_initial_value = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_initial_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 695, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.BoolPtr.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7BoolPtr___init__(((struct __pyx_obj_4core_BoolPtr *)__pyx_v_self), __pyx_v_initial_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7BoolPtr___init__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self, bool __pyx_v_initial_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":696
 * 
 *     def __init__(self, initial_value: bool):
 *         self.ptr: bool = initial_value             # <<<<<<<<<<<<<<
 * 
 *     def __bool__(self):
 */
  __pyx_v_self->ptr = __pyx_v_initial_value;

  /* "core.pyx":695
 *     cdef bool ptr
 * 
 *     def __init__(self, initial_value: bool):             # <<<<<<<<<<<<<<
 *         self.ptr: bool = initial_value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":698
 *         self.ptr: bool = initial_value
 * 
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         return self.ptr
 * 
 */

/* Python wrapper */
static int __pyx_pw_4core_7BoolPtr_3__bool__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_4core_7BoolPtr_3__bool__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7BoolPtr_2__bool__(((struct __pyx_obj_4core_BoolPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7BoolPtr_2__bool__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__bool__", 0);

  /* "core.pyx":699
 * 
 *     def __bool__(self):
 *         return self.ptr             # <<<<<<<<<<<<<<
 * 
 * # [End Constant Functions]
 */
  __pyx_r = __pyx_v_self->ptr;
  goto __pyx_L0;

  /* "core.pyx":698
 *         self.ptr: bool = initial_value
 * 
 *     def __bool__(self):             # <<<<<<<<<<<<<<
 *         return self.ptr
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7BoolPtr_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_7BoolPtr_4__reduce_cython__[] = "BoolPtr.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_7BoolPtr_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7BoolPtr_4__reduce_cython__(((struct __pyx_obj_4core_BoolPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7BoolPtr_4__reduce_cython__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.ptr,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->ptr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.ptr,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self.ptr,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.ptr,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_BoolPtr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81374507);
    __Pyx_GIVEREF(__pyx_int_81374507);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_81374507);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, None), state
 *     else:
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BoolPtr__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_BoolPtr); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_81374507);
    __Pyx_GIVEREF(__pyx_int_81374507);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_81374507);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.BoolPtr.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BoolPtr__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7BoolPtr_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_7BoolPtr_6__setstate_cython__[] = "BoolPtr.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_7BoolPtr_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7BoolPtr_6__setstate_cython__(((struct __pyx_obj_4core_BoolPtr *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7BoolPtr_6__setstate_cython__(struct __pyx_obj_4core_BoolPtr *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BoolPtr__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4core___pyx_unpickle_BoolPtr__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BoolPtr, (type(self), 0x4d9ad2b, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BoolPtr__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.BoolPtr.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":746
 * # ?active(True)
 * # ?returns(Tuple[bool, bool])
 * def begin(name: str, p_open: BoolPtr, flags: int=0):             # <<<<<<<<<<<<<<
 *     cdef bool is_open = True
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_10begin[] = "begin(unicode name: str, BoolPtr p_open: BoolPtr, flags: int = 0)";
static PyMethodDef __pyx_mdef_4core_11begin = {"begin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_11begin, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_10begin};
static PyObject *__pyx_pw_4core_11begin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  struct __pyx_obj_4core_BoolPtr *__pyx_v_p_open = 0;
  PyObject *__pyx_v_flags = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_p_open,&__pyx_n_s_flags,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_open)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("begin", 0, 2, 3, 1); __PYX_ERR(0, 746, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "begin") < 0)) __PYX_ERR(0, 746, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = ((PyObject*)values[0]);
    __pyx_v_p_open = ((struct __pyx_obj_4core_BoolPtr *)values[1]);
    __pyx_v_flags = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 746, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 746, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_open), __pyx_ptype_4core_BoolPtr, 1, "p_open", 0))) __PYX_ERR(0, 746, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_10begin(__pyx_self, __pyx_v_name, __pyx_v_p_open, __pyx_v_flags);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10begin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, struct __pyx_obj_4core_BoolPtr *__pyx_v_p_open, PyObject *__pyx_v_flags) {
  bool __pyx_v_is_open;
  bool __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  ImGuiWindowFlags __pyx_t_3;
  bool __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin", 0);

  /* "core.pyx":747
 * # ?returns(Tuple[bool, bool])
 * def begin(name: str, p_open: BoolPtr, flags: int=0):
 *     cdef bool is_open = True             # <<<<<<<<<<<<<<
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)
 *     p_open.ptr = is_open
 */
  __pyx_v_is_open = 1;

  /* "core.pyx":748
 * def begin(name: str, p_open: BoolPtr, flags: int=0):
 *     cdef bool is_open = True
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)             # <<<<<<<<<<<<<<
 *     p_open.ptr = is_open
 *     return res
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 748, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_ImGuiWindowFlags(__pyx_v_flags); if (unlikely((__pyx_t_3 == ((ImGuiWindowFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L1_error)
  try {
    __pyx_t_4 = igBegin(__pyx_t_2, (&__pyx_v_is_open), __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 748, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_res = __pyx_t_4;

  /* "core.pyx":749
 *     cdef bool is_open = True
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)
 *     p_open.ptr = is_open             # <<<<<<<<<<<<<<
 *     return res
 * # [End Function]
 */
  __pyx_v_p_open->ptr = __pyx_v_is_open;

  /* "core.pyx":750
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)
 *     p_open.ptr = is_open
 *     return res             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_res); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":746
 * # ?active(True)
 * # ?returns(Tuple[bool, bool])
 * def begin(name: str, p_open: BoolPtr, flags: int=0):             # <<<<<<<<<<<<<<
 *     cdef bool is_open = True
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.begin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1280
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def create_context(shared_font_atlas: ImFontAtlas=None):             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res
 *     if shared_font_atlas is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13create_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_12create_context[] = "create_context(ImFontAtlas shared_font_atlas: ImFontAtlas = None)";
static PyMethodDef __pyx_mdef_4core_13create_context = {"create_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_13create_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_12create_context};
static PyObject *__pyx_pw_4core_13create_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core_ImFontAtlas *__pyx_v_shared_font_atlas = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_context (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shared_font_atlas,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core_ImFontAtlas *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shared_font_atlas);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_context") < 0)) __PYX_ERR(0, 1280, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shared_font_atlas = ((struct __pyx_obj_4core_ImFontAtlas *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_context", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.create_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shared_font_atlas), __pyx_ptype_4core_ImFontAtlas, 1, "shared_font_atlas", 0))) __PYX_ERR(0, 1280, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_12create_context(__pyx_self, __pyx_v_shared_font_atlas);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12create_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_ImFontAtlas *__pyx_v_shared_font_atlas) {
  ImGuiContext *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  ImGuiContext *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_context", 0);

  /* "core.pyx":1282
 * def create_context(shared_font_atlas: ImFontAtlas=None):
 *     cdef ccimgui.ImGuiContext* res
 *     if shared_font_atlas is None:             # <<<<<<<<<<<<<<
 *         res = ccimgui.igCreateContext(NULL)
 *     else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_shared_font_atlas) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":1283
 *     cdef ccimgui.ImGuiContext* res
 *     if shared_font_atlas is None:
 *         res = ccimgui.igCreateContext(NULL)             # <<<<<<<<<<<<<<
 *     else:
 *         res = ccimgui.igCreateContext(shared_font_atlas._ptr)
 */
    try {
      __pyx_t_3 = igCreateContext(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1283, __pyx_L1_error)
    }
    __pyx_v_res = __pyx_t_3;

    /* "core.pyx":1282
 * def create_context(shared_font_atlas: ImFontAtlas=None):
 *     cdef ccimgui.ImGuiContext* res
 *     if shared_font_atlas is None:             # <<<<<<<<<<<<<<
 *         res = ccimgui.igCreateContext(NULL)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":1285
 *         res = ccimgui.igCreateContext(NULL)
 *     else:
 *         res = ccimgui.igCreateContext(shared_font_atlas._ptr)             # <<<<<<<<<<<<<<
 * 
 *     return ImGuiContext.from_ptr(res)
 */
  /*else*/ {
    try {
      __pyx_t_3 = igCreateContext(__pyx_v_shared_font_atlas->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1285, __pyx_L1_error)
    }
    __pyx_v_res = __pyx_t_3;
  }
  __pyx_L3:;

  /* "core.pyx":1287
 *         res = ccimgui.igCreateContext(shared_font_atlas._ptr)
 * 
 *     return ImGuiContext.from_ptr(res)             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)__pyx_f_4core_12ImGuiContext_from_ptr(__pyx_v_res)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "core.pyx":1280
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def create_context(shared_font_atlas: ImFontAtlas=None):             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res
 *     if shared_font_atlas is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.create_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1322
 * # ?active(True)
 * # ?returns(None)
 * def destroy_context(ctx: ImGuiContext=None):             # <<<<<<<<<<<<<<
 *     """
 *     Null = destroy current context
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15destroy_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_14destroy_context[] = "destroy_context(ImGuiContext ctx: ImGuiContext = None)\n\n    Null = destroy current context\n    ";
static PyMethodDef __pyx_mdef_4core_15destroy_context = {"destroy_context", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_15destroy_context, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_14destroy_context};
static PyObject *__pyx_pw_4core_15destroy_context(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4core_ImGuiContext *__pyx_v_ctx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy_context (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ctx,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_4core_ImGuiContext *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ctx);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "destroy_context") < 0)) __PYX_ERR(0, 1322, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_ctx = ((struct __pyx_obj_4core_ImGuiContext *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("destroy_context", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.destroy_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ctx), __pyx_ptype_4core_ImGuiContext, 1, "ctx", 0))) __PYX_ERR(0, 1322, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_14destroy_context(__pyx_self, __pyx_v_ctx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14destroy_context(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4core_ImGuiContext *__pyx_v_ctx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy_context", 0);

  /* "core.pyx":1326
 *     Null = destroy current context
 *     """
 *     if ctx is not None:             # <<<<<<<<<<<<<<
 *         ccimgui.igDestroyContext(ctx._ptr)
 * # [End Function]
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_ctx) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "core.pyx":1327
 *     """
 *     if ctx is not None:
 *         ccimgui.igDestroyContext(ctx._ptr)             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
    try {
      igDestroyContext(__pyx_v_ctx->_ptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1327, __pyx_L1_error)
    }

    /* "core.pyx":1326
 *     Null = destroy current context
 *     """
 *     if ctx is not None:             # <<<<<<<<<<<<<<
 *         ccimgui.igDestroyContext(ctx._ptr)
 * # [End Function]
 */
  }

  /* "core.pyx":1322
 * # ?active(True)
 * # ?returns(None)
 * def destroy_context(ctx: ImGuiContext=None):             # <<<<<<<<<<<<<<
 *     """
 *     Null = destroy current context
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.destroy_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1600
 * # ?active(True)
 * # ?returns(None)
 * def end():             # <<<<<<<<<<<<<<
 *     ccimgui.igEnd()
 * # [End Function]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_17end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_16end[] = "end()";
static PyMethodDef __pyx_mdef_4core_17end = {"end", (PyCFunction)__pyx_pw_4core_17end, METH_NOARGS, __pyx_doc_4core_16end};
static PyObject *__pyx_pw_4core_17end(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16end(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16end(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end", 0);

  /* "core.pyx":1601
 * # ?returns(None)
 * def end():
 *     ccimgui.igEnd()             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  try {
    igEnd();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1601, __pyx_L1_error)
  }

  /* "core.pyx":1600
 * # ?active(True)
 * # ?returns(None)
 * def end():             # <<<<<<<<<<<<<<
 *     ccimgui.igEnd()
 * # [End Function]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.end", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":1970
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
 *     return ImGuiContext.from_ptr(res)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19get_current_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_18get_current_context[] = "get_current_context()";
static PyMethodDef __pyx_mdef_4core_19get_current_context = {"get_current_context", (PyCFunction)__pyx_pw_4core_19get_current_context, METH_NOARGS, __pyx_doc_4core_18get_current_context};
static PyObject *__pyx_pw_4core_19get_current_context(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_context (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18get_current_context(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18get_current_context(CYTHON_UNUSED PyObject *__pyx_self) {
  ImGuiContext *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiContext *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_current_context", 0);

  /* "core.pyx":1971
 * # ?returns(ImGuiContext)
 * def get_current_context():
 *     cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()             # <<<<<<<<<<<<<<
 *     return ImGuiContext.from_ptr(res)
 * # [End Function]
 */
  try {
    __pyx_t_1 = igGetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1971, __pyx_L1_error)
  }
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":1972
 * def get_current_context():
 *     cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
 *     return ImGuiContext.from_ptr(res)             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_4core_12ImGuiContext_from_ptr(__pyx_v_res)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":1970
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
 *     return ImGuiContext.from_ptr(res)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_current_context", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2056
 * # ?active(True)
 * # ?returns(ImDrawData)
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """
 *     Valid after render() and until the next call to newframe(). this
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_21get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_20get_draw_data[] = "get_draw_data()\n\n    Valid after render() and until the next call to newframe(). this\n    is what you have to render.\n    ";
static PyMethodDef __pyx_mdef_4core_21get_draw_data = {"get_draw_data", (PyCFunction)__pyx_pw_4core_21get_draw_data, METH_NOARGS, __pyx_doc_4core_20get_draw_data};
static PyObject *__pyx_pw_4core_21get_draw_data(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_draw_data (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20get_draw_data(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20get_draw_data(CYTHON_UNUSED PyObject *__pyx_self) {
  ImDrawData *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImDrawData *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_draw_data", 0);

  /* "core.pyx":2061
 *     is what you have to render.
 *     """
 *     cdef ccimgui.ImDrawData* res = ccimgui.igGetDrawData()             # <<<<<<<<<<<<<<
 *     return ImDrawData.from_ptr(res)
 * # [End Function]
 */
  try {
    __pyx_t_1 = igGetDrawData();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2061, __pyx_L1_error)
  }
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":2062
 *     """
 *     cdef ccimgui.ImDrawData* res = ccimgui.igGetDrawData()
 *     return ImDrawData.from_ptr(res)             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_4core_10ImDrawData_from_ptr(__pyx_v_res)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2056
 * # ?active(True)
 * # ?returns(ImDrawData)
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """
 *     Valid after render() and until the next call to newframe(). this
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_draw_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2214
 * # ?active(True)
 * # ?returns(ImGuiIO)
 * def get_io():             # <<<<<<<<<<<<<<
 *     """
 *     Access the io structure (mouse/keyboard/gamepad inputs, time,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_23get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_22get_io[] = "get_io()\n\n    Access the io structure (mouse/keyboard/gamepad inputs, time,\n    various configuration options/flags)\n    ";
static PyMethodDef __pyx_mdef_4core_23get_io = {"get_io", (PyCFunction)__pyx_pw_4core_23get_io, METH_NOARGS, __pyx_doc_4core_22get_io};
static PyObject *__pyx_pw_4core_23get_io(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_io (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_22get_io(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_22get_io(CYTHON_UNUSED PyObject *__pyx_self) {
  ImGuiIO *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiIO *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_io", 0);

  /* "core.pyx":2219
 *     various configuration options/flags)
 *     """
 *     cdef ccimgui.ImGuiIO* res = ccimgui.igGetIO()             # <<<<<<<<<<<<<<
 *     return ImGuiIO.from_ptr(res)
 * # [End Function]
 */
  try {
    __pyx_t_1 = igGetIO();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2219, __pyx_L1_error)
  }
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":2220
 *     """
 *     cdef ccimgui.ImGuiIO* res = ccimgui.igGetIO()
 *     return ImGuiIO.from_ptr(res)             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_4core_7ImGuiIO_from_ptr(__pyx_v_res)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":2214
 * # ?active(True)
 * # ?returns(ImGuiIO)
 * def get_io():             # <<<<<<<<<<<<<<
 *     """
 *     Access the io structure (mouse/keyboard/gamepad inputs, time,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.get_io", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":2553
 * # ?active(True)
 * # ?returns(str)
 * def get_version():             # <<<<<<<<<<<<<<
 *     """
 *     Get the compiled version string e.g. 1.80 wip (essentially the
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_24get_version[] = "get_version()\n\n    Get the compiled version string e.g. 1.80 wip (essentially the\n    value for imgui_version from the compiled version of imgui.cpp)\n    ";
static PyMethodDef __pyx_mdef_4core_25get_version = {"get_version", (PyCFunction)__pyx_pw_4core_25get_version, METH_NOARGS, __pyx_doc_4core_24get_version};
static PyObject *__pyx_pw_4core_25get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_version (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_24get_version(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_24get_version(CYTHON_UNUSED PyObject *__pyx_self) {
  char const *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_version", 0);

  /* "core.pyx":2558
 *     value for imgui_version from the compiled version of imgui.cpp)
 *     """
 *     cdef const char* res = ccimgui.igGetVersion()             # <<<<<<<<<<<<<<
 *     return _from_bytes(res)
 * # [End Function]
 */
  try {
    __pyx_t_1 = igGetVersion();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2558, __pyx_L1_error)
  }
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":2559
 *     """
 *     cdef const char* res = ccimgui.igGetVersion()
 *     return _from_bytes(res)             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_4core__from_bytes(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":2553
 * # ?active(True)
 * # ?returns(str)
 * def get_version():             # <<<<<<<<<<<<<<
 *     """
 *     Get the compiled version string e.g. 1.80 wip (essentially the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.get_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3472
 * # ?active(True)
 * # ?returns(None)
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """
 *     Start a new dear imgui frame, you can submit any command from
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_27new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_26new_frame[] = "new_frame()\n\n    Start a new dear imgui frame, you can submit any command from\n    this point until render()/endframe().\n    ";
static PyMethodDef __pyx_mdef_4core_27new_frame = {"new_frame", (PyCFunction)__pyx_pw_4core_27new_frame, METH_NOARGS, __pyx_doc_4core_26new_frame};
static PyObject *__pyx_pw_4core_27new_frame(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_frame (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_26new_frame(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_26new_frame(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_frame", 0);

  /* "core.pyx":3477
 *     this point until render()/endframe().
 *     """
 *     ccimgui.igNewFrame()             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  try {
    igNewFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3477, __pyx_L1_error)
  }

  /* "core.pyx":3472
 * # ?active(True)
 * # ?returns(None)
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """
 *     Start a new dear imgui frame, you can submit any command from
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.new_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3882
 * # ?active(True)
 * # ?returns(None)
 * def render():             # <<<<<<<<<<<<<<
 *     """
 *     Ends the dear imgui frame, finalize the draw data. you can then
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_29render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_28render[] = "render()\n\n    Ends the dear imgui frame, finalize the draw data. you can then\n    get call getdrawdata().\n    ";
static PyMethodDef __pyx_mdef_4core_29render = {"render", (PyCFunction)__pyx_pw_4core_29render, METH_NOARGS, __pyx_doc_4core_28render};
static PyObject *__pyx_pw_4core_29render(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_28render(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_28render(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("render", 0);

  /* "core.pyx":3887
 *     get call getdrawdata().
 *     """
 *     ccimgui.igRender()             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  try {
    igRender();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3887, __pyx_L1_error)
  }

  /* "core.pyx":3882
 * # ?active(True)
 * # ?returns(None)
 * def render():             # <<<<<<<<<<<<<<
 *     """
 *     Ends the dear imgui frame, finalize the draw data. you can then
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":3894
 * # ?active(True)
 * # ?returns(None)
 * def render_platform_windows_default(platform_render_arg: Any=None, renderer_render_arg: Any=None):             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call renderwindow/swapbuffers platform
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_31render_platform_windows_default(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_30render_platform_windows_default[] = "render_platform_windows_default(platform_render_arg: Any = None, renderer_render_arg: Any = None)\n\n    Call in main loop. will call renderwindow/swapbuffers platform\n    functions for each secondary viewport which doesn't have the\n    imguiviewportflags_minimized flag set. may be reimplemented\n    by user for custom rendering needs.\n    ";
static PyMethodDef __pyx_mdef_4core_31render_platform_windows_default = {"render_platform_windows_default", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_31render_platform_windows_default, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_30render_platform_windows_default};
static PyObject *__pyx_pw_4core_31render_platform_windows_default(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_platform_render_arg = 0;
  PyObject *__pyx_v_renderer_render_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render_platform_windows_default (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_platform_render_arg,&__pyx_n_s_renderer_render_arg,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_platform_render_arg);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_renderer_render_arg);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "render_platform_windows_default") < 0)) __PYX_ERR(0, 3894, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_platform_render_arg = values[0];
    __pyx_v_renderer_render_arg = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("render_platform_windows_default", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3894, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.render_platform_windows_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_30render_platform_windows_default(__pyx_self, __pyx_v_platform_render_arg, __pyx_v_renderer_render_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_30render_platform_windows_default(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_platform_render_arg, PyObject *__pyx_v_renderer_render_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  int __pyx_t_2;
  void *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("render_platform_windows_default", 0);

  /* "core.pyx":3902
 *     """
 *     ccimgui.igRenderPlatformWindowsDefault(
 *         NULL if platform_render_arg is None else <void*>platform_render_arg,             # <<<<<<<<<<<<<<
 *         NULL if renderer_render_arg is None else <void*>renderer_render_arg
 *     )
 */
  __pyx_t_2 = (__pyx_v_platform_render_arg == Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_1 = NULL;
  } else {
    __pyx_t_1 = ((void *)__pyx_v_platform_render_arg);
  }

  /* "core.pyx":3903
 *     ccimgui.igRenderPlatformWindowsDefault(
 *         NULL if platform_render_arg is None else <void*>platform_render_arg,
 *         NULL if renderer_render_arg is None else <void*>renderer_render_arg             # <<<<<<<<<<<<<<
 *     )
 * # [End Function]
 */
  __pyx_t_2 = (__pyx_v_renderer_render_arg == Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_3 = ((void *)__pyx_v_renderer_render_arg);
  }

  /* "core.pyx":3901
 *     by user for custom rendering needs.
 *     """
 *     ccimgui.igRenderPlatformWindowsDefault(             # <<<<<<<<<<<<<<
 *         NULL if platform_render_arg is None else <void*>platform_render_arg,
 *         NULL if renderer_render_arg is None else <void*>renderer_render_arg
 */
  try {
    igRenderPlatformWindowsDefault(__pyx_t_1, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3901, __pyx_L1_error)
  }

  /* "core.pyx":3894
 * # ?active(True)
 * # ?returns(None)
 * def render_platform_windows_default(platform_render_arg: Any=None, renderer_render_arg: Any=None):             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call renderwindow/swapbuffers platform
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.render_platform_windows_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4599
 * # ?active(True)
 * # ?returns(None)
 * def show_demo_window(closable: bool=False):             # <<<<<<<<<<<<<<
 *     """
 *     Create demo window. demonstrate most imgui features. call this
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_33show_demo_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_32show_demo_window[] = "show_demo_window(bool closable: bool = False)\n\n    Create demo window. demonstrate most imgui features. call this\n    to learn about the library! try to make it always available\n    in your application!\n    ";
static PyMethodDef __pyx_mdef_4core_33show_demo_window = {"show_demo_window", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_33show_demo_window, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_32show_demo_window};
static PyObject *__pyx_pw_4core_33show_demo_window(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_closable;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_demo_window (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_closable,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_closable);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "show_demo_window") < 0)) __PYX_ERR(0, 4599, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_closable = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_closable == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 4599, __pyx_L3_error)
    } else {
      __pyx_v_closable = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("show_demo_window", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4599, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.show_demo_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_32show_demo_window(__pyx_self, __pyx_v_closable);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_32show_demo_window(CYTHON_UNUSED PyObject *__pyx_self, bool __pyx_v_closable) {
  bool __pyx_v_opened;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_demo_window", 0);

  /* "core.pyx":4605
 *     in your application!
 *     """
 *     cdef bool opened = True             # <<<<<<<<<<<<<<
 *     if closable:
 *         ccimgui.igShowDemoWindow(&opened)
 */
  __pyx_v_opened = 1;

  /* "core.pyx":4606
 *     """
 *     cdef bool opened = True
 *     if closable:             # <<<<<<<<<<<<<<
 *         ccimgui.igShowDemoWindow(&opened)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_closable != 0);
  if (__pyx_t_1) {

    /* "core.pyx":4607
 *     cdef bool opened = True
 *     if closable:
 *         ccimgui.igShowDemoWindow(&opened)             # <<<<<<<<<<<<<<
 *     else:
 *         ccimgui.igShowDemoWindow(NULL)
 */
    try {
      igShowDemoWindow((&__pyx_v_opened));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 4607, __pyx_L1_error)
    }

    /* "core.pyx":4606
 *     """
 *     cdef bool opened = True
 *     if closable:             # <<<<<<<<<<<<<<
 *         ccimgui.igShowDemoWindow(&opened)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "core.pyx":4609
 *         ccimgui.igShowDemoWindow(&opened)
 *     else:
 *         ccimgui.igShowDemoWindow(NULL)             # <<<<<<<<<<<<<<
 * 
 *     return opened
 */
  /*else*/ {
    try {
      igShowDemoWindow(NULL);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 4609, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "core.pyx":4611
 *         ccimgui.igShowDemoWindow(NULL)
 * 
 *     return opened             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_opened); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":4599
 * # ?active(True)
 * # ?returns(None)
 * def show_demo_window(closable: bool=False):             # <<<<<<<<<<<<<<
 *     """
 *     Create demo window. demonstrate most imgui features. call this
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.show_demo_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":4680
 * # ?active(True)
 * # ?returns(None)
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """
 *     Add basic help/info block (not a window): how to manipulate imgui
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_35show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_34show_user_guide[] = "show_user_guide()\n\n    Add basic help/info block (not a window): how to manipulate imgui\n    as an end-user (mouse/keyboard controls).\n    ";
static PyMethodDef __pyx_mdef_4core_35show_user_guide = {"show_user_guide", (PyCFunction)__pyx_pw_4core_35show_user_guide, METH_NOARGS, __pyx_doc_4core_34show_user_guide};
static PyObject *__pyx_pw_4core_35show_user_guide(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("show_user_guide (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_34show_user_guide(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_34show_user_guide(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("show_user_guide", 0);

  /* "core.pyx":4685
 *     as an end-user (mouse/keyboard controls).
 *     """
 *     ccimgui.igShowUserGuide()             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  try {
    igShowUserGuide();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 4685, __pyx_L1_error)
  }

  /* "core.pyx":4680
 * # ?active(True)
 * # ?returns(None)
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """
 *     Add basic help/info block (not a window): how to manipulate imgui
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.show_user_guide", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5131
 * # ?active(True)
 * # ?returns(None)
 * def text(fmt: str):             # <<<<<<<<<<<<<<
 *     """
 *     Formatted text
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_37text(PyObject *__pyx_self, PyObject *__pyx_v_fmt); /*proto*/
static char __pyx_doc_4core_36text[] = "text(unicode fmt: str)\n\n    Formatted text\n    ";
static PyMethodDef __pyx_mdef_4core_37text = {"text", (PyCFunction)__pyx_pw_4core_37text, METH_O, __pyx_doc_4core_36text};
static PyObject *__pyx_pw_4core_37text(PyObject *__pyx_self, PyObject *__pyx_v_fmt) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fmt), (&PyUnicode_Type), 1, "fmt", 1))) __PYX_ERR(0, 5131, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_36text(__pyx_self, ((PyObject*)__pyx_v_fmt));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_36text(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fmt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("text", 0);

  /* "core.pyx":5135
 *     Formatted text
 *     """
 *     ccimgui.igText(_bytes(fmt))             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  __pyx_t_1 = __pyx_f_4core__bytes(__pyx_v_fmt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 5135, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 5135, __pyx_L1_error)
  try {
    igText(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5135, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":5131
 * # ?active(True)
 * # ?returns(None)
 * def text(fmt: str):             # <<<<<<<<<<<<<<
 *     """
 *     Formatted text
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5364
 * # ?active(True)
 * # ?returns(None)
 * def update_platform_windows():             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call createwindow/resizewindow/etc. platform
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_39update_platform_windows(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_38update_platform_windows[] = "update_platform_windows()\n\n    Call in main loop. will call createwindow/resizewindow/etc. platform\n    functions for each secondary viewport, and destroywindow for\n    each inactive viewport.\n    ";
static PyMethodDef __pyx_mdef_4core_39update_platform_windows = {"update_platform_windows", (PyCFunction)__pyx_pw_4core_39update_platform_windows, METH_NOARGS, __pyx_doc_4core_38update_platform_windows};
static PyObject *__pyx_pw_4core_39update_platform_windows(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_platform_windows (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_38update_platform_windows(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_38update_platform_windows(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_platform_windows", 0);

  /* "core.pyx":5370
 *     each inactive viewport.
 *     """
 *     ccimgui.igUpdatePlatformWindows()             # <<<<<<<<<<<<<<
 * # [End Function]
 * 
 */
  try {
    igUpdatePlatformWindows();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 5370, __pyx_L1_error)
  }

  /* "core.pyx":5364
 * # ?active(True)
 * # ?returns(None)
 * def update_platform_windows():             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call createwindow/resizewindow/etc. platform
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.update_platform_windows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5464
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawCmd from_ptr(ccimgui.ImVector_ImDrawCmd* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawCmd wrapper = ImVector_ImDrawCmd.__new__(ImVector_ImDrawCmd)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_f_4core_18ImVector_ImDrawCmd_from_ptr(ImVector_ImDrawCmd *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5465
 *     @staticmethod
 *     cdef ImVector_ImDrawCmd from_ptr(ccimgui.ImVector_ImDrawCmd* _ptr):
 *         cdef ImVector_ImDrawCmd wrapper = ImVector_ImDrawCmd.__new__(ImVector_ImDrawCmd)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImDrawCmd(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImDrawCmd), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5465, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImDrawCmd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5466
 *     cdef ImVector_ImDrawCmd from_ptr(ccimgui.ImVector_ImDrawCmd* _ptr):
 *         cdef ImVector_ImDrawCmd wrapper = ImVector_ImDrawCmd.__new__(ImVector_ImDrawCmd)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5467
 *         cdef ImVector_ImDrawCmd wrapper = ImVector_ImDrawCmd.__new__(ImVector_ImDrawCmd)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5464
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawCmd from_ptr(ccimgui.ImVector_ImDrawCmd* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawCmd wrapper = ImVector_ImDrawCmd.__new__(ImVector_ImDrawCmd)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawCmd.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5469
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_18ImVector_ImDrawCmd_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_18ImVector_ImDrawCmd_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawCmd___init__(((struct __pyx_obj_4core_ImVector_ImDrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_18ImVector_ImDrawCmd___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5470
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5470, __pyx_L1_error)

  /* "core.pyx":5469
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawCmd.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImDrawCmd_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_18ImVector_ImDrawCmd_2__reduce_cython__[] = "ImVector_ImDrawCmd.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_18ImVector_ImDrawCmd_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawCmd_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImDrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImDrawCmd_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawCmd.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImDrawCmd_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_18ImVector_ImDrawCmd_4__setstate_cython__[] = "ImVector_ImDrawCmd.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_18ImVector_ImDrawCmd_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawCmd_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImDrawCmd *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImDrawCmd_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawCmd.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5520
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawIdx from_ptr(ccimgui.ImVector_ImDrawIdx* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawIdx wrapper = ImVector_ImDrawIdx.__new__(ImVector_ImDrawIdx)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_f_4core_18ImVector_ImDrawIdx_from_ptr(ImVector_ImDrawIdx *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5521
 *     @staticmethod
 *     cdef ImVector_ImDrawIdx from_ptr(ccimgui.ImVector_ImDrawIdx* _ptr):
 *         cdef ImVector_ImDrawIdx wrapper = ImVector_ImDrawIdx.__new__(ImVector_ImDrawIdx)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImDrawIdx(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImDrawIdx), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5521, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5522
 *     cdef ImVector_ImDrawIdx from_ptr(ccimgui.ImVector_ImDrawIdx* _ptr):
 *         cdef ImVector_ImDrawIdx wrapper = ImVector_ImDrawIdx.__new__(ImVector_ImDrawIdx)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5523
 *         cdef ImVector_ImDrawIdx wrapper = ImVector_ImDrawIdx.__new__(ImVector_ImDrawIdx)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5520
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawIdx from_ptr(ccimgui.ImVector_ImDrawIdx* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawIdx wrapper = ImVector_ImDrawIdx.__new__(ImVector_ImDrawIdx)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5525
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_18ImVector_ImDrawIdx_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_18ImVector_ImDrawIdx_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawIdx___init__(((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_18ImVector_ImDrawIdx___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5526
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5526, __pyx_L1_error)

  /* "core.pyx":5525
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5534
 *     # ?returns(int)
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         cdef int res = dereference(self._ptr).Size
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawIdx_4size___get__(((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_4size___get__(struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self) {
  int __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":5535
 *     @property
 *     def size(self):
 *         cdef int res = dereference(self._ptr).Size             # <<<<<<<<<<<<<<
 *         return res
 *     @size.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).Size;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":5536
 *     def size(self):
 *         cdef int res = dereference(self._ptr).Size
 *         return res             # <<<<<<<<<<<<<<
 *     @size.setter
 *     def size(self, value: int):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":5534
 *     # ?returns(int)
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         cdef int res = dereference(self._ptr).Size
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5538
 *         return res
 *     @size.setter
 *     def size(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Size = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_18ImVector_ImDrawIdx_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_18ImVector_ImDrawIdx_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawIdx_4size_2__set__(((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_18ImVector_ImDrawIdx_4size_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":5540
 *     def size(self, value: int):
 *         # dereference(self._ptr).Size = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 5540, __pyx_L1_error)

  /* "core.pyx":5538
 *         return res
 *     @size.setter
 *     def size(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Size = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5561
 *     # ?returns(int)
 *     @property
 *     def data(self):             # <<<<<<<<<<<<<<
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawIdx_4data___get__(((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_4data___get__(struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self) {
  size_t __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":5562
 *     @property
 *     def data(self):
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data             # <<<<<<<<<<<<<<
 *         return res
 *     @data.setter
 */
  __pyx_v_res = ((uintptr_t)(*__pyx_v_self->_ptr).Data);

  /* "core.pyx":5563
 *     def data(self):
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data
 *         return res             # <<<<<<<<<<<<<<
 *     @data.setter
 *     def data(self, value: int):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_res); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":5561
 *     # ?returns(int)
 *     @property
 *     def data(self):             # <<<<<<<<<<<<<<
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5565
 *         return res
 *     @data.setter
 *     def data(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Data = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_18ImVector_ImDrawIdx_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_18ImVector_ImDrawIdx_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawIdx_4data_2__set__(((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_18ImVector_ImDrawIdx_4data_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":5567
 *     def data(self, value: int):
 *         # dereference(self._ptr).Data = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * # [End Class]
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 5567, __pyx_L1_error)

  /* "core.pyx":5565
 *         return res
 *     @data.setter
 *     def data(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Data = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.data.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_18ImVector_ImDrawIdx_2__reduce_cython__[] = "ImVector_ImDrawIdx.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawIdx_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_18ImVector_ImDrawIdx_4__setstate_cython__[] = "ImVector_ImDrawIdx.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_18ImVector_ImDrawIdx_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImDrawIdx_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImDrawIdx_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawIdx.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5578
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawVert from_ptr(ccimgui.ImVector_ImDrawVert* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawVert wrapper = ImVector_ImDrawVert.__new__(ImVector_ImDrawVert)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_f_4core_19ImVector_ImDrawVert_from_ptr(ImVector_ImDrawVert *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5579
 *     @staticmethod
 *     cdef ImVector_ImDrawVert from_ptr(ccimgui.ImVector_ImDrawVert* _ptr):
 *         cdef ImVector_ImDrawVert wrapper = ImVector_ImDrawVert.__new__(ImVector_ImDrawVert)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImDrawVert(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImDrawVert), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5579, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5580
 *     cdef ImVector_ImDrawVert from_ptr(ccimgui.ImVector_ImDrawVert* _ptr):
 *         cdef ImVector_ImDrawVert wrapper = ImVector_ImDrawVert.__new__(ImVector_ImDrawVert)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5581
 *         cdef ImVector_ImDrawVert wrapper = ImVector_ImDrawVert.__new__(ImVector_ImDrawVert)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5578
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawVert from_ptr(ccimgui.ImVector_ImDrawVert* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawVert wrapper = ImVector_ImDrawVert.__new__(ImVector_ImDrawVert)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5583
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_19ImVector_ImDrawVert_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_19ImVector_ImDrawVert_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_19ImVector_ImDrawVert___init__(((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_19ImVector_ImDrawVert___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5584
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5584, __pyx_L1_error)

  /* "core.pyx":5583
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5592
 *     # ?returns(int)
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         cdef int res = dereference(self._ptr).Size
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImVector_ImDrawVert_4size___get__(((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_4size___get__(struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self) {
  int __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":5593
 *     @property
 *     def size(self):
 *         cdef int res = dereference(self._ptr).Size             # <<<<<<<<<<<<<<
 *         return res
 *     @size.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).Size;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":5594
 *     def size(self):
 *         cdef int res = dereference(self._ptr).Size
 *         return res             # <<<<<<<<<<<<<<
 *     @size.setter
 *     def size(self, value: int):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":5592
 *     # ?returns(int)
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         cdef int res = dereference(self._ptr).Size
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5596
 *         return res
 *     @size.setter
 *     def size(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Size = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_19ImVector_ImDrawVert_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_19ImVector_ImDrawVert_4size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImVector_ImDrawVert_4size_2__set__(((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_19ImVector_ImDrawVert_4size_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":5598
 *     def size(self, value: int):
 *         # dereference(self._ptr).Size = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 5598, __pyx_L1_error)

  /* "core.pyx":5596
 *         return res
 *     @size.setter
 *     def size(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Size = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5619
 *     # ?returns(int)
 *     @property
 *     def data(self):             # <<<<<<<<<<<<<<
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_4data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_4data_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImVector_ImDrawVert_4data___get__(((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_4data___get__(struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self) {
  size_t __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":5620
 *     @property
 *     def data(self):
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data             # <<<<<<<<<<<<<<
 *         return res
 *     @data.setter
 */
  __pyx_v_res = ((uintptr_t)(*__pyx_v_self->_ptr).Data);

  /* "core.pyx":5621
 *     def data(self):
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data
 *         return res             # <<<<<<<<<<<<<<
 *     @data.setter
 *     def data(self, value: ImDrawVert):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_res); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":5619
 *     # ?returns(int)
 *     @property
 *     def data(self):             # <<<<<<<<<<<<<<
 *         cdef size_t res = <uintptr_t>dereference(self._ptr).Data
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5623
 *         return res
 *     @data.setter
 *     def data(self, value: ImDrawVert):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Data = value._ptr
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_19ImVector_ImDrawVert_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_19ImVector_ImDrawVert_4data_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_4core_ImDrawVert, 1, "value", 0))) __PYX_ERR(0, 5623, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_19ImVector_ImDrawVert_4data_2__set__(((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_self), ((struct __pyx_obj_4core_ImDrawVert *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_19ImVector_ImDrawVert_4data_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":5625
 *     def data(self, value: ImDrawVert):
 *         # dereference(self._ptr).Data = value._ptr
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * # [End Class]
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 5625, __pyx_L1_error)

  /* "core.pyx":5623
 *         return res
 *     @data.setter
 *     def data(self, value: ImDrawVert):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Data = value._ptr
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.data.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_19ImVector_ImDrawVert_2__reduce_cython__[] = "ImVector_ImDrawVert.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImVector_ImDrawVert_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_19ImVector_ImDrawVert_4__setstate_cython__[] = "ImVector_ImDrawVert.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_19ImVector_ImDrawVert_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImVector_ImDrawVert_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImVector_ImDrawVert_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawVert.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5636
 * 
 *     @staticmethod
 *     cdef ImVector_ImVec4 from_ptr(ccimgui.ImVector_ImVec4* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImVec4 wrapper = ImVector_ImVec4.__new__(ImVector_ImVec4)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_f_4core_15ImVector_ImVec4_from_ptr(ImVector_ImVec4 *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5637
 *     @staticmethod
 *     cdef ImVector_ImVec4 from_ptr(ccimgui.ImVector_ImVec4* _ptr):
 *         cdef ImVector_ImVec4 wrapper = ImVector_ImVec4.__new__(ImVector_ImVec4)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImVec4(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImVec4), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5637, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImVec4 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5638
 *     cdef ImVector_ImVec4 from_ptr(ccimgui.ImVector_ImVec4* _ptr):
 *         cdef ImVector_ImVec4 wrapper = ImVector_ImVec4.__new__(ImVector_ImVec4)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5639
 *         cdef ImVector_ImVec4 wrapper = ImVector_ImVec4.__new__(ImVector_ImVec4)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5636
 * 
 *     @staticmethod
 *     cdef ImVector_ImVec4 from_ptr(ccimgui.ImVector_ImVec4* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImVec4 wrapper = ImVector_ImVec4.__new__(ImVector_ImVec4)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec4.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5641
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImVector_ImVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_15ImVector_ImVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_15ImVector_ImVec4___init__(((struct __pyx_obj_4core_ImVector_ImVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImVector_ImVec4___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5642
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5642, __pyx_L1_error)

  /* "core.pyx":5641
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImVector_ImVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_15ImVector_ImVec4_2__reduce_cython__[] = "ImVector_ImVec4.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_15ImVector_ImVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImVector_ImVec4_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImVector_ImVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImVector_ImVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_15ImVector_ImVec4_4__setstate_cython__[] = "ImVector_ImVec4.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_15ImVector_ImVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImVector_ImVec4_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImVector_ImVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5692
 * 
 *     @staticmethod
 *     cdef ImVector_ImTextureID from_ptr(ccimgui.ImVector_ImTextureID* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImTextureID wrapper = ImVector_ImTextureID.__new__(ImVector_ImTextureID)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_f_4core_20ImVector_ImTextureID_from_ptr(ImVector_ImTextureID *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5693
 *     @staticmethod
 *     cdef ImVector_ImTextureID from_ptr(ccimgui.ImVector_ImTextureID* _ptr):
 *         cdef ImVector_ImTextureID wrapper = ImVector_ImTextureID.__new__(ImVector_ImTextureID)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImTextureID(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImTextureID), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5693, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImTextureID *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5694
 *     cdef ImVector_ImTextureID from_ptr(ccimgui.ImVector_ImTextureID* _ptr):
 *         cdef ImVector_ImTextureID wrapper = ImVector_ImTextureID.__new__(ImVector_ImTextureID)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5695
 *         cdef ImVector_ImTextureID wrapper = ImVector_ImTextureID.__new__(ImVector_ImTextureID)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5692
 * 
 *     @staticmethod
 *     cdef ImVector_ImTextureID from_ptr(ccimgui.ImVector_ImTextureID* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImTextureID wrapper = ImVector_ImTextureID.__new__(ImVector_ImTextureID)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImTextureID.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5697
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_20ImVector_ImTextureID_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_20ImVector_ImTextureID_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_20ImVector_ImTextureID___init__(((struct __pyx_obj_4core_ImVector_ImTextureID *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_20ImVector_ImTextureID___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5698
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5698, __pyx_L1_error)

  /* "core.pyx":5697
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImTextureID.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImVector_ImTextureID_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_20ImVector_ImTextureID_2__reduce_cython__[] = "ImVector_ImTextureID.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_20ImVector_ImTextureID_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImVector_ImTextureID_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImTextureID *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImVector_ImTextureID_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImTextureID.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImVector_ImTextureID_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_20ImVector_ImTextureID_4__setstate_cython__[] = "ImVector_ImTextureID.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_20ImVector_ImTextureID_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImVector_ImTextureID_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImTextureID *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImVector_ImTextureID_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImTextureID *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImTextureID.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5748
 * 
 *     @staticmethod
 *     cdef ImVector_ImVec2 from_ptr(ccimgui.ImVector_ImVec2* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImVec2 wrapper = ImVector_ImVec2.__new__(ImVector_ImVec2)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_f_4core_15ImVector_ImVec2_from_ptr(ImVector_ImVec2 *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5749
 *     @staticmethod
 *     cdef ImVector_ImVec2 from_ptr(ccimgui.ImVector_ImVec2* _ptr):
 *         cdef ImVector_ImVec2 wrapper = ImVector_ImVec2.__new__(ImVector_ImVec2)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImVec2(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImVec2), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5749, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImVec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5750
 *     cdef ImVector_ImVec2 from_ptr(ccimgui.ImVector_ImVec2* _ptr):
 *         cdef ImVector_ImVec2 wrapper = ImVector_ImVec2.__new__(ImVector_ImVec2)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5751
 *         cdef ImVector_ImVec2 wrapper = ImVector_ImVec2.__new__(ImVector_ImVec2)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5748
 * 
 *     @staticmethod
 *     cdef ImVector_ImVec2 from_ptr(ccimgui.ImVector_ImVec2* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImVec2 wrapper = ImVector_ImVec2.__new__(ImVector_ImVec2)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec2.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5753
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImVector_ImVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_15ImVector_ImVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_15ImVector_ImVec2___init__(((struct __pyx_obj_4core_ImVector_ImVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImVector_ImVec2___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5754
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5754, __pyx_L1_error)

  /* "core.pyx":5753
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImVector_ImVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_15ImVector_ImVec2_2__reduce_cython__[] = "ImVector_ImVec2.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_15ImVector_ImVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImVector_ImVec2_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImVector_ImVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImVector_ImVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_15ImVector_ImVec2_4__setstate_cython__[] = "ImVector_ImVec2.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_15ImVector_ImVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImVector_ImVec2_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImVector_ImVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5804
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawChannel from_ptr(ccimgui.ImVector_ImDrawChannel* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawChannel wrapper = ImVector_ImDrawChannel.__new__(ImVector_ImDrawChannel)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_f_4core_22ImVector_ImDrawChannel_from_ptr(ImVector_ImDrawChannel *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5805
 *     @staticmethod
 *     cdef ImVector_ImDrawChannel from_ptr(ccimgui.ImVector_ImDrawChannel* _ptr):
 *         cdef ImVector_ImDrawChannel wrapper = ImVector_ImDrawChannel.__new__(ImVector_ImDrawChannel)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImDrawChannel(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImDrawChannel), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5805, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImDrawChannel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5806
 *     cdef ImVector_ImDrawChannel from_ptr(ccimgui.ImVector_ImDrawChannel* _ptr):
 *         cdef ImVector_ImDrawChannel wrapper = ImVector_ImDrawChannel.__new__(ImVector_ImDrawChannel)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5807
 *         cdef ImVector_ImDrawChannel wrapper = ImVector_ImDrawChannel.__new__(ImVector_ImDrawChannel)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5804
 * 
 *     @staticmethod
 *     cdef ImVector_ImDrawChannel from_ptr(ccimgui.ImVector_ImDrawChannel* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImDrawChannel wrapper = ImVector_ImDrawChannel.__new__(ImVector_ImDrawChannel)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawChannel.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5809
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_22ImVector_ImDrawChannel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_22ImVector_ImDrawChannel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_22ImVector_ImDrawChannel___init__(((struct __pyx_obj_4core_ImVector_ImDrawChannel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_22ImVector_ImDrawChannel___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5810
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5810, __pyx_L1_error)

  /* "core.pyx":5809
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawChannel.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_22ImVector_ImDrawChannel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_22ImVector_ImDrawChannel_2__reduce_cython__[] = "ImVector_ImDrawChannel.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_22ImVector_ImDrawChannel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_22ImVector_ImDrawChannel_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImDrawChannel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_22ImVector_ImDrawChannel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawChannel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_22ImVector_ImDrawChannel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_22ImVector_ImDrawChannel_4__setstate_cython__[] = "ImVector_ImDrawChannel.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_22ImVector_ImDrawChannel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_22ImVector_ImDrawChannel_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImDrawChannel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_22ImVector_ImDrawChannel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawChannel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImDrawChannel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5860
 * 
 *     @staticmethod
 *     cdef ImVector_float from_ptr(ccimgui.ImVector_float* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_float wrapper = ImVector_float.__new__(ImVector_float)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_float *__pyx_f_4core_14ImVector_float_from_ptr(ImVector_float *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_float *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_float *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5861
 *     @staticmethod
 *     cdef ImVector_float from_ptr(ccimgui.ImVector_float* _ptr):
 *         cdef ImVector_float wrapper = ImVector_float.__new__(ImVector_float)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_float(((PyTypeObject *)__pyx_ptype_4core_ImVector_float), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5861, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_float *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5862
 *     cdef ImVector_float from_ptr(ccimgui.ImVector_float* _ptr):
 *         cdef ImVector_float wrapper = ImVector_float.__new__(ImVector_float)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5863
 *         cdef ImVector_float wrapper = ImVector_float.__new__(ImVector_float)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5860
 * 
 *     @staticmethod
 *     cdef ImVector_float from_ptr(ccimgui.ImVector_float* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_float wrapper = ImVector_float.__new__(ImVector_float)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_float.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5865
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_14ImVector_float_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_14ImVector_float_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_14ImVector_float___init__(((struct __pyx_obj_4core_ImVector_float *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_14ImVector_float___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_float *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5866
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5866, __pyx_L1_error)

  /* "core.pyx":5865
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_float.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_14ImVector_float_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_14ImVector_float_2__reduce_cython__[] = "ImVector_float.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_14ImVector_float_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_14ImVector_float_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_float *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14ImVector_float_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_float *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_float.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_14ImVector_float_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_14ImVector_float_4__setstate_cython__[] = "ImVector_float.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_14ImVector_float_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_14ImVector_float_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_float *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14ImVector_float_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_float *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_float.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5916
 * 
 *     @staticmethod
 *     cdef ImVector_ImWchar from_ptr(ccimgui.ImVector_ImWchar* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImWchar wrapper = ImVector_ImWchar.__new__(ImVector_ImWchar)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImWchar *__pyx_f_4core_16ImVector_ImWchar_from_ptr(ImVector_ImWchar *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImWchar *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImWchar *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5917
 *     @staticmethod
 *     cdef ImVector_ImWchar from_ptr(ccimgui.ImVector_ImWchar* _ptr):
 *         cdef ImVector_ImWchar wrapper = ImVector_ImWchar.__new__(ImVector_ImWchar)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImWchar(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImWchar), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5917, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImWchar *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5918
 *     cdef ImVector_ImWchar from_ptr(ccimgui.ImVector_ImWchar* _ptr):
 *         cdef ImVector_ImWchar wrapper = ImVector_ImWchar.__new__(ImVector_ImWchar)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5919
 *         cdef ImVector_ImWchar wrapper = ImVector_ImWchar.__new__(ImVector_ImWchar)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5916
 * 
 *     @staticmethod
 *     cdef ImVector_ImWchar from_ptr(ccimgui.ImVector_ImWchar* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImWchar wrapper = ImVector_ImWchar.__new__(ImVector_ImWchar)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImWchar.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5921
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_16ImVector_ImWchar_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_16ImVector_ImWchar_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_16ImVector_ImWchar___init__(((struct __pyx_obj_4core_ImVector_ImWchar *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_16ImVector_ImWchar___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImWchar *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5922
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5922, __pyx_L1_error)

  /* "core.pyx":5921
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImWchar.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImVector_ImWchar_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_16ImVector_ImWchar_2__reduce_cython__[] = "ImVector_ImWchar.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_16ImVector_ImWchar_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImVector_ImWchar_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImWchar *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImVector_ImWchar_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImWchar *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImWchar.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImVector_ImWchar_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_16ImVector_ImWchar_4__setstate_cython__[] = "ImVector_ImWchar.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_16ImVector_ImWchar_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImVector_ImWchar_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImWchar *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImVector_ImWchar_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImWchar *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImWchar.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5972
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontGlyph from_ptr(ccimgui.ImVector_ImFontGlyph* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontGlyph wrapper = ImVector_ImFontGlyph.__new__(ImVector_ImFontGlyph)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_f_4core_20ImVector_ImFontGlyph_from_ptr(ImVector_ImFontGlyph *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":5973
 *     @staticmethod
 *     cdef ImVector_ImFontGlyph from_ptr(ccimgui.ImVector_ImFontGlyph* _ptr):
 *         cdef ImVector_ImFontGlyph wrapper = ImVector_ImFontGlyph.__new__(ImVector_ImFontGlyph)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImFontGlyph(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImFontGlyph), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5973, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImFontGlyph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":5974
 *     cdef ImVector_ImFontGlyph from_ptr(ccimgui.ImVector_ImFontGlyph* _ptr):
 *         cdef ImVector_ImFontGlyph wrapper = ImVector_ImFontGlyph.__new__(ImVector_ImFontGlyph)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":5975
 *         cdef ImVector_ImFontGlyph wrapper = ImVector_ImFontGlyph.__new__(ImVector_ImFontGlyph)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":5972
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontGlyph from_ptr(ccimgui.ImVector_ImFontGlyph* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontGlyph wrapper = ImVector_ImFontGlyph.__new__(ImVector_ImFontGlyph)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontGlyph.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":5977
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_20ImVector_ImFontGlyph_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_20ImVector_ImFontGlyph_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_20ImVector_ImFontGlyph___init__(((struct __pyx_obj_4core_ImVector_ImFontGlyph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_20ImVector_ImFontGlyph___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":5978
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 5978, __pyx_L1_error)

  /* "core.pyx":5977
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontGlyph.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImVector_ImFontGlyph_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_20ImVector_ImFontGlyph_2__reduce_cython__[] = "ImVector_ImFontGlyph.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_20ImVector_ImFontGlyph_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImVector_ImFontGlyph_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImFontGlyph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImVector_ImFontGlyph_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontGlyph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImVector_ImFontGlyph_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_20ImVector_ImFontGlyph_4__setstate_cython__[] = "ImVector_ImFontGlyph.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_20ImVector_ImFontGlyph_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImVector_ImFontGlyph_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImFontGlyph *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImVector_ImFontGlyph_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontGlyph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontGlyph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6028
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontPtr from_ptr(ccimgui.ImVector_ImFontPtr* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontPtr wrapper = ImVector_ImFontPtr.__new__(ImVector_ImFontPtr)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_f_4core_18ImVector_ImFontPtr_from_ptr(ImVector_ImFontPtr *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6029
 *     @staticmethod
 *     cdef ImVector_ImFontPtr from_ptr(ccimgui.ImVector_ImFontPtr* _ptr):
 *         cdef ImVector_ImFontPtr wrapper = ImVector_ImFontPtr.__new__(ImVector_ImFontPtr)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImFontPtr(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImFontPtr), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6029, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImFontPtr *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6030
 *     cdef ImVector_ImFontPtr from_ptr(ccimgui.ImVector_ImFontPtr* _ptr):
 *         cdef ImVector_ImFontPtr wrapper = ImVector_ImFontPtr.__new__(ImVector_ImFontPtr)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6031
 *         cdef ImVector_ImFontPtr wrapper = ImVector_ImFontPtr.__new__(ImVector_ImFontPtr)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6028
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontPtr from_ptr(ccimgui.ImVector_ImFontPtr* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontPtr wrapper = ImVector_ImFontPtr.__new__(ImVector_ImFontPtr)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontPtr.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6033
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_18ImVector_ImFontPtr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_18ImVector_ImFontPtr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_18ImVector_ImFontPtr___init__(((struct __pyx_obj_4core_ImVector_ImFontPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_18ImVector_ImFontPtr___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6034
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6034, __pyx_L1_error)

  /* "core.pyx":6033
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontPtr.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImFontPtr_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_18ImVector_ImFontPtr_2__reduce_cython__[] = "ImVector_ImFontPtr.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_18ImVector_ImFontPtr_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImFontPtr_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImFontPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImFontPtr_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontPtr.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImVector_ImFontPtr_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_18ImVector_ImFontPtr_4__setstate_cython__[] = "ImVector_ImFontPtr.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_18ImVector_ImFontPtr_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImVector_ImFontPtr_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImFontPtr *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImVector_ImFontPtr_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontPtr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontPtr.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6084
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontAtlasCustomRect from_ptr(ccimgui.ImVector_ImFontAtlasCustomRect* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontAtlasCustomRect wrapper = ImVector_ImFontAtlasCustomRect.__new__(ImVector_ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_f_4core_30ImVector_ImFontAtlasCustomRect_from_ptr(ImVector_ImFontAtlasCustomRect *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6085
 *     @staticmethod
 *     cdef ImVector_ImFontAtlasCustomRect from_ptr(ccimgui.ImVector_ImFontAtlasCustomRect* _ptr):
 *         cdef ImVector_ImFontAtlasCustomRect wrapper = ImVector_ImFontAtlasCustomRect.__new__(ImVector_ImFontAtlasCustomRect)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImFontAtlasCustomRect(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImFontAtlasCustomRect), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6085, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6086
 *     cdef ImVector_ImFontAtlasCustomRect from_ptr(ccimgui.ImVector_ImFontAtlasCustomRect* _ptr):
 *         cdef ImVector_ImFontAtlasCustomRect wrapper = ImVector_ImFontAtlasCustomRect.__new__(ImVector_ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6087
 *         cdef ImVector_ImFontAtlasCustomRect wrapper = ImVector_ImFontAtlasCustomRect.__new__(ImVector_ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6084
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontAtlasCustomRect from_ptr(ccimgui.ImVector_ImFontAtlasCustomRect* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontAtlasCustomRect wrapper = ImVector_ImFontAtlasCustomRect.__new__(ImVector_ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontAtlasCustomRect.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6089
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_30ImVector_ImFontAtlasCustomRect___init__(((struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_30ImVector_ImFontAtlasCustomRect___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6090
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6090, __pyx_L1_error)

  /* "core.pyx":6089
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontAtlasCustomRect.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_30ImVector_ImFontAtlasCustomRect_2__reduce_cython__[] = "ImVector_ImFontAtlasCustomRect.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_30ImVector_ImFontAtlasCustomRect_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_30ImVector_ImFontAtlasCustomRect_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontAtlasCustomRect.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_30ImVector_ImFontAtlasCustomRect_4__setstate_cython__[] = "ImVector_ImFontAtlasCustomRect.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_30ImVector_ImFontAtlasCustomRect_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_30ImVector_ImFontAtlasCustomRect_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontAtlasCustomRect.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6140
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontConfig from_ptr(ccimgui.ImVector_ImFontConfig* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontConfig wrapper = ImVector_ImFontConfig.__new__(ImVector_ImFontConfig)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_f_4core_21ImVector_ImFontConfig_from_ptr(ImVector_ImFontConfig *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6141
 *     @staticmethod
 *     cdef ImVector_ImFontConfig from_ptr(ccimgui.ImVector_ImFontConfig* _ptr):
 *         cdef ImVector_ImFontConfig wrapper = ImVector_ImFontConfig.__new__(ImVector_ImFontConfig)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImFontConfig(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImFontConfig), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6141, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImFontConfig *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6142
 *     cdef ImVector_ImFontConfig from_ptr(ccimgui.ImVector_ImFontConfig* _ptr):
 *         cdef ImVector_ImFontConfig wrapper = ImVector_ImFontConfig.__new__(ImVector_ImFontConfig)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6143
 *         cdef ImVector_ImFontConfig wrapper = ImVector_ImFontConfig.__new__(ImVector_ImFontConfig)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6140
 * 
 *     @staticmethod
 *     cdef ImVector_ImFontConfig from_ptr(ccimgui.ImVector_ImFontConfig* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImFontConfig wrapper = ImVector_ImFontConfig.__new__(ImVector_ImFontConfig)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontConfig.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6145
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_21ImVector_ImFontConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_21ImVector_ImFontConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_21ImVector_ImFontConfig___init__(((struct __pyx_obj_4core_ImVector_ImFontConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_21ImVector_ImFontConfig___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6146
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6146, __pyx_L1_error)

  /* "core.pyx":6145
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontConfig.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_21ImVector_ImFontConfig_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_21ImVector_ImFontConfig_2__reduce_cython__[] = "ImVector_ImFontConfig.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_21ImVector_ImFontConfig_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_21ImVector_ImFontConfig_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImFontConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_21ImVector_ImFontConfig_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontConfig.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_21ImVector_ImFontConfig_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_21ImVector_ImFontConfig_4__setstate_cython__[] = "ImVector_ImFontConfig.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_21ImVector_ImFontConfig_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_21ImVector_ImFontConfig_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImFontConfig *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_21ImVector_ImFontConfig_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImFontConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImFontConfig.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6196
 * 
 *     @staticmethod
 *     cdef ImFontGlyph from_ptr(ccimgui.ImFontGlyph* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontGlyph wrapper = ImFontGlyph.__new__(ImFontGlyph)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImFontGlyph *__pyx_f_4core_11ImFontGlyph_from_ptr(ImFontGlyph *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImFontGlyph *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImFontGlyph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6197
 *     @staticmethod
 *     cdef ImFontGlyph from_ptr(ccimgui.ImFontGlyph* _ptr):
 *         cdef ImFontGlyph wrapper = ImFontGlyph.__new__(ImFontGlyph)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImFontGlyph(((PyTypeObject *)__pyx_ptype_4core_ImFontGlyph), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6197, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImFontGlyph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6198
 *     cdef ImFontGlyph from_ptr(ccimgui.ImFontGlyph* _ptr):
 *         cdef ImFontGlyph wrapper = ImFontGlyph.__new__(ImFontGlyph)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6199
 *         cdef ImFontGlyph wrapper = ImFontGlyph.__new__(ImFontGlyph)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6196
 * 
 *     @staticmethod
 *     cdef ImFontGlyph from_ptr(ccimgui.ImFontGlyph* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontGlyph wrapper = ImFontGlyph.__new__(ImFontGlyph)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyph.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6201
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_11ImFontGlyph_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_11ImFontGlyph_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_11ImFontGlyph___init__(((struct __pyx_obj_4core_ImFontGlyph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_11ImFontGlyph___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6202
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6202, __pyx_L1_error)

  /* "core.pyx":6201
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyph.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontGlyph_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_11ImFontGlyph_2__reduce_cython__[] = "ImFontGlyph.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_11ImFontGlyph_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontGlyph_2__reduce_cython__(((struct __pyx_obj_4core_ImFontGlyph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontGlyph_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontGlyph_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_11ImFontGlyph_4__setstate_cython__[] = "ImFontGlyph.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_11ImFontGlyph_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontGlyph_4__setstate_cython__(((struct __pyx_obj_4core_ImFontGlyph *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontGlyph_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6369
 * 
 *     @staticmethod
 *     cdef ImVector_ImU32 from_ptr(ccimgui.ImVector_ImU32* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImU32 wrapper = ImVector_ImU32.__new__(ImVector_ImU32)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImU32 *__pyx_f_4core_14ImVector_ImU32_from_ptr(ImVector_ImU32 *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImU32 *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImU32 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6370
 *     @staticmethod
 *     cdef ImVector_ImU32 from_ptr(ccimgui.ImVector_ImU32* _ptr):
 *         cdef ImVector_ImU32 wrapper = ImVector_ImU32.__new__(ImVector_ImU32)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImU32(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImU32), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6370, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImU32 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6371
 *     cdef ImVector_ImU32 from_ptr(ccimgui.ImVector_ImU32* _ptr):
 *         cdef ImVector_ImU32 wrapper = ImVector_ImU32.__new__(ImVector_ImU32)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6372
 *         cdef ImVector_ImU32 wrapper = ImVector_ImU32.__new__(ImVector_ImU32)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6369
 * 
 *     @staticmethod
 *     cdef ImVector_ImU32 from_ptr(ccimgui.ImVector_ImU32* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImU32 wrapper = ImVector_ImU32.__new__(ImVector_ImU32)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImU32.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6374
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_14ImVector_ImU32_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_14ImVector_ImU32_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_14ImVector_ImU32___init__(((struct __pyx_obj_4core_ImVector_ImU32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_14ImVector_ImU32___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImU32 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6375
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6375, __pyx_L1_error)

  /* "core.pyx":6374
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImU32.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_14ImVector_ImU32_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_14ImVector_ImU32_2__reduce_cython__[] = "ImVector_ImU32.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_14ImVector_ImU32_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_14ImVector_ImU32_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImU32 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14ImVector_ImU32_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImU32 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImU32.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_14ImVector_ImU32_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_14ImVector_ImU32_4__setstate_cython__[] = "ImVector_ImU32.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_14ImVector_ImU32_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_14ImVector_ImU32_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImU32 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14ImVector_ImU32_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImU32 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImU32.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6425
 * 
 *     @staticmethod
 *     cdef ImGuiKeyData from_ptr(ccimgui.ImGuiKeyData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiKeyData wrapper = ImGuiKeyData.__new__(ImGuiKeyData)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiKeyData *__pyx_f_4core_12ImGuiKeyData_from_ptr(ImGuiKeyData *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiKeyData *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiKeyData *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6426
 *     @staticmethod
 *     cdef ImGuiKeyData from_ptr(ccimgui.ImGuiKeyData* _ptr):
 *         cdef ImGuiKeyData wrapper = ImGuiKeyData.__new__(ImGuiKeyData)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiKeyData(((PyTypeObject *)__pyx_ptype_4core_ImGuiKeyData), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6426, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiKeyData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6427
 *     cdef ImGuiKeyData from_ptr(ccimgui.ImGuiKeyData* _ptr):
 *         cdef ImGuiKeyData wrapper = ImGuiKeyData.__new__(ImGuiKeyData)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6428
 *         cdef ImGuiKeyData wrapper = ImGuiKeyData.__new__(ImGuiKeyData)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6425
 * 
 *     @staticmethod
 *     cdef ImGuiKeyData from_ptr(ccimgui.ImGuiKeyData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiKeyData wrapper = ImGuiKeyData.__new__(ImGuiKeyData)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiKeyData.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6430
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_12ImGuiKeyData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_12ImGuiKeyData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_12ImGuiKeyData___init__(((struct __pyx_obj_4core_ImGuiKeyData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_12ImGuiKeyData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiKeyData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6431
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6431, __pyx_L1_error)

  /* "core.pyx":6430
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiKeyData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiKeyData_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_12ImGuiKeyData_2__reduce_cython__[] = "ImGuiKeyData.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_12ImGuiKeyData_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiKeyData_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiKeyData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiKeyData_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiKeyData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiKeyData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiKeyData_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_12ImGuiKeyData_4__setstate_cython__[] = "ImGuiKeyData.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_12ImGuiKeyData_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiKeyData_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiKeyData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiKeyData_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiKeyData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiKeyData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6494
 * 
 *     @staticmethod
 *     cdef ImGuiListClipper from_ptr(ccimgui.ImGuiListClipper* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiListClipper wrapper = ImGuiListClipper.__new__(ImGuiListClipper)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiListClipper *__pyx_f_4core_16ImGuiListClipper_from_ptr(ImGuiListClipper *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiListClipper *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiListClipper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6495
 *     @staticmethod
 *     cdef ImGuiListClipper from_ptr(ccimgui.ImGuiListClipper* _ptr):
 *         cdef ImGuiListClipper wrapper = ImGuiListClipper.__new__(ImGuiListClipper)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiListClipper(((PyTypeObject *)__pyx_ptype_4core_ImGuiListClipper), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6495, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiListClipper *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6496
 *     cdef ImGuiListClipper from_ptr(ccimgui.ImGuiListClipper* _ptr):
 *         cdef ImGuiListClipper wrapper = ImGuiListClipper.__new__(ImGuiListClipper)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6497
 *         cdef ImGuiListClipper wrapper = ImGuiListClipper.__new__(ImGuiListClipper)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6494
 * 
 *     @staticmethod
 *     cdef ImGuiListClipper from_ptr(ccimgui.ImGuiListClipper* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiListClipper wrapper = ImGuiListClipper.__new__(ImGuiListClipper)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiListClipper.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6499
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_16ImGuiListClipper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_16ImGuiListClipper_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_16ImGuiListClipper___init__(((struct __pyx_obj_4core_ImGuiListClipper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_16ImGuiListClipper___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiListClipper *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6500
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6500, __pyx_L1_error)

  /* "core.pyx":6499
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiListClipper.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImGuiListClipper_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_16ImGuiListClipper_2__reduce_cython__[] = "ImGuiListClipper.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_16ImGuiListClipper_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImGuiListClipper_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiListClipper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImGuiListClipper_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiListClipper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiListClipper.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImGuiListClipper_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_16ImGuiListClipper_4__setstate_cython__[] = "ImGuiListClipper.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_16ImGuiListClipper_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImGuiListClipper_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiListClipper *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImGuiListClipper_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiListClipper *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiListClipper.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6669
 * 
 *     @staticmethod
 *     cdef ImGuiOnceUponAFrame from_ptr(ccimgui.ImGuiOnceUponAFrame* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiOnceUponAFrame wrapper = ImGuiOnceUponAFrame.__new__(ImGuiOnceUponAFrame)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_f_4core_19ImGuiOnceUponAFrame_from_ptr(ImGuiOnceUponAFrame *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6670
 *     @staticmethod
 *     cdef ImGuiOnceUponAFrame from_ptr(ccimgui.ImGuiOnceUponAFrame* _ptr):
 *         cdef ImGuiOnceUponAFrame wrapper = ImGuiOnceUponAFrame.__new__(ImGuiOnceUponAFrame)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiOnceUponAFrame(((PyTypeObject *)__pyx_ptype_4core_ImGuiOnceUponAFrame), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6670, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiOnceUponAFrame *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6671
 *     cdef ImGuiOnceUponAFrame from_ptr(ccimgui.ImGuiOnceUponAFrame* _ptr):
 *         cdef ImGuiOnceUponAFrame wrapper = ImGuiOnceUponAFrame.__new__(ImGuiOnceUponAFrame)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6672
 *         cdef ImGuiOnceUponAFrame wrapper = ImGuiOnceUponAFrame.__new__(ImGuiOnceUponAFrame)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6669
 * 
 *     @staticmethod
 *     cdef ImGuiOnceUponAFrame from_ptr(ccimgui.ImGuiOnceUponAFrame* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiOnceUponAFrame wrapper = ImGuiOnceUponAFrame.__new__(ImGuiOnceUponAFrame)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiOnceUponAFrame.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6674
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_19ImGuiOnceUponAFrame_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_19ImGuiOnceUponAFrame_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_19ImGuiOnceUponAFrame___init__(((struct __pyx_obj_4core_ImGuiOnceUponAFrame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_19ImGuiOnceUponAFrame___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6675
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6675, __pyx_L1_error)

  /* "core.pyx":6674
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiOnceUponAFrame.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImGuiOnceUponAFrame_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_19ImGuiOnceUponAFrame_2__reduce_cython__[] = "ImGuiOnceUponAFrame.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_19ImGuiOnceUponAFrame_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImGuiOnceUponAFrame_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiOnceUponAFrame *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImGuiOnceUponAFrame_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiOnceUponAFrame.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImGuiOnceUponAFrame_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_19ImGuiOnceUponAFrame_4__setstate_cython__[] = "ImGuiOnceUponAFrame.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_19ImGuiOnceUponAFrame_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImGuiOnceUponAFrame_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiOnceUponAFrame *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImGuiOnceUponAFrame_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiOnceUponAFrame *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiOnceUponAFrame.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6719
 * 
 *     @staticmethod
 *     cdef ImGuiPayload from_ptr(ccimgui.ImGuiPayload* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPayload wrapper = ImGuiPayload.__new__(ImGuiPayload)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiPayload *__pyx_f_4core_12ImGuiPayload_from_ptr(ImGuiPayload *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiPayload *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiPayload *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6720
 *     @staticmethod
 *     cdef ImGuiPayload from_ptr(ccimgui.ImGuiPayload* _ptr):
 *         cdef ImGuiPayload wrapper = ImGuiPayload.__new__(ImGuiPayload)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiPayload(((PyTypeObject *)__pyx_ptype_4core_ImGuiPayload), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6720, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiPayload *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6721
 *     cdef ImGuiPayload from_ptr(ccimgui.ImGuiPayload* _ptr):
 *         cdef ImGuiPayload wrapper = ImGuiPayload.__new__(ImGuiPayload)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6722
 *         cdef ImGuiPayload wrapper = ImGuiPayload.__new__(ImGuiPayload)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6719
 * 
 *     @staticmethod
 *     cdef ImGuiPayload from_ptr(ccimgui.ImGuiPayload* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPayload wrapper = ImGuiPayload.__new__(ImGuiPayload)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPayload.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6724
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_12ImGuiPayload_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_12ImGuiPayload_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_12ImGuiPayload___init__(((struct __pyx_obj_4core_ImGuiPayload *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_12ImGuiPayload___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPayload *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6725
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6725, __pyx_L1_error)

  /* "core.pyx":6724
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPayload.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiPayload_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_12ImGuiPayload_2__reduce_cython__[] = "ImGuiPayload.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_12ImGuiPayload_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiPayload_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiPayload *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiPayload_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPayload *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPayload.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiPayload_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_12ImGuiPayload_4__setstate_cython__[] = "ImGuiPayload.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_12ImGuiPayload_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiPayload_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiPayload *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiPayload_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPayload *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPayload.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6895
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiPlatformMonitor from_ptr(ccimgui.ImVector_ImGuiPlatformMonitor* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiPlatformMonitor wrapper = ImVector_ImGuiPlatformMonitor.__new__(ImVector_ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_f_4core_29ImVector_ImGuiPlatformMonitor_from_ptr(ImVector_ImGuiPlatformMonitor *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6896
 *     @staticmethod
 *     cdef ImVector_ImGuiPlatformMonitor from_ptr(ccimgui.ImVector_ImGuiPlatformMonitor* _ptr):
 *         cdef ImVector_ImGuiPlatformMonitor wrapper = ImVector_ImGuiPlatformMonitor.__new__(ImVector_ImGuiPlatformMonitor)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImGuiPlatformMonitor(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImGuiPlatformMonitor), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6896, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6897
 *     cdef ImVector_ImGuiPlatformMonitor from_ptr(ccimgui.ImVector_ImGuiPlatformMonitor* _ptr):
 *         cdef ImVector_ImGuiPlatformMonitor wrapper = ImVector_ImGuiPlatformMonitor.__new__(ImVector_ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6898
 *         cdef ImVector_ImGuiPlatformMonitor wrapper = ImVector_ImGuiPlatformMonitor.__new__(ImVector_ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6895
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiPlatformMonitor from_ptr(ccimgui.ImVector_ImGuiPlatformMonitor* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiPlatformMonitor wrapper = ImVector_ImGuiPlatformMonitor.__new__(ImVector_ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiPlatformMonitor.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6900
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_29ImVector_ImGuiPlatformMonitor___init__(((struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_29ImVector_ImGuiPlatformMonitor___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6901
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6901, __pyx_L1_error)

  /* "core.pyx":6900
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiPlatformMonitor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_29ImVector_ImGuiPlatformMonitor_2__reduce_cython__[] = "ImVector_ImGuiPlatformMonitor.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_29ImVector_ImGuiPlatformMonitor_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_29ImVector_ImGuiPlatformMonitor_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiPlatformMonitor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_29ImVector_ImGuiPlatformMonitor_4__setstate_cython__[] = "ImVector_ImGuiPlatformMonitor.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_29ImVector_ImGuiPlatformMonitor_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_29ImVector_ImGuiPlatformMonitor_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiPlatformMonitor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6951
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiViewportPtr from_ptr(ccimgui.ImVector_ImGuiViewportPtr* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiViewportPtr wrapper = ImVector_ImGuiViewportPtr.__new__(ImVector_ImGuiViewportPtr)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_f_4core_25ImVector_ImGuiViewportPtr_from_ptr(ImVector_ImGuiViewportPtr *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":6952
 *     @staticmethod
 *     cdef ImVector_ImGuiViewportPtr from_ptr(ccimgui.ImVector_ImGuiViewportPtr* _ptr):
 *         cdef ImVector_ImGuiViewportPtr wrapper = ImVector_ImGuiViewportPtr.__new__(ImVector_ImGuiViewportPtr)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImGuiViewportPtr(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImGuiViewportPtr), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6952, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":6953
 *     cdef ImVector_ImGuiViewportPtr from_ptr(ccimgui.ImVector_ImGuiViewportPtr* _ptr):
 *         cdef ImVector_ImGuiViewportPtr wrapper = ImVector_ImGuiViewportPtr.__new__(ImVector_ImGuiViewportPtr)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":6954
 *         cdef ImVector_ImGuiViewportPtr wrapper = ImVector_ImGuiViewportPtr.__new__(ImVector_ImGuiViewportPtr)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":6951
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiViewportPtr from_ptr(ccimgui.ImVector_ImGuiViewportPtr* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiViewportPtr wrapper = ImVector_ImGuiViewportPtr.__new__(ImVector_ImGuiViewportPtr)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiViewportPtr.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":6956
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_25ImVector_ImGuiViewportPtr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_25ImVector_ImGuiViewportPtr_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_25ImVector_ImGuiViewportPtr___init__(((struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_25ImVector_ImGuiViewportPtr___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":6957
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 6957, __pyx_L1_error)

  /* "core.pyx":6956
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiViewportPtr.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25ImVector_ImGuiViewportPtr_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_25ImVector_ImGuiViewportPtr_2__reduce_cython__[] = "ImVector_ImGuiViewportPtr.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_25ImVector_ImGuiViewportPtr_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_25ImVector_ImGuiViewportPtr_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_25ImVector_ImGuiViewportPtr_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiViewportPtr.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25ImVector_ImGuiViewportPtr_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_25ImVector_ImGuiViewportPtr_4__setstate_cython__[] = "ImVector_ImGuiViewportPtr.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_25ImVector_ImGuiViewportPtr_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_25ImVector_ImGuiViewportPtr_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_25ImVector_ImGuiViewportPtr_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiViewportPtr.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7007
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiStoragePair from_ptr(ccimgui.ImVector_ImGuiStoragePair* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiStoragePair wrapper = ImVector_ImGuiStoragePair.__new__(ImVector_ImGuiStoragePair)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_f_4core_25ImVector_ImGuiStoragePair_from_ptr(ImVector_ImGuiStoragePair *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7008
 *     @staticmethod
 *     cdef ImVector_ImGuiStoragePair from_ptr(ccimgui.ImVector_ImGuiStoragePair* _ptr):
 *         cdef ImVector_ImGuiStoragePair wrapper = ImVector_ImGuiStoragePair.__new__(ImVector_ImGuiStoragePair)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImGuiStoragePair(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImGuiStoragePair), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7008, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImGuiStoragePair *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7009
 *     cdef ImVector_ImGuiStoragePair from_ptr(ccimgui.ImVector_ImGuiStoragePair* _ptr):
 *         cdef ImVector_ImGuiStoragePair wrapper = ImVector_ImGuiStoragePair.__new__(ImVector_ImGuiStoragePair)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7010
 *         cdef ImVector_ImGuiStoragePair wrapper = ImVector_ImGuiStoragePair.__new__(ImVector_ImGuiStoragePair)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7007
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiStoragePair from_ptr(ccimgui.ImVector_ImGuiStoragePair* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiStoragePair wrapper = ImVector_ImGuiStoragePair.__new__(ImVector_ImGuiStoragePair)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiStoragePair.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7012
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_25ImVector_ImGuiStoragePair_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_25ImVector_ImGuiStoragePair_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_25ImVector_ImGuiStoragePair___init__(((struct __pyx_obj_4core_ImVector_ImGuiStoragePair *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_25ImVector_ImGuiStoragePair___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7013
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7013, __pyx_L1_error)

  /* "core.pyx":7012
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiStoragePair.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25ImVector_ImGuiStoragePair_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_25ImVector_ImGuiStoragePair_2__reduce_cython__[] = "ImVector_ImGuiStoragePair.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_25ImVector_ImGuiStoragePair_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_25ImVector_ImGuiStoragePair_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImGuiStoragePair *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_25ImVector_ImGuiStoragePair_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiStoragePair.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25ImVector_ImGuiStoragePair_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_25ImVector_ImGuiStoragePair_4__setstate_cython__[] = "ImVector_ImGuiStoragePair.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_25ImVector_ImGuiStoragePair_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_25ImVector_ImGuiStoragePair_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImGuiStoragePair *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_25ImVector_ImGuiStoragePair_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiStoragePair *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiStoragePair.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7063
 * 
 *     @staticmethod
 *     cdef ImGuiStoragePair from_ptr(ccimgui.ImGuiStoragePair* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiStoragePair wrapper = ImGuiStoragePair.__new__(ImGuiStoragePair)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiStoragePair *__pyx_f_4core_16ImGuiStoragePair_from_ptr(ImGuiStoragePair *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiStoragePair *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiStoragePair *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7064
 *     @staticmethod
 *     cdef ImGuiStoragePair from_ptr(ccimgui.ImGuiStoragePair* _ptr):
 *         cdef ImGuiStoragePair wrapper = ImGuiStoragePair.__new__(ImGuiStoragePair)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiStoragePair(((PyTypeObject *)__pyx_ptype_4core_ImGuiStoragePair), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7064, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiStoragePair *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7065
 *     cdef ImGuiStoragePair from_ptr(ccimgui.ImGuiStoragePair* _ptr):
 *         cdef ImGuiStoragePair wrapper = ImGuiStoragePair.__new__(ImGuiStoragePair)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7066
 *         cdef ImGuiStoragePair wrapper = ImGuiStoragePair.__new__(ImGuiStoragePair)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7063
 * 
 *     @staticmethod
 *     cdef ImGuiStoragePair from_ptr(ccimgui.ImGuiStoragePair* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiStoragePair wrapper = ImGuiStoragePair.__new__(ImGuiStoragePair)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStoragePair.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7068
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_16ImGuiStoragePair_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_16ImGuiStoragePair_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_16ImGuiStoragePair___init__(((struct __pyx_obj_4core_ImGuiStoragePair *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_16ImGuiStoragePair___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStoragePair *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7069
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7069, __pyx_L1_error)

  /* "core.pyx":7068
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStoragePair.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImGuiStoragePair_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_16ImGuiStoragePair_2__reduce_cython__[] = "ImGuiStoragePair.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_16ImGuiStoragePair_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImGuiStoragePair_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiStoragePair *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImGuiStoragePair_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStoragePair *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStoragePair.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImGuiStoragePair_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_16ImGuiStoragePair_4__setstate_cython__[] = "ImGuiStoragePair.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_16ImGuiStoragePair_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImGuiStoragePair_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiStoragePair *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImGuiStoragePair_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStoragePair *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStoragePair.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7176
 * 
 *     @staticmethod
 *     cdef ImGuiTableColumnSortSpecs from_ptr(ccimgui.ImGuiTableColumnSortSpecs* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTableColumnSortSpecs wrapper = ImGuiTableColumnSortSpecs.__new__(ImGuiTableColumnSortSpecs)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_f_4core_25ImGuiTableColumnSortSpecs_from_ptr(ImGuiTableColumnSortSpecs *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7177
 *     @staticmethod
 *     cdef ImGuiTableColumnSortSpecs from_ptr(ccimgui.ImGuiTableColumnSortSpecs* _ptr):
 *         cdef ImGuiTableColumnSortSpecs wrapper = ImGuiTableColumnSortSpecs.__new__(ImGuiTableColumnSortSpecs)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiTableColumnSortSpecs(((PyTypeObject *)__pyx_ptype_4core_ImGuiTableColumnSortSpecs), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7177, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7178
 *     cdef ImGuiTableColumnSortSpecs from_ptr(ccimgui.ImGuiTableColumnSortSpecs* _ptr):
 *         cdef ImGuiTableColumnSortSpecs wrapper = ImGuiTableColumnSortSpecs.__new__(ImGuiTableColumnSortSpecs)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7179
 *         cdef ImGuiTableColumnSortSpecs wrapper = ImGuiTableColumnSortSpecs.__new__(ImGuiTableColumnSortSpecs)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7176
 * 
 *     @staticmethod
 *     cdef ImGuiTableColumnSortSpecs from_ptr(ccimgui.ImGuiTableColumnSortSpecs* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTableColumnSortSpecs wrapper = ImGuiTableColumnSortSpecs.__new__(ImGuiTableColumnSortSpecs)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableColumnSortSpecs.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7181
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_25ImGuiTableColumnSortSpecs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_25ImGuiTableColumnSortSpecs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_25ImGuiTableColumnSortSpecs___init__(((struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_25ImGuiTableColumnSortSpecs___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7182
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7182, __pyx_L1_error)

  /* "core.pyx":7181
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableColumnSortSpecs.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25ImGuiTableColumnSortSpecs_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_25ImGuiTableColumnSortSpecs_2__reduce_cython__[] = "ImGuiTableColumnSortSpecs.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_25ImGuiTableColumnSortSpecs_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_25ImGuiTableColumnSortSpecs_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_25ImGuiTableColumnSortSpecs_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableColumnSortSpecs.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_25ImGuiTableColumnSortSpecs_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_25ImGuiTableColumnSortSpecs_4__setstate_cython__[] = "ImGuiTableColumnSortSpecs.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_25ImGuiTableColumnSortSpecs_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_25ImGuiTableColumnSortSpecs_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_25ImGuiTableColumnSortSpecs_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableColumnSortSpecs.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7265
 * 
 *     @staticmethod
 *     cdef ImGuiTableSortSpecs from_ptr(ccimgui.ImGuiTableSortSpecs* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTableSortSpecs wrapper = ImGuiTableSortSpecs.__new__(ImGuiTableSortSpecs)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_f_4core_19ImGuiTableSortSpecs_from_ptr(ImGuiTableSortSpecs *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7266
 *     @staticmethod
 *     cdef ImGuiTableSortSpecs from_ptr(ccimgui.ImGuiTableSortSpecs* _ptr):
 *         cdef ImGuiTableSortSpecs wrapper = ImGuiTableSortSpecs.__new__(ImGuiTableSortSpecs)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiTableSortSpecs(((PyTypeObject *)__pyx_ptype_4core_ImGuiTableSortSpecs), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7266, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiTableSortSpecs *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7267
 *     cdef ImGuiTableSortSpecs from_ptr(ccimgui.ImGuiTableSortSpecs* _ptr):
 *         cdef ImGuiTableSortSpecs wrapper = ImGuiTableSortSpecs.__new__(ImGuiTableSortSpecs)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7268
 *         cdef ImGuiTableSortSpecs wrapper = ImGuiTableSortSpecs.__new__(ImGuiTableSortSpecs)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7265
 * 
 *     @staticmethod
 *     cdef ImGuiTableSortSpecs from_ptr(ccimgui.ImGuiTableSortSpecs* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTableSortSpecs wrapper = ImGuiTableSortSpecs.__new__(ImGuiTableSortSpecs)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableSortSpecs.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7270
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_19ImGuiTableSortSpecs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_19ImGuiTableSortSpecs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_19ImGuiTableSortSpecs___init__(((struct __pyx_obj_4core_ImGuiTableSortSpecs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_19ImGuiTableSortSpecs___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7271
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7271, __pyx_L1_error)

  /* "core.pyx":7270
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableSortSpecs.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImGuiTableSortSpecs_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_19ImGuiTableSortSpecs_2__reduce_cython__[] = "ImGuiTableSortSpecs.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_19ImGuiTableSortSpecs_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImGuiTableSortSpecs_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiTableSortSpecs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImGuiTableSortSpecs_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableSortSpecs.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_19ImGuiTableSortSpecs_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_19ImGuiTableSortSpecs_4__setstate_cython__[] = "ImGuiTableSortSpecs.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_19ImGuiTableSortSpecs_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_19ImGuiTableSortSpecs_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiTableSortSpecs *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_19ImGuiTableSortSpecs_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTableSortSpecs *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTableSortSpecs.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7341
 * 
 *     @staticmethod
 *     cdef ImVector_char from_ptr(ccimgui.ImVector_char* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_char wrapper = ImVector_char.__new__(ImVector_char)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_char *__pyx_f_4core_13ImVector_char_from_ptr(ImVector_char *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_char *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_char *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7342
 *     @staticmethod
 *     cdef ImVector_char from_ptr(ccimgui.ImVector_char* _ptr):
 *         cdef ImVector_char wrapper = ImVector_char.__new__(ImVector_char)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_char(((PyTypeObject *)__pyx_ptype_4core_ImVector_char), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7342, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_char *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7343
 *     cdef ImVector_char from_ptr(ccimgui.ImVector_char* _ptr):
 *         cdef ImVector_char wrapper = ImVector_char.__new__(ImVector_char)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7344
 *         cdef ImVector_char wrapper = ImVector_char.__new__(ImVector_char)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7341
 * 
 *     @staticmethod
 *     cdef ImVector_char from_ptr(ccimgui.ImVector_char* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_char wrapper = ImVector_char.__new__(ImVector_char)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_char.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7346
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_13ImVector_char_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_13ImVector_char_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_13ImVector_char___init__(((struct __pyx_obj_4core_ImVector_char *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_13ImVector_char___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_char *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7347
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7347, __pyx_L1_error)

  /* "core.pyx":7346
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_char.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13ImVector_char_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_13ImVector_char_2__reduce_cython__[] = "ImVector_char.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_13ImVector_char_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13ImVector_char_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_char *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13ImVector_char_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_char *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_char.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13ImVector_char_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_13ImVector_char_4__setstate_cython__[] = "ImVector_char.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_13ImVector_char_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13ImVector_char_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_char *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13ImVector_char_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_char *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_char.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7397
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiTextRange from_ptr(ccimgui.ImVector_ImGuiTextRange* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiTextRange wrapper = ImVector_ImGuiTextRange.__new__(ImVector_ImGuiTextRange)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_f_4core_23ImVector_ImGuiTextRange_from_ptr(ImVector_ImGuiTextRange *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7398
 *     @staticmethod
 *     cdef ImVector_ImGuiTextRange from_ptr(ccimgui.ImVector_ImGuiTextRange* _ptr):
 *         cdef ImVector_ImGuiTextRange wrapper = ImVector_ImGuiTextRange.__new__(ImVector_ImGuiTextRange)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVector_ImGuiTextRange(((PyTypeObject *)__pyx_ptype_4core_ImVector_ImGuiTextRange), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7398, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVector_ImGuiTextRange *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7399
 *     cdef ImVector_ImGuiTextRange from_ptr(ccimgui.ImVector_ImGuiTextRange* _ptr):
 *         cdef ImVector_ImGuiTextRange wrapper = ImVector_ImGuiTextRange.__new__(ImVector_ImGuiTextRange)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7400
 *         cdef ImVector_ImGuiTextRange wrapper = ImVector_ImGuiTextRange.__new__(ImVector_ImGuiTextRange)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7397
 * 
 *     @staticmethod
 *     cdef ImVector_ImGuiTextRange from_ptr(ccimgui.ImVector_ImGuiTextRange* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVector_ImGuiTextRange wrapper = ImVector_ImGuiTextRange.__new__(ImVector_ImGuiTextRange)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiTextRange.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7402
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_23ImVector_ImGuiTextRange_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_23ImVector_ImGuiTextRange_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_23ImVector_ImGuiTextRange___init__(((struct __pyx_obj_4core_ImVector_ImGuiTextRange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_23ImVector_ImGuiTextRange___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7403
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7403, __pyx_L1_error)

  /* "core.pyx":7402
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiTextRange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_23ImVector_ImGuiTextRange_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_23ImVector_ImGuiTextRange_2__reduce_cython__[] = "ImVector_ImGuiTextRange.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_23ImVector_ImGuiTextRange_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_23ImVector_ImGuiTextRange_2__reduce_cython__(((struct __pyx_obj_4core_ImVector_ImGuiTextRange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_23ImVector_ImGuiTextRange_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiTextRange.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_23ImVector_ImGuiTextRange_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_23ImVector_ImGuiTextRange_4__setstate_cython__[] = "ImVector_ImGuiTextRange.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_23ImVector_ImGuiTextRange_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_23ImVector_ImGuiTextRange_4__setstate_cython__(((struct __pyx_obj_4core_ImVector_ImGuiTextRange *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_23ImVector_ImGuiTextRange_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImGuiTextRange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVector_ImGuiTextRange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7453
 * 
 *     @staticmethod
 *     cdef ImGuiTextRange from_ptr(ccimgui.ImGuiTextRange* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTextRange wrapper = ImGuiTextRange.__new__(ImGuiTextRange)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiTextRange *__pyx_f_4core_14ImGuiTextRange_from_ptr(ImGuiTextRange *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiTextRange *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiTextRange *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7454
 *     @staticmethod
 *     cdef ImGuiTextRange from_ptr(ccimgui.ImGuiTextRange* _ptr):
 *         cdef ImGuiTextRange wrapper = ImGuiTextRange.__new__(ImGuiTextRange)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiTextRange(((PyTypeObject *)__pyx_ptype_4core_ImGuiTextRange), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7454, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiTextRange *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7455
 *     cdef ImGuiTextRange from_ptr(ccimgui.ImGuiTextRange* _ptr):
 *         cdef ImGuiTextRange wrapper = ImGuiTextRange.__new__(ImGuiTextRange)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7456
 *         cdef ImGuiTextRange wrapper = ImGuiTextRange.__new__(ImGuiTextRange)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7453
 * 
 *     @staticmethod
 *     cdef ImGuiTextRange from_ptr(ccimgui.ImGuiTextRange* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTextRange wrapper = ImGuiTextRange.__new__(ImGuiTextRange)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextRange.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7458
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_14ImGuiTextRange_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_14ImGuiTextRange_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_14ImGuiTextRange___init__(((struct __pyx_obj_4core_ImGuiTextRange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_14ImGuiTextRange___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextRange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7459
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7459, __pyx_L1_error)

  /* "core.pyx":7458
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextRange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_14ImGuiTextRange_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_14ImGuiTextRange_2__reduce_cython__[] = "ImGuiTextRange.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_14ImGuiTextRange_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_14ImGuiTextRange_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiTextRange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14ImGuiTextRange_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextRange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextRange.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_14ImGuiTextRange_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_14ImGuiTextRange_4__setstate_cython__[] = "ImGuiTextRange.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_14ImGuiTextRange_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_14ImGuiTextRange_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiTextRange *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_14ImGuiTextRange_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextRange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextRange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7545
 * 
 *     @staticmethod
 *     cdef ImGuiWindowClass from_ptr(ccimgui.ImGuiWindowClass* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiWindowClass wrapper = ImGuiWindowClass.__new__(ImGuiWindowClass)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiWindowClass *__pyx_f_4core_16ImGuiWindowClass_from_ptr(ImGuiWindowClass *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiWindowClass *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiWindowClass *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7546
 *     @staticmethod
 *     cdef ImGuiWindowClass from_ptr(ccimgui.ImGuiWindowClass* _ptr):
 *         cdef ImGuiWindowClass wrapper = ImGuiWindowClass.__new__(ImGuiWindowClass)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiWindowClass(((PyTypeObject *)__pyx_ptype_4core_ImGuiWindowClass), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7546, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiWindowClass *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7547
 *     cdef ImGuiWindowClass from_ptr(ccimgui.ImGuiWindowClass* _ptr):
 *         cdef ImGuiWindowClass wrapper = ImGuiWindowClass.__new__(ImGuiWindowClass)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7548
 *         cdef ImGuiWindowClass wrapper = ImGuiWindowClass.__new__(ImGuiWindowClass)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7545
 * 
 *     @staticmethod
 *     cdef ImGuiWindowClass from_ptr(ccimgui.ImGuiWindowClass* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiWindowClass wrapper = ImGuiWindowClass.__new__(ImGuiWindowClass)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiWindowClass.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7550
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_16ImGuiWindowClass_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_16ImGuiWindowClass_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_16ImGuiWindowClass___init__(((struct __pyx_obj_4core_ImGuiWindowClass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_16ImGuiWindowClass___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiWindowClass *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7551
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7551, __pyx_L1_error)

  /* "core.pyx":7550
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiWindowClass.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImGuiWindowClass_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_16ImGuiWindowClass_2__reduce_cython__[] = "ImGuiWindowClass.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_16ImGuiWindowClass_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImGuiWindowClass_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiWindowClass *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImGuiWindowClass_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiWindowClass *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiWindowClass.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_16ImGuiWindowClass_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_16ImGuiWindowClass_4__setstate_cython__[] = "ImGuiWindowClass.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_16ImGuiWindowClass_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_16ImGuiWindowClass_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiWindowClass *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_16ImGuiWindowClass_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiWindowClass *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiWindowClass.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7686
 * 
 *     @staticmethod
 *     cdef ImVec2 from_ptr(ccimgui.ImVec2* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVec2 wrapper = ImVec2.__new__(ImVec2)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVec2 *__pyx_f_4core_6ImVec2_from_ptr(ImVec2 *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVec2 *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVec2 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7687
 *     @staticmethod
 *     cdef ImVec2 from_ptr(ccimgui.ImVec2* _ptr):
 *         cdef ImVec2 wrapper = ImVec2.__new__(ImVec2)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVec2(((PyTypeObject *)__pyx_ptype_4core_ImVec2), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7687, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVec2 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7688
 *     cdef ImVec2 from_ptr(ccimgui.ImVec2* _ptr):
 *         cdef ImVec2 wrapper = ImVec2.__new__(ImVec2)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7689
 *         cdef ImVec2 wrapper = ImVec2.__new__(ImVec2)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7686
 * 
 *     @staticmethod
 *     cdef ImVec2 from_ptr(ccimgui.ImVec2* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVec2 wrapper = ImVec2.__new__(ImVec2)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec2.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7691
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_6ImVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_6ImVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_6ImVec2___init__(((struct __pyx_obj_4core_ImVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_6ImVec2___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec2 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7692
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7692, __pyx_L1_error)

  /* "core.pyx":7691
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_6ImVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_6ImVec2_2__reduce_cython__[] = "ImVec2.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_6ImVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6ImVec2_2__reduce_cython__(((struct __pyx_obj_4core_ImVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6ImVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_6ImVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_6ImVec2_4__setstate_cython__[] = "ImVec2.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_6ImVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6ImVec2_4__setstate_cython__(((struct __pyx_obj_4core_ImVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6ImVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7761
 * 
 *     @staticmethod
 *     cdef ImVec4 from_ptr(ccimgui.ImVec4* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVec4 wrapper = ImVec4.__new__(ImVec4)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImVec4 *__pyx_f_4core_6ImVec4_from_ptr(ImVec4 *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImVec4 *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImVec4 *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7762
 *     @staticmethod
 *     cdef ImVec4 from_ptr(ccimgui.ImVec4* _ptr):
 *         cdef ImVec4 wrapper = ImVec4.__new__(ImVec4)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImVec4(((PyTypeObject *)__pyx_ptype_4core_ImVec4), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7762, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImVec4 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7763
 *     cdef ImVec4 from_ptr(ccimgui.ImVec4* _ptr):
 *         cdef ImVec4 wrapper = ImVec4.__new__(ImVec4)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7764
 *         cdef ImVec4 wrapper = ImVec4.__new__(ImVec4)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7761
 * 
 *     @staticmethod
 *     cdef ImVec4 from_ptr(ccimgui.ImVec4* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImVec4 wrapper = ImVec4.__new__(ImVec4)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec4.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7766
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_6ImVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_6ImVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_6ImVec4___init__(((struct __pyx_obj_4core_ImVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_6ImVec4___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec4 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7767
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7767, __pyx_L1_error)

  /* "core.pyx":7766
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_6ImVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_6ImVec4_2__reduce_cython__[] = "ImVec4.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_6ImVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6ImVec4_2__reduce_cython__(((struct __pyx_obj_4core_ImVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6ImVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_6ImVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_6ImVec4_4__setstate_cython__[] = "ImVec4.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_6ImVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6ImVec4_4__setstate_cython__(((struct __pyx_obj_4core_ImVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6ImVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7862
 * 
 *     @staticmethod
 *     cdef ImColor from_ptr(ccimgui.ImColor* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImColor wrapper = ImColor.__new__(ImColor)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImColor *__pyx_f_4core_7ImColor_from_ptr(ImColor *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImColor *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImColor *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7863
 *     @staticmethod
 *     cdef ImColor from_ptr(ccimgui.ImColor* _ptr):
 *         cdef ImColor wrapper = ImColor.__new__(ImColor)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImColor(((PyTypeObject *)__pyx_ptype_4core_ImColor), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7863, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImColor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7864
 *     cdef ImColor from_ptr(ccimgui.ImColor* _ptr):
 *         cdef ImColor wrapper = ImColor.__new__(ImColor)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7865
 *         cdef ImColor wrapper = ImColor.__new__(ImColor)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7862
 * 
 *     @staticmethod
 *     cdef ImColor from_ptr(ccimgui.ImColor* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImColor wrapper = ImColor.__new__(ImColor)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImColor.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7867
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImColor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_7ImColor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_7ImColor___init__(((struct __pyx_obj_4core_ImColor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImColor___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImColor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7868
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7868, __pyx_L1_error)

  /* "core.pyx":7867
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImColor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImColor_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_7ImColor_2__reduce_cython__[] = "ImColor.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_7ImColor_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImColor_2__reduce_cython__(((struct __pyx_obj_4core_ImColor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImColor_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImColor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImColor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImColor_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_7ImColor_4__setstate_cython__[] = "ImColor.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_7ImColor_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImColor_4__setstate_cython__(((struct __pyx_obj_4core_ImColor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImColor_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImColor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImColor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7976
 * 
 *     @staticmethod
 *     cdef ImDrawChannel from_ptr(ccimgui.ImDrawChannel* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawChannel wrapper = ImDrawChannel.__new__(ImDrawChannel)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawChannel *__pyx_f_4core_13ImDrawChannel_from_ptr(ImDrawChannel *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawChannel *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawChannel *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":7977
 *     @staticmethod
 *     cdef ImDrawChannel from_ptr(ccimgui.ImDrawChannel* _ptr):
 *         cdef ImDrawChannel wrapper = ImDrawChannel.__new__(ImDrawChannel)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawChannel(((PyTypeObject *)__pyx_ptype_4core_ImDrawChannel), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7977, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawChannel *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":7978
 *     cdef ImDrawChannel from_ptr(ccimgui.ImDrawChannel* _ptr):
 *         cdef ImDrawChannel wrapper = ImDrawChannel.__new__(ImDrawChannel)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":7979
 *         cdef ImDrawChannel wrapper = ImDrawChannel.__new__(ImDrawChannel)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":7976
 * 
 *     @staticmethod
 *     cdef ImDrawChannel from_ptr(ccimgui.ImDrawChannel* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawChannel wrapper = ImDrawChannel.__new__(ImDrawChannel)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawChannel.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":7981
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_13ImDrawChannel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_13ImDrawChannel_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_13ImDrawChannel___init__(((struct __pyx_obj_4core_ImDrawChannel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_13ImDrawChannel___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawChannel *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":7982
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 7982, __pyx_L1_error)

  /* "core.pyx":7981
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawChannel.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13ImDrawChannel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_13ImDrawChannel_2__reduce_cython__[] = "ImDrawChannel.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_13ImDrawChannel_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13ImDrawChannel_2__reduce_cython__(((struct __pyx_obj_4core_ImDrawChannel *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13ImDrawChannel_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawChannel *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawChannel.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13ImDrawChannel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_13ImDrawChannel_4__setstate_cython__[] = "ImDrawChannel.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_13ImDrawChannel_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13ImDrawChannel_4__setstate_cython__(((struct __pyx_obj_4core_ImDrawChannel *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13ImDrawChannel_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawChannel *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawChannel.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8019
 * 
 *     @staticmethod
 *     cdef ImDrawCmd from_ptr(ccimgui.ImDrawCmd* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawCmd wrapper = ImDrawCmd.__new__(ImDrawCmd)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawCmd *__pyx_f_4core_9ImDrawCmd_from_ptr(ImDrawCmd *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawCmd *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawCmd *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":8020
 *     @staticmethod
 *     cdef ImDrawCmd from_ptr(ccimgui.ImDrawCmd* _ptr):
 *         cdef ImDrawCmd wrapper = ImDrawCmd.__new__(ImDrawCmd)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawCmd(((PyTypeObject *)__pyx_ptype_4core_ImDrawCmd), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8020, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawCmd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":8021
 *     cdef ImDrawCmd from_ptr(ccimgui.ImDrawCmd* _ptr):
 *         cdef ImDrawCmd wrapper = ImDrawCmd.__new__(ImDrawCmd)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":8022
 *         cdef ImDrawCmd wrapper = ImDrawCmd.__new__(ImDrawCmd)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":8019
 * 
 *     @staticmethod
 *     cdef ImDrawCmd from_ptr(ccimgui.ImDrawCmd* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawCmd wrapper = ImDrawCmd.__new__(ImDrawCmd)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmd.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8024
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_9ImDrawCmd_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_9ImDrawCmd_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_9ImDrawCmd___init__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_9ImDrawCmd___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":8025
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 8025, __pyx_L1_error)

  /* "core.pyx":8024
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmd.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8033
 *     # ?returns(tuple)
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9ImDrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9ImDrawCmd_9clip_rect_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_9clip_rect___get__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9ImDrawCmd_9clip_rect___get__(struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":8034
 *     @property
 *     def clip_rect(self):
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)             # <<<<<<<<<<<<<<
 *     @clip_rect.setter
 *     def clip_rect(self, value: tuple):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec4_tuple((*__pyx_v_self->_ptr).ClipRect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8033
 *     # ?returns(tuple)
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmd.clip_rect.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8036
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 *     def clip_rect(self, value: tuple):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_9ImDrawCmd_9clip_rect_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_9ImDrawCmd_9clip_rect_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) __PYX_ERR(0, 8036, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_9clip_rect_2__set__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_9ImDrawCmd_9clip_rect_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":8038
 *     def clip_rect(self, value: tuple):
 *         # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 8038, __pyx_L1_error)

  /* "core.pyx":8036
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 *     def clip_rect(self, value: tuple):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawCmd.clip_rect.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8046
 *     # ?returns(object)
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         cdef object res = <object>dereference(self._ptr).TextureId
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9ImDrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9ImDrawCmd_10texture_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_10texture_id___get__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9ImDrawCmd_10texture_id___get__(struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self) {
  PyObject *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImTextureID __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":8047
 *     @property
 *     def texture_id(self):
 *         cdef object res = <object>dereference(self._ptr).TextureId             # <<<<<<<<<<<<<<
 *         return res
 *     @texture_id.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).TextureId;
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_res = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "core.pyx":8048
 *     def texture_id(self):
 *         cdef object res = <object>dereference(self._ptr).TextureId
 *         return res             # <<<<<<<<<<<<<<
 *     @texture_id.setter
 *     def texture_id(self, value: Any):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "core.pyx":8046
 *     # ?returns(object)
 *     @property
 *     def texture_id(self):             # <<<<<<<<<<<<<<
 *         cdef object res = <object>dereference(self._ptr).TextureId
 *         return res
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8050
 *         return res
 *     @texture_id.setter
 *     def texture_id(self, value: Any):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).TextureId = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_9ImDrawCmd_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_9ImDrawCmd_10texture_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_10texture_id_2__set__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_9ImDrawCmd_10texture_id_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":8052
 *     def texture_id(self, value: Any):
 *         # dereference(self._ptr).TextureId = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 8052, __pyx_L1_error)

  /* "core.pyx":8050
 *         return res
 *     @texture_id.setter
 *     def texture_id(self, value: Any):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).TextureId = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawCmd.texture_id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8086
 *     # ?returns(int)
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         cdef int res = dereference(self._ptr).ElemCount
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9ImDrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_9ImDrawCmd_10elem_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_10elem_count___get__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9ImDrawCmd_10elem_count___get__(struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self) {
  int __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":8087
 *     @property
 *     def elem_count(self):
 *         cdef int res = dereference(self._ptr).ElemCount             # <<<<<<<<<<<<<<
 *         return res
 *     @elem_count.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).ElemCount;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":8088
 *     def elem_count(self):
 *         cdef int res = dereference(self._ptr).ElemCount
 *         return res             # <<<<<<<<<<<<<<
 *     @elem_count.setter
 *     def elem_count(self, value: int):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":8086
 *     # ?returns(int)
 *     @property
 *     def elem_count(self):             # <<<<<<<<<<<<<<
 *         cdef int res = dereference(self._ptr).ElemCount
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImDrawCmd.elem_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8090
 *         return res
 *     @elem_count.setter
 *     def elem_count(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).ElemCount = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_9ImDrawCmd_10elem_count_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_9ImDrawCmd_10elem_count_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_10elem_count_2__set__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_9ImDrawCmd_10elem_count_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":8092
 *     def elem_count(self, value: int):
 *         # dereference(self._ptr).ElemCount = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 8092, __pyx_L1_error)

  /* "core.pyx":8090
 *         return res
 *     @elem_count.setter
 *     def elem_count(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).ElemCount = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawCmd.elem_count.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9ImDrawCmd_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_9ImDrawCmd_2__reduce_cython__[] = "ImDrawCmd.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_9ImDrawCmd_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_2__reduce_cython__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9ImDrawCmd_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmd.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_9ImDrawCmd_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_9ImDrawCmd_4__setstate_cython__[] = "ImDrawCmd.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_9ImDrawCmd_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_9ImDrawCmd_4__setstate_cython__(((struct __pyx_obj_4core_ImDrawCmd *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_9ImDrawCmd_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmd *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmd.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8148
 * 
 *     @staticmethod
 *     cdef ImDrawCmdHeader from_ptr(ccimgui.ImDrawCmdHeader* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawCmdHeader wrapper = ImDrawCmdHeader.__new__(ImDrawCmdHeader)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_f_4core_15ImDrawCmdHeader_from_ptr(ImDrawCmdHeader *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":8149
 *     @staticmethod
 *     cdef ImDrawCmdHeader from_ptr(ccimgui.ImDrawCmdHeader* _ptr):
 *         cdef ImDrawCmdHeader wrapper = ImDrawCmdHeader.__new__(ImDrawCmdHeader)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawCmdHeader(((PyTypeObject *)__pyx_ptype_4core_ImDrawCmdHeader), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8149, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawCmdHeader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":8150
 *     cdef ImDrawCmdHeader from_ptr(ccimgui.ImDrawCmdHeader* _ptr):
 *         cdef ImDrawCmdHeader wrapper = ImDrawCmdHeader.__new__(ImDrawCmdHeader)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":8151
 *         cdef ImDrawCmdHeader wrapper = ImDrawCmdHeader.__new__(ImDrawCmdHeader)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":8148
 * 
 *     @staticmethod
 *     cdef ImDrawCmdHeader from_ptr(ccimgui.ImDrawCmdHeader* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawCmdHeader wrapper = ImDrawCmdHeader.__new__(ImDrawCmdHeader)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmdHeader.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8153
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImDrawCmdHeader_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_15ImDrawCmdHeader_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_15ImDrawCmdHeader___init__(((struct __pyx_obj_4core_ImDrawCmdHeader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImDrawCmdHeader___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":8154
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 8154, __pyx_L1_error)

  /* "core.pyx":8153
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmdHeader.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8162
 *     # ?returns(tuple)
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImDrawCmdHeader_9clip_rect_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_15ImDrawCmdHeader_9clip_rect_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImDrawCmdHeader_9clip_rect___get__(((struct __pyx_obj_4core_ImDrawCmdHeader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImDrawCmdHeader_9clip_rect___get__(struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":8163
 *     @property
 *     def clip_rect(self):
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)             # <<<<<<<<<<<<<<
 *     @clip_rect.setter
 *     def clip_rect(self, value: tuple):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec4_tuple((*__pyx_v_self->_ptr).ClipRect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8162
 *     # ?returns(tuple)
 *     @property
 *     def clip_rect(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmdHeader.clip_rect.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8165
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 *     def clip_rect(self, value: tuple):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImDrawCmdHeader_9clip_rect_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_15ImDrawCmdHeader_9clip_rect_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) __PYX_ERR(0, 8165, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_15ImDrawCmdHeader_9clip_rect_2__set__(((struct __pyx_obj_4core_ImDrawCmdHeader *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImDrawCmdHeader_9clip_rect_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":8167
 *     def clip_rect(self, value: tuple):
 *         # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 8167, __pyx_L1_error)

  /* "core.pyx":8165
 *         return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
 *     @clip_rect.setter
 *     def clip_rect(self, value: tuple):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawCmdHeader.clip_rect.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImDrawCmdHeader_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_15ImDrawCmdHeader_2__reduce_cython__[] = "ImDrawCmdHeader.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_15ImDrawCmdHeader_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImDrawCmdHeader_2__reduce_cython__(((struct __pyx_obj_4core_ImDrawCmdHeader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImDrawCmdHeader_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmdHeader.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImDrawCmdHeader_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_15ImDrawCmdHeader_4__setstate_cython__[] = "ImDrawCmdHeader.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_15ImDrawCmdHeader_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImDrawCmdHeader_4__setstate_cython__(((struct __pyx_obj_4core_ImDrawCmdHeader *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImDrawCmdHeader_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawCmdHeader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawCmdHeader.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8204
 * 
 *     @staticmethod
 *     cdef ImDrawData from_ptr(ccimgui.ImDrawData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawData wrapper = ImDrawData.__new__(ImDrawData)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawData *__pyx_f_4core_10ImDrawData_from_ptr(ImDrawData *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawData *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawData *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":8205
 *     @staticmethod
 *     cdef ImDrawData from_ptr(ccimgui.ImDrawData* _ptr):
 *         cdef ImDrawData wrapper = ImDrawData.__new__(ImDrawData)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawData(((PyTypeObject *)__pyx_ptype_4core_ImDrawData), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8205, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":8206
 *     cdef ImDrawData from_ptr(ccimgui.ImDrawData* _ptr):
 *         cdef ImDrawData wrapper = ImDrawData.__new__(ImDrawData)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":8207
 *         cdef ImDrawData wrapper = ImDrawData.__new__(ImDrawData)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":8204
 * 
 *     @staticmethod
 *     cdef ImDrawData from_ptr(ccimgui.ImDrawData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawData wrapper = ImDrawData.__new__(ImDrawData)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawData.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8209
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImDrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_10ImDrawData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_10ImDrawData___init__(((struct __pyx_obj_4core_ImDrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImDrawData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":8210
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 8210, __pyx_L1_error)

  /* "core.pyx":8209
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8270
 *     # ?returns(List[ImDrawList])
 *     @property
 *     def cmd_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             ImDrawList.from_ptr(dereference(self._ptr).CmdLists[idx])
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawData_9cmd_lists_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_10ImDrawData_9cmd_lists_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawData_9cmd_lists___get__(((struct __pyx_obj_4core_ImDrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawData_9cmd_lists___get__(struct __pyx_obj_4core_ImDrawData *__pyx_v_self) {
  int __pyx_7genexpr__pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":8271
 *     @property
 *     def cmd_lists(self):
 *         return [             # <<<<<<<<<<<<<<
 *             ImDrawList.from_ptr(dereference(self._ptr).CmdLists[idx])
 *             for idx in range(dereference(self._ptr).CmdListsCount)
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "core.pyx":8273
 *         return [
 *             ImDrawList.from_ptr(dereference(self._ptr).CmdLists[idx])
 *             for idx in range(dereference(self._ptr).CmdListsCount)             # <<<<<<<<<<<<<<
 *         ]
 *     @cmd_lists.setter
 */
    __pyx_t_2 = (*__pyx_v_self->_ptr).CmdListsCount;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_7genexpr__pyx_v_idx = __pyx_t_4;

      /* "core.pyx":8272
 *     def cmd_lists(self):
 *         return [
 *             ImDrawList.from_ptr(dereference(self._ptr).CmdLists[idx])             # <<<<<<<<<<<<<<
 *             for idx in range(dereference(self._ptr).CmdListsCount)
 *         ]
 */
      __pyx_t_5 = ((PyObject *)__pyx_f_4core_10ImDrawList_from_ptr(((*__pyx_v_self->_ptr).CmdLists[__pyx_7genexpr__pyx_v_idx]))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 8272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 8271, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":8270
 *     # ?returns(List[ImDrawList])
 *     @property
 *     def cmd_lists(self):             # <<<<<<<<<<<<<<
 *         return [
 *             ImDrawList.from_ptr(dereference(self._ptr).CmdLists[idx])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.ImDrawData.cmd_lists.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8276
 *         ]
 *     @cmd_lists.setter
 *     def cmd_lists(self, value: ImDrawList):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).CmdLists = value._ptr
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImDrawData_9cmd_lists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_10ImDrawData_9cmd_lists_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_4core_ImDrawList, 1, "value", 0))) __PYX_ERR(0, 8276, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_10ImDrawData_9cmd_lists_2__set__(((struct __pyx_obj_4core_ImDrawData *)__pyx_v_self), ((struct __pyx_obj_4core_ImDrawList *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImDrawData_9cmd_lists_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":8278
 *     def cmd_lists(self, value: ImDrawList):
 *         # dereference(self._ptr).CmdLists = value._ptr
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 8278, __pyx_L1_error)

  /* "core.pyx":8276
 *         ]
 *     @cmd_lists.setter
 *     def cmd_lists(self, value: ImDrawList):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).CmdLists = value._ptr
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawData.cmd_lists.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8381
 *     # ?active(True)
 *     # ?returns(None)
 *     def scale_clip_rects(self: ImDrawData, fb_scale):             # <<<<<<<<<<<<<<
 *         """
 *         Helper to scale the cliprect field of each imdrawcmd. use if
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawData_3scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_v_fb_scale); /*proto*/
static char __pyx_doc_4core_10ImDrawData_2scale_clip_rects[] = "ImDrawData.scale_clip_rects(self: ImDrawData, fb_scale)\n\n        Helper to scale the cliprect field of each imdrawcmd. use if\n        your final output buffer is at a different scale than dear imgui\n        expects, or if there is a difference between your window resolution\n        and framebuffer resolution.\n        ";
static PyObject *__pyx_pw_4core_10ImDrawData_3scale_clip_rects(PyObject *__pyx_v_self, PyObject *__pyx_v_fb_scale) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale_clip_rects (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawData_2scale_clip_rects(((struct __pyx_obj_4core_ImDrawData *)__pyx_v_self), ((PyObject *)__pyx_v_fb_scale));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawData_2scale_clip_rects(struct __pyx_obj_4core_ImDrawData *__pyx_v_self, PyObject *__pyx_v_fb_scale) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("scale_clip_rects", 0);

  /* "core.pyx":8388
 *         and framebuffer resolution.
 *         """
 *         ccimgui.ImDrawData_ScaleClipRects(self._ptr, _cast_tuple_ImVec2(fb_scale))             # <<<<<<<<<<<<<<
 *     # [End Method]
 * # [End Class]
 */
  try {
    __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_fb_scale);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 8388, __pyx_L1_error)
  }
  try {
    ImDrawData_ScaleClipRects(__pyx_v_self->_ptr, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 8388, __pyx_L1_error)
  }

  /* "core.pyx":8381
 *     # ?active(True)
 *     # ?returns(None)
 *     def scale_clip_rects(self: ImDrawData, fb_scale):             # <<<<<<<<<<<<<<
 *         """
 *         Helper to scale the cliprect field of each imdrawcmd. use if
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawData.scale_clip_rects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawData_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_10ImDrawData_4__reduce_cython__[] = "ImDrawData.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_10ImDrawData_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawData_4__reduce_cython__(((struct __pyx_obj_4core_ImDrawData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawData_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawData_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_10ImDrawData_6__setstate_cython__[] = "ImDrawData.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_10ImDrawData_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawData_6__setstate_cython__(((struct __pyx_obj_4core_ImDrawData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawData_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8399
 * 
 *     @staticmethod
 *     cdef ImDrawListSplitter from_ptr(ccimgui.ImDrawListSplitter* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawListSplitter wrapper = ImDrawListSplitter.__new__(ImDrawListSplitter)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawListSplitter *__pyx_f_4core_18ImDrawListSplitter_from_ptr(ImDrawListSplitter *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawListSplitter *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawListSplitter *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":8400
 *     @staticmethod
 *     cdef ImDrawListSplitter from_ptr(ccimgui.ImDrawListSplitter* _ptr):
 *         cdef ImDrawListSplitter wrapper = ImDrawListSplitter.__new__(ImDrawListSplitter)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawListSplitter(((PyTypeObject *)__pyx_ptype_4core_ImDrawListSplitter), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8400, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawListSplitter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":8401
 *     cdef ImDrawListSplitter from_ptr(ccimgui.ImDrawListSplitter* _ptr):
 *         cdef ImDrawListSplitter wrapper = ImDrawListSplitter.__new__(ImDrawListSplitter)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":8402
 *         cdef ImDrawListSplitter wrapper = ImDrawListSplitter.__new__(ImDrawListSplitter)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":8399
 * 
 *     @staticmethod
 *     cdef ImDrawListSplitter from_ptr(ccimgui.ImDrawListSplitter* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawListSplitter wrapper = ImDrawListSplitter.__new__(ImDrawListSplitter)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSplitter.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8404
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_18ImDrawListSplitter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_18ImDrawListSplitter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_18ImDrawListSplitter___init__(((struct __pyx_obj_4core_ImDrawListSplitter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_18ImDrawListSplitter___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSplitter *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":8405
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 8405, __pyx_L1_error)

  /* "core.pyx":8404
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSplitter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImDrawListSplitter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_18ImDrawListSplitter_2__reduce_cython__[] = "ImDrawListSplitter.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_18ImDrawListSplitter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImDrawListSplitter_2__reduce_cython__(((struct __pyx_obj_4core_ImDrawListSplitter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImDrawListSplitter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSplitter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSplitter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_18ImDrawListSplitter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_18ImDrawListSplitter_4__setstate_cython__[] = "ImDrawListSplitter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_18ImDrawListSplitter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_18ImDrawListSplitter_4__setstate_cython__(((struct __pyx_obj_4core_ImDrawListSplitter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_18ImDrawListSplitter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSplitter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSplitter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8518
 * 
 *     @staticmethod
 *     cdef ImDrawVert from_ptr(ccimgui.ImDrawVert* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawVert wrapper = ImDrawVert.__new__(ImDrawVert)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawVert *__pyx_f_4core_10ImDrawVert_from_ptr(ImDrawVert *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawVert *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawVert *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":8519
 *     @staticmethod
 *     cdef ImDrawVert from_ptr(ccimgui.ImDrawVert* _ptr):
 *         cdef ImDrawVert wrapper = ImDrawVert.__new__(ImDrawVert)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawVert(((PyTypeObject *)__pyx_ptype_4core_ImDrawVert), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8519, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawVert *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":8520
 *     cdef ImDrawVert from_ptr(ccimgui.ImDrawVert* _ptr):
 *         cdef ImDrawVert wrapper = ImDrawVert.__new__(ImDrawVert)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":8521
 *         cdef ImDrawVert wrapper = ImDrawVert.__new__(ImDrawVert)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":8518
 * 
 *     @staticmethod
 *     cdef ImDrawVert from_ptr(ccimgui.ImDrawVert* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawVert wrapper = ImDrawVert.__new__(ImDrawVert)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawVert.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8523
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImDrawVert_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_10ImDrawVert_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_10ImDrawVert___init__(((struct __pyx_obj_4core_ImDrawVert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImDrawVert___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":8524
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 8524, __pyx_L1_error)

  /* "core.pyx":8523
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawVert.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawVert_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_10ImDrawVert_2__reduce_cython__[] = "ImDrawVert.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_10ImDrawVert_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawVert_2__reduce_cython__(((struct __pyx_obj_4core_ImDrawVert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawVert_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawVert.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawVert_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_10ImDrawVert_4__setstate_cython__[] = "ImDrawVert.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_10ImDrawVert_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawVert_4__setstate_cython__(((struct __pyx_obj_4core_ImDrawVert *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawVert_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawVert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawVert.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8574
 * 
 *     @staticmethod
 *     cdef ImFont from_ptr(ccimgui.ImFont* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFont wrapper = ImFont.__new__(ImFont)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImFont *__pyx_f_4core_6ImFont_from_ptr(ImFont *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImFont *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImFont *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":8575
 *     @staticmethod
 *     cdef ImFont from_ptr(ccimgui.ImFont* _ptr):
 *         cdef ImFont wrapper = ImFont.__new__(ImFont)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImFont(((PyTypeObject *)__pyx_ptype_4core_ImFont), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8575, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImFont *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":8576
 *     cdef ImFont from_ptr(ccimgui.ImFont* _ptr):
 *         cdef ImFont wrapper = ImFont.__new__(ImFont)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":8577
 *         cdef ImFont wrapper = ImFont.__new__(ImFont)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":8574
 * 
 *     @staticmethod
 *     cdef ImFont from_ptr(ccimgui.ImFont* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFont wrapper = ImFont.__new__(ImFont)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFont.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":8579
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_6ImFont_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_6ImFont_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_6ImFont___init__(((struct __pyx_obj_4core_ImFont *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_6ImFont___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFont *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":8580
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 8580, __pyx_L1_error)

  /* "core.pyx":8579
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFont.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_6ImFont_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_6ImFont_2__reduce_cython__[] = "ImFont.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_6ImFont_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6ImFont_2__reduce_cython__(((struct __pyx_obj_4core_ImFont *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6ImFont_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFont *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFont.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_6ImFont_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_6ImFont_4__setstate_cython__[] = "ImFont.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_6ImFont_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_6ImFont_4__setstate_cython__(((struct __pyx_obj_4core_ImFont *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_6ImFont_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFont *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFont.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9053
 * 
 *     @staticmethod
 *     cdef ImFontAtlas from_ptr(ccimgui.ImFontAtlas* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontAtlas wrapper = ImFontAtlas.__new__(ImFontAtlas)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImFontAtlas *__pyx_f_4core_11ImFontAtlas_from_ptr(ImFontAtlas *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImFontAtlas *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImFontAtlas *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":9054
 *     @staticmethod
 *     cdef ImFontAtlas from_ptr(ccimgui.ImFontAtlas* _ptr):
 *         cdef ImFontAtlas wrapper = ImFontAtlas.__new__(ImFontAtlas)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImFontAtlas(((PyTypeObject *)__pyx_ptype_4core_ImFontAtlas), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9054, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImFontAtlas *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":9055
 *     cdef ImFontAtlas from_ptr(ccimgui.ImFontAtlas* _ptr):
 *         cdef ImFontAtlas wrapper = ImFontAtlas.__new__(ImFontAtlas)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":9056
 *         cdef ImFontAtlas wrapper = ImFontAtlas.__new__(ImFontAtlas)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":9053
 * 
 *     @staticmethod
 *     cdef ImFontAtlas from_ptr(ccimgui.ImFontAtlas* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontAtlas wrapper = ImFontAtlas.__new__(ImFontAtlas)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlas.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9058
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_11ImFontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_11ImFontAtlas_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_11ImFontAtlas___init__(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_11ImFontAtlas___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":9059
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 9059, __pyx_L1_error)

  /* "core.pyx":9058
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlas.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9080
 *     # ?returns(object)
 *     @property
 *     def tex_id(self):             # <<<<<<<<<<<<<<
 *         cdef object res = <object>dereference(self._ptr).TexID
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontAtlas_6tex_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_11ImFontAtlas_6tex_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_6tex_id___get__(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontAtlas_6tex_id___get__(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self) {
  PyObject *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImTextureID __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":9081
 *     @property
 *     def tex_id(self):
 *         cdef object res = <object>dereference(self._ptr).TexID             # <<<<<<<<<<<<<<
 *         return res
 *     @tex_id.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).TexID;
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_res = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "core.pyx":9082
 *     def tex_id(self):
 *         cdef object res = <object>dereference(self._ptr).TexID
 *         return res             # <<<<<<<<<<<<<<
 *     @tex_id.setter
 *     def tex_id(self, value: Any):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "core.pyx":9080
 *     # ?returns(object)
 *     @property
 *     def tex_id(self):             # <<<<<<<<<<<<<<
 *         cdef object res = <object>dereference(self._ptr).TexID
 *         return res
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9084
 *         return res
 *     @tex_id.setter
 *     def tex_id(self, value: Any):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).TexID = <void*>value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_11ImFontAtlas_6tex_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_11ImFontAtlas_6tex_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_6tex_id_2__set__(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_11ImFontAtlas_6tex_id_2__set__(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":9085
 *     @tex_id.setter
 *     def tex_id(self, value: Any):
 *         dereference(self._ptr).TexID = <void*>value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).TexID = ((void *)__pyx_v_value);

  /* "core.pyx":9084
 *         return res
 *     @tex_id.setter
 *     def tex_id(self, value: Any):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).TexID = <void*>value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9364
 *     # ?active(True)
 *     # ?returns(None)
 *     def destroy(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         ccimgui.ImFontAtlas_destroy(self._ptr)
 *     # [End Method]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontAtlas_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_11ImFontAtlas_2destroy[] = "ImFontAtlas.destroy(self: ImFontAtlas)";
static PyObject *__pyx_pw_4core_11ImFontAtlas_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_2destroy(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontAtlas_2destroy(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy", 0);

  /* "core.pyx":9365
 *     # ?returns(None)
 *     def destroy(self: ImFontAtlas):
 *         ccimgui.ImFontAtlas_destroy(self._ptr)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  try {
    ImFontAtlas_destroy(__pyx_v_self->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 9365, __pyx_L1_error)
  }

  /* "core.pyx":9364
 *     # ?active(True)
 *     # ?returns(None)
 *     def destroy(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         ccimgui.ImFontAtlas_destroy(self._ptr)
 *     # [End Method]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImFontAtlas.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9534
 *     # ?active(True)
 *     # ?returns(None)
 *     def clear_tex_data(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         """
 *         Clear output texture data (cpu side). saves ram once the texture
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontAtlas_5clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_11ImFontAtlas_4clear_tex_data[] = "ImFontAtlas.clear_tex_data(self: ImFontAtlas)\n\n        Clear output texture data (cpu side). saves ram once the texture\n        has been copied to graphics memory.\n        ";
static PyObject *__pyx_pw_4core_11ImFontAtlas_5clear_tex_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_tex_data (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_4clear_tex_data(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontAtlas_4clear_tex_data(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_tex_data", 0);

  /* "core.pyx":9539
 *         has been copied to graphics memory.
 *         """
 *         ccimgui.ImFontAtlas_ClearTexData(self._ptr)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  try {
    ImFontAtlas_ClearTexData(__pyx_v_self->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 9539, __pyx_L1_error)
  }

  /* "core.pyx":9534
 *     # ?active(True)
 *     # ?returns(None)
 *     def clear_tex_data(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         """
 *         Clear output texture data (cpu side). saves ram once the texture
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImFontAtlas.clear_tex_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9683
 *     # ?active(True)
 *     # ?returns(None)
 *     def get_tex_data_as_alpha8(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         """
 *         1 byte per-pixel
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontAtlas_7get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_11ImFontAtlas_6get_tex_data_as_alpha8[] = "ImFontAtlas.get_tex_data_as_alpha8(self: ImFontAtlas)\n\n        1 byte per-pixel\n        ";
static PyObject *__pyx_pw_4core_11ImFontAtlas_7get_tex_data_as_alpha8(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8 (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_6get_tex_data_as_alpha8(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontAtlas_6get_tex_data_as_alpha8(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self) {
  unsigned char *__pyx_v_pixels;
  int __pyx_v_width;
  int __pyx_v_height;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tex_data_as_alpha8", 0);

  /* "core.pyx":9692
 *         cdef int height
 * 
 *         ccimgui.ImFontAtlas_GetTexDataAsAlpha8(self._ptr, &pixels, &width, &height, NULL)             # <<<<<<<<<<<<<<
 *         return width, height, bytes(pixels[:width*height])
 *     # [End Method]
 */
  try {
    ImFontAtlas_GetTexDataAsAlpha8(__pyx_v_self->_ptr, (&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 9692, __pyx_L1_error)
  }

  /* "core.pyx":9693
 * 
 *         ccimgui.ImFontAtlas_GetTexDataAsAlpha8(self._ptr, &pixels, &width, &height, NULL)
 *         return width, height, bytes(pixels[:width*height])             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, (__pyx_v_width * __pyx_v_height) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":9683
 *     # ?active(True)
 *     # ?returns(None)
 *     def get_tex_data_as_alpha8(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         """
 *         1 byte per-pixel
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.ImFontAtlas.get_tex_data_as_alpha8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9700
 *     # ?active(True)
 *     # ?returns(None)
 *     def get_tex_data_as_rgba32(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         """
 *         4 bytes-per-pixel
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontAtlas_9get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_11ImFontAtlas_8get_tex_data_as_rgba32[] = "ImFontAtlas.get_tex_data_as_rgba32(self: ImFontAtlas)\n\n        4 bytes-per-pixel\n        ";
static PyObject *__pyx_pw_4core_11ImFontAtlas_9get_tex_data_as_rgba32(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32 (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_8get_tex_data_as_rgba32(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontAtlas_8get_tex_data_as_rgba32(struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self) {
  unsigned char *__pyx_v_pixels;
  int __pyx_v_width;
  int __pyx_v_height;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tex_data_as_rgba32", 0);

  /* "core.pyx":9709
 *         cdef int height
 * 
 *         ccimgui.ImFontAtlas_GetTexDataAsRGBA32(self._ptr, &pixels, &width, &height, NULL)             # <<<<<<<<<<<<<<
 *         return width, height, bytes(pixels[:width*height*4])
 *     # [End Method]
 */
  try {
    ImFontAtlas_GetTexDataAsRGBA32(__pyx_v_self->_ptr, (&__pyx_v_pixels), (&__pyx_v_width), (&__pyx_v_height), NULL);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 9709, __pyx_L1_error)
  }

  /* "core.pyx":9710
 * 
 *         ccimgui.ImFontAtlas_GetTexDataAsRGBA32(self._ptr, &pixels, &width, &height, NULL)
 *         return width, height, bytes(pixels[:width*height*4])             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_pixels) + 0, ((__pyx_v_width * __pyx_v_height) * 4) - 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 9710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "core.pyx":9700
 *     # ?active(True)
 *     # ?returns(None)
 *     def get_tex_data_as_rgba32(self: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         """
 *         4 bytes-per-pixel
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.ImFontAtlas.get_tex_data_as_rgba32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontAtlas_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_11ImFontAtlas_10__reduce_cython__[] = "ImFontAtlas.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_11ImFontAtlas_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_10__reduce_cython__(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontAtlas_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlas.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_11ImFontAtlas_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_11ImFontAtlas_12__setstate_cython__[] = "ImFontAtlas.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_11ImFontAtlas_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_11ImFontAtlas_12__setstate_cython__(((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_11ImFontAtlas_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlas.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9743
 * 
 *     @staticmethod
 *     cdef ImFontAtlasCustomRect from_ptr(ccimgui.ImFontAtlasCustomRect* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontAtlasCustomRect wrapper = ImFontAtlasCustomRect.__new__(ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_f_4core_21ImFontAtlasCustomRect_from_ptr(ImFontAtlasCustomRect *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":9744
 *     @staticmethod
 *     cdef ImFontAtlasCustomRect from_ptr(ccimgui.ImFontAtlasCustomRect* _ptr):
 *         cdef ImFontAtlasCustomRect wrapper = ImFontAtlasCustomRect.__new__(ImFontAtlasCustomRect)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImFontAtlasCustomRect(((PyTypeObject *)__pyx_ptype_4core_ImFontAtlasCustomRect), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9744, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImFontAtlasCustomRect *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":9745
 *     cdef ImFontAtlasCustomRect from_ptr(ccimgui.ImFontAtlasCustomRect* _ptr):
 *         cdef ImFontAtlasCustomRect wrapper = ImFontAtlasCustomRect.__new__(ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":9746
 *         cdef ImFontAtlasCustomRect wrapper = ImFontAtlasCustomRect.__new__(ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":9743
 * 
 *     @staticmethod
 *     cdef ImFontAtlasCustomRect from_ptr(ccimgui.ImFontAtlasCustomRect* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontAtlasCustomRect wrapper = ImFontAtlasCustomRect.__new__(ImFontAtlasCustomRect)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlasCustomRect.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9748
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_21ImFontAtlasCustomRect_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_21ImFontAtlasCustomRect_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_21ImFontAtlasCustomRect___init__(((struct __pyx_obj_4core_ImFontAtlasCustomRect *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_21ImFontAtlasCustomRect___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":9749
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 9749, __pyx_L1_error)

  /* "core.pyx":9748
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlasCustomRect.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_21ImFontAtlasCustomRect_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_21ImFontAtlasCustomRect_2__reduce_cython__[] = "ImFontAtlasCustomRect.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_21ImFontAtlasCustomRect_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_21ImFontAtlasCustomRect_2__reduce_cython__(((struct __pyx_obj_4core_ImFontAtlasCustomRect *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_21ImFontAtlasCustomRect_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlasCustomRect.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_21ImFontAtlasCustomRect_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_21ImFontAtlasCustomRect_4__setstate_cython__[] = "ImFontAtlasCustomRect.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_21ImFontAtlasCustomRect_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_21ImFontAtlasCustomRect_4__setstate_cython__(((struct __pyx_obj_4core_ImFontAtlasCustomRect *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_21ImFontAtlasCustomRect_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlasCustomRect *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontAtlasCustomRect.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9893
 * 
 *     @staticmethod
 *     cdef ImFontConfig from_ptr(ccimgui.ImFontConfig* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontConfig wrapper = ImFontConfig.__new__(ImFontConfig)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImFontConfig *__pyx_f_4core_12ImFontConfig_from_ptr(ImFontConfig *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImFontConfig *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImFontConfig *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":9894
 *     @staticmethod
 *     cdef ImFontConfig from_ptr(ccimgui.ImFontConfig* _ptr):
 *         cdef ImFontConfig wrapper = ImFontConfig.__new__(ImFontConfig)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImFontConfig(((PyTypeObject *)__pyx_ptype_4core_ImFontConfig), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9894, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImFontConfig *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":9895
 *     cdef ImFontConfig from_ptr(ccimgui.ImFontConfig* _ptr):
 *         cdef ImFontConfig wrapper = ImFontConfig.__new__(ImFontConfig)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":9896
 *         cdef ImFontConfig wrapper = ImFontConfig.__new__(ImFontConfig)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":9893
 * 
 *     @staticmethod
 *     cdef ImFontConfig from_ptr(ccimgui.ImFontConfig* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontConfig wrapper = ImFontConfig.__new__(ImFontConfig)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontConfig.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":9898
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_12ImFontConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_12ImFontConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_12ImFontConfig___init__(((struct __pyx_obj_4core_ImFontConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_12ImFontConfig___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontConfig *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":9899
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 9899, __pyx_L1_error)

  /* "core.pyx":9898
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontConfig.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImFontConfig_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_12ImFontConfig_2__reduce_cython__[] = "ImFontConfig.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_12ImFontConfig_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImFontConfig_2__reduce_cython__(((struct __pyx_obj_4core_ImFontConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImFontConfig_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontConfig.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImFontConfig_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_12ImFontConfig_4__setstate_cython__[] = "ImFontConfig.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_12ImFontConfig_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImFontConfig_4__setstate_cython__(((struct __pyx_obj_4core_ImFontConfig *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImFontConfig_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontConfig.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10177
 * 
 *     @staticmethod
 *     cdef ImFontGlyphRangesBuilder from_ptr(ccimgui.ImFontGlyphRangesBuilder* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontGlyphRangesBuilder wrapper = ImFontGlyphRangesBuilder.__new__(ImFontGlyphRangesBuilder)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_f_4core_24ImFontGlyphRangesBuilder_from_ptr(ImFontGlyphRangesBuilder *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":10178
 *     @staticmethod
 *     cdef ImFontGlyphRangesBuilder from_ptr(ccimgui.ImFontGlyphRangesBuilder* _ptr):
 *         cdef ImFontGlyphRangesBuilder wrapper = ImFontGlyphRangesBuilder.__new__(ImFontGlyphRangesBuilder)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImFontGlyphRangesBuilder(((PyTypeObject *)__pyx_ptype_4core_ImFontGlyphRangesBuilder), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10178, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImFontGlyphRangesBuilder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":10179
 *     cdef ImFontGlyphRangesBuilder from_ptr(ccimgui.ImFontGlyphRangesBuilder* _ptr):
 *         cdef ImFontGlyphRangesBuilder wrapper = ImFontGlyphRangesBuilder.__new__(ImFontGlyphRangesBuilder)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":10180
 *         cdef ImFontGlyphRangesBuilder wrapper = ImFontGlyphRangesBuilder.__new__(ImFontGlyphRangesBuilder)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":10177
 * 
 *     @staticmethod
 *     cdef ImFontGlyphRangesBuilder from_ptr(ccimgui.ImFontGlyphRangesBuilder* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontGlyphRangesBuilder wrapper = ImFontGlyphRangesBuilder.__new__(ImFontGlyphRangesBuilder)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyphRangesBuilder.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10182
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_24ImFontGlyphRangesBuilder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_24ImFontGlyphRangesBuilder_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_24ImFontGlyphRangesBuilder___init__(((struct __pyx_obj_4core_ImFontGlyphRangesBuilder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_24ImFontGlyphRangesBuilder___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":10183
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 10183, __pyx_L1_error)

  /* "core.pyx":10182
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyphRangesBuilder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_24ImFontGlyphRangesBuilder_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_24ImFontGlyphRangesBuilder_2__reduce_cython__[] = "ImFontGlyphRangesBuilder.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_24ImFontGlyphRangesBuilder_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_24ImFontGlyphRangesBuilder_2__reduce_cython__(((struct __pyx_obj_4core_ImFontGlyphRangesBuilder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_24ImFontGlyphRangesBuilder_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyphRangesBuilder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_24ImFontGlyphRangesBuilder_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_24ImFontGlyphRangesBuilder_4__setstate_cython__[] = "ImFontGlyphRangesBuilder.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_24ImFontGlyphRangesBuilder_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_24ImFontGlyphRangesBuilder_4__setstate_cython__(((struct __pyx_obj_4core_ImFontGlyphRangesBuilder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_24ImFontGlyphRangesBuilder_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontGlyphRangesBuilder *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontGlyphRangesBuilder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10304
 * 
 *     @staticmethod
 *     cdef ImGuiIO from_ptr(ccimgui.ImGuiIO* _ptr):             # <<<<<<<<<<<<<<
 *        cdef ImGuiIO wrapper = ImGuiIO.__new__(ImGuiIO)
 *        wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiIO *__pyx_f_4core_7ImGuiIO_from_ptr(ImGuiIO *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiIO *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiIO *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImGuiContext *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  uintptr_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":10305
 *     @staticmethod
 *     cdef ImGuiIO from_ptr(ccimgui.ImGuiIO* _ptr):
 *        cdef ImGuiIO wrapper = ImGuiIO.__new__(ImGuiIO)             # <<<<<<<<<<<<<<
 *        wrapper._ptr = _ptr
 *        if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiIO(((PyTypeObject *)__pyx_ptype_4core_ImGuiIO), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10305, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiIO *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":10306
 *     cdef ImGuiIO from_ptr(ccimgui.ImGuiIO* _ptr):
 *        cdef ImGuiIO wrapper = ImGuiIO.__new__(ImGuiIO)
 *        wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *        if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:
 *            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":10307
 *        cdef ImGuiIO wrapper = ImGuiIO.__new__(ImGuiIO)
 *        wrapper._ptr = _ptr
 *        if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:             # <<<<<<<<<<<<<<
 *            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {
 *                '_get_clipboard_text_fn': None,
 */
  try {
    __pyx_t_2 = igGetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 10307, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_t_3, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 10307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "core.pyx":10309
 *        if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:
 *            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {
 *                '_get_clipboard_text_fn': None,             # <<<<<<<<<<<<<<
 *                '_set_clipboard_text_fn': None
 *        }
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_get_clipboard_text_fn, Py_None) < 0) __PYX_ERR(0, 10309, __pyx_L1_error)

    /* "core.pyx":10310
 *            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {
 *                '_get_clipboard_text_fn': None,
 *                '_set_clipboard_text_fn': None             # <<<<<<<<<<<<<<
 *        }
 *        return wrapper
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_set_clipboard_text_fn, Py_None) < 0) __PYX_ERR(0, 10309, __pyx_L1_error)

    /* "core.pyx":10308
 *        wrapper._ptr = _ptr
 *        if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:
 *            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {             # <<<<<<<<<<<<<<
 *                '_get_clipboard_text_fn': None,
 *                '_set_clipboard_text_fn': None
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    try {
      __pyx_t_2 = igGetCurrentContext();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 10308, __pyx_L1_error)
    }
    __pyx_t_6 = ((uintptr_t)__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_t_1, __pyx_t_6, __pyx_t_3, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 10308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "core.pyx":10307
 *        cdef ImGuiIO wrapper = ImGuiIO.__new__(ImGuiIO)
 *        wrapper._ptr = _ptr
 *        if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:             # <<<<<<<<<<<<<<
 *            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {
 *                '_get_clipboard_text_fn': None,
 */
  }

  /* "core.pyx":10312
 *                '_set_clipboard_text_fn': None
 *        }
 *        return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":10304
 * 
 *     @staticmethod
 *     cdef ImGuiIO from_ptr(ccimgui.ImGuiIO* _ptr):             # <<<<<<<<<<<<<<
 *        cdef ImGuiIO wrapper = ImGuiIO.__new__(ImGuiIO)
 *        wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.ImGuiIO.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10314
 *        return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_7ImGuiIO___init__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":10315
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 10315, __pyx_L1_error)

  /* "core.pyx":10314
 *        return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiIO.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10323
 *     # ?returns(int)
 *     @property
 *     def config_flags(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImGuiConfigFlags res = dereference(self._ptr).ConfigFlags
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_12config_flags_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_12config_flags_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_12config_flags___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_12config_flags___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  ImGuiConfigFlags __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiConfigFlags __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":10324
 *     @property
 *     def config_flags(self):
 *         cdef ccimgui.ImGuiConfigFlags res = dereference(self._ptr).ConfigFlags             # <<<<<<<<<<<<<<
 *         return res
 *     @config_flags.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).ConfigFlags;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":10325
 *     def config_flags(self):
 *         cdef ccimgui.ImGuiConfigFlags res = dereference(self._ptr).ConfigFlags
 *         return res             # <<<<<<<<<<<<<<
 *     @config_flags.setter
 *     def config_flags(self, value: int):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiConfigFlags(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":10323
 *     # ?returns(int)
 *     @property
 *     def config_flags(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImGuiConfigFlags res = dereference(self._ptr).ConfigFlags
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.config_flags.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10327
 *         return res
 *     @config_flags.setter
 *     def config_flags(self, value: int):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).ConfigFlags = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_12config_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_12config_flags_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_12config_flags_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_12config_flags_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImGuiConfigFlags __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":10328
 *     @config_flags.setter
 *     def config_flags(self, value: int):
 *         dereference(self._ptr).ConfigFlags = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_ImGuiConfigFlags(__pyx_v_value); if (unlikely((__pyx_t_1 == ((ImGuiConfigFlags)-1)) && PyErr_Occurred())) __PYX_ERR(0, 10328, __pyx_L1_error)
  (*__pyx_v_self->_ptr).ConfigFlags = __pyx_t_1;

  /* "core.pyx":10327
 *         return res
 *     @config_flags.setter
 *     def config_flags(self, value: int):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).ConfigFlags = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.config_flags.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10349
 *     # ?returns(tuple)
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplaySize)
 *     @display_size.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_12display_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_12display_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_12display_size___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_12display_size___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":10350
 *     @property
 *     def display_size(self):
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplaySize)             # <<<<<<<<<<<<<<
 *     @display_size.setter
 *     def display_size(self, value: tuple):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple((*__pyx_v_self->_ptr).DisplaySize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":10349
 *     # ?returns(tuple)
 *     @property
 *     def display_size(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplaySize)
 *     @display_size.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiIO.display_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10352
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplaySize)
 *     @display_size.setter
 *     def display_size(self, value: tuple):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).DisplaySize = _cast_tuple_ImVec2(value)
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_12display_size_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) __PYX_ERR(0, 10352, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_7ImGuiIO_12display_size_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_12display_size_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":10353
 *     @display_size.setter
 *     def display_size(self, value: tuple):
 *         dereference(self._ptr).DisplaySize = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  try {
    __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 10353, __pyx_L1_error)
  }
  (*__pyx_v_self->_ptr).DisplaySize = __pyx_t_1;

  /* "core.pyx":10352
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplaySize)
 *     @display_size.setter
 *     def display_size(self, value: tuple):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).DisplaySize = _cast_tuple_ImVec2(value)
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.display_size.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10361
 *     # ?returns(float)
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).DeltaTime
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_10delta_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_10delta_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_10delta_time___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_10delta_time___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  float __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":10362
 *     @property
 *     def delta_time(self):
 *         cdef float res = dereference(self._ptr).DeltaTime             # <<<<<<<<<<<<<<
 *         return res
 *     @delta_time.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).DeltaTime;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":10363
 *     def delta_time(self):
 *         cdef float res = dereference(self._ptr).DeltaTime
 *         return res             # <<<<<<<<<<<<<<
 *     @delta_time.setter
 *     def delta_time(self, value: float):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":10361
 *     # ?returns(float)
 *     @property
 *     def delta_time(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).DeltaTime
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.delta_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10365
 *         return res
 *     @delta_time.setter
 *     def delta_time(self, value: float):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).DeltaTime = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_10delta_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 10365, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.delta_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_10delta_time_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_10delta_time_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":10366
 *     @delta_time.setter
 *     def delta_time(self, value: float):
 *         dereference(self._ptr).DeltaTime = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).DeltaTime = __pyx_v_value;

  /* "core.pyx":10365
 *         return res
 *     @delta_time.setter
 *     def delta_time(self, value: float):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).DeltaTime = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10517
 *     # ?returns(ImFontAtlas)
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImFontAtlas* res = dereference(self._ptr).Fonts
 *         return ImFontAtlas.from_ptr(res)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_5fonts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_5fonts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_5fonts___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_5fonts___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  ImFontAtlas *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImFontAtlas *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":10518
 *     @property
 *     def fonts(self):
 *         cdef ccimgui.ImFontAtlas* res = dereference(self._ptr).Fonts             # <<<<<<<<<<<<<<
 *         return ImFontAtlas.from_ptr(res)
 *     @fonts.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).Fonts;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":10519
 *     def fonts(self):
 *         cdef ccimgui.ImFontAtlas* res = dereference(self._ptr).Fonts
 *         return ImFontAtlas.from_ptr(res)             # <<<<<<<<<<<<<<
 *     @fonts.setter
 *     def fonts(self, value: ImFontAtlas):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_f_4core_11ImFontAtlas_from_ptr(__pyx_v_res)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":10517
 *     # ?returns(ImFontAtlas)
 *     @property
 *     def fonts(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImFontAtlas* res = dereference(self._ptr).Fonts
 *         return ImFontAtlas.from_ptr(res)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.fonts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10521
 *         return ImFontAtlas.from_ptr(res)
 *     @fonts.setter
 *     def fonts(self, value: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Fonts = value._ptr
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_5fonts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_5fonts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_4core_ImFontAtlas, 1, "value", 0))) __PYX_ERR(0, 10521, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_7ImGuiIO_5fonts_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((struct __pyx_obj_4core_ImFontAtlas *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_5fonts_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImFontAtlas *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":10523
 *     def fonts(self, value: ImFontAtlas):
 *         # dereference(self._ptr).Fonts = value._ptr
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 10523, __pyx_L1_error)

  /* "core.pyx":10521
 *         return ImFontAtlas.from_ptr(res)
 *     @fonts.setter
 *     def fonts(self, value: ImFontAtlas):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Fonts = value._ptr
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.fonts.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10570
 *     # ?returns(tuple)
 *     @property
 *     def display_framebuffer_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplayFramebufferScale)
 *     @display_framebuffer_scale.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_25display_framebuffer_scale_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_25display_framebuffer_scale_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_25display_framebuffer_scale___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_25display_framebuffer_scale___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":10571
 *     @property
 *     def display_framebuffer_scale(self):
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplayFramebufferScale)             # <<<<<<<<<<<<<<
 *     @display_framebuffer_scale.setter
 *     def display_framebuffer_scale(self, value: tuple):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple((*__pyx_v_self->_ptr).DisplayFramebufferScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":10570
 *     # ?returns(tuple)
 *     @property
 *     def display_framebuffer_scale(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplayFramebufferScale)
 *     @display_framebuffer_scale.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiIO.display_framebuffer_scale.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10573
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplayFramebufferScale)
 *     @display_framebuffer_scale.setter
 *     def display_framebuffer_scale(self, value: tuple):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_25display_framebuffer_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_25display_framebuffer_scale_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) __PYX_ERR(0, 10573, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_7ImGuiIO_25display_framebuffer_scale_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_25display_framebuffer_scale_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":10574
 *     @display_framebuffer_scale.setter
 *     def display_framebuffer_scale(self, value: tuple):
 *         dereference(self._ptr).DisplayFramebufferScale = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  try {
    __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 10574, __pyx_L1_error)
  }
  (*__pyx_v_self->_ptr).DisplayFramebufferScale = __pyx_t_1;

  /* "core.pyx":10573
 *         return _cast_ImVec2_tuple(dereference(self._ptr).DisplayFramebufferScale)
 *     @display_framebuffer_scale.setter
 *     def display_framebuffer_scale(self, value: tuple):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).DisplayFramebufferScale = _cast_tuple_ImVec2(value)
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.display_framebuffer_scale.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10894
 *     # ?returns(Callable)
 *     @property
 *     def get_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']
 *     @get_clipboard_text_fn.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_21get_clipboard_text_fn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_21get_clipboard_text_fn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_21get_clipboard_text_fn___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_21get_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImGuiContext *__pyx_t_2;
  uintptr_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":10895
 *     @property
 *     def get_clipboard_text_fn(self):
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']             # <<<<<<<<<<<<<<
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, value: Callable):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = igGetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 10895, __pyx_L1_error)
  }
  __pyx_t_3 = ((uintptr_t)__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_3, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_u_get_clipboard_text_fn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":10894
 *     # ?returns(Callable)
 *     @property
 *     def get_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']
 *     @get_clipboard_text_fn.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.ImGuiIO.get_clipboard_text_fn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10897
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, value: Callable):             # <<<<<<<<<<<<<<
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = value
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_21get_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_21get_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_21get_clipboard_text_fn_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_21get_clipboard_text_fn_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ImGuiContext *__pyx_t_4;
  uintptr_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char const *(*__pyx_t_7)(void *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":10898
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, value: Callable):
 *         if callable(value):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = value
 *             dereference(self._ptr).GetClipboardTextFn = self._get_clipboard_text
 */
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_value); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 10898, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "core.pyx":10899
 *     def get_clipboard_text_fn(self, value: Callable):
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = value             # <<<<<<<<<<<<<<
 *             dereference(self._ptr).GetClipboardTextFn = self._get_clipboard_text
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = igGetCurrentContext();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 10899, __pyx_L1_error)
    }
    __pyx_t_5 = ((uintptr_t)__pyx_t_4);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_5, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 10899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_n_u_get_clipboard_text_fn, __pyx_v_value) < 0)) __PYX_ERR(0, 10899, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "core.pyx":10900
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = value
 *             dereference(self._ptr).GetClipboardTextFn = self._get_clipboard_text             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(value))
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_4core_ImGuiIO *)__pyx_v_self->__pyx_vtab)->_get_clipboard_text;
    (*__pyx_v_self->_ptr).GetClipboardTextFn = __pyx_t_7;

    /* "core.pyx":10898
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, value: Callable):
 *         if callable(value):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = value
 *             dereference(self._ptr).GetClipboardTextFn = self._get_clipboard_text
 */
    goto __pyx_L3;
  }

  /* "core.pyx":10902
 *             dereference(self._ptr).GetClipboardTextFn = self._get_clipboard_text
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(value))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 10902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_func_is_not_a_callable_s, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 10902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 10902, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "core.pyx":10897
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']
 *     @get_clipboard_text_fn.setter
 *     def get_clipboard_text_fn(self, value: Callable):             # <<<<<<<<<<<<<<
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.ImGuiIO.get_clipboard_text_fn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10905
 * 
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):             # <<<<<<<<<<<<<<
 *         text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:
 */

static char const *__pyx_f_4core_7ImGuiIO__get_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data) {
  PyObject *__pyx_v_text = NULL;
  char const *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  ImGuiContext *__pyx_t_3;
  uintptr_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  char const *__pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_clipboard_text", 0);

  /* "core.pyx":10906
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()             # <<<<<<<<<<<<<<
 *         if type(text) is bytes:
 *             return text
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = igGetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 10906, __pyx_L1_error)
  }
  __pyx_t_4 = ((uintptr_t)__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_4, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 10906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_get_clipboard_text_fn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_text = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "core.pyx":10907
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:             # <<<<<<<<<<<<<<
 *             return text
 *         return _bytes(text)
 */
  __pyx_t_6 = (((PyObject *)Py_TYPE(__pyx_v_text)) == ((PyObject *)(&PyBytes_Type)));
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "core.pyx":10908
 *         text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:
 *             return text             # <<<<<<<<<<<<<<
 *         return _bytes(text)
 *     # [End Field]
 */
    __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_text); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 10908, __pyx_L1_error)
    __pyx_r = __pyx_t_8;
    goto __pyx_L0;

    /* "core.pyx":10907
 *     cdef const char* _get_clipboard_text(void* user_data):
 *         text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:             # <<<<<<<<<<<<<<
 *             return text
 *         return _bytes(text)
 */
  }

  /* "core.pyx":10909
 *         if type(text) is bytes:
 *             return text
 *         return _bytes(text)             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_text))||((__pyx_v_text) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_text)->tp_name), 0))) __PYX_ERR(0, 10909, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_4core__bytes(((PyObject*)__pyx_v_text)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 10909, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 10909, __pyx_L1_error)
  __pyx_r = __pyx_t_8;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":10905
 * 
 *     @staticmethod
 *     cdef const char* _get_clipboard_text(void* user_data):             # <<<<<<<<<<<<<<
 *         text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()
 *         if type(text) is bytes:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("core.ImGuiIO._get_clipboard_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_text);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10917
 *     # ?returns(Callable)
 *     @property
 *     def set_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn']
 *     @set_clipboard_text_fn.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_21set_clipboard_text_fn_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_21set_clipboard_text_fn_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_21set_clipboard_text_fn___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_21set_clipboard_text_fn___get__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  ImGuiContext *__pyx_t_2;
  uintptr_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":10918
 *     @property
 *     def set_clipboard_text_fn(self):
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn']             # <<<<<<<<<<<<<<
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, value: Callable):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  try {
    __pyx_t_2 = igGetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 10918, __pyx_L1_error)
  }
  __pyx_t_3 = ((uintptr_t)__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, __pyx_t_3, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_u_set_clipboard_text_fn); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":10917
 *     # ?returns(Callable)
 *     @property
 *     def set_clipboard_text_fn(self):             # <<<<<<<<<<<<<<
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn']
 *     @set_clipboard_text_fn.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("core.ImGuiIO.set_clipboard_text_fn.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10920
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn']
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, value: Callable):             # <<<<<<<<<<<<<<
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = value
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_21set_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_21set_clipboard_text_fn_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_21set_clipboard_text_fn_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_21set_clipboard_text_fn_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ImGuiContext *__pyx_t_4;
  uintptr_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  void (*__pyx_t_7)(void *, char const *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":10921
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, value: Callable):
 *         if callable(value):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = value
 *             dereference(self._ptr).SetClipboardTextFn = self._set_clipboard_text
 */
  __pyx_t_1 = __Pyx_PyCallable_Check(__pyx_v_value); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 10921, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "core.pyx":10922
 *     def set_clipboard_text_fn(self, value: Callable):
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = value             # <<<<<<<<<<<<<<
 *             dereference(self._ptr).SetClipboardTextFn = self._set_clipboard_text
 *         else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_4 = igGetCurrentContext();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 10922, __pyx_L1_error)
    }
    __pyx_t_5 = ((uintptr_t)__pyx_t_4);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_t_5, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 10922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_n_u_set_clipboard_text_fn, __pyx_v_value) < 0)) __PYX_ERR(0, 10922, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "core.pyx":10923
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = value
 *             dereference(self._ptr).SetClipboardTextFn = self._set_clipboard_text             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(value))
 */
    __pyx_t_7 = ((struct __pyx_vtabstruct_4core_ImGuiIO *)__pyx_v_self->__pyx_vtab)->_set_clipboard_text;
    (*__pyx_v_self->_ptr).SetClipboardTextFn = __pyx_t_7;

    /* "core.pyx":10921
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, value: Callable):
 *         if callable(value):             # <<<<<<<<<<<<<<
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = value
 *             dereference(self._ptr).SetClipboardTextFn = self._set_clipboard_text
 */
    goto __pyx_L3;
  }

  /* "core.pyx":10925
 *             dereference(self._ptr).SetClipboardTextFn = self._set_clipboard_text
 *         else:
 *             raise ValueError("func is not a callable: %s" % str(value))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 10925, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_func_is_not_a_callable_s, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10925, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 10925, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 10925, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "core.pyx":10920
 *         return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn']
 *     @set_clipboard_text_fn.setter
 *     def set_clipboard_text_fn(self, value: Callable):             # <<<<<<<<<<<<<<
 *         if callable(value):
 *             _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.ImGuiIO.set_clipboard_text_fn.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":10928
 * 
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):             # <<<<<<<<<<<<<<
 *         _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))
 *     # [End Field]
 */

static void __pyx_f_4core_7ImGuiIO__set_clipboard_text(CYTHON_UNUSED void *__pyx_v_user_data, char const *__pyx_v_text) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  ImGuiContext *__pyx_t_3;
  uintptr_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_clipboard_text", 0);

  /* "core.pyx":10929
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):
 *         _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_io_clipboard); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = igGetCurrentContext();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 10929, __pyx_L1_error)
  }
  __pyx_t_4 = ((uintptr_t)__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_4, uintptr_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 10929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_set_clipboard_text_fn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 10929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_f_4core__from_bytes(((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 10929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":10928
 * 
 *     @staticmethod
 *     cdef void _set_clipboard_text(void* user_data, const char* text):             # <<<<<<<<<<<<<<
 *         _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))
 *     # [End Field]
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("core.ImGuiIO._set_clipboard_text", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "core.pyx":11067
 *     # ?returns(float)
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).Framerate
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_9framerate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_9framerate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9framerate___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_9framerate___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  float __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11068
 *     @property
 *     def framerate(self):
 *         cdef float res = dereference(self._ptr).Framerate             # <<<<<<<<<<<<<<
 *         return res
 *     @framerate.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).Framerate;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":11069
 *     def framerate(self):
 *         cdef float res = dereference(self._ptr).Framerate
 *         return res             # <<<<<<<<<<<<<<
 *     @framerate.setter
 *     def framerate(self, value: float):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":11067
 *     # ?returns(float)
 *     @property
 *     def framerate(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).Framerate
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.framerate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11071
 *         return res
 *     @framerate.setter
 *     def framerate(self, value: float):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Framerate = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_9framerate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_9framerate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  CYTHON_UNUSED double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 11071, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.framerate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9framerate_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_9framerate_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11073
 *     def framerate(self, value: float):
 *         # dereference(self._ptr).Framerate = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 11073, __pyx_L1_error)

  /* "core.pyx":11071
 *         return res
 *     @framerate.setter
 *     def framerate(self, value: float):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).Framerate = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.framerate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11159
 *     # ?returns(int)
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray res = cvarray(
 *             shape=(ccimgui.ImGuiKey.ImGuiKey_COUNT,),
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_7key_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_7key_map_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_7key_map___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_7key_map___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11161
 *     def key_map(self):
 *         cdef cvarray res = cvarray(
 *             shape=(ccimgui.ImGuiKey.ImGuiKey_COUNT,),             # <<<<<<<<<<<<<<
 *             format='i',
 *             itemsize=sizeof(int),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_COUNT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 11161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_u_i) < 0) __PYX_ERR(0, 11161, __pyx_L1_error)

  /* "core.pyx":11163
 *             shape=(ccimgui.ImGuiKey.ImGuiKey_COUNT,),
 *             format='i',
 *             itemsize=sizeof(int),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(0, 11161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":11164
 *             format='i',
 *             itemsize=sizeof(int),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         res.data = <char*>(dereference(self._ptr).KeyMap)
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 11161, __pyx_L1_error)

  /* "core.pyx":11160
 *     @property
 *     def key_map(self):
 *         cdef cvarray res = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(ccimgui.ImGuiKey.ImGuiKey_COUNT,),
 *             format='i',
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_array_obj *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "core.pyx":11166
 *             allocate_buffer=False
 *         )
 *         res.data = <char*>(dereference(self._ptr).KeyMap)             # <<<<<<<<<<<<<<
 *         return res
 *     @key_map.setter
 */
  __pyx_v_res->data = ((char *)(*__pyx_v_self->_ptr).KeyMap);

  /* "core.pyx":11167
 *         )
 *         res.data = <char*>(dereference(self._ptr).KeyMap)
 *         return res             # <<<<<<<<<<<<<<
 *     @key_map.setter
 *     def key_map(self, value: int):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "core.pyx":11159
 *     # ?returns(int)
 *     @property
 *     def key_map(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray res = cvarray(
 *             shape=(ccimgui.ImGuiKey.ImGuiKey_COUNT,),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("core.ImGuiIO.key_map.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11169
 *         return res
 *     @key_map.setter
 *     def key_map(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).KeyMap = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_7key_map_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_7key_map_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_7key_map_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_7key_map_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11171
 *     def key_map(self, value: int):
 *         # dereference(self._ptr).KeyMap = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 11171, __pyx_L1_error)

  /* "core.pyx":11169
 *         return res
 *     @key_map.setter
 *     def key_map(self, value: int):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).KeyMap = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.key_map.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11179
 *     # ?returns(List[bool])
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray res = cvarray(
 *             shape=(512,),
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_9keys_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_9keys_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9keys_down___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_9keys_down___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11181
 *     def keys_down(self):
 *         cdef cvarray res = cvarray(
 *             shape=(512,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__91) < 0) __PYX_ERR(0, 11181, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_u_b) < 0) __PYX_ERR(0, 11181, __pyx_L1_error)

  /* "core.pyx":11183
 *             shape=(512,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 11181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":11184
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         res.data = <char*>dereference(self._ptr).KeysDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 11181, __pyx_L1_error)

  /* "core.pyx":11180
 *     @property
 *     def keys_down(self):
 *         cdef cvarray res = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(512,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":11186
 *             allocate_buffer=False
 *         )
 *         res.data = <char*>dereference(self._ptr).KeysDown             # <<<<<<<<<<<<<<
 *         return res
 *     @keys_down.setter
 */
  __pyx_v_res->data = ((char *)(*__pyx_v_self->_ptr).KeysDown);

  /* "core.pyx":11187
 *         )
 *         res.data = <char*>dereference(self._ptr).KeysDown
 *         return res             # <<<<<<<<<<<<<<
 *     @keys_down.setter
 *     def keys_down(self, value: Any):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "core.pyx":11179
 *     # ?returns(List[bool])
 *     @property
 *     def keys_down(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray res = cvarray(
 *             shape=(512,),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.keys_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11189
 *         return res
 *     @keys_down.setter
 *     def keys_down(self, value: Any):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).KeysDown = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_9keys_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_9keys_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9keys_down_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_9keys_down_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11191
 *     def keys_down(self, value: Any):
 *         # dereference(self._ptr).KeysDown = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 11191, __pyx_L1_error)

  /* "core.pyx":11189
 *         return res
 *     @keys_down.setter
 *     def keys_down(self, value: Any):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).KeysDown = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.keys_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11225
 *     # ?returns(tuple)
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(dereference(self._ptr).MousePos)
 *     @mouse_pos.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_9mouse_pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_9mouse_pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9mouse_pos___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_9mouse_pos___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11226
 *     @property
 *     def mouse_pos(self):
 *         return _cast_ImVec2_tuple(dereference(self._ptr).MousePos)             # <<<<<<<<<<<<<<
 *     @mouse_pos.setter
 *     def mouse_pos(self, value: tuple):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4core__cast_ImVec2_tuple((*__pyx_v_self->_ptr).MousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":11225
 *     # ?returns(tuple)
 *     @property
 *     def mouse_pos(self):             # <<<<<<<<<<<<<<
 *         return _cast_ImVec2_tuple(dereference(self._ptr).MousePos)
 *     @mouse_pos.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiIO.mouse_pos.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11228
 *         return _cast_ImVec2_tuple(dereference(self._ptr).MousePos)
 *     @mouse_pos.setter
 *     def mouse_pos(self, value: tuple):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).MousePos = _cast_tuple_ImVec2(value)
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_9mouse_pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyTuple_Type), 1, "value", 1))) __PYX_ERR(0, 11228, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9mouse_pos_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_9mouse_pos_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  ImVec2 __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11229
 *     @mouse_pos.setter
 *     def mouse_pos(self, value: tuple):
 *         dereference(self._ptr).MousePos = _cast_tuple_ImVec2(value)             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  try {
    __pyx_t_1 = __pyx_f_4core__cast_tuple_ImVec2(__pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 11229, __pyx_L1_error)
  }
  (*__pyx_v_self->_ptr).MousePos = __pyx_t_1;

  /* "core.pyx":11228
 *         return _cast_ImVec2_tuple(dereference(self._ptr).MousePos)
 *     @mouse_pos.setter
 *     def mouse_pos(self, value: tuple):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).MousePos = _cast_tuple_ImVec2(value)
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.mouse_pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11237
 *     # ?returns(List[bool])
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray res = cvarray(
 *             shape=(5,),
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_10mouse_down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_10mouse_down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_10mouse_down___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_10mouse_down___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  struct __pyx_array_obj *__pyx_v_res = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11239
 *     def mouse_down(self):
 *         cdef cvarray res = cvarray(
 *             shape=(5,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_tuple__92) < 0) __PYX_ERR(0, 11239, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_u_b) < 0) __PYX_ERR(0, 11239, __pyx_L1_error)

  /* "core.pyx":11241
 *             shape=(5,),
 *             format='b',
 *             itemsize=sizeof(bool),             # <<<<<<<<<<<<<<
 *             allocate_buffer=False
 *         )
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(bool))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 11239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":11242
 *             format='b',
 *             itemsize=sizeof(bool),
 *             allocate_buffer=False             # <<<<<<<<<<<<<<
 *         )
 *         res.data = <char*>dereference(self._ptr).MouseDown
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 11239, __pyx_L1_error)

  /* "core.pyx":11238
 *     @property
 *     def mouse_down(self):
 *         cdef cvarray res = cvarray(             # <<<<<<<<<<<<<<
 *             shape=(5,),
 *             format='b',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_res = ((struct __pyx_array_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "core.pyx":11244
 *             allocate_buffer=False
 *         )
 *         res.data = <char*>dereference(self._ptr).MouseDown             # <<<<<<<<<<<<<<
 *         return res
 *     @mouse_down.setter
 */
  __pyx_v_res->data = ((char *)(*__pyx_v_self->_ptr).MouseDown);

  /* "core.pyx":11245
 *         )
 *         res.data = <char*>dereference(self._ptr).MouseDown
 *         return res             # <<<<<<<<<<<<<<
 *     @mouse_down.setter
 *     def mouse_down(self, value: Any):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_res));
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "core.pyx":11237
 *     # ?returns(List[bool])
 *     @property
 *     def mouse_down(self):             # <<<<<<<<<<<<<<
 *         cdef cvarray res = cvarray(
 *             shape=(5,),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.mouse_down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11247
 *         return res
 *     @mouse_down.setter
 *     def mouse_down(self, value: Any):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).MouseDown = value
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_10mouse_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_10mouse_down_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_10mouse_down_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_10mouse_down_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11249
 *     def mouse_down(self, value: Any):
 *         # dereference(self._ptr).MouseDown = value
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 11249, __pyx_L1_error)

  /* "core.pyx":11247
 *         return res
 *     @mouse_down.setter
 *     def mouse_down(self, value: Any):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).MouseDown = value
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.mouse_down.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11257
 *     # ?returns(float)
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).MouseWheel
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_11mouse_wheel_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_11mouse_wheel_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_11mouse_wheel___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_11mouse_wheel___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  float __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11258
 *     @property
 *     def mouse_wheel(self):
 *         cdef float res = dereference(self._ptr).MouseWheel             # <<<<<<<<<<<<<<
 *         return res
 *     @mouse_wheel.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).MouseWheel;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":11259
 *     def mouse_wheel(self):
 *         cdef float res = dereference(self._ptr).MouseWheel
 *         return res             # <<<<<<<<<<<<<<
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, value: float):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":11257
 *     # ?returns(float)
 *     @property
 *     def mouse_wheel(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).MouseWheel
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.mouse_wheel.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11261
 *         return res
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, value: float):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).MouseWheel = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_11mouse_wheel_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 11261, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.mouse_wheel.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_11mouse_wheel_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_11mouse_wheel_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11262
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, value: float):
 *         dereference(self._ptr).MouseWheel = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).MouseWheel = __pyx_v_value;

  /* "core.pyx":11261
 *         return res
 *     @mouse_wheel.setter
 *     def mouse_wheel(self, value: float):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).MouseWheel = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11270
 *     # ?returns(float)
 *     @property
 *     def mouse_wheelh(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).MouseWheelH
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_12mouse_wheelh_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_12mouse_wheelh_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_12mouse_wheelh___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_12mouse_wheelh___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  float __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11271
 *     @property
 *     def mouse_wheelh(self):
 *         cdef float res = dereference(self._ptr).MouseWheelH             # <<<<<<<<<<<<<<
 *         return res
 *     @mouse_wheelh.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).MouseWheelH;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":11272
 *     def mouse_wheelh(self):
 *         cdef float res = dereference(self._ptr).MouseWheelH
 *         return res             # <<<<<<<<<<<<<<
 *     @mouse_wheelh.setter
 *     def mouse_wheelh(self, value: float):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":11270
 *     # ?returns(float)
 *     @property
 *     def mouse_wheelh(self):             # <<<<<<<<<<<<<<
 *         cdef float res = dereference(self._ptr).MouseWheelH
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.mouse_wheelh.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11274
 *         return res
 *     @mouse_wheelh.setter
 *     def mouse_wheelh(self, value: float):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).MouseWheelH = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_12mouse_wheelh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_12mouse_wheelh_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 11274, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.mouse_wheelh.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_12mouse_wheelh_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_12mouse_wheelh_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11275
 *     @mouse_wheelh.setter
 *     def mouse_wheelh(self, value: float):
 *         dereference(self._ptr).MouseWheelH = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).MouseWheelH = __pyx_v_value;

  /* "core.pyx":11274
 *         return res
 *     @mouse_wheelh.setter
 *     def mouse_wheelh(self, value: float):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).MouseWheelH = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11296
 *     # ?returns(bool)
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeyCtrl
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_8key_ctrl_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_8key_ctrl_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_8key_ctrl___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_8key_ctrl___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  bool __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11297
 *     @property
 *     def key_ctrl(self):
 *         cdef bool res = dereference(self._ptr).KeyCtrl             # <<<<<<<<<<<<<<
 *         return res
 *     @key_ctrl.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).KeyCtrl;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":11298
 *     def key_ctrl(self):
 *         cdef bool res = dereference(self._ptr).KeyCtrl
 *         return res             # <<<<<<<<<<<<<<
 *     @key_ctrl.setter
 *     def key_ctrl(self, value: bool):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":11296
 *     # ?returns(bool)
 *     @property
 *     def key_ctrl(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeyCtrl
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.key_ctrl.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11300
 *         return res
 *     @key_ctrl.setter
 *     def key_ctrl(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeyCtrl = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_8key_ctrl_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 11300, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.key_ctrl.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_8key_ctrl_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_8key_ctrl_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11301
 *     @key_ctrl.setter
 *     def key_ctrl(self, value: bool):
 *         dereference(self._ptr).KeyCtrl = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).KeyCtrl = __pyx_v_value;

  /* "core.pyx":11300
 *         return res
 *     @key_ctrl.setter
 *     def key_ctrl(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeyCtrl = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11309
 *     # ?returns(bool)
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeyShift
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_9key_shift_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_9key_shift_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9key_shift___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_9key_shift___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  bool __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11310
 *     @property
 *     def key_shift(self):
 *         cdef bool res = dereference(self._ptr).KeyShift             # <<<<<<<<<<<<<<
 *         return res
 *     @key_shift.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).KeyShift;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":11311
 *     def key_shift(self):
 *         cdef bool res = dereference(self._ptr).KeyShift
 *         return res             # <<<<<<<<<<<<<<
 *     @key_shift.setter
 *     def key_shift(self, value: bool):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":11309
 *     # ?returns(bool)
 *     @property
 *     def key_shift(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeyShift
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.key_shift.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11313
 *         return res
 *     @key_shift.setter
 *     def key_shift(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeyShift = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_9key_shift_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 11313, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.key_shift.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9key_shift_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_9key_shift_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11314
 *     @key_shift.setter
 *     def key_shift(self, value: bool):
 *         dereference(self._ptr).KeyShift = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).KeyShift = __pyx_v_value;

  /* "core.pyx":11313
 *         return res
 *     @key_shift.setter
 *     def key_shift(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeyShift = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11322
 *     # ?returns(bool)
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeyAlt
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_7key_alt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_7key_alt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_7key_alt___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_7key_alt___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  bool __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11323
 *     @property
 *     def key_alt(self):
 *         cdef bool res = dereference(self._ptr).KeyAlt             # <<<<<<<<<<<<<<
 *         return res
 *     @key_alt.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).KeyAlt;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":11324
 *     def key_alt(self):
 *         cdef bool res = dereference(self._ptr).KeyAlt
 *         return res             # <<<<<<<<<<<<<<
 *     @key_alt.setter
 *     def key_alt(self, value: bool):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":11322
 *     # ?returns(bool)
 *     @property
 *     def key_alt(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeyAlt
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.key_alt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11326
 *         return res
 *     @key_alt.setter
 *     def key_alt(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeyAlt = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_7key_alt_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 11326, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.key_alt.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_7key_alt_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_7key_alt_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11327
 *     @key_alt.setter
 *     def key_alt(self, value: bool):
 *         dereference(self._ptr).KeyAlt = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).KeyAlt = __pyx_v_value;

  /* "core.pyx":11326
 *         return res
 *     @key_alt.setter
 *     def key_alt(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeyAlt = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11335
 *     # ?returns(bool)
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeySuper
 *         return res
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_9key_super_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_7ImGuiIO_9key_super_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9key_super___get__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_9key_super___get__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  bool __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":11336
 *     @property
 *     def key_super(self):
 *         cdef bool res = dereference(self._ptr).KeySuper             # <<<<<<<<<<<<<<
 *         return res
 *     @key_super.setter
 */
  __pyx_t_1 = (*__pyx_v_self->_ptr).KeySuper;
  __pyx_v_res = __pyx_t_1;

  /* "core.pyx":11337
 *     def key_super(self):
 *         cdef bool res = dereference(self._ptr).KeySuper
 *         return res             # <<<<<<<<<<<<<<
 *     @key_super.setter
 *     def key_super(self, value: bool):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_res); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "core.pyx":11335
 *     # ?returns(bool)
 *     @property
 *     def key_super(self):             # <<<<<<<<<<<<<<
 *         cdef bool res = dereference(self._ptr).KeySuper
 *         return res
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("core.ImGuiIO.key_super.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11339
 *         return res
 *     @key_super.setter
 *     def key_super(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeySuper = value
 *     # [End Field]
 */

/* Python wrapper */
static int __pyx_pw_4core_7ImGuiIO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_4core_7ImGuiIO_9key_super_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  bool __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_IsTrue(__pyx_arg_value); if (unlikely((__pyx_v_value == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 11339, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.key_super.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_9key_super_2__set__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((bool)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_7ImGuiIO_9key_super_2__set__(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, bool __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":11340
 *     @key_super.setter
 *     def key_super(self, value: bool):
 *         dereference(self._ptr).KeySuper = value             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  (*__pyx_v_self->_ptr).KeySuper = __pyx_v_value;

  /* "core.pyx":11339
 *         return res
 *     @key_super.setter
 *     def key_super(self, value: bool):             # <<<<<<<<<<<<<<
 *         dereference(self._ptr).KeySuper = value
 *     # [End Field]
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11691
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_input_character(self: ImGuiIO, c: int):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a new character input
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_4core_7ImGuiIO_2add_input_character[] = "ImGuiIO.add_input_character(self: ImGuiIO, c: int)\n\n        Queue a new character input\n        ";
static PyObject *__pyx_pw_4core_7ImGuiIO_3add_input_character(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_input_character (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_2add_input_character(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v_c));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_2add_input_character(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_input_character", 0);

  /* "core.pyx":11695
 *         Queue a new character input
 *         """
 *         ccimgui.ImGuiIO_AddInputCharacter(self._ptr, c)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_c); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 11695, __pyx_L1_error)
  try {
    ImGuiIO_AddInputCharacter(__pyx_v_self->_ptr, __pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 11695, __pyx_L1_error)
  }

  /* "core.pyx":11691
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_input_character(self: ImGuiIO, c: int):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a new character input
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_input_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11737
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_key_event(self: ImGuiIO, key: int, down: bool):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a new key down/up event. key should be translated (as in,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_5add_key_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_7ImGuiIO_4add_key_event[] = "ImGuiIO.add_key_event(self: ImGuiIO, key: int, bool down: bool)\n\n        Queue a new key down/up event. key should be translated (as in,\n        generally imguikey_a matches the key end-user would use to emit\n        an 'a' character)\n        ";
static PyObject *__pyx_pw_4core_7ImGuiIO_5add_key_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  bool __pyx_v_down;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_key_event (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_down,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_key_event", 1, 2, 2, 1); __PYX_ERR(0, 11737, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_key_event") < 0)) __PYX_ERR(0, 11737, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_key = values[0];
    __pyx_v_down = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_down == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 11737, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_key_event", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 11737, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_key_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_4add_key_event(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), __pyx_v_key, __pyx_v_down);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_4add_key_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_key, bool __pyx_v_down) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ImGuiKey __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_key_event", 0);

  /* "core.pyx":11743
 *         an 'a' character)
 *         """
 *         ccimgui.ImGuiIO_AddKeyEvent(self._ptr, key, down)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  __pyx_t_1 = ((ImGuiKey)__Pyx_PyInt_As_ImGuiKey(__pyx_v_key)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 11743, __pyx_L1_error)
  try {
    ImGuiIO_AddKeyEvent(__pyx_v_self->_ptr, __pyx_t_1, __pyx_v_down);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 11743, __pyx_L1_error)
  }

  /* "core.pyx":11737
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_key_event(self: ImGuiIO, key: int, down: bool):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a new key down/up event. key should be translated (as in,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_key_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11750
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_mouse_button_event(self: ImGuiIO, button: int, down: Any):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a mouse button change
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_7add_mouse_button_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_7ImGuiIO_6add_mouse_button_event[] = "ImGuiIO.add_mouse_button_event(self: ImGuiIO, button: int, down: Any)\n\n        Queue a mouse button change\n        ";
static PyObject *__pyx_pw_4core_7ImGuiIO_7add_mouse_button_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_button = 0;
  PyObject *__pyx_v_down = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_mouse_button_event (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_button,&__pyx_n_s_down,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_down)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_mouse_button_event", 1, 2, 2, 1); __PYX_ERR(0, 11750, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_mouse_button_event") < 0)) __PYX_ERR(0, 11750, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_button = values[0];
    __pyx_v_down = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_mouse_button_event", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 11750, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_mouse_button_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_6add_mouse_button_event(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), __pyx_v_button, __pyx_v_down);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_6add_mouse_button_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, PyObject *__pyx_v_button, PyObject *__pyx_v_down) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_mouse_button_event", 0);

  /* "core.pyx":11754
 *         Queue a mouse button change
 *         """
 *         ccimgui.ImGuiIO_AddMouseButtonEvent(self._ptr, button, down)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_button); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 11754, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_down); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 11754, __pyx_L1_error)
  try {
    ImGuiIO_AddMouseButtonEvent(__pyx_v_self->_ptr, __pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 11754, __pyx_L1_error)
  }

  /* "core.pyx":11750
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_mouse_button_event(self: ImGuiIO, button: int, down: Any):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a mouse button change
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_mouse_button_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11761
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_mouse_pos_event(self: ImGuiIO, x: float, y: float):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a mouse position update. use -flt_max,-flt_max to signify
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_9add_mouse_pos_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_7ImGuiIO_8add_mouse_pos_event[] = "ImGuiIO.add_mouse_pos_event(self: ImGuiIO, double x: float, double y: float)\n\n        Queue a mouse position update. use -flt_max,-flt_max to signify\n        no mouse (e.g. app not focused and not hovered)\n        ";
static PyObject *__pyx_pw_4core_7ImGuiIO_9add_mouse_pos_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_mouse_pos_event (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_mouse_pos_event", 1, 2, 2, 1); __PYX_ERR(0, 11761, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_mouse_pos_event") < 0)) __PYX_ERR(0, 11761, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 11761, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 11761, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_mouse_pos_event", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 11761, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_mouse_pos_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_8add_mouse_pos_event(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_8add_mouse_pos_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_mouse_pos_event", 0);

  /* "core.pyx":11766
 *         no mouse (e.g. app not focused and not hovered)
 *         """
 *         ccimgui.ImGuiIO_AddMousePosEvent(self._ptr, x, y)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  try {
    ImGuiIO_AddMousePosEvent(__pyx_v_self->_ptr, __pyx_v_x, __pyx_v_y);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 11766, __pyx_L1_error)
  }

  /* "core.pyx":11761
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_mouse_pos_event(self: ImGuiIO, x: float, y: float):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a mouse position update. use -flt_max,-flt_max to signify
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_mouse_pos_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11785
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_mouse_wheel_event(self: ImGuiIO, wheel_x: float, wheel_y: float):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_11add_mouse_wheel_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_7ImGuiIO_10add_mouse_wheel_event[] = "ImGuiIO.add_mouse_wheel_event(self: ImGuiIO, double wheel_x: float, double wheel_y: float)\n\n        Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0:\n        scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.\n        ";
static PyObject *__pyx_pw_4core_7ImGuiIO_11add_mouse_wheel_event(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_wheel_x;
  double __pyx_v_wheel_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_mouse_wheel_event (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wheel_x,&__pyx_n_s_wheel_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wheel_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wheel_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_mouse_wheel_event", 1, 2, 2, 1); __PYX_ERR(0, 11785, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_mouse_wheel_event") < 0)) __PYX_ERR(0, 11785, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_wheel_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_wheel_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 11785, __pyx_L3_error)
    __pyx_v_wheel_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_wheel_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 11785, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_mouse_wheel_event", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 11785, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_mouse_wheel_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_7ImGuiIO_10add_mouse_wheel_event(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), __pyx_v_wheel_x, __pyx_v_wheel_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_10add_mouse_wheel_event(struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, double __pyx_v_wheel_x, double __pyx_v_wheel_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_mouse_wheel_event", 0);

  /* "core.pyx":11790
 *         scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.
 *         """
 *         ccimgui.ImGuiIO_AddMouseWheelEvent(self._ptr, wheel_x, wheel_y)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  try {
    ImGuiIO_AddMouseWheelEvent(__pyx_v_self->_ptr, __pyx_v_wheel_x, __pyx_v_wheel_y);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 11790, __pyx_L1_error)
  }

  /* "core.pyx":11785
 *     # ?active(True)
 *     # ?returns(None)
 *     def add_mouse_wheel_event(self: ImGuiIO, wheel_x: float, wheel_y: float):             # <<<<<<<<<<<<<<
 *         """
 *         Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImGuiIO.add_mouse_wheel_event", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_7ImGuiIO_12__reduce_cython__[] = "ImGuiIO.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_7ImGuiIO_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_12__reduce_cython__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiIO.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_7ImGuiIO_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_7ImGuiIO_14__setstate_cython__[] = "ImGuiIO.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_7ImGuiIO_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_7ImGuiIO_14__setstate_cython__(((struct __pyx_obj_4core_ImGuiIO *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_7ImGuiIO_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiIO.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11849
 * 
 *     @staticmethod
 *     cdef ImGuiPlatformIO from_ptr(ccimgui.ImGuiPlatformIO* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPlatformIO wrapper = ImGuiPlatformIO.__new__(ImGuiPlatformIO)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_f_4core_15ImGuiPlatformIO_from_ptr(ImGuiPlatformIO *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":11850
 *     @staticmethod
 *     cdef ImGuiPlatformIO from_ptr(ccimgui.ImGuiPlatformIO* _ptr):
 *         cdef ImGuiPlatformIO wrapper = ImGuiPlatformIO.__new__(ImGuiPlatformIO)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiPlatformIO(((PyTypeObject *)__pyx_ptype_4core_ImGuiPlatformIO), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11850, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiPlatformIO *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":11851
 *     cdef ImGuiPlatformIO from_ptr(ccimgui.ImGuiPlatformIO* _ptr):
 *         cdef ImGuiPlatformIO wrapper = ImGuiPlatformIO.__new__(ImGuiPlatformIO)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":11852
 *         cdef ImGuiPlatformIO wrapper = ImGuiPlatformIO.__new__(ImGuiPlatformIO)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":11849
 * 
 *     @staticmethod
 *     cdef ImGuiPlatformIO from_ptr(ccimgui.ImGuiPlatformIO* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPlatformIO wrapper = ImGuiPlatformIO.__new__(ImGuiPlatformIO)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformIO.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":11854
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImGuiPlatformIO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_15ImGuiPlatformIO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_15ImGuiPlatformIO___init__(((struct __pyx_obj_4core_ImGuiPlatformIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImGuiPlatformIO___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":11855
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 11855, __pyx_L1_error)

  /* "core.pyx":11854
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformIO.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImGuiPlatformIO_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_15ImGuiPlatformIO_2__reduce_cython__[] = "ImGuiPlatformIO.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_15ImGuiPlatformIO_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImGuiPlatformIO_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiPlatformIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImGuiPlatformIO_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformIO.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImGuiPlatformIO_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_15ImGuiPlatformIO_4__setstate_cython__[] = "ImGuiPlatformIO.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_15ImGuiPlatformIO_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImGuiPlatformIO_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiPlatformIO *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImGuiPlatformIO_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformIO.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12214
 * 
 *     @staticmethod
 *     cdef ImGuiPlatformImeData from_ptr(ccimgui.ImGuiPlatformImeData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPlatformImeData wrapper = ImGuiPlatformImeData.__new__(ImGuiPlatformImeData)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_f_4core_20ImGuiPlatformImeData_from_ptr(ImGuiPlatformImeData *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":12215
 *     @staticmethod
 *     cdef ImGuiPlatformImeData from_ptr(ccimgui.ImGuiPlatformImeData* _ptr):
 *         cdef ImGuiPlatformImeData wrapper = ImGuiPlatformImeData.__new__(ImGuiPlatformImeData)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiPlatformImeData(((PyTypeObject *)__pyx_ptype_4core_ImGuiPlatformImeData), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12215, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiPlatformImeData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":12216
 *     cdef ImGuiPlatformImeData from_ptr(ccimgui.ImGuiPlatformImeData* _ptr):
 *         cdef ImGuiPlatformImeData wrapper = ImGuiPlatformImeData.__new__(ImGuiPlatformImeData)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":12217
 *         cdef ImGuiPlatformImeData wrapper = ImGuiPlatformImeData.__new__(ImGuiPlatformImeData)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":12214
 * 
 *     @staticmethod
 *     cdef ImGuiPlatformImeData from_ptr(ccimgui.ImGuiPlatformImeData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPlatformImeData wrapper = ImGuiPlatformImeData.__new__(ImGuiPlatformImeData)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformImeData.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12219
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_20ImGuiPlatformImeData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_20ImGuiPlatformImeData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_20ImGuiPlatformImeData___init__(((struct __pyx_obj_4core_ImGuiPlatformImeData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_20ImGuiPlatformImeData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":12220
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 12220, __pyx_L1_error)

  /* "core.pyx":12219
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformImeData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImGuiPlatformImeData_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_20ImGuiPlatformImeData_2__reduce_cython__[] = "ImGuiPlatformImeData.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_20ImGuiPlatformImeData_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImGuiPlatformImeData_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiPlatformImeData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImGuiPlatformImeData_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformImeData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImGuiPlatformImeData_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_20ImGuiPlatformImeData_4__setstate_cython__[] = "ImGuiPlatformImeData.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_20ImGuiPlatformImeData_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImGuiPlatformImeData_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiPlatformImeData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImGuiPlatformImeData_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformImeData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformImeData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12290
 * 
 *     @staticmethod
 *     cdef ImGuiPlatformMonitor from_ptr(ccimgui.ImGuiPlatformMonitor* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPlatformMonitor wrapper = ImGuiPlatformMonitor.__new__(ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_f_4core_20ImGuiPlatformMonitor_from_ptr(ImGuiPlatformMonitor *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":12291
 *     @staticmethod
 *     cdef ImGuiPlatformMonitor from_ptr(ccimgui.ImGuiPlatformMonitor* _ptr):
 *         cdef ImGuiPlatformMonitor wrapper = ImGuiPlatformMonitor.__new__(ImGuiPlatformMonitor)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiPlatformMonitor(((PyTypeObject *)__pyx_ptype_4core_ImGuiPlatformMonitor), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12291, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiPlatformMonitor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":12292
 *     cdef ImGuiPlatformMonitor from_ptr(ccimgui.ImGuiPlatformMonitor* _ptr):
 *         cdef ImGuiPlatformMonitor wrapper = ImGuiPlatformMonitor.__new__(ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":12293
 *         cdef ImGuiPlatformMonitor wrapper = ImGuiPlatformMonitor.__new__(ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":12290
 * 
 *     @staticmethod
 *     cdef ImGuiPlatformMonitor from_ptr(ccimgui.ImGuiPlatformMonitor* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiPlatformMonitor wrapper = ImGuiPlatformMonitor.__new__(ImGuiPlatformMonitor)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformMonitor.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12295
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_20ImGuiPlatformMonitor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_20ImGuiPlatformMonitor_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_20ImGuiPlatformMonitor___init__(((struct __pyx_obj_4core_ImGuiPlatformMonitor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_20ImGuiPlatformMonitor___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":12296
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 12296, __pyx_L1_error)

  /* "core.pyx":12295
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformMonitor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImGuiPlatformMonitor_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_20ImGuiPlatformMonitor_2__reduce_cython__[] = "ImGuiPlatformMonitor.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_20ImGuiPlatformMonitor_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImGuiPlatformMonitor_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiPlatformMonitor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImGuiPlatformMonitor_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformMonitor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImGuiPlatformMonitor_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_20ImGuiPlatformMonitor_4__setstate_cython__[] = "ImGuiPlatformMonitor.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_20ImGuiPlatformMonitor_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImGuiPlatformMonitor_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiPlatformMonitor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImGuiPlatformMonitor_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiPlatformMonitor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiPlatformMonitor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12392
 * 
 *     @staticmethod
 *     cdef ImGuiStorage from_ptr(ccimgui.ImGuiStorage* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiStorage wrapper = ImGuiStorage.__new__(ImGuiStorage)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiStorage *__pyx_f_4core_12ImGuiStorage_from_ptr(ImGuiStorage *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiStorage *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiStorage *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":12393
 *     @staticmethod
 *     cdef ImGuiStorage from_ptr(ccimgui.ImGuiStorage* _ptr):
 *         cdef ImGuiStorage wrapper = ImGuiStorage.__new__(ImGuiStorage)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiStorage(((PyTypeObject *)__pyx_ptype_4core_ImGuiStorage), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12393, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiStorage *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":12394
 *     cdef ImGuiStorage from_ptr(ccimgui.ImGuiStorage* _ptr):
 *         cdef ImGuiStorage wrapper = ImGuiStorage.__new__(ImGuiStorage)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":12395
 *         cdef ImGuiStorage wrapper = ImGuiStorage.__new__(ImGuiStorage)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":12392
 * 
 *     @staticmethod
 *     cdef ImGuiStorage from_ptr(ccimgui.ImGuiStorage* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiStorage wrapper = ImGuiStorage.__new__(ImGuiStorage)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStorage.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12397
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_12ImGuiStorage_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_12ImGuiStorage_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_12ImGuiStorage___init__(((struct __pyx_obj_4core_ImGuiStorage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_12ImGuiStorage___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStorage *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":12398
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 12398, __pyx_L1_error)

  /* "core.pyx":12397
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStorage.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiStorage_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_12ImGuiStorage_2__reduce_cython__[] = "ImGuiStorage.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_12ImGuiStorage_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiStorage_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiStorage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiStorage_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStorage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStorage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiStorage_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_12ImGuiStorage_4__setstate_cython__[] = "ImGuiStorage.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_12ImGuiStorage_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiStorage_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiStorage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiStorage_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStorage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStorage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12553
 * 
 *     @staticmethod
 *     cdef ImGuiStyle from_ptr(ccimgui.ImGuiStyle* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiStyle wrapper = ImGuiStyle.__new__(ImGuiStyle)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiStyle *__pyx_f_4core_10ImGuiStyle_from_ptr(ImGuiStyle *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiStyle *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiStyle *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":12554
 *     @staticmethod
 *     cdef ImGuiStyle from_ptr(ccimgui.ImGuiStyle* _ptr):
 *         cdef ImGuiStyle wrapper = ImGuiStyle.__new__(ImGuiStyle)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiStyle(((PyTypeObject *)__pyx_ptype_4core_ImGuiStyle), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12554, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiStyle *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":12555
 *     cdef ImGuiStyle from_ptr(ccimgui.ImGuiStyle* _ptr):
 *         cdef ImGuiStyle wrapper = ImGuiStyle.__new__(ImGuiStyle)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":12556
 *         cdef ImGuiStyle wrapper = ImGuiStyle.__new__(ImGuiStyle)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":12553
 * 
 *     @staticmethod
 *     cdef ImGuiStyle from_ptr(ccimgui.ImGuiStyle* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiStyle wrapper = ImGuiStyle.__new__(ImGuiStyle)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStyle.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":12558
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImGuiStyle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_10ImGuiStyle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_10ImGuiStyle___init__(((struct __pyx_obj_4core_ImGuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImGuiStyle___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStyle *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":12559
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 12559, __pyx_L1_error)

  /* "core.pyx":12558
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStyle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImGuiStyle_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_10ImGuiStyle_2__reduce_cython__[] = "ImGuiStyle.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_10ImGuiStyle_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImGuiStyle_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiStyle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImGuiStyle_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStyle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__103, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStyle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImGuiStyle_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_10ImGuiStyle_4__setstate_cython__[] = "ImGuiStyle.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_10ImGuiStyle_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImGuiStyle_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiStyle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImGuiStyle_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiStyle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiStyle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13170
 * 
 *     @staticmethod
 *     cdef ImGuiTextBuffer from_ptr(ccimgui.ImGuiTextBuffer* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTextBuffer wrapper = ImGuiTextBuffer.__new__(ImGuiTextBuffer)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_f_4core_15ImGuiTextBuffer_from_ptr(ImGuiTextBuffer *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":13171
 *     @staticmethod
 *     cdef ImGuiTextBuffer from_ptr(ccimgui.ImGuiTextBuffer* _ptr):
 *         cdef ImGuiTextBuffer wrapper = ImGuiTextBuffer.__new__(ImGuiTextBuffer)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiTextBuffer(((PyTypeObject *)__pyx_ptype_4core_ImGuiTextBuffer), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13171, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiTextBuffer *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":13172
 *     cdef ImGuiTextBuffer from_ptr(ccimgui.ImGuiTextBuffer* _ptr):
 *         cdef ImGuiTextBuffer wrapper = ImGuiTextBuffer.__new__(ImGuiTextBuffer)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":13173
 *         cdef ImGuiTextBuffer wrapper = ImGuiTextBuffer.__new__(ImGuiTextBuffer)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":13170
 * 
 *     @staticmethod
 *     cdef ImGuiTextBuffer from_ptr(ccimgui.ImGuiTextBuffer* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTextBuffer wrapper = ImGuiTextBuffer.__new__(ImGuiTextBuffer)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextBuffer.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13175
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImGuiTextBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_15ImGuiTextBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_15ImGuiTextBuffer___init__(((struct __pyx_obj_4core_ImGuiTextBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImGuiTextBuffer___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":13176
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 13176, __pyx_L1_error)

  /* "core.pyx":13175
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImGuiTextBuffer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_15ImGuiTextBuffer_2__reduce_cython__[] = "ImGuiTextBuffer.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_15ImGuiTextBuffer_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImGuiTextBuffer_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiTextBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImGuiTextBuffer_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextBuffer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImGuiTextBuffer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_15ImGuiTextBuffer_4__setstate_cython__[] = "ImGuiTextBuffer.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_15ImGuiTextBuffer_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImGuiTextBuffer_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiTextBuffer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImGuiTextBuffer_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextBuffer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13308
 * 
 *     @staticmethod
 *     cdef ImGuiTextFilter from_ptr(ccimgui.ImGuiTextFilter* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTextFilter wrapper = ImGuiTextFilter.__new__(ImGuiTextFilter)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiTextFilter *__pyx_f_4core_15ImGuiTextFilter_from_ptr(ImGuiTextFilter *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiTextFilter *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiTextFilter *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":13309
 *     @staticmethod
 *     cdef ImGuiTextFilter from_ptr(ccimgui.ImGuiTextFilter* _ptr):
 *         cdef ImGuiTextFilter wrapper = ImGuiTextFilter.__new__(ImGuiTextFilter)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiTextFilter(((PyTypeObject *)__pyx_ptype_4core_ImGuiTextFilter), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13309, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiTextFilter *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":13310
 *     cdef ImGuiTextFilter from_ptr(ccimgui.ImGuiTextFilter* _ptr):
 *         cdef ImGuiTextFilter wrapper = ImGuiTextFilter.__new__(ImGuiTextFilter)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":13311
 *         cdef ImGuiTextFilter wrapper = ImGuiTextFilter.__new__(ImGuiTextFilter)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":13308
 * 
 *     @staticmethod
 *     cdef ImGuiTextFilter from_ptr(ccimgui.ImGuiTextFilter* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiTextFilter wrapper = ImGuiTextFilter.__new__(ImGuiTextFilter)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextFilter.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13313
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImGuiTextFilter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_15ImGuiTextFilter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_15ImGuiTextFilter___init__(((struct __pyx_obj_4core_ImGuiTextFilter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImGuiTextFilter___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextFilter *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":13314
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 13314, __pyx_L1_error)

  /* "core.pyx":13313
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextFilter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImGuiTextFilter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_15ImGuiTextFilter_2__reduce_cython__[] = "ImGuiTextFilter.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_15ImGuiTextFilter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImGuiTextFilter_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiTextFilter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImGuiTextFilter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextFilter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextFilter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImGuiTextFilter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_15ImGuiTextFilter_4__setstate_cython__[] = "ImGuiTextFilter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_15ImGuiTextFilter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImGuiTextFilter_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiTextFilter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImGuiTextFilter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiTextFilter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiTextFilter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13430
 * 
 *     @staticmethod
 *     cdef ImGuiViewport from_ptr(ccimgui.ImGuiViewport* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiViewport wrapper = ImGuiViewport.__new__(ImGuiViewport)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiViewport *__pyx_f_4core_13ImGuiViewport_from_ptr(ImGuiViewport *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiViewport *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiViewport *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":13431
 *     @staticmethod
 *     cdef ImGuiViewport from_ptr(ccimgui.ImGuiViewport* _ptr):
 *         cdef ImGuiViewport wrapper = ImGuiViewport.__new__(ImGuiViewport)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiViewport(((PyTypeObject *)__pyx_ptype_4core_ImGuiViewport), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13431, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiViewport *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":13432
 *     cdef ImGuiViewport from_ptr(ccimgui.ImGuiViewport* _ptr):
 *         cdef ImGuiViewport wrapper = ImGuiViewport.__new__(ImGuiViewport)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":13433
 *         cdef ImGuiViewport wrapper = ImGuiViewport.__new__(ImGuiViewport)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":13430
 * 
 *     @staticmethod
 *     cdef ImGuiViewport from_ptr(ccimgui.ImGuiViewport* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiViewport wrapper = ImGuiViewport.__new__(ImGuiViewport)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiViewport.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13435
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_13ImGuiViewport_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_13ImGuiViewport_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_13ImGuiViewport___init__(((struct __pyx_obj_4core_ImGuiViewport *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_13ImGuiViewport___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiViewport *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":13436
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 13436, __pyx_L1_error)

  /* "core.pyx":13435
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiViewport.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13ImGuiViewport_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_13ImGuiViewport_2__reduce_cython__[] = "ImGuiViewport.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_13ImGuiViewport_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13ImGuiViewport_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiViewport *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13ImGuiViewport_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiViewport *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiViewport.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_13ImGuiViewport_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_13ImGuiViewport_4__setstate_cython__[] = "ImGuiViewport.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_13ImGuiViewport_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_13ImGuiViewport_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiViewport *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_13ImGuiViewport_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiViewport *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiViewport.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13704
 * 
 *     @staticmethod
 *     cdef ImDrawList from_ptr(ccimgui.ImDrawList* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawList wrapper = ImDrawList.__new__(ImDrawList)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawList *__pyx_f_4core_10ImDrawList_from_ptr(ImDrawList *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawList *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawList *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":13705
 *     @staticmethod
 *     cdef ImDrawList from_ptr(ccimgui.ImDrawList* _ptr):
 *         cdef ImDrawList wrapper = ImDrawList.__new__(ImDrawList)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawList(((PyTypeObject *)__pyx_ptype_4core_ImDrawList), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13705, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawList *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":13706
 *     cdef ImDrawList from_ptr(ccimgui.ImDrawList* _ptr):
 *         cdef ImDrawList wrapper = ImDrawList.__new__(ImDrawList)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":13707
 *         cdef ImDrawList wrapper = ImDrawList.__new__(ImDrawList)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":13704
 * 
 *     @staticmethod
 *     cdef ImDrawList from_ptr(ccimgui.ImDrawList* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawList wrapper = ImDrawList.__new__(ImDrawList)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawList.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13709
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImDrawList_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_10ImDrawList_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_10ImDrawList___init__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImDrawList___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":13710
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 13710, __pyx_L1_error)

  /* "core.pyx":13709
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawList.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13718
 *     # ?returns(List[ImDrawCmd])
 *     @property
 *     def cmd_buffer(self):             # <<<<<<<<<<<<<<
 *         return [
 *             ImDrawCmd.from_ptr(&dereference(self._ptr).CmdBuffer.Data[idx])
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawList_10cmd_buffer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_10ImDrawList_10cmd_buffer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawList_10cmd_buffer___get__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawList_10cmd_buffer___get__(struct __pyx_obj_4core_ImDrawList *__pyx_v_self) {
  int __pyx_8genexpr1__pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":13719
 *     @property
 *     def cmd_buffer(self):
 *         return [             # <<<<<<<<<<<<<<
 *             ImDrawCmd.from_ptr(&dereference(self._ptr).CmdBuffer.Data[idx])
 *             for idx in range(dereference(self._ptr).CmdBuffer.Size)
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "core.pyx":13721
 *         return [
 *             ImDrawCmd.from_ptr(&dereference(self._ptr).CmdBuffer.Data[idx])
 *             for idx in range(dereference(self._ptr).CmdBuffer.Size)             # <<<<<<<<<<<<<<
 *         ]
 *     @cmd_buffer.setter
 */
    __pyx_t_2 = (*__pyx_v_self->_ptr).CmdBuffer.Size;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr1__pyx_v_idx = __pyx_t_4;

      /* "core.pyx":13720
 *     def cmd_buffer(self):
 *         return [
 *             ImDrawCmd.from_ptr(&dereference(self._ptr).CmdBuffer.Data[idx])             # <<<<<<<<<<<<<<
 *             for idx in range(dereference(self._ptr).CmdBuffer.Size)
 *         ]
 */
      __pyx_t_5 = ((PyObject *)__pyx_f_4core_9ImDrawCmd_from_ptr((&((*__pyx_v_self->_ptr).CmdBuffer.Data[__pyx_8genexpr1__pyx_v_idx])))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13720, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 13719, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":13718
 *     # ?returns(List[ImDrawCmd])
 *     @property
 *     def cmd_buffer(self):             # <<<<<<<<<<<<<<
 *         return [
 *             ImDrawCmd.from_ptr(&dereference(self._ptr).CmdBuffer.Data[idx])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("core.ImDrawList.cmd_buffer.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13724
 *         ]
 *     @cmd_buffer.setter
 *     def cmd_buffer(self, value: ImVector_ImDrawCmd):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).CmdBuffer = value._ptr
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImDrawList_10cmd_buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_10ImDrawList_10cmd_buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_4core_ImVector_ImDrawCmd, 1, "value", 0))) __PYX_ERR(0, 13724, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_10ImDrawList_10cmd_buffer_2__set__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self), ((struct __pyx_obj_4core_ImVector_ImDrawCmd *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImDrawList_10cmd_buffer_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawCmd *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":13726
 *     def cmd_buffer(self, value: ImVector_ImDrawCmd):
 *         # dereference(self._ptr).CmdBuffer = value._ptr
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 13726, __pyx_L1_error)

  /* "core.pyx":13724
 *         ]
 *     @cmd_buffer.setter
 *     def cmd_buffer(self, value: ImVector_ImDrawCmd):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).CmdBuffer = value._ptr
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawList.cmd_buffer.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13734
 *     # ?returns(ImVector_ImDrawIdx)
 *     @property
 *     def idx_buffer(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImVector_ImDrawIdx* res = &dereference(self._ptr).IdxBuffer
 *         return ImVector_ImDrawIdx.from_ptr(res)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawList_10idx_buffer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_10ImDrawList_10idx_buffer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawList_10idx_buffer___get__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawList_10idx_buffer___get__(struct __pyx_obj_4core_ImDrawList *__pyx_v_self) {
  ImVector_ImDrawIdx *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":13735
 *     @property
 *     def idx_buffer(self):
 *         cdef ccimgui.ImVector_ImDrawIdx* res = &dereference(self._ptr).IdxBuffer             # <<<<<<<<<<<<<<
 *         return ImVector_ImDrawIdx.from_ptr(res)
 *     @idx_buffer.setter
 */
  __pyx_v_res = (&(*__pyx_v_self->_ptr).IdxBuffer);

  /* "core.pyx":13736
 *     def idx_buffer(self):
 *         cdef ccimgui.ImVector_ImDrawIdx* res = &dereference(self._ptr).IdxBuffer
 *         return ImVector_ImDrawIdx.from_ptr(res)             # <<<<<<<<<<<<<<
 *     @idx_buffer.setter
 *     def idx_buffer(self, value: ImVector_ImDrawIdx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4core_18ImVector_ImDrawIdx_from_ptr(__pyx_v_res)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":13734
 *     # ?returns(ImVector_ImDrawIdx)
 *     @property
 *     def idx_buffer(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImVector_ImDrawIdx* res = &dereference(self._ptr).IdxBuffer
 *         return ImVector_ImDrawIdx.from_ptr(res)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawList.idx_buffer.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13738
 *         return ImVector_ImDrawIdx.from_ptr(res)
 *     @idx_buffer.setter
 *     def idx_buffer(self, value: ImVector_ImDrawIdx):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).IdxBuffer = value._ptr
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImDrawList_10idx_buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_10ImDrawList_10idx_buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_4core_ImVector_ImDrawIdx, 1, "value", 0))) __PYX_ERR(0, 13738, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_10ImDrawList_10idx_buffer_2__set__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self), ((struct __pyx_obj_4core_ImVector_ImDrawIdx *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImDrawList_10idx_buffer_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawIdx *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":13740
 *     def idx_buffer(self, value: ImVector_ImDrawIdx):
 *         # dereference(self._ptr).IdxBuffer = value._ptr
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 13740, __pyx_L1_error)

  /* "core.pyx":13738
 *         return ImVector_ImDrawIdx.from_ptr(res)
 *     @idx_buffer.setter
 *     def idx_buffer(self, value: ImVector_ImDrawIdx):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).IdxBuffer = value._ptr
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawList.idx_buffer.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13748
 *     # ?returns(ImVector_ImDrawVert)
 *     @property
 *     def vtx_buffer(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImVector_ImDrawVert* res = &dereference(self._ptr).VtxBuffer
 *         return ImVector_ImDrawVert.from_ptr(res)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawList_10vtx_buffer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4core_10ImDrawList_10vtx_buffer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawList_10vtx_buffer___get__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawList_10vtx_buffer___get__(struct __pyx_obj_4core_ImDrawList *__pyx_v_self) {
  ImVector_ImDrawVert *__pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "core.pyx":13749
 *     @property
 *     def vtx_buffer(self):
 *         cdef ccimgui.ImVector_ImDrawVert* res = &dereference(self._ptr).VtxBuffer             # <<<<<<<<<<<<<<
 *         return ImVector_ImDrawVert.from_ptr(res)
 *     @vtx_buffer.setter
 */
  __pyx_v_res = (&(*__pyx_v_self->_ptr).VtxBuffer);

  /* "core.pyx":13750
 *     def vtx_buffer(self):
 *         cdef ccimgui.ImVector_ImDrawVert* res = &dereference(self._ptr).VtxBuffer
 *         return ImVector_ImDrawVert.from_ptr(res)             # <<<<<<<<<<<<<<
 *     @vtx_buffer.setter
 *     def vtx_buffer(self, value: ImVector_ImDrawVert):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_4core_19ImVector_ImDrawVert_from_ptr(__pyx_v_res)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "core.pyx":13748
 *     # ?returns(ImVector_ImDrawVert)
 *     @property
 *     def vtx_buffer(self):             # <<<<<<<<<<<<<<
 *         cdef ccimgui.ImVector_ImDrawVert* res = &dereference(self._ptr).VtxBuffer
 *         return ImVector_ImDrawVert.from_ptr(res)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawList.vtx_buffer.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13752
 *         return ImVector_ImDrawVert.from_ptr(res)
 *     @vtx_buffer.setter
 *     def vtx_buffer(self, value: ImVector_ImDrawVert):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).VtxBuffer = value._ptr
 *         raise NotImplementedError
 */

/* Python wrapper */
static int __pyx_pw_4core_10ImDrawList_10vtx_buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4core_10ImDrawList_10vtx_buffer_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_4core_ImVector_ImDrawVert, 1, "value", 0))) __PYX_ERR(0, 13752, __pyx_L1_error)
  __pyx_r = __pyx_pf_4core_10ImDrawList_10vtx_buffer_2__set__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self), ((struct __pyx_obj_4core_ImVector_ImDrawVert *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_10ImDrawList_10vtx_buffer_2__set__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_4core_ImVector_ImDrawVert *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "core.pyx":13754
 *     def vtx_buffer(self, value: ImVector_ImDrawVert):
 *         # dereference(self._ptr).VtxBuffer = value._ptr
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     # [End Field]
 * 
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 13754, __pyx_L1_error)

  /* "core.pyx":13752
 *         return ImVector_ImDrawVert.from_ptr(res)
 *     @vtx_buffer.setter
 *     def vtx_buffer(self, value: ImVector_ImDrawVert):             # <<<<<<<<<<<<<<
 *         # dereference(self._ptr).VtxBuffer = value._ptr
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawList.vtx_buffer.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":13929
 *     # ?active(True)
 *     # ?returns(None)
 *     def destroy(self: ImDrawList):             # <<<<<<<<<<<<<<
 *         ccimgui.ImDrawList_destroy(self._ptr)
 *     # [End Method]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawList_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_10ImDrawList_2destroy[] = "ImDrawList.destroy(self: ImDrawList)";
static PyObject *__pyx_pw_4core_10ImDrawList_3destroy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawList_2destroy(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawList_2destroy(struct __pyx_obj_4core_ImDrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("destroy", 0);

  /* "core.pyx":13930
 *     # ?returns(None)
 *     def destroy(self: ImDrawList):
 *         ccimgui.ImDrawList_destroy(self._ptr)             # <<<<<<<<<<<<<<
 *     # [End Method]
 * 
 */
  try {
    ImDrawList_destroy(__pyx_v_self->_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 13930, __pyx_L1_error)
  }

  /* "core.pyx":13929
 *     # ?active(True)
 *     # ?returns(None)
 *     def destroy(self: ImDrawList):             # <<<<<<<<<<<<<<
 *         ccimgui.ImDrawList_destroy(self._ptr)
 *     # [End Method]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("core.ImDrawList.destroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawList_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_10ImDrawList_4__reduce_cython__[] = "ImDrawList.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_10ImDrawList_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawList_4__reduce_cython__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawList_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawList.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_10ImDrawList_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_10ImDrawList_6__setstate_cython__[] = "ImDrawList.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_10ImDrawList_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_10ImDrawList_6__setstate_cython__(((struct __pyx_obj_4core_ImDrawList *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_10ImDrawList_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawList.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":14634
 * 
 *     @staticmethod
 *     cdef ImDrawListSharedData from_ptr(ccimgui.ImDrawListSharedData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawListSharedData wrapper = ImDrawListSharedData.__new__(ImDrawListSharedData)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImDrawListSharedData *__pyx_f_4core_20ImDrawListSharedData_from_ptr(ImDrawListSharedData *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImDrawListSharedData *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImDrawListSharedData *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":14635
 *     @staticmethod
 *     cdef ImDrawListSharedData from_ptr(ccimgui.ImDrawListSharedData* _ptr):
 *         cdef ImDrawListSharedData wrapper = ImDrawListSharedData.__new__(ImDrawListSharedData)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImDrawListSharedData(((PyTypeObject *)__pyx_ptype_4core_ImDrawListSharedData), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14635, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImDrawListSharedData *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":14636
 *     cdef ImDrawListSharedData from_ptr(ccimgui.ImDrawListSharedData* _ptr):
 *         cdef ImDrawListSharedData wrapper = ImDrawListSharedData.__new__(ImDrawListSharedData)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":14637
 *         cdef ImDrawListSharedData wrapper = ImDrawListSharedData.__new__(ImDrawListSharedData)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":14634
 * 
 *     @staticmethod
 *     cdef ImDrawListSharedData from_ptr(ccimgui.ImDrawListSharedData* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImDrawListSharedData wrapper = ImDrawListSharedData.__new__(ImDrawListSharedData)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSharedData.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":14639
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_20ImDrawListSharedData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_20ImDrawListSharedData_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_20ImDrawListSharedData___init__(((struct __pyx_obj_4core_ImDrawListSharedData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_20ImDrawListSharedData___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSharedData *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":14640
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * # [End Class]
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 14640, __pyx_L1_error)

  /* "core.pyx":14639
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSharedData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImDrawListSharedData_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_20ImDrawListSharedData_2__reduce_cython__[] = "ImDrawListSharedData.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_20ImDrawListSharedData_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImDrawListSharedData_2__reduce_cython__(((struct __pyx_obj_4core_ImDrawListSharedData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImDrawListSharedData_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSharedData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSharedData.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_20ImDrawListSharedData_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_20ImDrawListSharedData_4__setstate_cython__[] = "ImDrawListSharedData.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_20ImDrawListSharedData_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_20ImDrawListSharedData_4__setstate_cython__(((struct __pyx_obj_4core_ImDrawListSharedData *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_20ImDrawListSharedData_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImDrawListSharedData *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImDrawListSharedData.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":14651
 * 
 *     @staticmethod
 *     cdef ImFontBuilderIO from_ptr(ccimgui.ImFontBuilderIO* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontBuilderIO wrapper = ImFontBuilderIO.__new__(ImFontBuilderIO)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImFontBuilderIO *__pyx_f_4core_15ImFontBuilderIO_from_ptr(ImFontBuilderIO *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImFontBuilderIO *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImFontBuilderIO *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":14652
 *     @staticmethod
 *     cdef ImFontBuilderIO from_ptr(ccimgui.ImFontBuilderIO* _ptr):
 *         cdef ImFontBuilderIO wrapper = ImFontBuilderIO.__new__(ImFontBuilderIO)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImFontBuilderIO(((PyTypeObject *)__pyx_ptype_4core_ImFontBuilderIO), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14652, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImFontBuilderIO *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":14653
 *     cdef ImFontBuilderIO from_ptr(ccimgui.ImFontBuilderIO* _ptr):
 *         cdef ImFontBuilderIO wrapper = ImFontBuilderIO.__new__(ImFontBuilderIO)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":14654
 *         cdef ImFontBuilderIO wrapper = ImFontBuilderIO.__new__(ImFontBuilderIO)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":14651
 * 
 *     @staticmethod
 *     cdef ImFontBuilderIO from_ptr(ccimgui.ImFontBuilderIO* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImFontBuilderIO wrapper = ImFontBuilderIO.__new__(ImFontBuilderIO)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontBuilderIO.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":14656
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_15ImFontBuilderIO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_15ImFontBuilderIO_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_15ImFontBuilderIO___init__(((struct __pyx_obj_4core_ImFontBuilderIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_15ImFontBuilderIO___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontBuilderIO *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":14657
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * # [End Class]
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 14657, __pyx_L1_error)

  /* "core.pyx":14656
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontBuilderIO.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImFontBuilderIO_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_15ImFontBuilderIO_2__reduce_cython__[] = "ImFontBuilderIO.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_15ImFontBuilderIO_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImFontBuilderIO_2__reduce_cython__(((struct __pyx_obj_4core_ImFontBuilderIO *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImFontBuilderIO_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontBuilderIO *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontBuilderIO.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_15ImFontBuilderIO_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_15ImFontBuilderIO_4__setstate_cython__[] = "ImFontBuilderIO.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_15ImFontBuilderIO_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_15ImFontBuilderIO_4__setstate_cython__(((struct __pyx_obj_4core_ImFontBuilderIO *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_15ImFontBuilderIO_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImFontBuilderIO *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImFontBuilderIO.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":14668
 * 
 *     @staticmethod
 *     cdef ImGuiContext from_ptr(ccimgui.ImGuiContext* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiContext wrapper = ImGuiContext.__new__(ImGuiContext)
 *         wrapper._ptr = _ptr
 */

static struct __pyx_obj_4core_ImGuiContext *__pyx_f_4core_12ImGuiContext_from_ptr(ImGuiContext *__pyx_v__ptr) {
  struct __pyx_obj_4core_ImGuiContext *__pyx_v_wrapper = 0;
  struct __pyx_obj_4core_ImGuiContext *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_ptr", 0);

  /* "core.pyx":14669
 *     @staticmethod
 *     cdef ImGuiContext from_ptr(ccimgui.ImGuiContext* _ptr):
 *         cdef ImGuiContext wrapper = ImGuiContext.__new__(ImGuiContext)             # <<<<<<<<<<<<<<
 *         wrapper._ptr = _ptr
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_4core_ImGuiContext(((PyTypeObject *)__pyx_ptype_4core_ImGuiContext), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14669, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_4core_ImGuiContext *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "core.pyx":14670
 *     cdef ImGuiContext from_ptr(ccimgui.ImGuiContext* _ptr):
 *         cdef ImGuiContext wrapper = ImGuiContext.__new__(ImGuiContext)
 *         wrapper._ptr = _ptr             # <<<<<<<<<<<<<<
 *         return wrapper
 * 
 */
  __pyx_v_wrapper->_ptr = __pyx_v__ptr;

  /* "core.pyx":14671
 *         cdef ImGuiContext wrapper = ImGuiContext.__new__(ImGuiContext)
 *         wrapper._ptr = _ptr
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "core.pyx":14668
 * 
 *     @staticmethod
 *     cdef ImGuiContext from_ptr(ccimgui.ImGuiContext* _ptr):             # <<<<<<<<<<<<<<
 *         cdef ImGuiContext wrapper = ImGuiContext.__new__(ImGuiContext)
 *         wrapper._ptr = _ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiContext.from_ptr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "core.pyx":14673
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

/* Python wrapper */
static int __pyx_pw_4core_12ImGuiContext_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4core_12ImGuiContext_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4core_12ImGuiContext___init__(((struct __pyx_obj_4core_ImGuiContext *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4core_12ImGuiContext___init__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiContext *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "core.pyx":14674
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * # [End Class]
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 14674, __pyx_L1_error)

  /* "core.pyx":14673
 *         return wrapper
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         raise TypeError("This class cannot be instantiated directly.")
 *     # [End Class Constants]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiContext.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiContext_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4core_12ImGuiContext_2__reduce_cython__[] = "ImGuiContext.__reduce_cython__(self)";
static PyObject *__pyx_pw_4core_12ImGuiContext_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiContext_2__reduce_cython__(((struct __pyx_obj_4core_ImGuiContext *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiContext_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiContext *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiContext.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_12ImGuiContext_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_4core_12ImGuiContext_4__setstate_cython__[] = "ImGuiContext.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_4core_12ImGuiContext_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4core_12ImGuiContext_4__setstate_cython__(((struct __pyx_obj_4core_ImGuiContext *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_12ImGuiContext_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_4core_ImGuiContext *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("core.ImGuiContext.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BoolPtr(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_4core_41__pyx_unpickle_BoolPtr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4core_40__pyx_unpickle_BoolPtr[] = "__pyx_unpickle_BoolPtr(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_4core_41__pyx_unpickle_BoolPtr = {"__pyx_unpickle_BoolPtr", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_41__pyx_unpickle_BoolPtr, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_40__pyx_unpickle_BoolPtr};
static PyObject *__pyx_pw_4core_41__pyx_unpickle_BoolPtr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BoolPtr (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BoolPtr", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BoolPtr", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_BoolPtr") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BoolPtr", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("core.__pyx_unpickle_BoolPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4core_40__pyx_unpickle_BoolPtr(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4core_40__pyx_unpickle_BoolPtr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BoolPtr", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4d9ad2b, 0x83dbef1, 0xdaf4a92):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__119, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4d9ad2b, 0x83dbef1, 0xdaf4a92):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))" % __pyx_checksum)
 *     __pyx_result = BoolPtr.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x4d9ad2b, 0x83dbef1, 0xdaf4a92):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = BoolPtr.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x4d9ad2b, 0x83dbef1, 0xdaf4a92):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))" % __pyx_checksum)
 *     __pyx_result = BoolPtr.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BoolPtr__set_state(<BoolPtr> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_4core_BoolPtr), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))" % __pyx_checksum)
 *     __pyx_result = BoolPtr.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BoolPtr__set_state(<BoolPtr> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = BoolPtr.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BoolPtr__set_state(<BoolPtr> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BoolPtr__set_state(BoolPtr __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_4core___pyx_unpickle_BoolPtr__set_state(((struct __pyx_obj_4core_BoolPtr *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x4d9ad2b, 0x83dbef1, 0xdaf4a92) = (ptr))" % __pyx_checksum)
 *     __pyx_result = BoolPtr.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BoolPtr__set_state(<BoolPtr> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BoolPtr__set_state(<BoolPtr> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BoolPtr__set_state(BoolPtr __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BoolPtr(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("core.__pyx_unpickle_BoolPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BoolPtr__set_state(<BoolPtr> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BoolPtr__set_state(BoolPtr __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_4core___pyx_unpickle_BoolPtr__set_state(struct __pyx_obj_4core_BoolPtr *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BoolPtr__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BoolPtr__set_state(BoolPtr __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ptr = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BoolPtr__set_state(BoolPtr __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 1) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.ptr = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BoolPtr__set_state(BoolPtr __pyx_result, tuple __pyx_state):
 *     __pyx_result.ptr = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BoolPtr__set_state(<BoolPtr> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BoolPtr__set_state(BoolPtr __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.ptr = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("core.__pyx_unpickle_BoolPtr__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 124, __pyx_L3_error)
    } else {

      /* "View.MemoryView":124
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 123, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 123, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":130
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 130, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 130, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":131
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 137, __pyx_L1_error)

    /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":140
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":141
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":142
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 142, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 142, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":145
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":146
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 149, __pyx_L1_error)

    /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 152, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":154
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 154, __pyx_L1_error)

      /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":155
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":160
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 161, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":162
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":163
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":165
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 165, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":167
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":170
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":171
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 171, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":175
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__123, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 177, __pyx_L1_error)

      /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":180
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":181
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 181, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 181, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":182
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":183
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":187
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 188, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":189
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 190, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":191
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__124, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 193, __pyx_L1_error)

    /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":194
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":195
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":196
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":197
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":199
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":200
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":201
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":204
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":206
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":208
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":217
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":219
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":220
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":224
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":228
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":229
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":232
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":235
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":238
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":241
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__125, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":250
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":253
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 253, __pyx_L1_error)

    /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":254
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":256
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":283
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":285
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":301
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":305
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":308
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":310
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 346, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":347
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":348
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":350
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 350, __pyx_L1_error)

    /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":352
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":353
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  __pyx_t_1 = ((!(__PYX_CYTHON_ATOMICS_ENABLED() != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":358
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":359
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    }

    /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":363
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
        PyErr_NoMemory(); __PYX_ERR(1, 363, __pyx_L1_error)

        /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      }

      /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    }

    /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  }

  /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":366
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":368
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L11:;

  /* "View.MemoryView":370
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":372
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":376
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":379
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":380
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":385
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":387
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":390
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":389
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":391
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":393
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":397
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 399, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 399, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":400
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 400, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 400, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":402
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":407
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":409
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 412, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":413
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":415
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 415, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":416
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 420, __pyx_L1_error)

    /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":422
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 422, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 422, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":425
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 426, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":427
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":429
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 429, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":431
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 437, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":438
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 438, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":439
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":441
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 447, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 447, __pyx_L1_error)

  /* "View.MemoryView":448
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 448, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 448, __pyx_L1_error)

  /* "View.MemoryView":449
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 447, __pyx_L1_error)

  /* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":453
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":458
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 458, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":461
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":463
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 463, __pyx_L1_error)

      /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":464
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":466
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":468
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":470
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":472
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 472, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":477
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 477, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":478
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":481
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":484
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 484, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":485
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":490
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":493
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":495
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":500
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 500, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":501
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":496
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 496, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 497, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 497, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":506
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":512
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 516, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 522, __pyx_L1_error)

    /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":525
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":527
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":530
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":532
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":535
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":537
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":540
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":542
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":544
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":545
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":546
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":547
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":548
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":549
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":566
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 572, __pyx_L1_error)

    /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":574
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__131, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":581
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":585
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":589
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":593
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":598
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":600
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":601
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":603
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":605
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":609
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":611
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":615
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":618
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":624
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 624, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":625
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":630
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 630, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":631
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":635
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":637
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":638
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 638, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":643
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":647
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":649
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":650
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 650, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":655
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":660
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":661
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":662
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":666
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":674
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":676
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":678
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":679
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":680
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 681, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 681, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 684, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__134);
            __Pyx_GIVEREF(__pyx_slice__134);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__134);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 684, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":685
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":687
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__134); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 687, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":688
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":691
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 691, __pyx_L1_error)

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":693
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":694
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 694, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":696
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 696, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":698
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__134);
        __Pyx_GIVEREF(__pyx_slice__134);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__134);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":700
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":703
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 705, __pyx_L1_error)

      /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":713
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":720
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":724
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 724, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":727
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 727, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":728
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":730
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":731
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":737
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":738
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":743
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":744
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 748, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 748, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":753
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 753, __pyx_L1_error)

      /* "View.MemoryView":750
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 750, __pyx_L1_error)

      /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 763, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 764, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":832
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":834
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 834, __pyx_L1_error)

      /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":837
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":840
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 840, __pyx_L1_error)

      /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":852
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":857
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":861
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":863
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":865
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":868
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":870
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":873
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":877
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":880
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":883
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":886
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":887
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":888
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":892
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":894
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":899
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":901
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":902
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 901, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":904
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":906
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":914
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":915
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":919
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 919, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 919, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":920
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":922
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":923
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":925
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":928
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":930
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 930, __pyx_L1_error)

      /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":933
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 933, __pyx_L1_error)

    /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":935
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":937
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":939
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":946
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":948
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":949
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":953
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":954
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":955
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":956
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":959
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 959, __pyx_L1_error)

      /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":961
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":979
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":983
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":985
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":989
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 989, __pyx_L1_error)

    /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":991
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":995
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1010
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1015
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1017
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1018
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1020
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1021
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1023
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1024
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1025
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1026
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1027
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1030
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1034
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1035
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1038
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1039
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1041
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1042
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1044
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1045
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1046
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1048
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1049
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1051
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1058
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1058, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1059
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1061
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1062
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1069
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1070
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1071
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1073
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1074
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1076
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1077
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1078
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1079
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1085
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1086
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1097
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1098
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1100
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1101
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1103
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1105
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1113
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1115
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1123
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1124
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1126
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1133
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1134
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1137
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1139
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1149
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1151
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1156
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1157
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1159
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1160
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1161
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1162
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1164
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1165
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1169
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1170
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1175
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1181
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1183
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1184
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1186
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1199
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1200
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1201
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1203
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1204
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1205
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1207
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1221
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1222
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1224
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1226, __pyx_L1_error)

    /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1229
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1230
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1231
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1232
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1233
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1235
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1239
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1241
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1244
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1246
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1248
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1256
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1255
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1255, __pyx_L1_error)

  /* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1260
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1260, __pyx_L1_error)

  /* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1265
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1265, __pyx_L1_error)

    /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1267
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1267, __pyx_L1_error)
  }

  /* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1278
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1279
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1281
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1282
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1283
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1289
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1291
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1293
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1296
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1297
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1299
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1299, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1302, __pyx_L1_error)

      /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1307
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1309
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1309, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1310
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1322
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1323
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1325
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1326
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1331
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1331, __pyx_L1_error)

    /* "View.MemoryView":1332
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1332, __pyx_L1_error)

    /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1334
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1335
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1338
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1339
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1346
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1348
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1349
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1350
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1351
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1353
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1354
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1355
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1356
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1369
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1376
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1383
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1386
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1388
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1390
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1391
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1393
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1402
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1403
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1405
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1413
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1417
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1418
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1419
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1421
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1422
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1424
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__138, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4core_BoolPtr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_4core_BoolPtr(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_BoolPtr[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_7BoolPtr_5__reduce_cython__, METH_NOARGS, __pyx_doc_4core_7BoolPtr_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_7BoolPtr_7__setstate_cython__, METH_O, __pyx_doc_4core_7BoolPtr_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BoolPtr = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  __pyx_pw_4core_7BoolPtr_3__bool__, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_4core_BoolPtr = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.BoolPtr", /*tp_name*/
  sizeof(struct __pyx_obj_4core_BoolPtr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_BoolPtr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BoolPtr, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "BoolPtr(bool initial_value: bool)", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_BoolPtr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_7BoolPtr_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_BoolPtr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawCmd __pyx_vtable_4core_ImVector_ImDrawCmd;

static PyObject *__pyx_tp_new_4core_ImVector_ImDrawCmd(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImDrawCmd *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImDrawCmd *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImDrawCmd;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImDrawCmd(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImDrawCmd[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_18ImVector_ImDrawCmd_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_18ImVector_ImDrawCmd_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_18ImVector_ImDrawCmd_5__setstate_cython__, METH_O, __pyx_doc_4core_18ImVector_ImDrawCmd_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImDrawCmd = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImDrawCmd", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImDrawCmd), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImDrawCmd, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImDrawCmd()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImDrawCmd, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_18ImVector_ImDrawCmd_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImDrawCmd, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawIdx __pyx_vtable_4core_ImVector_ImDrawIdx;

static PyObject *__pyx_tp_new_4core_ImVector_ImDrawIdx(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImDrawIdx *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImDrawIdx *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImDrawIdx;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImDrawIdx(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_18ImVector_ImDrawIdx_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_18ImVector_ImDrawIdx_4size_1__get__(o);
}

static int __pyx_setprop_4core_18ImVector_ImDrawIdx_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_18ImVector_ImDrawIdx_4size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_18ImVector_ImDrawIdx_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_18ImVector_ImDrawIdx_4data_1__get__(o);
}

static int __pyx_setprop_4core_18ImVector_ImDrawIdx_data(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_18ImVector_ImDrawIdx_4data_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImVector_ImDrawIdx[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_18ImVector_ImDrawIdx_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_18ImVector_ImDrawIdx_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_18ImVector_ImDrawIdx_5__setstate_cython__, METH_O, __pyx_doc_4core_18ImVector_ImDrawIdx_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImVector_ImDrawIdx[] = {
  {(char *)"size", __pyx_getprop_4core_18ImVector_ImDrawIdx_size, __pyx_setprop_4core_18ImVector_ImDrawIdx_size, (char *)0, 0},
  {(char *)"data", __pyx_getprop_4core_18ImVector_ImDrawIdx_data, __pyx_setprop_4core_18ImVector_ImDrawIdx_data, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImDrawIdx = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImDrawIdx", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImDrawIdx), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImDrawIdx, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImDrawIdx()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImDrawIdx, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImVector_ImDrawIdx, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_18ImVector_ImDrawIdx_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImDrawIdx, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawVert __pyx_vtable_4core_ImVector_ImDrawVert;

static PyObject *__pyx_tp_new_4core_ImVector_ImDrawVert(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImDrawVert *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImDrawVert *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImDrawVert;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImDrawVert(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_19ImVector_ImDrawVert_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_19ImVector_ImDrawVert_4size_1__get__(o);
}

static int __pyx_setprop_4core_19ImVector_ImDrawVert_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_19ImVector_ImDrawVert_4size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_19ImVector_ImDrawVert_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_19ImVector_ImDrawVert_4data_1__get__(o);
}

static int __pyx_setprop_4core_19ImVector_ImDrawVert_data(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_19ImVector_ImDrawVert_4data_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImVector_ImDrawVert[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_19ImVector_ImDrawVert_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_19ImVector_ImDrawVert_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_19ImVector_ImDrawVert_5__setstate_cython__, METH_O, __pyx_doc_4core_19ImVector_ImDrawVert_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImVector_ImDrawVert[] = {
  {(char *)"size", __pyx_getprop_4core_19ImVector_ImDrawVert_size, __pyx_setprop_4core_19ImVector_ImDrawVert_size, (char *)0, 0},
  {(char *)"data", __pyx_getprop_4core_19ImVector_ImDrawVert_data, __pyx_setprop_4core_19ImVector_ImDrawVert_data, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImDrawVert = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImDrawVert", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImDrawVert), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImDrawVert, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImDrawVert()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImDrawVert, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImVector_ImDrawVert, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_19ImVector_ImDrawVert_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImDrawVert, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImVec4 __pyx_vtable_4core_ImVector_ImVec4;

static PyObject *__pyx_tp_new_4core_ImVector_ImVec4(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImVec4 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImVec4 *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImVec4;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImVec4(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_15ImVector_ImVec4_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_15ImVector_ImVec4_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_15ImVector_ImVec4_5__setstate_cython__, METH_O, __pyx_doc_4core_15ImVector_ImVec4_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImVec4", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImVec4, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImVec4()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_15ImVector_ImVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImTextureID __pyx_vtable_4core_ImVector_ImTextureID;

static PyObject *__pyx_tp_new_4core_ImVector_ImTextureID(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImTextureID *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImTextureID *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImTextureID;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImTextureID(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImTextureID[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_20ImVector_ImTextureID_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_20ImVector_ImTextureID_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_20ImVector_ImTextureID_5__setstate_cython__, METH_O, __pyx_doc_4core_20ImVector_ImTextureID_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImTextureID = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImTextureID", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImTextureID), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImTextureID, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImTextureID()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImTextureID, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_20ImVector_ImTextureID_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImTextureID, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImVec2 __pyx_vtable_4core_ImVector_ImVec2;

static PyObject *__pyx_tp_new_4core_ImVector_ImVec2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImVec2 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImVec2 *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImVec2;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImVec2(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_15ImVector_ImVec2_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_15ImVector_ImVec2_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_15ImVector_ImVec2_5__setstate_cython__, METH_O, __pyx_doc_4core_15ImVector_ImVec2_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImVec2", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImVec2, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImVec2()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_15ImVector_ImVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImDrawChannel __pyx_vtable_4core_ImVector_ImDrawChannel;

static PyObject *__pyx_tp_new_4core_ImVector_ImDrawChannel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImDrawChannel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImDrawChannel *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImDrawChannel;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImDrawChannel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImDrawChannel[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_22ImVector_ImDrawChannel_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_22ImVector_ImDrawChannel_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_22ImVector_ImDrawChannel_5__setstate_cython__, METH_O, __pyx_doc_4core_22ImVector_ImDrawChannel_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImDrawChannel = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImDrawChannel", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImDrawChannel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImDrawChannel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImDrawChannel()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImDrawChannel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_22ImVector_ImDrawChannel_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImDrawChannel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_float __pyx_vtable_4core_ImVector_float;

static PyObject *__pyx_tp_new_4core_ImVector_float(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_float *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_float *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_float;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_float(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_float[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_14ImVector_float_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_14ImVector_float_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_14ImVector_float_5__setstate_cython__, METH_O, __pyx_doc_4core_14ImVector_float_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_float = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_float", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_float), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_float, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_float()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_float, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_14ImVector_float_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_float, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImWchar __pyx_vtable_4core_ImVector_ImWchar;

static PyObject *__pyx_tp_new_4core_ImVector_ImWchar(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImWchar *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImWchar *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImWchar;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImWchar(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImWchar[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_16ImVector_ImWchar_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_16ImVector_ImWchar_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_16ImVector_ImWchar_5__setstate_cython__, METH_O, __pyx_doc_4core_16ImVector_ImWchar_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImWchar = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImWchar", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImWchar), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImWchar, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImWchar()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImWchar, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_16ImVector_ImWchar_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImWchar, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontGlyph __pyx_vtable_4core_ImVector_ImFontGlyph;

static PyObject *__pyx_tp_new_4core_ImVector_ImFontGlyph(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImFontGlyph *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImFontGlyph *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImFontGlyph;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImFontGlyph(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImFontGlyph[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_20ImVector_ImFontGlyph_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_20ImVector_ImFontGlyph_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_20ImVector_ImFontGlyph_5__setstate_cython__, METH_O, __pyx_doc_4core_20ImVector_ImFontGlyph_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImFontGlyph = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImFontGlyph", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImFontGlyph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImFontGlyph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImFontGlyph()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImFontGlyph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_20ImVector_ImFontGlyph_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImFontGlyph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontPtr __pyx_vtable_4core_ImVector_ImFontPtr;

static PyObject *__pyx_tp_new_4core_ImVector_ImFontPtr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImFontPtr *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImFontPtr *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImFontPtr;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImFontPtr(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImFontPtr[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_18ImVector_ImFontPtr_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_18ImVector_ImFontPtr_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_18ImVector_ImFontPtr_5__setstate_cython__, METH_O, __pyx_doc_4core_18ImVector_ImFontPtr_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImFontPtr = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImFontPtr", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImFontPtr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImFontPtr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImFontPtr()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImFontPtr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_18ImVector_ImFontPtr_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImFontPtr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontAtlasCustomRect __pyx_vtable_4core_ImVector_ImFontAtlasCustomRect;

static PyObject *__pyx_tp_new_4core_ImVector_ImFontAtlasCustomRect(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImFontAtlasCustomRect;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImFontAtlasCustomRect(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImFontAtlasCustomRect[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_30ImVector_ImFontAtlasCustomRect_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_5__setstate_cython__, METH_O, __pyx_doc_4core_30ImVector_ImFontAtlasCustomRect_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImFontAtlasCustomRect = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImFontAtlasCustomRect", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImFontAtlasCustomRect, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImFontAtlasCustomRect()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImFontAtlasCustomRect, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_30ImVector_ImFontAtlasCustomRect_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImFontAtlasCustomRect, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImFontConfig __pyx_vtable_4core_ImVector_ImFontConfig;

static PyObject *__pyx_tp_new_4core_ImVector_ImFontConfig(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImFontConfig *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImFontConfig *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImFontConfig;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImFontConfig(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImFontConfig[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_21ImVector_ImFontConfig_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_21ImVector_ImFontConfig_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_21ImVector_ImFontConfig_5__setstate_cython__, METH_O, __pyx_doc_4core_21ImVector_ImFontConfig_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImFontConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImFontConfig", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImFontConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImFontConfig, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImFontConfig()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImFontConfig, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_21ImVector_ImFontConfig_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImFontConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImFontGlyph __pyx_vtable_4core_ImFontGlyph;

static PyObject *__pyx_tp_new_4core_ImFontGlyph(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImFontGlyph *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImFontGlyph *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImFontGlyph;
  return o;
}

static void __pyx_tp_dealloc_4core_ImFontGlyph(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImFontGlyph[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_11ImFontGlyph_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_11ImFontGlyph_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_11ImFontGlyph_5__setstate_cython__, METH_O, __pyx_doc_4core_11ImFontGlyph_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImFontGlyph = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImFontGlyph", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImFontGlyph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImFontGlyph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImFontGlyph()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImFontGlyph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_11ImFontGlyph_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImFontGlyph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImU32 __pyx_vtable_4core_ImVector_ImU32;

static PyObject *__pyx_tp_new_4core_ImVector_ImU32(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImU32 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImU32 *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImU32;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImU32(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImU32[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_14ImVector_ImU32_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_14ImVector_ImU32_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_14ImVector_ImU32_5__setstate_cython__, METH_O, __pyx_doc_4core_14ImVector_ImU32_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImU32 = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImU32", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImU32), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImU32, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImU32()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImU32, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_14ImVector_ImU32_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImU32, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiKeyData __pyx_vtable_4core_ImGuiKeyData;

static PyObject *__pyx_tp_new_4core_ImGuiKeyData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiKeyData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiKeyData *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiKeyData;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiKeyData(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiKeyData[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiKeyData_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_12ImGuiKeyData_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiKeyData_5__setstate_cython__, METH_O, __pyx_doc_4core_12ImGuiKeyData_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiKeyData = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiKeyData", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiKeyData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiKeyData, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiKeyData()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiKeyData, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_12ImGuiKeyData_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiKeyData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiListClipper __pyx_vtable_4core_ImGuiListClipper;

static PyObject *__pyx_tp_new_4core_ImGuiListClipper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiListClipper *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiListClipper *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiListClipper;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiListClipper(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiListClipper[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_16ImGuiListClipper_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_16ImGuiListClipper_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_16ImGuiListClipper_5__setstate_cython__, METH_O, __pyx_doc_4core_16ImGuiListClipper_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiListClipper = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiListClipper", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiListClipper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiListClipper, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiListClipper()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiListClipper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_16ImGuiListClipper_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiListClipper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiOnceUponAFrame __pyx_vtable_4core_ImGuiOnceUponAFrame;

static PyObject *__pyx_tp_new_4core_ImGuiOnceUponAFrame(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiOnceUponAFrame *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiOnceUponAFrame *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiOnceUponAFrame;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiOnceUponAFrame(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiOnceUponAFrame[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_19ImGuiOnceUponAFrame_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_19ImGuiOnceUponAFrame_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_19ImGuiOnceUponAFrame_5__setstate_cython__, METH_O, __pyx_doc_4core_19ImGuiOnceUponAFrame_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiOnceUponAFrame = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiOnceUponAFrame", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiOnceUponAFrame), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiOnceUponAFrame, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiOnceUponAFrame()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiOnceUponAFrame, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_19ImGuiOnceUponAFrame_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiOnceUponAFrame, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiPayload __pyx_vtable_4core_ImGuiPayload;

static PyObject *__pyx_tp_new_4core_ImGuiPayload(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiPayload *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiPayload *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiPayload;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiPayload(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiPayload[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiPayload_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_12ImGuiPayload_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiPayload_5__setstate_cython__, METH_O, __pyx_doc_4core_12ImGuiPayload_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiPayload = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiPayload", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiPayload), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiPayload, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiPayload()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiPayload, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_12ImGuiPayload_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiPayload, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiPlatformMonitor __pyx_vtable_4core_ImVector_ImGuiPlatformMonitor;

static PyObject *__pyx_tp_new_4core_ImVector_ImGuiPlatformMonitor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImGuiPlatformMonitor;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImGuiPlatformMonitor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImGuiPlatformMonitor[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_29ImVector_ImGuiPlatformMonitor_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_5__setstate_cython__, METH_O, __pyx_doc_4core_29ImVector_ImGuiPlatformMonitor_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImGuiPlatformMonitor = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImGuiPlatformMonitor", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImGuiPlatformMonitor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImGuiPlatformMonitor()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImGuiPlatformMonitor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_29ImVector_ImGuiPlatformMonitor_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImGuiPlatformMonitor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiViewportPtr __pyx_vtable_4core_ImVector_ImGuiViewportPtr;

static PyObject *__pyx_tp_new_4core_ImVector_ImGuiViewportPtr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImGuiViewportPtr;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImGuiViewportPtr(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImGuiViewportPtr[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_25ImVector_ImGuiViewportPtr_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_25ImVector_ImGuiViewportPtr_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_25ImVector_ImGuiViewportPtr_5__setstate_cython__, METH_O, __pyx_doc_4core_25ImVector_ImGuiViewportPtr_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImGuiViewportPtr = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImGuiViewportPtr", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImGuiViewportPtr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImGuiViewportPtr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImGuiViewportPtr()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImGuiViewportPtr, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_25ImVector_ImGuiViewportPtr_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImGuiViewportPtr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiStoragePair __pyx_vtable_4core_ImVector_ImGuiStoragePair;

static PyObject *__pyx_tp_new_4core_ImVector_ImGuiStoragePair(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImGuiStoragePair *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImGuiStoragePair *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImGuiStoragePair;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImGuiStoragePair(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImGuiStoragePair[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_25ImVector_ImGuiStoragePair_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_25ImVector_ImGuiStoragePair_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_25ImVector_ImGuiStoragePair_5__setstate_cython__, METH_O, __pyx_doc_4core_25ImVector_ImGuiStoragePair_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImGuiStoragePair = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImGuiStoragePair", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImGuiStoragePair), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImGuiStoragePair, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImGuiStoragePair()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImGuiStoragePair, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_25ImVector_ImGuiStoragePair_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImGuiStoragePair, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiStoragePair __pyx_vtable_4core_ImGuiStoragePair;

static PyObject *__pyx_tp_new_4core_ImGuiStoragePair(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiStoragePair *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiStoragePair *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiStoragePair;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiStoragePair(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiStoragePair[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_16ImGuiStoragePair_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_16ImGuiStoragePair_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_16ImGuiStoragePair_5__setstate_cython__, METH_O, __pyx_doc_4core_16ImGuiStoragePair_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiStoragePair = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiStoragePair", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiStoragePair), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiStoragePair, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiStoragePair()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiStoragePair, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_16ImGuiStoragePair_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiStoragePair, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiTableColumnSortSpecs __pyx_vtable_4core_ImGuiTableColumnSortSpecs;

static PyObject *__pyx_tp_new_4core_ImGuiTableColumnSortSpecs(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiTableColumnSortSpecs;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiTableColumnSortSpecs(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiTableColumnSortSpecs[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_25ImGuiTableColumnSortSpecs_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_25ImGuiTableColumnSortSpecs_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_25ImGuiTableColumnSortSpecs_5__setstate_cython__, METH_O, __pyx_doc_4core_25ImGuiTableColumnSortSpecs_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiTableColumnSortSpecs = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiTableColumnSortSpecs", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiTableColumnSortSpecs), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiTableColumnSortSpecs, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiTableColumnSortSpecs()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiTableColumnSortSpecs, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_25ImGuiTableColumnSortSpecs_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiTableColumnSortSpecs, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiTableSortSpecs __pyx_vtable_4core_ImGuiTableSortSpecs;

static PyObject *__pyx_tp_new_4core_ImGuiTableSortSpecs(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiTableSortSpecs *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiTableSortSpecs *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiTableSortSpecs;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiTableSortSpecs(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiTableSortSpecs[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_19ImGuiTableSortSpecs_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_19ImGuiTableSortSpecs_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_19ImGuiTableSortSpecs_5__setstate_cython__, METH_O, __pyx_doc_4core_19ImGuiTableSortSpecs_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiTableSortSpecs = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiTableSortSpecs", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiTableSortSpecs), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiTableSortSpecs, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiTableSortSpecs()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiTableSortSpecs, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_19ImGuiTableSortSpecs_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiTableSortSpecs, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_char __pyx_vtable_4core_ImVector_char;

static PyObject *__pyx_tp_new_4core_ImVector_char(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_char *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_char *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_char;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_char(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_char[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_13ImVector_char_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_13ImVector_char_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_13ImVector_char_5__setstate_cython__, METH_O, __pyx_doc_4core_13ImVector_char_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_char = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_char", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_char), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_char, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_char()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_char, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_13ImVector_char_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_char, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVector_ImGuiTextRange __pyx_vtable_4core_ImVector_ImGuiTextRange;

static PyObject *__pyx_tp_new_4core_ImVector_ImGuiTextRange(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVector_ImGuiTextRange *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVector_ImGuiTextRange *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVector_ImGuiTextRange;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVector_ImGuiTextRange(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVector_ImGuiTextRange[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_23ImVector_ImGuiTextRange_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_23ImVector_ImGuiTextRange_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_23ImVector_ImGuiTextRange_5__setstate_cython__, METH_O, __pyx_doc_4core_23ImVector_ImGuiTextRange_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVector_ImGuiTextRange = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVector_ImGuiTextRange", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVector_ImGuiTextRange), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVector_ImGuiTextRange, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVector_ImGuiTextRange()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVector_ImGuiTextRange, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_23ImVector_ImGuiTextRange_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVector_ImGuiTextRange, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiTextRange __pyx_vtable_4core_ImGuiTextRange;

static PyObject *__pyx_tp_new_4core_ImGuiTextRange(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiTextRange *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiTextRange *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiTextRange;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiTextRange(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiTextRange[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_14ImGuiTextRange_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_14ImGuiTextRange_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_14ImGuiTextRange_5__setstate_cython__, METH_O, __pyx_doc_4core_14ImGuiTextRange_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiTextRange = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiTextRange", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiTextRange), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiTextRange, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiTextRange()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiTextRange, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_14ImGuiTextRange_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiTextRange, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiWindowClass __pyx_vtable_4core_ImGuiWindowClass;

static PyObject *__pyx_tp_new_4core_ImGuiWindowClass(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiWindowClass *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiWindowClass *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiWindowClass;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiWindowClass(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiWindowClass[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_16ImGuiWindowClass_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_16ImGuiWindowClass_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_16ImGuiWindowClass_5__setstate_cython__, METH_O, __pyx_doc_4core_16ImGuiWindowClass_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiWindowClass = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiWindowClass", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiWindowClass), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiWindowClass, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiWindowClass()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiWindowClass, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_16ImGuiWindowClass_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiWindowClass, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVec2 __pyx_vtable_4core_ImVec2;

static PyObject *__pyx_tp_new_4core_ImVec2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVec2 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVec2 *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVec2;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVec2(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_6ImVec2_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_6ImVec2_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_6ImVec2_5__setstate_cython__, METH_O, __pyx_doc_4core_6ImVec2_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVec2", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVec2, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVec2()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_6ImVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImVec4 __pyx_vtable_4core_ImVec4;

static PyObject *__pyx_tp_new_4core_ImVec4(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImVec4 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImVec4 *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImVec4;
  return o;
}

static void __pyx_tp_dealloc_4core_ImVec4(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_6ImVec4_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_6ImVec4_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_6ImVec4_5__setstate_cython__, METH_O, __pyx_doc_4core_6ImVec4_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImVec4", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImVec4, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImVec4()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_6ImVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImColor __pyx_vtable_4core_ImColor;

static PyObject *__pyx_tp_new_4core_ImColor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImColor *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImColor *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImColor;
  return o;
}

static void __pyx_tp_dealloc_4core_ImColor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImColor[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_7ImColor_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_7ImColor_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_7ImColor_5__setstate_cython__, METH_O, __pyx_doc_4core_7ImColor_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImColor = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImColor", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImColor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImColor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImColor()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImColor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_7ImColor_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImColor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawChannel __pyx_vtable_4core_ImDrawChannel;

static PyObject *__pyx_tp_new_4core_ImDrawChannel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawChannel *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawChannel *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawChannel;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawChannel(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImDrawChannel[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_13ImDrawChannel_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_13ImDrawChannel_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_13ImDrawChannel_5__setstate_cython__, METH_O, __pyx_doc_4core_13ImDrawChannel_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawChannel = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawChannel", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawChannel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawChannel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawChannel()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawChannel, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_13ImDrawChannel_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawChannel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawCmd __pyx_vtable_4core_ImDrawCmd;

static PyObject *__pyx_tp_new_4core_ImDrawCmd(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawCmd *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawCmd *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawCmd;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawCmd(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_9ImDrawCmd_clip_rect(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9ImDrawCmd_9clip_rect_1__get__(o);
}

static int __pyx_setprop_4core_9ImDrawCmd_clip_rect(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_9ImDrawCmd_9clip_rect_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_9ImDrawCmd_texture_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9ImDrawCmd_10texture_id_1__get__(o);
}

static int __pyx_setprop_4core_9ImDrawCmd_texture_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_9ImDrawCmd_10texture_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_9ImDrawCmd_elem_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_9ImDrawCmd_10elem_count_1__get__(o);
}

static int __pyx_setprop_4core_9ImDrawCmd_elem_count(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_9ImDrawCmd_10elem_count_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImDrawCmd[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_9ImDrawCmd_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_9ImDrawCmd_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_9ImDrawCmd_5__setstate_cython__, METH_O, __pyx_doc_4core_9ImDrawCmd_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImDrawCmd[] = {
  {(char *)"clip_rect", __pyx_getprop_4core_9ImDrawCmd_clip_rect, __pyx_setprop_4core_9ImDrawCmd_clip_rect, (char *)0, 0},
  {(char *)"texture_id", __pyx_getprop_4core_9ImDrawCmd_texture_id, __pyx_setprop_4core_9ImDrawCmd_texture_id, (char *)0, 0},
  {(char *)"elem_count", __pyx_getprop_4core_9ImDrawCmd_elem_count, __pyx_setprop_4core_9ImDrawCmd_elem_count, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawCmd = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawCmd", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawCmd), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawCmd, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawCmd()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawCmd, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImDrawCmd, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_9ImDrawCmd_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawCmd, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawCmdHeader __pyx_vtable_4core_ImDrawCmdHeader;

static PyObject *__pyx_tp_new_4core_ImDrawCmdHeader(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawCmdHeader *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawCmdHeader *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawCmdHeader;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawCmdHeader(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_15ImDrawCmdHeader_clip_rect(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_15ImDrawCmdHeader_9clip_rect_1__get__(o);
}

static int __pyx_setprop_4core_15ImDrawCmdHeader_clip_rect(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_15ImDrawCmdHeader_9clip_rect_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImDrawCmdHeader[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_15ImDrawCmdHeader_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_15ImDrawCmdHeader_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_15ImDrawCmdHeader_5__setstate_cython__, METH_O, __pyx_doc_4core_15ImDrawCmdHeader_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImDrawCmdHeader[] = {
  {(char *)"clip_rect", __pyx_getprop_4core_15ImDrawCmdHeader_clip_rect, __pyx_setprop_4core_15ImDrawCmdHeader_clip_rect, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawCmdHeader = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawCmdHeader", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawCmdHeader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawCmdHeader, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawCmdHeader()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawCmdHeader, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImDrawCmdHeader, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_15ImDrawCmdHeader_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawCmdHeader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawData __pyx_vtable_4core_ImDrawData;

static PyObject *__pyx_tp_new_4core_ImDrawData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawData *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawData;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawData(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_10ImDrawData_cmd_lists(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_10ImDrawData_9cmd_lists_1__get__(o);
}

static int __pyx_setprop_4core_10ImDrawData_cmd_lists(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_10ImDrawData_9cmd_lists_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImDrawData[] = {
  {"scale_clip_rects", (PyCFunction)__pyx_pw_4core_10ImDrawData_3scale_clip_rects, METH_O, __pyx_doc_4core_10ImDrawData_2scale_clip_rects},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_10ImDrawData_5__reduce_cython__, METH_NOARGS, __pyx_doc_4core_10ImDrawData_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_10ImDrawData_7__setstate_cython__, METH_O, __pyx_doc_4core_10ImDrawData_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImDrawData[] = {
  {(char *)"cmd_lists", __pyx_getprop_4core_10ImDrawData_cmd_lists, __pyx_setprop_4core_10ImDrawData_cmd_lists, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawData = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawData", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawData, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawData()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawData, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImDrawData, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_10ImDrawData_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawListSplitter __pyx_vtable_4core_ImDrawListSplitter;

static PyObject *__pyx_tp_new_4core_ImDrawListSplitter(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawListSplitter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawListSplitter *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawListSplitter;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawListSplitter(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImDrawListSplitter[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_18ImDrawListSplitter_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_18ImDrawListSplitter_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_18ImDrawListSplitter_5__setstate_cython__, METH_O, __pyx_doc_4core_18ImDrawListSplitter_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawListSplitter = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawListSplitter", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawListSplitter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawListSplitter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawListSplitter()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawListSplitter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_18ImDrawListSplitter_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawListSplitter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawVert __pyx_vtable_4core_ImDrawVert;

static PyObject *__pyx_tp_new_4core_ImDrawVert(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawVert *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawVert *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawVert;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawVert(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImDrawVert[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_10ImDrawVert_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_10ImDrawVert_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_10ImDrawVert_5__setstate_cython__, METH_O, __pyx_doc_4core_10ImDrawVert_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawVert = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawVert", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawVert), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawVert, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawVert()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawVert, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_10ImDrawVert_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawVert, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImFont __pyx_vtable_4core_ImFont;

static PyObject *__pyx_tp_new_4core_ImFont(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImFont *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImFont *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImFont;
  return o;
}

static void __pyx_tp_dealloc_4core_ImFont(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImFont[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_6ImFont_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_6ImFont_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_6ImFont_5__setstate_cython__, METH_O, __pyx_doc_4core_6ImFont_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImFont = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImFont", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImFont), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImFont, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImFont()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImFont, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_6ImFont_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImFont, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImFontAtlas __pyx_vtable_4core_ImFontAtlas;

static PyObject *__pyx_tp_new_4core_ImFontAtlas(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImFontAtlas *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImFontAtlas *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImFontAtlas;
  return o;
}

static void __pyx_tp_dealloc_4core_ImFontAtlas(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_11ImFontAtlas_tex_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_11ImFontAtlas_6tex_id_1__get__(o);
}

static int __pyx_setprop_4core_11ImFontAtlas_tex_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_11ImFontAtlas_6tex_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImFontAtlas[] = {
  {"destroy", (PyCFunction)__pyx_pw_4core_11ImFontAtlas_3destroy, METH_NOARGS, __pyx_doc_4core_11ImFontAtlas_2destroy},
  {"clear_tex_data", (PyCFunction)__pyx_pw_4core_11ImFontAtlas_5clear_tex_data, METH_NOARGS, __pyx_doc_4core_11ImFontAtlas_4clear_tex_data},
  {"get_tex_data_as_alpha8", (PyCFunction)__pyx_pw_4core_11ImFontAtlas_7get_tex_data_as_alpha8, METH_NOARGS, __pyx_doc_4core_11ImFontAtlas_6get_tex_data_as_alpha8},
  {"get_tex_data_as_rgba32", (PyCFunction)__pyx_pw_4core_11ImFontAtlas_9get_tex_data_as_rgba32, METH_NOARGS, __pyx_doc_4core_11ImFontAtlas_8get_tex_data_as_rgba32},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_11ImFontAtlas_11__reduce_cython__, METH_NOARGS, __pyx_doc_4core_11ImFontAtlas_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_11ImFontAtlas_13__setstate_cython__, METH_O, __pyx_doc_4core_11ImFontAtlas_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImFontAtlas[] = {
  {(char *)"tex_id", __pyx_getprop_4core_11ImFontAtlas_tex_id, __pyx_setprop_4core_11ImFontAtlas_tex_id, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImFontAtlas = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImFontAtlas", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImFontAtlas), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImFontAtlas, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImFontAtlas()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImFontAtlas, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImFontAtlas, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_11ImFontAtlas_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImFontAtlas, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImFontAtlasCustomRect __pyx_vtable_4core_ImFontAtlasCustomRect;

static PyObject *__pyx_tp_new_4core_ImFontAtlasCustomRect(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImFontAtlasCustomRect *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImFontAtlasCustomRect *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImFontAtlasCustomRect;
  return o;
}

static void __pyx_tp_dealloc_4core_ImFontAtlasCustomRect(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImFontAtlasCustomRect[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_21ImFontAtlasCustomRect_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_21ImFontAtlasCustomRect_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_21ImFontAtlasCustomRect_5__setstate_cython__, METH_O, __pyx_doc_4core_21ImFontAtlasCustomRect_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImFontAtlasCustomRect = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImFontAtlasCustomRect", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImFontAtlasCustomRect), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImFontAtlasCustomRect, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImFontAtlasCustomRect()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImFontAtlasCustomRect, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_21ImFontAtlasCustomRect_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImFontAtlasCustomRect, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImFontConfig __pyx_vtable_4core_ImFontConfig;

static PyObject *__pyx_tp_new_4core_ImFontConfig(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImFontConfig *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImFontConfig *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImFontConfig;
  return o;
}

static void __pyx_tp_dealloc_4core_ImFontConfig(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImFontConfig[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_12ImFontConfig_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_12ImFontConfig_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_12ImFontConfig_5__setstate_cython__, METH_O, __pyx_doc_4core_12ImFontConfig_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImFontConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImFontConfig", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImFontConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImFontConfig, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImFontConfig()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImFontConfig, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_12ImFontConfig_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImFontConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImFontGlyphRangesBuilder __pyx_vtable_4core_ImFontGlyphRangesBuilder;

static PyObject *__pyx_tp_new_4core_ImFontGlyphRangesBuilder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImFontGlyphRangesBuilder *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImFontGlyphRangesBuilder *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImFontGlyphRangesBuilder;
  return o;
}

static void __pyx_tp_dealloc_4core_ImFontGlyphRangesBuilder(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImFontGlyphRangesBuilder[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_24ImFontGlyphRangesBuilder_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_24ImFontGlyphRangesBuilder_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_24ImFontGlyphRangesBuilder_5__setstate_cython__, METH_O, __pyx_doc_4core_24ImFontGlyphRangesBuilder_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImFontGlyphRangesBuilder = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImFontGlyphRangesBuilder", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImFontGlyphRangesBuilder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImFontGlyphRangesBuilder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImFontGlyphRangesBuilder()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImFontGlyphRangesBuilder, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_24ImFontGlyphRangesBuilder_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImFontGlyphRangesBuilder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiIO __pyx_vtable_4core_ImGuiIO;

static PyObject *__pyx_tp_new_4core_ImGuiIO(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiIO *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiIO *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiIO;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiIO(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_config_flags(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_12config_flags_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_config_flags(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_12config_flags_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_display_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_12display_size_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_display_size(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_12display_size_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_delta_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_10delta_time_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_delta_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_10delta_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_fonts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_5fonts_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_fonts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_5fonts_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_display_framebuffer_scale(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_25display_framebuffer_scale_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_display_framebuffer_scale(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_25display_framebuffer_scale_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_get_clipboard_text_fn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_21get_clipboard_text_fn_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_get_clipboard_text_fn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_21get_clipboard_text_fn_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_set_clipboard_text_fn(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_21set_clipboard_text_fn_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_set_clipboard_text_fn(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_21set_clipboard_text_fn_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_framerate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_9framerate_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_framerate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_9framerate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_key_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_7key_map_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_key_map(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_7key_map_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_keys_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_9keys_down_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_keys_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_9keys_down_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_mouse_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_9mouse_pos_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_mouse_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_9mouse_pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_mouse_down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_10mouse_down_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_mouse_down(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_10mouse_down_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_mouse_wheel(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_11mouse_wheel_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_mouse_wheel(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_11mouse_wheel_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_mouse_wheelh(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_12mouse_wheelh_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_mouse_wheelh(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_12mouse_wheelh_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_key_ctrl(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_8key_ctrl_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_key_ctrl(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_8key_ctrl_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_key_shift(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_9key_shift_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_key_shift(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_9key_shift_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_key_alt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_7key_alt_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_key_alt(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_7key_alt_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_7ImGuiIO_key_super(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_7ImGuiIO_9key_super_1__get__(o);
}

static int __pyx_setprop_4core_7ImGuiIO_key_super(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_7ImGuiIO_9key_super_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImGuiIO[] = {
  {"add_input_character", (PyCFunction)__pyx_pw_4core_7ImGuiIO_3add_input_character, METH_O, __pyx_doc_4core_7ImGuiIO_2add_input_character},
  {"add_key_event", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_7ImGuiIO_5add_key_event, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_7ImGuiIO_4add_key_event},
  {"add_mouse_button_event", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_7ImGuiIO_7add_mouse_button_event, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_7ImGuiIO_6add_mouse_button_event},
  {"add_mouse_pos_event", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_7ImGuiIO_9add_mouse_pos_event, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_7ImGuiIO_8add_mouse_pos_event},
  {"add_mouse_wheel_event", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_4core_7ImGuiIO_11add_mouse_wheel_event, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4core_7ImGuiIO_10add_mouse_wheel_event},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_7ImGuiIO_13__reduce_cython__, METH_NOARGS, __pyx_doc_4core_7ImGuiIO_12__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_7ImGuiIO_15__setstate_cython__, METH_O, __pyx_doc_4core_7ImGuiIO_14__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImGuiIO[] = {
  {(char *)"config_flags", __pyx_getprop_4core_7ImGuiIO_config_flags, __pyx_setprop_4core_7ImGuiIO_config_flags, (char *)0, 0},
  {(char *)"display_size", __pyx_getprop_4core_7ImGuiIO_display_size, __pyx_setprop_4core_7ImGuiIO_display_size, (char *)0, 0},
  {(char *)"delta_time", __pyx_getprop_4core_7ImGuiIO_delta_time, __pyx_setprop_4core_7ImGuiIO_delta_time, (char *)0, 0},
  {(char *)"fonts", __pyx_getprop_4core_7ImGuiIO_fonts, __pyx_setprop_4core_7ImGuiIO_fonts, (char *)0, 0},
  {(char *)"display_framebuffer_scale", __pyx_getprop_4core_7ImGuiIO_display_framebuffer_scale, __pyx_setprop_4core_7ImGuiIO_display_framebuffer_scale, (char *)0, 0},
  {(char *)"get_clipboard_text_fn", __pyx_getprop_4core_7ImGuiIO_get_clipboard_text_fn, __pyx_setprop_4core_7ImGuiIO_get_clipboard_text_fn, (char *)0, 0},
  {(char *)"set_clipboard_text_fn", __pyx_getprop_4core_7ImGuiIO_set_clipboard_text_fn, __pyx_setprop_4core_7ImGuiIO_set_clipboard_text_fn, (char *)0, 0},
  {(char *)"framerate", __pyx_getprop_4core_7ImGuiIO_framerate, __pyx_setprop_4core_7ImGuiIO_framerate, (char *)0, 0},
  {(char *)"key_map", __pyx_getprop_4core_7ImGuiIO_key_map, __pyx_setprop_4core_7ImGuiIO_key_map, (char *)0, 0},
  {(char *)"keys_down", __pyx_getprop_4core_7ImGuiIO_keys_down, __pyx_setprop_4core_7ImGuiIO_keys_down, (char *)0, 0},
  {(char *)"mouse_pos", __pyx_getprop_4core_7ImGuiIO_mouse_pos, __pyx_setprop_4core_7ImGuiIO_mouse_pos, (char *)0, 0},
  {(char *)"mouse_down", __pyx_getprop_4core_7ImGuiIO_mouse_down, __pyx_setprop_4core_7ImGuiIO_mouse_down, (char *)0, 0},
  {(char *)"mouse_wheel", __pyx_getprop_4core_7ImGuiIO_mouse_wheel, __pyx_setprop_4core_7ImGuiIO_mouse_wheel, (char *)0, 0},
  {(char *)"mouse_wheelh", __pyx_getprop_4core_7ImGuiIO_mouse_wheelh, __pyx_setprop_4core_7ImGuiIO_mouse_wheelh, (char *)0, 0},
  {(char *)"key_ctrl", __pyx_getprop_4core_7ImGuiIO_key_ctrl, __pyx_setprop_4core_7ImGuiIO_key_ctrl, (char *)0, 0},
  {(char *)"key_shift", __pyx_getprop_4core_7ImGuiIO_key_shift, __pyx_setprop_4core_7ImGuiIO_key_shift, (char *)0, 0},
  {(char *)"key_alt", __pyx_getprop_4core_7ImGuiIO_key_alt, __pyx_setprop_4core_7ImGuiIO_key_alt, (char *)0, 0},
  {(char *)"key_super", __pyx_getprop_4core_7ImGuiIO_key_super, __pyx_setprop_4core_7ImGuiIO_key_super, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiIO = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiIO", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiIO), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiIO, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiIO()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiIO, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImGuiIO, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_7ImGuiIO_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiIO, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiPlatformIO __pyx_vtable_4core_ImGuiPlatformIO;

static PyObject *__pyx_tp_new_4core_ImGuiPlatformIO(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiPlatformIO *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiPlatformIO *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiPlatformIO;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiPlatformIO(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiPlatformIO[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_15ImGuiPlatformIO_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_15ImGuiPlatformIO_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_15ImGuiPlatformIO_5__setstate_cython__, METH_O, __pyx_doc_4core_15ImGuiPlatformIO_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiPlatformIO = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiPlatformIO", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiPlatformIO), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiPlatformIO, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiPlatformIO()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiPlatformIO, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_15ImGuiPlatformIO_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiPlatformIO, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiPlatformImeData __pyx_vtable_4core_ImGuiPlatformImeData;

static PyObject *__pyx_tp_new_4core_ImGuiPlatformImeData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiPlatformImeData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiPlatformImeData *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiPlatformImeData;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiPlatformImeData(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiPlatformImeData[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_20ImGuiPlatformImeData_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_20ImGuiPlatformImeData_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_20ImGuiPlatformImeData_5__setstate_cython__, METH_O, __pyx_doc_4core_20ImGuiPlatformImeData_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiPlatformImeData = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiPlatformImeData", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiPlatformImeData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiPlatformImeData, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiPlatformImeData()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiPlatformImeData, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_20ImGuiPlatformImeData_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiPlatformImeData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiPlatformMonitor __pyx_vtable_4core_ImGuiPlatformMonitor;

static PyObject *__pyx_tp_new_4core_ImGuiPlatformMonitor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiPlatformMonitor *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiPlatformMonitor *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiPlatformMonitor;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiPlatformMonitor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiPlatformMonitor[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_20ImGuiPlatformMonitor_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_20ImGuiPlatformMonitor_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_20ImGuiPlatformMonitor_5__setstate_cython__, METH_O, __pyx_doc_4core_20ImGuiPlatformMonitor_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiPlatformMonitor = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiPlatformMonitor", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiPlatformMonitor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiPlatformMonitor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiPlatformMonitor()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiPlatformMonitor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_20ImGuiPlatformMonitor_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiPlatformMonitor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiStorage __pyx_vtable_4core_ImGuiStorage;

static PyObject *__pyx_tp_new_4core_ImGuiStorage(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiStorage *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiStorage *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiStorage;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiStorage(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiStorage[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiStorage_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_12ImGuiStorage_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiStorage_5__setstate_cython__, METH_O, __pyx_doc_4core_12ImGuiStorage_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiStorage = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiStorage", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiStorage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiStorage, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiStorage()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiStorage, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_12ImGuiStorage_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiStorage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiStyle __pyx_vtable_4core_ImGuiStyle;

static PyObject *__pyx_tp_new_4core_ImGuiStyle(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiStyle *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiStyle *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiStyle;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiStyle(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiStyle[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_10ImGuiStyle_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_10ImGuiStyle_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_10ImGuiStyle_5__setstate_cython__, METH_O, __pyx_doc_4core_10ImGuiStyle_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiStyle = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiStyle", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiStyle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiStyle, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiStyle()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiStyle, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_10ImGuiStyle_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiStyle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiTextBuffer __pyx_vtable_4core_ImGuiTextBuffer;

static PyObject *__pyx_tp_new_4core_ImGuiTextBuffer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiTextBuffer *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiTextBuffer *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiTextBuffer;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiTextBuffer(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiTextBuffer[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_15ImGuiTextBuffer_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_15ImGuiTextBuffer_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_15ImGuiTextBuffer_5__setstate_cython__, METH_O, __pyx_doc_4core_15ImGuiTextBuffer_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiTextBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiTextBuffer", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiTextBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiTextBuffer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiTextBuffer()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiTextBuffer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_15ImGuiTextBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiTextBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiTextFilter __pyx_vtable_4core_ImGuiTextFilter;

static PyObject *__pyx_tp_new_4core_ImGuiTextFilter(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiTextFilter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiTextFilter *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiTextFilter;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiTextFilter(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiTextFilter[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_15ImGuiTextFilter_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_15ImGuiTextFilter_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_15ImGuiTextFilter_5__setstate_cython__, METH_O, __pyx_doc_4core_15ImGuiTextFilter_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiTextFilter = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiTextFilter", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiTextFilter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiTextFilter, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiTextFilter()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiTextFilter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_15ImGuiTextFilter_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiTextFilter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiViewport __pyx_vtable_4core_ImGuiViewport;

static PyObject *__pyx_tp_new_4core_ImGuiViewport(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiViewport *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiViewport *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiViewport;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiViewport(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiViewport[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_13ImGuiViewport_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_13ImGuiViewport_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_13ImGuiViewport_5__setstate_cython__, METH_O, __pyx_doc_4core_13ImGuiViewport_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiViewport = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiViewport", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiViewport), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiViewport, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiViewport()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiViewport, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_13ImGuiViewport_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiViewport, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawList __pyx_vtable_4core_ImDrawList;

static PyObject *__pyx_tp_new_4core_ImDrawList(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawList *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawList *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawList;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawList(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4core_10ImDrawList_cmd_buffer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_10ImDrawList_10cmd_buffer_1__get__(o);
}

static int __pyx_setprop_4core_10ImDrawList_cmd_buffer(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_10ImDrawList_10cmd_buffer_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_10ImDrawList_idx_buffer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_10ImDrawList_10idx_buffer_1__get__(o);
}

static int __pyx_setprop_4core_10ImDrawList_idx_buffer(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_10ImDrawList_10idx_buffer_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4core_10ImDrawList_vtx_buffer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4core_10ImDrawList_10vtx_buffer_1__get__(o);
}

static int __pyx_setprop_4core_10ImDrawList_vtx_buffer(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4core_10ImDrawList_10vtx_buffer_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4core_ImDrawList[] = {
  {"destroy", (PyCFunction)__pyx_pw_4core_10ImDrawList_3destroy, METH_NOARGS, __pyx_doc_4core_10ImDrawList_2destroy},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_10ImDrawList_5__reduce_cython__, METH_NOARGS, __pyx_doc_4core_10ImDrawList_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_10ImDrawList_7__setstate_cython__, METH_O, __pyx_doc_4core_10ImDrawList_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4core_ImDrawList[] = {
  {(char *)"cmd_buffer", __pyx_getprop_4core_10ImDrawList_cmd_buffer, __pyx_setprop_4core_10ImDrawList_cmd_buffer, (char *)0, 0},
  {(char *)"idx_buffer", __pyx_getprop_4core_10ImDrawList_idx_buffer, __pyx_setprop_4core_10ImDrawList_idx_buffer, (char *)0, 0},
  {(char *)"vtx_buffer", __pyx_getprop_4core_10ImDrawList_vtx_buffer, __pyx_setprop_4core_10ImDrawList_vtx_buffer, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawList = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawList", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawList, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawList()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawList, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4core_ImDrawList, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_10ImDrawList_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImDrawListSharedData __pyx_vtable_4core_ImDrawListSharedData;

static PyObject *__pyx_tp_new_4core_ImDrawListSharedData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImDrawListSharedData *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImDrawListSharedData *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImDrawListSharedData;
  return o;
}

static void __pyx_tp_dealloc_4core_ImDrawListSharedData(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImDrawListSharedData[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_20ImDrawListSharedData_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_20ImDrawListSharedData_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_20ImDrawListSharedData_5__setstate_cython__, METH_O, __pyx_doc_4core_20ImDrawListSharedData_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImDrawListSharedData = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImDrawListSharedData", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImDrawListSharedData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImDrawListSharedData, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImDrawListSharedData()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImDrawListSharedData, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_20ImDrawListSharedData_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImDrawListSharedData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImFontBuilderIO __pyx_vtable_4core_ImFontBuilderIO;

static PyObject *__pyx_tp_new_4core_ImFontBuilderIO(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImFontBuilderIO *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImFontBuilderIO *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImFontBuilderIO;
  return o;
}

static void __pyx_tp_dealloc_4core_ImFontBuilderIO(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImFontBuilderIO[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_15ImFontBuilderIO_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_15ImFontBuilderIO_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_15ImFontBuilderIO_5__setstate_cython__, METH_O, __pyx_doc_4core_15ImFontBuilderIO_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImFontBuilderIO = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImFontBuilderIO", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImFontBuilderIO), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImFontBuilderIO, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImFontBuilderIO()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImFontBuilderIO, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_15ImFontBuilderIO_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImFontBuilderIO, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_4core_ImGuiContext __pyx_vtable_4core_ImGuiContext;

static PyObject *__pyx_tp_new_4core_ImGuiContext(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4core_ImGuiContext *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4core_ImGuiContext *)o);
  p->__pyx_vtab = __pyx_vtabptr_4core_ImGuiContext;
  return o;
}

static void __pyx_tp_dealloc_4core_ImGuiContext(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4core_ImGuiContext[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiContext_3__reduce_cython__, METH_NOARGS, __pyx_doc_4core_12ImGuiContext_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_4core_12ImGuiContext_5__setstate_cython__, METH_O, __pyx_doc_4core_12ImGuiContext_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4core_ImGuiContext = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.ImGuiContext", /*tp_name*/
  sizeof(struct __pyx_obj_4core_ImGuiContext), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4core_ImGuiContext, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "ImGuiContext()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4core_ImGuiContext, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4core_12ImGuiContext_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4core_ImGuiContext, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "core.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "core._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_core(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_core},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "core",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_Any, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {&__pyx_n_s_BoolPtr, __pyx_k_BoolPtr, sizeof(__pyx_k_BoolPtr), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_n_s_Callable, __pyx_k_Callable, sizeof(__pyx_k_Callable), 0, 0, 1, 1},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_GAMEPAD, __pyx_k_IMGUI_BACKEND_FLAGS_HAS_GAMEPAD, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_HAS_GAMEPAD), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_MOUSE_CU, __pyx_k_IMGUI_BACKEND_FLAGS_HAS_MOUSE_CU, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_HAS_MOUSE_CU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_MOUSE_HO, __pyx_k_IMGUI_BACKEND_FLAGS_HAS_MOUSE_HO, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_HAS_MOUSE_HO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_SET_MOUS, __pyx_k_IMGUI_BACKEND_FLAGS_HAS_SET_MOUS, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_HAS_SET_MOUS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_NONE, __pyx_k_IMGUI_BACKEND_FLAGS_NONE, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_PLATFORM_HAS, __pyx_k_IMGUI_BACKEND_FLAGS_PLATFORM_HAS, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_PLATFORM_HAS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_RENDERER_HAS, __pyx_k_IMGUI_BACKEND_FLAGS_RENDERER_HAS, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_RENDERER_HAS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BACKEND_FLAGS_RENDERER_HAS_2, __pyx_k_IMGUI_BACKEND_FLAGS_RENDERER_HAS_2, sizeof(__pyx_k_IMGUI_BACKEND_FLAGS_RENDERER_HAS_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON, __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON, sizeof(__pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_2, __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_2, sizeof(__pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_3, __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_3, sizeof(__pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_4, __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_4, sizeof(__pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_4), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_5, __pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_5, sizeof(__pyx_k_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_5), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_BUTTON_FLAGS_NONE, __pyx_k_IMGUI_BUTTON_FLAGS_NONE, sizeof(__pyx_k_IMGUI_BUTTON_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE_2, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE_2, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DEFAULT_O, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DEFAULT_O, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_DEFAULT_O), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H_2, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H_2, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_M, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_M, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_M), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_R, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_R, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_R), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_FLOAT, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_FLOAT, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_HDR, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_HDR, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_HDR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_MAS, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_MAS, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_MAS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NONE, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NONE, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_BORDER, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_BORDER, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_BORDER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_D, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_D, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_D), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_LABEL, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_LABEL, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_LABEL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_OPTION, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_OPTION, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_OPTION), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_PICKER, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_PICKER, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_PICKER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_P, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_P, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_P), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_SMALL, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_SMALL, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_SMALL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTI, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTI, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU_2, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU_2, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_MA, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_MA, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_PICKER_MA), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_UINT8, __pyx_k_IMGUI_COLOR_EDIT_FLAGS_UINT8, sizeof(__pyx_k_IMGUI_COLOR_EDIT_FLAGS_UINT8), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_BORDER, __pyx_k_IMGUI_COL_BORDER, sizeof(__pyx_k_IMGUI_COL_BORDER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_BORDER_SHADOW, __pyx_k_IMGUI_COL_BORDER_SHADOW, sizeof(__pyx_k_IMGUI_COL_BORDER_SHADOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_BUTTON, __pyx_k_IMGUI_COL_BUTTON, sizeof(__pyx_k_IMGUI_COL_BUTTON), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_BUTTON_ACTIVE, __pyx_k_IMGUI_COL_BUTTON_ACTIVE, sizeof(__pyx_k_IMGUI_COL_BUTTON_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_BUTTON_HOVERED, __pyx_k_IMGUI_COL_BUTTON_HOVERED, sizeof(__pyx_k_IMGUI_COL_BUTTON_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_CHECK_MARK, __pyx_k_IMGUI_COL_CHECK_MARK, sizeof(__pyx_k_IMGUI_COL_CHECK_MARK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_CHILD_BG, __pyx_k_IMGUI_COL_CHILD_BG, sizeof(__pyx_k_IMGUI_COL_CHILD_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_COUNT, __pyx_k_IMGUI_COL_COUNT, sizeof(__pyx_k_IMGUI_COL_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_DOCKING_EMPTY_BG, __pyx_k_IMGUI_COL_DOCKING_EMPTY_BG, sizeof(__pyx_k_IMGUI_COL_DOCKING_EMPTY_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_DOCKING_PREVIEW, __pyx_k_IMGUI_COL_DOCKING_PREVIEW, sizeof(__pyx_k_IMGUI_COL_DOCKING_PREVIEW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_DRAG_DROP_TARGET, __pyx_k_IMGUI_COL_DRAG_DROP_TARGET, sizeof(__pyx_k_IMGUI_COL_DRAG_DROP_TARGET), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_FRAME_BG, __pyx_k_IMGUI_COL_FRAME_BG, sizeof(__pyx_k_IMGUI_COL_FRAME_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_FRAME_BG_ACTIVE, __pyx_k_IMGUI_COL_FRAME_BG_ACTIVE, sizeof(__pyx_k_IMGUI_COL_FRAME_BG_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_FRAME_BG_HOVERED, __pyx_k_IMGUI_COL_FRAME_BG_HOVERED, sizeof(__pyx_k_IMGUI_COL_FRAME_BG_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_HEADER, __pyx_k_IMGUI_COL_HEADER, sizeof(__pyx_k_IMGUI_COL_HEADER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_HEADER_ACTIVE, __pyx_k_IMGUI_COL_HEADER_ACTIVE, sizeof(__pyx_k_IMGUI_COL_HEADER_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_HEADER_HOVERED, __pyx_k_IMGUI_COL_HEADER_HOVERED, sizeof(__pyx_k_IMGUI_COL_HEADER_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_MENU_BAR_BG, __pyx_k_IMGUI_COL_MENU_BAR_BG, sizeof(__pyx_k_IMGUI_COL_MENU_BAR_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_MODAL_WINDOW_DIM_BG, __pyx_k_IMGUI_COL_MODAL_WINDOW_DIM_BG, sizeof(__pyx_k_IMGUI_COL_MODAL_WINDOW_DIM_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_NAV_HIGHLIGHT, __pyx_k_IMGUI_COL_NAV_HIGHLIGHT, sizeof(__pyx_k_IMGUI_COL_NAV_HIGHLIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_NAV_WINDOWING_DIM_BG, __pyx_k_IMGUI_COL_NAV_WINDOWING_DIM_BG, sizeof(__pyx_k_IMGUI_COL_NAV_WINDOWING_DIM_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_NAV_WINDOWING_HIGHLIGH, __pyx_k_IMGUI_COL_NAV_WINDOWING_HIGHLIGH, sizeof(__pyx_k_IMGUI_COL_NAV_WINDOWING_HIGHLIGH), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_PLOT_HISTOGRAM, __pyx_k_IMGUI_COL_PLOT_HISTOGRAM, sizeof(__pyx_k_IMGUI_COL_PLOT_HISTOGRAM), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_PLOT_HISTOGRAM_HOVERED, __pyx_k_IMGUI_COL_PLOT_HISTOGRAM_HOVERED, sizeof(__pyx_k_IMGUI_COL_PLOT_HISTOGRAM_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_PLOT_LINES, __pyx_k_IMGUI_COL_PLOT_LINES, sizeof(__pyx_k_IMGUI_COL_PLOT_LINES), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_PLOT_LINES_HOVERED, __pyx_k_IMGUI_COL_PLOT_LINES_HOVERED, sizeof(__pyx_k_IMGUI_COL_PLOT_LINES_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_POPUP_BG, __pyx_k_IMGUI_COL_POPUP_BG, sizeof(__pyx_k_IMGUI_COL_POPUP_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_RESIZE_GRIP, __pyx_k_IMGUI_COL_RESIZE_GRIP, sizeof(__pyx_k_IMGUI_COL_RESIZE_GRIP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_RESIZE_GRIP_ACTIVE, __pyx_k_IMGUI_COL_RESIZE_GRIP_ACTIVE, sizeof(__pyx_k_IMGUI_COL_RESIZE_GRIP_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_RESIZE_GRIP_HOVERED, __pyx_k_IMGUI_COL_RESIZE_GRIP_HOVERED, sizeof(__pyx_k_IMGUI_COL_RESIZE_GRIP_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SCROLLBAR_BG, __pyx_k_IMGUI_COL_SCROLLBAR_BG, sizeof(__pyx_k_IMGUI_COL_SCROLLBAR_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB, __pyx_k_IMGUI_COL_SCROLLBAR_GRAB, sizeof(__pyx_k_IMGUI_COL_SCROLLBAR_GRAB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB_ACTIVE, __pyx_k_IMGUI_COL_SCROLLBAR_GRAB_ACTIVE, sizeof(__pyx_k_IMGUI_COL_SCROLLBAR_GRAB_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB_HOVERED, __pyx_k_IMGUI_COL_SCROLLBAR_GRAB_HOVERED, sizeof(__pyx_k_IMGUI_COL_SCROLLBAR_GRAB_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SEPARATOR, __pyx_k_IMGUI_COL_SEPARATOR, sizeof(__pyx_k_IMGUI_COL_SEPARATOR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SEPARATOR_ACTIVE, __pyx_k_IMGUI_COL_SEPARATOR_ACTIVE, sizeof(__pyx_k_IMGUI_COL_SEPARATOR_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SEPARATOR_HOVERED, __pyx_k_IMGUI_COL_SEPARATOR_HOVERED, sizeof(__pyx_k_IMGUI_COL_SEPARATOR_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SLIDER_GRAB, __pyx_k_IMGUI_COL_SLIDER_GRAB, sizeof(__pyx_k_IMGUI_COL_SLIDER_GRAB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_SLIDER_GRAB_ACTIVE, __pyx_k_IMGUI_COL_SLIDER_GRAB_ACTIVE, sizeof(__pyx_k_IMGUI_COL_SLIDER_GRAB_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TAB, __pyx_k_IMGUI_COL_TAB, sizeof(__pyx_k_IMGUI_COL_TAB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TABLE_BORDER_LIGHT, __pyx_k_IMGUI_COL_TABLE_BORDER_LIGHT, sizeof(__pyx_k_IMGUI_COL_TABLE_BORDER_LIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TABLE_BORDER_STRONG, __pyx_k_IMGUI_COL_TABLE_BORDER_STRONG, sizeof(__pyx_k_IMGUI_COL_TABLE_BORDER_STRONG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TABLE_HEADER_BG, __pyx_k_IMGUI_COL_TABLE_HEADER_BG, sizeof(__pyx_k_IMGUI_COL_TABLE_HEADER_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TABLE_ROW_BG, __pyx_k_IMGUI_COL_TABLE_ROW_BG, sizeof(__pyx_k_IMGUI_COL_TABLE_ROW_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TABLE_ROW_BG_ALT, __pyx_k_IMGUI_COL_TABLE_ROW_BG_ALT, sizeof(__pyx_k_IMGUI_COL_TABLE_ROW_BG_ALT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TAB_ACTIVE, __pyx_k_IMGUI_COL_TAB_ACTIVE, sizeof(__pyx_k_IMGUI_COL_TAB_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TAB_HOVERED, __pyx_k_IMGUI_COL_TAB_HOVERED, sizeof(__pyx_k_IMGUI_COL_TAB_HOVERED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TAB_UNFOCUSED, __pyx_k_IMGUI_COL_TAB_UNFOCUSED, sizeof(__pyx_k_IMGUI_COL_TAB_UNFOCUSED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TAB_UNFOCUSED_ACTIVE, __pyx_k_IMGUI_COL_TAB_UNFOCUSED_ACTIVE, sizeof(__pyx_k_IMGUI_COL_TAB_UNFOCUSED_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TEXT, __pyx_k_IMGUI_COL_TEXT, sizeof(__pyx_k_IMGUI_COL_TEXT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TEXT_DISABLED, __pyx_k_IMGUI_COL_TEXT_DISABLED, sizeof(__pyx_k_IMGUI_COL_TEXT_DISABLED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TEXT_SELECTED_BG, __pyx_k_IMGUI_COL_TEXT_SELECTED_BG, sizeof(__pyx_k_IMGUI_COL_TEXT_SELECTED_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TITLE_BG, __pyx_k_IMGUI_COL_TITLE_BG, sizeof(__pyx_k_IMGUI_COL_TITLE_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TITLE_BG_ACTIVE, __pyx_k_IMGUI_COL_TITLE_BG_ACTIVE, sizeof(__pyx_k_IMGUI_COL_TITLE_BG_ACTIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_TITLE_BG_COLLAPSED, __pyx_k_IMGUI_COL_TITLE_BG_COLLAPSED, sizeof(__pyx_k_IMGUI_COL_TITLE_BG_COLLAPSED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COL_WINDOW_BG, __pyx_k_IMGUI_COL_WINDOW_BG, sizeof(__pyx_k_IMGUI_COL_WINDOW_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_LARGE, __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_LARGE, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_LARGE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_LARGEST, __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_LARGEST, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_LARGEST), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_MASK, __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_MASK, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_MASK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_REGULAR, __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_REGULAR, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_REGULAR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_SMALL, __pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_SMALL, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_HEIGHT_SMALL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_NONE, __pyx_k_IMGUI_COMBO_FLAGS_NONE, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_NO_ARROW_BUTTO, __pyx_k_IMGUI_COMBO_FLAGS_NO_ARROW_BUTTO, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_NO_ARROW_BUTTO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_NO_PREVIEW, __pyx_k_IMGUI_COMBO_FLAGS_NO_PREVIEW, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_NO_PREVIEW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COMBO_FLAGS_POPUP_ALIGN_LE, __pyx_k_IMGUI_COMBO_FLAGS_POPUP_ALIGN_LE, sizeof(__pyx_k_IMGUI_COMBO_FLAGS_POPUP_ALIGN_LE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COND_ALWAYS, __pyx_k_IMGUI_COND_ALWAYS, sizeof(__pyx_k_IMGUI_COND_ALWAYS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COND_APPEARING, __pyx_k_IMGUI_COND_APPEARING, sizeof(__pyx_k_IMGUI_COND_APPEARING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COND_FIRST_USE_EVER, __pyx_k_IMGUI_COND_FIRST_USE_EVER, sizeof(__pyx_k_IMGUI_COND_FIRST_USE_EVER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COND_NONE, __pyx_k_IMGUI_COND_NONE, sizeof(__pyx_k_IMGUI_COND_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_COND_ONCE, __pyx_k_IMGUI_COND_ONCE, sizeof(__pyx_k_IMGUI_COND_ONCE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_DOCKING_ENABL, __pyx_k_IMGUI_CONFIG_FLAGS_DOCKING_ENABL, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_DOCKING_ENABL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC, __pyx_k_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC_2, __pyx_k_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC_2, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_IS_SRGB, __pyx_k_IMGUI_CONFIG_FLAGS_IS_SRGB, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_IS_SRGB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_IS_TOUCH_SCRE, __pyx_k_IMGUI_CONFIG_FLAGS_IS_TOUCH_SCRE, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_IS_TOUCH_SCRE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_GA, __pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_GA, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_GA), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_KE, __pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_KE, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_KE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_SE, __pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_SE, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_NAV_ENABLE_SE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_NO_CAPTUR, __pyx_k_IMGUI_CONFIG_FLAGS_NAV_NO_CAPTUR, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_NAV_NO_CAPTUR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_NONE, __pyx_k_IMGUI_CONFIG_FLAGS_NONE, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_NO_MOUSE, __pyx_k_IMGUI_CONFIG_FLAGS_NO_MOUSE, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_NO_MOUSE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_NO_MOUSE_CURS, __pyx_k_IMGUI_CONFIG_FLAGS_NO_MOUSE_CURS, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_NO_MOUSE_CURS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_CONFIG_FLAGS_VIEWPORTS_ENA, __pyx_k_IMGUI_CONFIG_FLAGS_VIEWPORTS_ENA, sizeof(__pyx_k_IMGUI_CONFIG_FLAGS_VIEWPORTS_ENA), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_COUNT, __pyx_k_IMGUI_DATA_TYPE_COUNT, sizeof(__pyx_k_IMGUI_DATA_TYPE_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_DOUBLE, __pyx_k_IMGUI_DATA_TYPE_DOUBLE, sizeof(__pyx_k_IMGUI_DATA_TYPE_DOUBLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_FLOAT, __pyx_k_IMGUI_DATA_TYPE_FLOAT, sizeof(__pyx_k_IMGUI_DATA_TYPE_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_S16, __pyx_k_IMGUI_DATA_TYPE_S16, sizeof(__pyx_k_IMGUI_DATA_TYPE_S16), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_S32, __pyx_k_IMGUI_DATA_TYPE_S32, sizeof(__pyx_k_IMGUI_DATA_TYPE_S32), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_S64, __pyx_k_IMGUI_DATA_TYPE_S64, sizeof(__pyx_k_IMGUI_DATA_TYPE_S64), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_S8, __pyx_k_IMGUI_DATA_TYPE_S8, sizeof(__pyx_k_IMGUI_DATA_TYPE_S8), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_U16, __pyx_k_IMGUI_DATA_TYPE_U16, sizeof(__pyx_k_IMGUI_DATA_TYPE_U16), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_U32, __pyx_k_IMGUI_DATA_TYPE_U32, sizeof(__pyx_k_IMGUI_DATA_TYPE_U32), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_U64, __pyx_k_IMGUI_DATA_TYPE_U64, sizeof(__pyx_k_IMGUI_DATA_TYPE_U64), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DATA_TYPE_U8, __pyx_k_IMGUI_DATA_TYPE_U8, sizeof(__pyx_k_IMGUI_DATA_TYPE_U8), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DIR_COUNT, __pyx_k_IMGUI_DIR_COUNT, sizeof(__pyx_k_IMGUI_DIR_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DIR_DOWN, __pyx_k_IMGUI_DIR_DOWN, sizeof(__pyx_k_IMGUI_DIR_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DIR_LEFT, __pyx_k_IMGUI_DIR_LEFT, sizeof(__pyx_k_IMGUI_DIR_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DIR_NONE, __pyx_k_IMGUI_DIR_NONE, sizeof(__pyx_k_IMGUI_DIR_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DIR_RIGHT, __pyx_k_IMGUI_DIR_RIGHT, sizeof(__pyx_k_IMGUI_DIR_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DIR_UP, __pyx_k_IMGUI_DIR_UP, sizeof(__pyx_k_IMGUI_DIR_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE, __pyx_k_IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE, sizeof(__pyx_k_IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE, __pyx_k_IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE, sizeof(__pyx_k_IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NONE, __pyx_k_IMGUI_DOCK_NODE_FLAGS_NONE, sizeof(__pyx_k_IMGUI_DOCK_NODE_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_DOCKING, __pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_DOCKING, sizeof(__pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_DOCKING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_RESIZE, __pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_RESIZE, sizeof(__pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_RESIZE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_SPLIT, __pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_SPLIT, sizeof(__pyx_k_IMGUI_DOCK_NODE_FLAGS_NO_SPLIT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DOCK_NODE_FLAGS_PASSTHRU_C, __pyx_k_IMGUI_DOCK_NODE_FLAGS_PASSTHRU_C, sizeof(__pyx_k_IMGUI_DOCK_NODE_FLAGS_PASSTHRU_C), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEF, __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEF, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEF), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO, __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_2, __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_2, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEE, __pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEE, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_NONE, __pyx_k_IMGUI_DRAG_DROP_FLAGS_NONE, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_ALL, __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_ALL, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_AUT, __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_AUT, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_AUT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_EXT, __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_EXT, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_EXT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO, __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_2, __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_2, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_3, __pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_3, sizeof(__pyx_k_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_FOCUSED_FLAGS_ANY_WINDOW, __pyx_k_IMGUI_FOCUSED_FLAGS_ANY_WINDOW, sizeof(__pyx_k_IMGUI_FOCUSED_FLAGS_ANY_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_FOCUSED_FLAGS_CHILD_WINDOW, __pyx_k_IMGUI_FOCUSED_FLAGS_CHILD_WINDOW, sizeof(__pyx_k_IMGUI_FOCUSED_FLAGS_CHILD_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_FOCUSED_FLAGS_DOCK_HIERARC, __pyx_k_IMGUI_FOCUSED_FLAGS_DOCK_HIERARC, sizeof(__pyx_k_IMGUI_FOCUSED_FLAGS_DOCK_HIERARC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_FOCUSED_FLAGS_NONE, __pyx_k_IMGUI_FOCUSED_FLAGS_NONE, sizeof(__pyx_k_IMGUI_FOCUSED_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_FOCUSED_FLAGS_NO_POPUP_HIE, __pyx_k_IMGUI_FOCUSED_FLAGS_NO_POPUP_HIE, sizeof(__pyx_k_IMGUI_FOCUSED_FLAGS_NO_POPUP_HIE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_FOCUSED_FLAGS_ROOT_AND_CHI, __pyx_k_IMGUI_FOCUSED_FLAGS_ROOT_AND_CHI, sizeof(__pyx_k_IMGUI_FOCUSED_FLAGS_ROOT_AND_CHI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_FOCUSED_FLAGS_ROOT_WINDOW, __pyx_k_IMGUI_FOCUSED_FLAGS_ROOT_WINDOW, sizeof(__pyx_k_IMGUI_FOCUSED_FLAGS_ROOT_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B, __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B_2, __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B_2, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_D, __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_D, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_D), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_O, __pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_O, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_O), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_ANY_WINDOW, __pyx_k_IMGUI_HOVERED_FLAGS_ANY_WINDOW, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_ANY_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_CHILD_WINDOW, __pyx_k_IMGUI_HOVERED_FLAGS_CHILD_WINDOW, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_CHILD_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_DELAY_NORMAL, __pyx_k_IMGUI_HOVERED_FLAGS_DELAY_NORMAL, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_DELAY_NORMAL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_DELAY_SHORT, __pyx_k_IMGUI_HOVERED_FLAGS_DELAY_SHORT, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_DELAY_SHORT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_DOCK_HIERARC, __pyx_k_IMGUI_HOVERED_FLAGS_DOCK_HIERARC, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_DOCK_HIERARC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_NONE, __pyx_k_IMGUI_HOVERED_FLAGS_NONE, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_NO_NAV_OVERR, __pyx_k_IMGUI_HOVERED_FLAGS_NO_NAV_OVERR, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_NO_NAV_OVERR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_NO_POPUP_HIE, __pyx_k_IMGUI_HOVERED_FLAGS_NO_POPUP_HIE, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_NO_POPUP_HIE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_NO_SHARED_DE, __pyx_k_IMGUI_HOVERED_FLAGS_NO_SHARED_DE, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_NO_SHARED_DE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_RECT_ONLY, __pyx_k_IMGUI_HOVERED_FLAGS_RECT_ONLY, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_RECT_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_ROOT_AND_CHI, __pyx_k_IMGUI_HOVERED_FLAGS_ROOT_AND_CHI, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_ROOT_AND_CHI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_HOVERED_FLAGS_ROOT_WINDOW, __pyx_k_IMGUI_HOVERED_FLAGS_ROOT_WINDOW, sizeof(__pyx_k_IMGUI_HOVERED_FLAGS_ROOT_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OV, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OV, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OV), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_AUTO_SELE, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_AUTO_SELE, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_AUTO_SELE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_2, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_2, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_3, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_3, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_4, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_4, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_4), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_5, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_5, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_5), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_6, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_6, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_6), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_DEC, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_DEC, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_DEC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_HEX, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_HEX, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_HEX), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_NO, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_NO, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_NO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_SCI, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_SCI, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_SCI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_UPP, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_UPP, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CHARS_UPP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTE, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTE, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ENTER_RET, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ENTER_RET, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_ENTER_RET), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CL, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CL, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NONE, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_NONE, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NO_HORIZO, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_NO_HORIZO, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_NO_HORIZO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_R, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_R, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_R), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_PASSWORD, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_PASSWORD, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_PASSWORD), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_READ_ONLY, __pyx_k_IMGUI_INPUT_TEXT_FLAGS_READ_ONLY, sizeof(__pyx_k_IMGUI_INPUT_TEXT_FLAGS_READ_ONLY), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_0, __pyx_k_IMGUI_KEY_0, sizeof(__pyx_k_IMGUI_KEY_0), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_1, __pyx_k_IMGUI_KEY_1, sizeof(__pyx_k_IMGUI_KEY_1), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_2, __pyx_k_IMGUI_KEY_2, sizeof(__pyx_k_IMGUI_KEY_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_3, __pyx_k_IMGUI_KEY_3, sizeof(__pyx_k_IMGUI_KEY_3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_4, __pyx_k_IMGUI_KEY_4, sizeof(__pyx_k_IMGUI_KEY_4), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_5, __pyx_k_IMGUI_KEY_5, sizeof(__pyx_k_IMGUI_KEY_5), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_6, __pyx_k_IMGUI_KEY_6, sizeof(__pyx_k_IMGUI_KEY_6), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_7, __pyx_k_IMGUI_KEY_7, sizeof(__pyx_k_IMGUI_KEY_7), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_8, __pyx_k_IMGUI_KEY_8, sizeof(__pyx_k_IMGUI_KEY_8), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_9, __pyx_k_IMGUI_KEY_9, sizeof(__pyx_k_IMGUI_KEY_9), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_A, __pyx_k_IMGUI_KEY_A, sizeof(__pyx_k_IMGUI_KEY_A), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_APOSTROPHE, __pyx_k_IMGUI_KEY_APOSTROPHE, sizeof(__pyx_k_IMGUI_KEY_APOSTROPHE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_B, __pyx_k_IMGUI_KEY_B, sizeof(__pyx_k_IMGUI_KEY_B), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_BACKSLASH, __pyx_k_IMGUI_KEY_BACKSLASH, sizeof(__pyx_k_IMGUI_KEY_BACKSLASH), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_BACKSPACE, __pyx_k_IMGUI_KEY_BACKSPACE, sizeof(__pyx_k_IMGUI_KEY_BACKSPACE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_C, __pyx_k_IMGUI_KEY_C, sizeof(__pyx_k_IMGUI_KEY_C), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_CAPS_LOCK, __pyx_k_IMGUI_KEY_CAPS_LOCK, sizeof(__pyx_k_IMGUI_KEY_CAPS_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_COMMA, __pyx_k_IMGUI_KEY_COMMA, sizeof(__pyx_k_IMGUI_KEY_COMMA), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_COUNT, __pyx_k_IMGUI_KEY_COUNT, sizeof(__pyx_k_IMGUI_KEY_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_D, __pyx_k_IMGUI_KEY_D, sizeof(__pyx_k_IMGUI_KEY_D), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_DELETE, __pyx_k_IMGUI_KEY_DELETE, sizeof(__pyx_k_IMGUI_KEY_DELETE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_DOWN_ARROW, __pyx_k_IMGUI_KEY_DOWN_ARROW, sizeof(__pyx_k_IMGUI_KEY_DOWN_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_E, __pyx_k_IMGUI_KEY_E, sizeof(__pyx_k_IMGUI_KEY_E), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_END, __pyx_k_IMGUI_KEY_END, sizeof(__pyx_k_IMGUI_KEY_END), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_ENTER, __pyx_k_IMGUI_KEY_ENTER, sizeof(__pyx_k_IMGUI_KEY_ENTER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_EQUAL, __pyx_k_IMGUI_KEY_EQUAL, sizeof(__pyx_k_IMGUI_KEY_EQUAL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_ESCAPE, __pyx_k_IMGUI_KEY_ESCAPE, sizeof(__pyx_k_IMGUI_KEY_ESCAPE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F, __pyx_k_IMGUI_KEY_F, sizeof(__pyx_k_IMGUI_KEY_F), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F1, __pyx_k_IMGUI_KEY_F1, sizeof(__pyx_k_IMGUI_KEY_F1), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F10, __pyx_k_IMGUI_KEY_F10, sizeof(__pyx_k_IMGUI_KEY_F10), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F11, __pyx_k_IMGUI_KEY_F11, sizeof(__pyx_k_IMGUI_KEY_F11), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F12, __pyx_k_IMGUI_KEY_F12, sizeof(__pyx_k_IMGUI_KEY_F12), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F2, __pyx_k_IMGUI_KEY_F2, sizeof(__pyx_k_IMGUI_KEY_F2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F3, __pyx_k_IMGUI_KEY_F3, sizeof(__pyx_k_IMGUI_KEY_F3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F4, __pyx_k_IMGUI_KEY_F4, sizeof(__pyx_k_IMGUI_KEY_F4), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F5, __pyx_k_IMGUI_KEY_F5, sizeof(__pyx_k_IMGUI_KEY_F5), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F6, __pyx_k_IMGUI_KEY_F6, sizeof(__pyx_k_IMGUI_KEY_F6), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F7, __pyx_k_IMGUI_KEY_F7, sizeof(__pyx_k_IMGUI_KEY_F7), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F8, __pyx_k_IMGUI_KEY_F8, sizeof(__pyx_k_IMGUI_KEY_F8), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_F9, __pyx_k_IMGUI_KEY_F9, sizeof(__pyx_k_IMGUI_KEY_F9), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_G, __pyx_k_IMGUI_KEY_G, sizeof(__pyx_k_IMGUI_KEY_G), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_BACK, __pyx_k_IMGUI_KEY_GAMEPAD_BACK, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_BACK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_DOWN, __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_DOWN, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_DPAD_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_LEFT, __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_LEFT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_DPAD_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_RIGHT, __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_RIGHT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_DPAD_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_UP, __pyx_k_IMGUI_KEY_GAMEPAD_DPAD_UP, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_DPAD_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_DOWN, __pyx_k_IMGUI_KEY_GAMEPAD_FACE_DOWN, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_FACE_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_LEFT, __pyx_k_IMGUI_KEY_GAMEPAD_FACE_LEFT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_FACE_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_RIGHT, __pyx_k_IMGUI_KEY_GAMEPAD_FACE_RIGHT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_FACE_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_UP, __pyx_k_IMGUI_KEY_GAMEPAD_FACE_UP, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_FACE_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_L1, __pyx_k_IMGUI_KEY_GAMEPAD_L1, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_L1), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_L2, __pyx_k_IMGUI_KEY_GAMEPAD_L2, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_L2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_L3, __pyx_k_IMGUI_KEY_GAMEPAD_L3, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_L3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_DOWN, __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_DOWN, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_LEFT, __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_LEFT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_RIGHT, __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_RIGHT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_UP, __pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_UP, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_L_STICK_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_R1, __pyx_k_IMGUI_KEY_GAMEPAD_R1, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_R1), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_R2, __pyx_k_IMGUI_KEY_GAMEPAD_R2, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_R2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_R3, __pyx_k_IMGUI_KEY_GAMEPAD_R3, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_R3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_DOWN, __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_DOWN, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_LEFT, __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_LEFT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_RIGHT, __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_RIGHT, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_UP, __pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_UP, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_R_STICK_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GAMEPAD_START, __pyx_k_IMGUI_KEY_GAMEPAD_START, sizeof(__pyx_k_IMGUI_KEY_GAMEPAD_START), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_GRAVE_ACCENT, __pyx_k_IMGUI_KEY_GRAVE_ACCENT, sizeof(__pyx_k_IMGUI_KEY_GRAVE_ACCENT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_H, __pyx_k_IMGUI_KEY_H, sizeof(__pyx_k_IMGUI_KEY_H), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_HOME, __pyx_k_IMGUI_KEY_HOME, sizeof(__pyx_k_IMGUI_KEY_HOME), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_I, __pyx_k_IMGUI_KEY_I, sizeof(__pyx_k_IMGUI_KEY_I), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_INSERT, __pyx_k_IMGUI_KEY_INSERT, sizeof(__pyx_k_IMGUI_KEY_INSERT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_J, __pyx_k_IMGUI_KEY_J, sizeof(__pyx_k_IMGUI_KEY_J), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_K, __pyx_k_IMGUI_KEY_K, sizeof(__pyx_k_IMGUI_KEY_K), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD0, __pyx_k_IMGUI_KEY_KEYPAD0, sizeof(__pyx_k_IMGUI_KEY_KEYPAD0), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD1, __pyx_k_IMGUI_KEY_KEYPAD1, sizeof(__pyx_k_IMGUI_KEY_KEYPAD1), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD2, __pyx_k_IMGUI_KEY_KEYPAD2, sizeof(__pyx_k_IMGUI_KEY_KEYPAD2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD3, __pyx_k_IMGUI_KEY_KEYPAD3, sizeof(__pyx_k_IMGUI_KEY_KEYPAD3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD4, __pyx_k_IMGUI_KEY_KEYPAD4, sizeof(__pyx_k_IMGUI_KEY_KEYPAD4), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD5, __pyx_k_IMGUI_KEY_KEYPAD5, sizeof(__pyx_k_IMGUI_KEY_KEYPAD5), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD6, __pyx_k_IMGUI_KEY_KEYPAD6, sizeof(__pyx_k_IMGUI_KEY_KEYPAD6), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD7, __pyx_k_IMGUI_KEY_KEYPAD7, sizeof(__pyx_k_IMGUI_KEY_KEYPAD7), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD8, __pyx_k_IMGUI_KEY_KEYPAD8, sizeof(__pyx_k_IMGUI_KEY_KEYPAD8), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD9, __pyx_k_IMGUI_KEY_KEYPAD9, sizeof(__pyx_k_IMGUI_KEY_KEYPAD9), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD_ADD, __pyx_k_IMGUI_KEY_KEYPAD_ADD, sizeof(__pyx_k_IMGUI_KEY_KEYPAD_ADD), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD_DECIMAL, __pyx_k_IMGUI_KEY_KEYPAD_DECIMAL, sizeof(__pyx_k_IMGUI_KEY_KEYPAD_DECIMAL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD_DIVIDE, __pyx_k_IMGUI_KEY_KEYPAD_DIVIDE, sizeof(__pyx_k_IMGUI_KEY_KEYPAD_DIVIDE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD_ENTER, __pyx_k_IMGUI_KEY_KEYPAD_ENTER, sizeof(__pyx_k_IMGUI_KEY_KEYPAD_ENTER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD_EQUAL, __pyx_k_IMGUI_KEY_KEYPAD_EQUAL, sizeof(__pyx_k_IMGUI_KEY_KEYPAD_EQUAL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD_MULTIPLY, __pyx_k_IMGUI_KEY_KEYPAD_MULTIPLY, sizeof(__pyx_k_IMGUI_KEY_KEYPAD_MULTIPLY), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYPAD_SUBTRACT, __pyx_k_IMGUI_KEY_KEYPAD_SUBTRACT, sizeof(__pyx_k_IMGUI_KEY_KEYPAD_SUBTRACT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYS_DATA_OFFSET, __pyx_k_IMGUI_KEY_KEYS_DATA_OFFSET, sizeof(__pyx_k_IMGUI_KEY_KEYS_DATA_OFFSET), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_KEYS_DATA_SIZE, __pyx_k_IMGUI_KEY_KEYS_DATA_SIZE, sizeof(__pyx_k_IMGUI_KEY_KEYS_DATA_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_L, __pyx_k_IMGUI_KEY_L, sizeof(__pyx_k_IMGUI_KEY_L), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_LEFT_ALT, __pyx_k_IMGUI_KEY_LEFT_ALT, sizeof(__pyx_k_IMGUI_KEY_LEFT_ALT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_LEFT_ARROW, __pyx_k_IMGUI_KEY_LEFT_ARROW, sizeof(__pyx_k_IMGUI_KEY_LEFT_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_LEFT_BRACKET, __pyx_k_IMGUI_KEY_LEFT_BRACKET, sizeof(__pyx_k_IMGUI_KEY_LEFT_BRACKET), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_LEFT_CTRL, __pyx_k_IMGUI_KEY_LEFT_CTRL, sizeof(__pyx_k_IMGUI_KEY_LEFT_CTRL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_LEFT_SHIFT, __pyx_k_IMGUI_KEY_LEFT_SHIFT, sizeof(__pyx_k_IMGUI_KEY_LEFT_SHIFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_LEFT_SUPER, __pyx_k_IMGUI_KEY_LEFT_SUPER, sizeof(__pyx_k_IMGUI_KEY_LEFT_SUPER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_M, __pyx_k_IMGUI_KEY_M, sizeof(__pyx_k_IMGUI_KEY_M), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MENU, __pyx_k_IMGUI_KEY_MENU, sizeof(__pyx_k_IMGUI_KEY_MENU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MINUS, __pyx_k_IMGUI_KEY_MINUS, sizeof(__pyx_k_IMGUI_KEY_MINUS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MOUSE_LEFT, __pyx_k_IMGUI_KEY_MOUSE_LEFT, sizeof(__pyx_k_IMGUI_KEY_MOUSE_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MOUSE_MIDDLE, __pyx_k_IMGUI_KEY_MOUSE_MIDDLE, sizeof(__pyx_k_IMGUI_KEY_MOUSE_MIDDLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MOUSE_RIGHT, __pyx_k_IMGUI_KEY_MOUSE_RIGHT, sizeof(__pyx_k_IMGUI_KEY_MOUSE_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MOUSE_WHEELX, __pyx_k_IMGUI_KEY_MOUSE_WHEELX, sizeof(__pyx_k_IMGUI_KEY_MOUSE_WHEELX), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MOUSE_WHEELY, __pyx_k_IMGUI_KEY_MOUSE_WHEELY, sizeof(__pyx_k_IMGUI_KEY_MOUSE_WHEELY), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MOUSE_X1, __pyx_k_IMGUI_KEY_MOUSE_X1, sizeof(__pyx_k_IMGUI_KEY_MOUSE_X1), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_MOUSE_X2, __pyx_k_IMGUI_KEY_MOUSE_X2, sizeof(__pyx_k_IMGUI_KEY_MOUSE_X2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_N, __pyx_k_IMGUI_KEY_N, sizeof(__pyx_k_IMGUI_KEY_N), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_NAMED_KEY_BEGIN, __pyx_k_IMGUI_KEY_NAMED_KEY_BEGIN, sizeof(__pyx_k_IMGUI_KEY_NAMED_KEY_BEGIN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_NAMED_KEY_COUNT, __pyx_k_IMGUI_KEY_NAMED_KEY_COUNT, sizeof(__pyx_k_IMGUI_KEY_NAMED_KEY_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_NAMED_KEY_END, __pyx_k_IMGUI_KEY_NAMED_KEY_END, sizeof(__pyx_k_IMGUI_KEY_NAMED_KEY_END), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_NONE, __pyx_k_IMGUI_KEY_NONE, sizeof(__pyx_k_IMGUI_KEY_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_NUM_LOCK, __pyx_k_IMGUI_KEY_NUM_LOCK, sizeof(__pyx_k_IMGUI_KEY_NUM_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_O, __pyx_k_IMGUI_KEY_O, sizeof(__pyx_k_IMGUI_KEY_O), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_P, __pyx_k_IMGUI_KEY_P, sizeof(__pyx_k_IMGUI_KEY_P), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_PAGE_DOWN, __pyx_k_IMGUI_KEY_PAGE_DOWN, sizeof(__pyx_k_IMGUI_KEY_PAGE_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_PAGE_UP, __pyx_k_IMGUI_KEY_PAGE_UP, sizeof(__pyx_k_IMGUI_KEY_PAGE_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_PAUSE, __pyx_k_IMGUI_KEY_PAUSE, sizeof(__pyx_k_IMGUI_KEY_PAUSE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_PERIOD, __pyx_k_IMGUI_KEY_PERIOD, sizeof(__pyx_k_IMGUI_KEY_PERIOD), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_PRINT_SCREEN, __pyx_k_IMGUI_KEY_PRINT_SCREEN, sizeof(__pyx_k_IMGUI_KEY_PRINT_SCREEN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_Q, __pyx_k_IMGUI_KEY_Q, sizeof(__pyx_k_IMGUI_KEY_Q), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_R, __pyx_k_IMGUI_KEY_R, sizeof(__pyx_k_IMGUI_KEY_R), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_ALT, __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_ALT, sizeof(__pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_ALT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_CTRL, __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_CTRL, sizeof(__pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_CTRL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_SHIFT, __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_SHIFT, sizeof(__pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_SHIFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_SUPER, __pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_SUPER, sizeof(__pyx_k_IMGUI_KEY_RESERVED_FOR_MOD_SUPER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RIGHT_ALT, __pyx_k_IMGUI_KEY_RIGHT_ALT, sizeof(__pyx_k_IMGUI_KEY_RIGHT_ALT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RIGHT_ARROW, __pyx_k_IMGUI_KEY_RIGHT_ARROW, sizeof(__pyx_k_IMGUI_KEY_RIGHT_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RIGHT_BRACKET, __pyx_k_IMGUI_KEY_RIGHT_BRACKET, sizeof(__pyx_k_IMGUI_KEY_RIGHT_BRACKET), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RIGHT_CTRL, __pyx_k_IMGUI_KEY_RIGHT_CTRL, sizeof(__pyx_k_IMGUI_KEY_RIGHT_CTRL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RIGHT_SHIFT, __pyx_k_IMGUI_KEY_RIGHT_SHIFT, sizeof(__pyx_k_IMGUI_KEY_RIGHT_SHIFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_RIGHT_SUPER, __pyx_k_IMGUI_KEY_RIGHT_SUPER, sizeof(__pyx_k_IMGUI_KEY_RIGHT_SUPER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_S, __pyx_k_IMGUI_KEY_S, sizeof(__pyx_k_IMGUI_KEY_S), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_SCROLL_LOCK, __pyx_k_IMGUI_KEY_SCROLL_LOCK, sizeof(__pyx_k_IMGUI_KEY_SCROLL_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_SEMICOLON, __pyx_k_IMGUI_KEY_SEMICOLON, sizeof(__pyx_k_IMGUI_KEY_SEMICOLON), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_SLASH, __pyx_k_IMGUI_KEY_SLASH, sizeof(__pyx_k_IMGUI_KEY_SLASH), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_SPACE, __pyx_k_IMGUI_KEY_SPACE, sizeof(__pyx_k_IMGUI_KEY_SPACE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_T, __pyx_k_IMGUI_KEY_T, sizeof(__pyx_k_IMGUI_KEY_T), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_TAB, __pyx_k_IMGUI_KEY_TAB, sizeof(__pyx_k_IMGUI_KEY_TAB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_U, __pyx_k_IMGUI_KEY_U, sizeof(__pyx_k_IMGUI_KEY_U), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_UP_ARROW, __pyx_k_IMGUI_KEY_UP_ARROW, sizeof(__pyx_k_IMGUI_KEY_UP_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_V, __pyx_k_IMGUI_KEY_V, sizeof(__pyx_k_IMGUI_KEY_V), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_W, __pyx_k_IMGUI_KEY_W, sizeof(__pyx_k_IMGUI_KEY_W), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_X, __pyx_k_IMGUI_KEY_X, sizeof(__pyx_k_IMGUI_KEY_X), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_Y, __pyx_k_IMGUI_KEY_Y, sizeof(__pyx_k_IMGUI_KEY_Y), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_KEY_Z, __pyx_k_IMGUI_KEY_Z, sizeof(__pyx_k_IMGUI_KEY_Z), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOD_ALT, __pyx_k_IMGUI_MOD_ALT, sizeof(__pyx_k_IMGUI_MOD_ALT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOD_CTRL, __pyx_k_IMGUI_MOD_CTRL, sizeof(__pyx_k_IMGUI_MOD_CTRL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOD_MASK, __pyx_k_IMGUI_MOD_MASK, sizeof(__pyx_k_IMGUI_MOD_MASK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOD_NONE, __pyx_k_IMGUI_MOD_NONE, sizeof(__pyx_k_IMGUI_MOD_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOD_SHIFT, __pyx_k_IMGUI_MOD_SHIFT, sizeof(__pyx_k_IMGUI_MOD_SHIFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOD_SHORTCUT, __pyx_k_IMGUI_MOD_SHORTCUT, sizeof(__pyx_k_IMGUI_MOD_SHORTCUT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOD_SUPER, __pyx_k_IMGUI_MOD_SUPER, sizeof(__pyx_k_IMGUI_MOD_SUPER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_BUTTON_COUNT, __pyx_k_IMGUI_MOUSE_BUTTON_COUNT, sizeof(__pyx_k_IMGUI_MOUSE_BUTTON_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_BUTTON_LEFT, __pyx_k_IMGUI_MOUSE_BUTTON_LEFT, sizeof(__pyx_k_IMGUI_MOUSE_BUTTON_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_BUTTON_MIDDLE, __pyx_k_IMGUI_MOUSE_BUTTON_MIDDLE, sizeof(__pyx_k_IMGUI_MOUSE_BUTTON_MIDDLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_BUTTON_RIGHT, __pyx_k_IMGUI_MOUSE_BUTTON_RIGHT, sizeof(__pyx_k_IMGUI_MOUSE_BUTTON_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_ARROW, __pyx_k_IMGUI_MOUSE_CURSOR_ARROW, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_ARROW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_COUNT, __pyx_k_IMGUI_MOUSE_CURSOR_COUNT, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_HAND, __pyx_k_IMGUI_MOUSE_CURSOR_HAND, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_HAND), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_NONE, __pyx_k_IMGUI_MOUSE_CURSOR_NONE, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_NOT_ALLOWED, __pyx_k_IMGUI_MOUSE_CURSOR_NOT_ALLOWED, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_NOT_ALLOWED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_ALL, __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_ALL, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_EW, __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_EW, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_EW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NESW, __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NESW, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NESW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NS, __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NS, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NWSE, __pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NWSE, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_RESIZE_NWSE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_MOUSE_CURSOR_TEXT_INPUT, __pyx_k_IMGUI_MOUSE_CURSOR_TEXT_INPUT, sizeof(__pyx_k_IMGUI_MOUSE_CURSOR_TEXT_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_ACTIVATE, __pyx_k_IMGUI_NAV_INPUT_ACTIVATE, sizeof(__pyx_k_IMGUI_NAV_INPUT_ACTIVATE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_CANCEL, __pyx_k_IMGUI_NAV_INPUT_CANCEL, sizeof(__pyx_k_IMGUI_NAV_INPUT_CANCEL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_COUNT, __pyx_k_IMGUI_NAV_INPUT_COUNT, sizeof(__pyx_k_IMGUI_NAV_INPUT_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_DPAD_DOWN, __pyx_k_IMGUI_NAV_INPUT_DPAD_DOWN, sizeof(__pyx_k_IMGUI_NAV_INPUT_DPAD_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_DPAD_LEFT, __pyx_k_IMGUI_NAV_INPUT_DPAD_LEFT, sizeof(__pyx_k_IMGUI_NAV_INPUT_DPAD_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_DPAD_RIGHT, __pyx_k_IMGUI_NAV_INPUT_DPAD_RIGHT, sizeof(__pyx_k_IMGUI_NAV_INPUT_DPAD_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_DPAD_UP, __pyx_k_IMGUI_NAV_INPUT_DPAD_UP, sizeof(__pyx_k_IMGUI_NAV_INPUT_DPAD_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_FOCUS_NEXT, __pyx_k_IMGUI_NAV_INPUT_FOCUS_NEXT, sizeof(__pyx_k_IMGUI_NAV_INPUT_FOCUS_NEXT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_FOCUS_PREV, __pyx_k_IMGUI_NAV_INPUT_FOCUS_PREV, sizeof(__pyx_k_IMGUI_NAV_INPUT_FOCUS_PREV), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_INPUT, __pyx_k_IMGUI_NAV_INPUT_INPUT, sizeof(__pyx_k_IMGUI_NAV_INPUT_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_DOWN, __pyx_k_IMGUI_NAV_INPUT_L_STICK_DOWN, sizeof(__pyx_k_IMGUI_NAV_INPUT_L_STICK_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_LEFT, __pyx_k_IMGUI_NAV_INPUT_L_STICK_LEFT, sizeof(__pyx_k_IMGUI_NAV_INPUT_L_STICK_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_RIGHT, __pyx_k_IMGUI_NAV_INPUT_L_STICK_RIGHT, sizeof(__pyx_k_IMGUI_NAV_INPUT_L_STICK_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_L_STICK_UP, __pyx_k_IMGUI_NAV_INPUT_L_STICK_UP, sizeof(__pyx_k_IMGUI_NAV_INPUT_L_STICK_UP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_MENU, __pyx_k_IMGUI_NAV_INPUT_MENU, sizeof(__pyx_k_IMGUI_NAV_INPUT_MENU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_TWEAK_FAST, __pyx_k_IMGUI_NAV_INPUT_TWEAK_FAST, sizeof(__pyx_k_IMGUI_NAV_INPUT_TWEAK_FAST), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_NAV_INPUT_TWEAK_SLOW, __pyx_k_IMGUI_NAV_INPUT_TWEAK_SLOW, sizeof(__pyx_k_IMGUI_NAV_INPUT_TWEAK_SLOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP, __pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP_ID, __pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP_ID, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP_ID), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP_LEVE, __pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP_LEVE, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_ANY_POPUP_LEVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_D, __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_D, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_D), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_L, __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_L, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_L), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M, __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M_2, __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M_2, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_R, __pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_R, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_R), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_NONE, __pyx_k_IMGUI_POPUP_FLAGS_NONE, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_E, __pyx_k_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_E, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_E), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_I, __pyx_k_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_I, sizeof(__pyx_k_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_I), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SELECTABLE_FLAGS_ALLOW_DOU, __pyx_k_IMGUI_SELECTABLE_FLAGS_ALLOW_DOU, sizeof(__pyx_k_IMGUI_SELECTABLE_FLAGS_ALLOW_DOU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SELECTABLE_FLAGS_ALLOW_ITE, __pyx_k_IMGUI_SELECTABLE_FLAGS_ALLOW_ITE, sizeof(__pyx_k_IMGUI_SELECTABLE_FLAGS_ALLOW_ITE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SELECTABLE_FLAGS_DISABLED, __pyx_k_IMGUI_SELECTABLE_FLAGS_DISABLED, sizeof(__pyx_k_IMGUI_SELECTABLE_FLAGS_DISABLED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SELECTABLE_FLAGS_DONT_CLOS, __pyx_k_IMGUI_SELECTABLE_FLAGS_DONT_CLOS, sizeof(__pyx_k_IMGUI_SELECTABLE_FLAGS_DONT_CLOS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SELECTABLE_FLAGS_NONE, __pyx_k_IMGUI_SELECTABLE_FLAGS_NONE, sizeof(__pyx_k_IMGUI_SELECTABLE_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SELECTABLE_FLAGS_SPAN_ALL, __pyx_k_IMGUI_SELECTABLE_FLAGS_SPAN_ALL, sizeof(__pyx_k_IMGUI_SELECTABLE_FLAGS_SPAN_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP, __pyx_k_IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP, sizeof(__pyx_k_IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SLIDER_FLAGS_INVALID_MASK, __pyx_k_IMGUI_SLIDER_FLAGS_INVALID_MASK, sizeof(__pyx_k_IMGUI_SLIDER_FLAGS_INVALID_MASK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SLIDER_FLAGS_LOGARITHMIC, __pyx_k_IMGUI_SLIDER_FLAGS_LOGARITHMIC, sizeof(__pyx_k_IMGUI_SLIDER_FLAGS_LOGARITHMIC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SLIDER_FLAGS_NONE, __pyx_k_IMGUI_SLIDER_FLAGS_NONE, sizeof(__pyx_k_IMGUI_SLIDER_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SLIDER_FLAGS_NO_INPUT, __pyx_k_IMGUI_SLIDER_FLAGS_NO_INPUT, sizeof(__pyx_k_IMGUI_SLIDER_FLAGS_NO_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SLIDER_FLAGS_NO_ROUND_TO_F, __pyx_k_IMGUI_SLIDER_FLAGS_NO_ROUND_TO_F, sizeof(__pyx_k_IMGUI_SLIDER_FLAGS_NO_ROUND_TO_F), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SORT_DIRECTION_ASCENDING, __pyx_k_IMGUI_SORT_DIRECTION_ASCENDING, sizeof(__pyx_k_IMGUI_SORT_DIRECTION_ASCENDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SORT_DIRECTION_DESCENDING, __pyx_k_IMGUI_SORT_DIRECTION_DESCENDING, sizeof(__pyx_k_IMGUI_SORT_DIRECTION_DESCENDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_SORT_DIRECTION_NONE, __pyx_k_IMGUI_SORT_DIRECTION_NONE, sizeof(__pyx_k_IMGUI_SORT_DIRECTION_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_ALPHA, __pyx_k_IMGUI_STYLE_VAR_ALPHA, sizeof(__pyx_k_IMGUI_STYLE_VAR_ALPHA), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_BUTTON_TEXT_ALIG, __pyx_k_IMGUI_STYLE_VAR_BUTTON_TEXT_ALIG, sizeof(__pyx_k_IMGUI_STYLE_VAR_BUTTON_TEXT_ALIG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_CELL_PADDING, __pyx_k_IMGUI_STYLE_VAR_CELL_PADDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_CELL_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_CHILD_BORDER_SIZ, __pyx_k_IMGUI_STYLE_VAR_CHILD_BORDER_SIZ, sizeof(__pyx_k_IMGUI_STYLE_VAR_CHILD_BORDER_SIZ), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_CHILD_ROUNDING, __pyx_k_IMGUI_STYLE_VAR_CHILD_ROUNDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_CHILD_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_COUNT, __pyx_k_IMGUI_STYLE_VAR_COUNT, sizeof(__pyx_k_IMGUI_STYLE_VAR_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_DISABLED_ALPHA, __pyx_k_IMGUI_STYLE_VAR_DISABLED_ALPHA, sizeof(__pyx_k_IMGUI_STYLE_VAR_DISABLED_ALPHA), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_FRAME_BORDER_SIZ, __pyx_k_IMGUI_STYLE_VAR_FRAME_BORDER_SIZ, sizeof(__pyx_k_IMGUI_STYLE_VAR_FRAME_BORDER_SIZ), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_FRAME_PADDING, __pyx_k_IMGUI_STYLE_VAR_FRAME_PADDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_FRAME_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_FRAME_ROUNDING, __pyx_k_IMGUI_STYLE_VAR_FRAME_ROUNDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_FRAME_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_GRAB_MIN_SIZE, __pyx_k_IMGUI_STYLE_VAR_GRAB_MIN_SIZE, sizeof(__pyx_k_IMGUI_STYLE_VAR_GRAB_MIN_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_GRAB_ROUNDING, __pyx_k_IMGUI_STYLE_VAR_GRAB_ROUNDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_GRAB_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_INDENT_SPACING, __pyx_k_IMGUI_STYLE_VAR_INDENT_SPACING, sizeof(__pyx_k_IMGUI_STYLE_VAR_INDENT_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_ITEM_INNER_SPACI, __pyx_k_IMGUI_STYLE_VAR_ITEM_INNER_SPACI, sizeof(__pyx_k_IMGUI_STYLE_VAR_ITEM_INNER_SPACI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_ITEM_SPACING, __pyx_k_IMGUI_STYLE_VAR_ITEM_SPACING, sizeof(__pyx_k_IMGUI_STYLE_VAR_ITEM_SPACING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_POPUP_BORDER_SIZ, __pyx_k_IMGUI_STYLE_VAR_POPUP_BORDER_SIZ, sizeof(__pyx_k_IMGUI_STYLE_VAR_POPUP_BORDER_SIZ), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_POPUP_ROUNDING, __pyx_k_IMGUI_STYLE_VAR_POPUP_ROUNDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_POPUP_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_SCROLLBAR_ROUNDI, __pyx_k_IMGUI_STYLE_VAR_SCROLLBAR_ROUNDI, sizeof(__pyx_k_IMGUI_STYLE_VAR_SCROLLBAR_ROUNDI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_SCROLLBAR_SIZE, __pyx_k_IMGUI_STYLE_VAR_SCROLLBAR_SIZE, sizeof(__pyx_k_IMGUI_STYLE_VAR_SCROLLBAR_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_SELECTABLE_TEXT, __pyx_k_IMGUI_STYLE_VAR_SELECTABLE_TEXT, sizeof(__pyx_k_IMGUI_STYLE_VAR_SELECTABLE_TEXT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_A, __pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_A, sizeof(__pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_A), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_B, __pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_B, sizeof(__pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_B), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_P, __pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_P, sizeof(__pyx_k_IMGUI_STYLE_VAR_SEPARATOR_TEXT_P), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_TAB_ROUNDING, __pyx_k_IMGUI_STYLE_VAR_TAB_ROUNDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_TAB_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_BORDER_SI, __pyx_k_IMGUI_STYLE_VAR_WINDOW_BORDER_SI, sizeof(__pyx_k_IMGUI_STYLE_VAR_WINDOW_BORDER_SI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_MIN_SIZE, __pyx_k_IMGUI_STYLE_VAR_WINDOW_MIN_SIZE, sizeof(__pyx_k_IMGUI_STYLE_VAR_WINDOW_MIN_SIZE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_PADDING, __pyx_k_IMGUI_STYLE_VAR_WINDOW_PADDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_WINDOW_PADDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_ROUNDING, __pyx_k_IMGUI_STYLE_VAR_WINDOW_ROUNDING, sizeof(__pyx_k_IMGUI_STYLE_VAR_WINDOW_ROUNDING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_STYLE_VAR_WINDOW_TITLE_ALI, __pyx_k_IMGUI_STYLE_VAR_WINDOW_TITLE_ALI, sizeof(__pyx_k_IMGUI_STYLE_VAR_WINDOW_TITLE_ALI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_BG_TARGET_CELL_BG, __pyx_k_IMGUI_TABLE_BG_TARGET_CELL_BG, sizeof(__pyx_k_IMGUI_TABLE_BG_TARGET_CELL_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_BG_TARGET_NONE, __pyx_k_IMGUI_TABLE_BG_TARGET_NONE, sizeof(__pyx_k_IMGUI_TABLE_BG_TARGET_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_BG_TARGET_ROW_BG0, __pyx_k_IMGUI_TABLE_BG_TARGET_ROW_BG0, sizeof(__pyx_k_IMGUI_TABLE_BG_TARGET_ROW_BG0), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_BG_TARGET_ROW_BG1, __pyx_k_IMGUI_TABLE_BG_TARGET_ROW_BG1, sizeof(__pyx_k_IMGUI_TABLE_BG_TARGET_ROW_BG1), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_2, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_2, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DISABLE, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DISABLE, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_DISABLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT_2, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT_2, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT_3, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT_3, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_INDENT_3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_ENAB, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_ENAB, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_ENAB), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_HOVE, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_HOVE, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_HOVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_SORT, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_SORT, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_SORT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_VISI, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_VISI, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_IS_VISI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NONE, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NONE, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_DIRE, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_DIRE, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_DIRE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD_2, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD_2, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_REOR, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_REOR, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_REOR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_RESI, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_RESI, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_RESI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_2, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_2, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_3, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_3, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_PREFER, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_PREFER, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_PREFER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_PREFER_2, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_PREFER_2, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_PREFER_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_STATUS, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_STATUS, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_STATUS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_F, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_F, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_F), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_M, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_M, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_M), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_S, __pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_S, sizeof(__pyx_k_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_S), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS, __pyx_k_IMGUI_TABLE_FLAGS_BORDERS, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERSH, __pyx_k_IMGUI_TABLE_FLAGS_BORDERSH, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERSH), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERSV, __pyx_k_IMGUI_TABLE_FLAGS_BORDERSV, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERSV), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNER, __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNER, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNERH, __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNERH, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNERH), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNERV, __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNERV, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERS_INNERV), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTER, __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTER, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTERH, __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTERH, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTERH), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTERV, __pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTERV, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_BORDERS_OUTERV), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_CONTEXT_MENU_I, __pyx_k_IMGUI_TABLE_FLAGS_CONTEXT_MENU_I, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_CONTEXT_MENU_I), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_HIDEABLE, __pyx_k_IMGUI_TABLE_FLAGS_HIDEABLE, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_HIDEABLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NONE, __pyx_k_IMGUI_TABLE_FLAGS_NONE, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_BORDERS_IN, __pyx_k_IMGUI_TABLE_FLAGS_NO_BORDERS_IN, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_BORDERS_IN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_BORDERS_IN_2, __pyx_k_IMGUI_TABLE_FLAGS_NO_BORDERS_IN_2, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_BORDERS_IN_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_CLIP, __pyx_k_IMGUI_TABLE_FLAGS_NO_CLIP, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_CLIP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND, __pyx_k_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND_2, __pyx_k_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND_2, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_KEEP_COLUMN, __pyx_k_IMGUI_TABLE_FLAGS_NO_KEEP_COLUMN, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_KEEP_COLUMN), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_PAD_INNERX, __pyx_k_IMGUI_TABLE_FLAGS_NO_PAD_INNERX, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_PAD_INNERX), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_PAD_OUTERX, __pyx_k_IMGUI_TABLE_FLAGS_NO_PAD_OUTERX, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_PAD_OUTERX), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_NO_SAVED_SETTI, __pyx_k_IMGUI_TABLE_FLAGS_NO_SAVED_SETTI, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_NO_SAVED_SETTI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_PAD_OUTERX, __pyx_k_IMGUI_TABLE_FLAGS_PAD_OUTERX, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_PAD_OUTERX), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_PRECISE_WIDTHS, __pyx_k_IMGUI_TABLE_FLAGS_PRECISE_WIDTHS, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_PRECISE_WIDTHS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_REORDERABLE, __pyx_k_IMGUI_TABLE_FLAGS_REORDERABLE, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_REORDERABLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_RESIZABLE, __pyx_k_IMGUI_TABLE_FLAGS_RESIZABLE, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_RESIZABLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_ROW_BG, __pyx_k_IMGUI_TABLE_FLAGS_ROW_BG, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_ROW_BG), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SCROLLX, __pyx_k_IMGUI_TABLE_FLAGS_SCROLLX, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SCROLLX), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SCROLLY, __pyx_k_IMGUI_TABLE_FLAGS_SCROLLY, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SCROLLY), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_FIXED_F, __pyx_k_IMGUI_TABLE_FLAGS_SIZING_FIXED_F, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SIZING_FIXED_F), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_FIXED_S, __pyx_k_IMGUI_TABLE_FLAGS_SIZING_FIXED_S, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SIZING_FIXED_S), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_MASK, __pyx_k_IMGUI_TABLE_FLAGS_SIZING_MASK, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SIZING_MASK), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_STRETCH, __pyx_k_IMGUI_TABLE_FLAGS_SIZING_STRETCH, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SIZING_STRETCH), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_STRETCH_2, __pyx_k_IMGUI_TABLE_FLAGS_SIZING_STRETCH_2, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SIZING_STRETCH_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SORTABLE, __pyx_k_IMGUI_TABLE_FLAGS_SORTABLE, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SORTABLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SORT_MULTI, __pyx_k_IMGUI_TABLE_FLAGS_SORT_MULTI, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SORT_MULTI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_FLAGS_SORT_TRISTATE, __pyx_k_IMGUI_TABLE_FLAGS_SORT_TRISTATE, sizeof(__pyx_k_IMGUI_TABLE_FLAGS_SORT_TRISTATE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_ROW_FLAGS_HEADERS, __pyx_k_IMGUI_TABLE_ROW_FLAGS_HEADERS, sizeof(__pyx_k_IMGUI_TABLE_ROW_FLAGS_HEADERS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TABLE_ROW_FLAGS_NONE, __pyx_k_IMGUI_TABLE_ROW_FLAGS_NONE, sizeof(__pyx_k_IMGUI_TABLE_ROW_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_AUTO_SELECT, __pyx_k_IMGUI_TAB_BAR_FLAGS_AUTO_SELECT, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_AUTO_SELECT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI, __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_2, __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_2, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_3, __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_3, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_3), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_4, __pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_4, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_4), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NONE, __pyx_k_IMGUI_TAB_BAR_FLAGS_NONE, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WIT, __pyx_k_IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WIT, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WIT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST, __pyx_k_IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP, __pyx_k_IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_REORDERABLE, __pyx_k_IMGUI_TAB_BAR_FLAGS_REORDERABLE, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_REORDERABLE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_BAR_FLAGS_TAB_LIST_POP, __pyx_k_IMGUI_TAB_BAR_FLAGS_TAB_LIST_POP, sizeof(__pyx_k_IMGUI_TAB_BAR_FLAGS_TAB_LIST_POP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_LEADING, __pyx_k_IMGUI_TAB_ITEM_FLAGS_LEADING, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_LEADING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NONE, __pyx_k_IMGUI_TAB_ITEM_FLAGS_NONE, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WI, __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WI, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID, __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_REORDER, __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_REORDER, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_REORDER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP, __pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_SET_SELECTE, __pyx_k_IMGUI_TAB_ITEM_FLAGS_SET_SELECTE, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_SET_SELECTE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_TRAILING, __pyx_k_IMGUI_TAB_ITEM_FLAGS_TRAILING, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_TRAILING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOC, __pyx_k_IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOC, sizeof(__pyx_k_IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM, __pyx_k_IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_BULLET, __pyx_k_IMGUI_TREE_NODE_FLAGS_BULLET, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_BULLET), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_COLLAPSING, __pyx_k_IMGUI_TREE_NODE_FLAGS_COLLAPSING, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_COLLAPSING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_DEFAULT_OP, __pyx_k_IMGUI_TREE_NODE_FLAGS_DEFAULT_OP, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_DEFAULT_OP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_FRAMED, __pyx_k_IMGUI_TREE_NODE_FLAGS_FRAMED, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_FRAMED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_FRAME_PADD, __pyx_k_IMGUI_TREE_NODE_FLAGS_FRAME_PADD, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_FRAME_PADD), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_LEAF, __pyx_k_IMGUI_TREE_NODE_FLAGS_LEAF, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_LEAF), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NAV_LEFT_J, __pyx_k_IMGUI_TREE_NODE_FLAGS_NAV_LEFT_J, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_NAV_LEFT_J), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NONE, __pyx_k_IMGUI_TREE_NODE_FLAGS_NONE, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NO_AUTO_OP, __pyx_k_IMGUI_TREE_NODE_FLAGS_NO_AUTO_OP, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_NO_AUTO_OP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_NO_TREE_PU, __pyx_k_IMGUI_TREE_NODE_FLAGS_NO_TREE_PU, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_NO_TREE_PU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_OPEN_ON_AR, __pyx_k_IMGUI_TREE_NODE_FLAGS_OPEN_ON_AR, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_OPEN_ON_AR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_OPEN_ON_DO, __pyx_k_IMGUI_TREE_NODE_FLAGS_OPEN_ON_DO, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_OPEN_ON_DO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_SELECTED, __pyx_k_IMGUI_TREE_NODE_FLAGS_SELECTED, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_SELECTED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL, __pyx_k_IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_TREE_NODE_FLAGS_SPAN_FULL, __pyx_k_IMGUI_TREE_NODE_FLAGS_SPAN_FULL, sizeof(__pyx_k_IMGUI_TREE_NODE_FLAGS_SPAN_FULL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_CAN_HOST_OT, __pyx_k_IMGUI_VIEWPORT_FLAGS_CAN_HOST_OT, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_CAN_HOST_OT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM, __pyx_k_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_2, __pyx_k_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_2, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_MINIMIZED, __pyx_k_IMGUI_VIEWPORT_FLAGS_MINIMIZED, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_MINIMIZED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NONE, __pyx_k_IMGUI_VIEWPORT_FLAGS_NONE, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_AUTO_MER, __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_AUTO_MER, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NO_AUTO_MER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_DECORATI, __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_DECORATI, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NO_DECORATI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON, __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_2, __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_2, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_2), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_INPUTS, __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_INPUTS, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NO_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_RENDERER, __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_RENDERER, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NO_RENDERER), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR, __pyx_k_IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_OWNED_BY_AP, __pyx_k_IMGUI_VIEWPORT_FLAGS_OWNED_BY_AP, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_OWNED_BY_AP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_VIEWPORT_FLAGS_TOP_MOST, __pyx_k_IMGUI_VIEWPORT_FLAGS_TOP_MOST, sizeof(__pyx_k_IMGUI_VIEWPORT_FLAGS_TOP_MOST), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_R, __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_R, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_R), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_HORIZO, __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_HORIZO, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_HORIZO), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_USE_WI, __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_USE_WI, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_USE_WI), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_VERTIC, __pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_VERTIC, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_ALWAYS_VERTIC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_CHILD_MENU, __pyx_k_IMGUI_WINDOW_FLAGS_CHILD_MENU, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_CHILD_MENU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_CHILD_WINDOW, __pyx_k_IMGUI_WINDOW_FLAGS_CHILD_WINDOW, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_CHILD_WINDOW), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_DOCK_NODE_HOS, __pyx_k_IMGUI_WINDOW_FLAGS_DOCK_NODE_HOS, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_DOCK_NODE_HOS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_HORIZONTAL_SC, __pyx_k_IMGUI_WINDOW_FLAGS_HORIZONTAL_SC, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_HORIZONTAL_SC), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_MENU_BAR, __pyx_k_IMGUI_WINDOW_FLAGS_MENU_BAR, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_MENU_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_MODAL, __pyx_k_IMGUI_WINDOW_FLAGS_MODAL, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_MODAL), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NAV_FLATTENED, __pyx_k_IMGUI_WINDOW_FLAGS_NAV_FLATTENED, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NAV_FLATTENED), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NONE, __pyx_k_IMGUI_WINDOW_FLAGS_NONE, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_BACKGROUND, __pyx_k_IMGUI_WINDOW_FLAGS_NO_BACKGROUND, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_BACKGROUND), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_BRING_TO_F, __pyx_k_IMGUI_WINDOW_FLAGS_NO_BRING_TO_F, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_BRING_TO_F), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_COLLAPSE, __pyx_k_IMGUI_WINDOW_FLAGS_NO_COLLAPSE, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_COLLAPSE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_DECORATION, __pyx_k_IMGUI_WINDOW_FLAGS_NO_DECORATION, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_DECORATION), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_DOCKING, __pyx_k_IMGUI_WINDOW_FLAGS_NO_DOCKING, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_DOCKING), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_A, __pyx_k_IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_A, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_A), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_INPUTS, __pyx_k_IMGUI_WINDOW_FLAGS_NO_INPUTS, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_MOUSE_INPU, __pyx_k_IMGUI_WINDOW_FLAGS_NO_MOUSE_INPU, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_MOUSE_INPU), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_MOVE, __pyx_k_IMGUI_WINDOW_FLAGS_NO_MOVE, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_MOVE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV, __pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS, __pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS, __pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_RESIZE, __pyx_k_IMGUI_WINDOW_FLAGS_NO_RESIZE, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_RESIZE), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SAVED_SETT, __pyx_k_IMGUI_WINDOW_FLAGS_NO_SAVED_SETT, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_SAVED_SETT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SCROLLBAR, __pyx_k_IMGUI_WINDOW_FLAGS_NO_SCROLLBAR, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_SCROLLBAR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SCROLL_WIT, __pyx_k_IMGUI_WINDOW_FLAGS_NO_SCROLL_WIT, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_SCROLL_WIT), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_NO_TITLE_BAR, __pyx_k_IMGUI_WINDOW_FLAGS_NO_TITLE_BAR, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_NO_TITLE_BAR), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_POPUP, __pyx_k_IMGUI_WINDOW_FLAGS_POPUP, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_POPUP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_TOOLTIP, __pyx_k_IMGUI_WINDOW_FLAGS_TOOLTIP, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_TOOLTIP), 0, 0, 1, 1},
  {&__pyx_n_s_IMGUI_WINDOW_FLAGS_UNSAVED_DOCUM, __pyx_k_IMGUI_WINDOW_FLAGS_UNSAVED_DOCUM, sizeof(__pyx_k_IMGUI_WINDOW_FLAGS_UNSAVED_DOCUM), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_CLOSED, __pyx_k_IM_DRAW_FLAGS_CLOSED, sizeof(__pyx_k_IM_DRAW_FLAGS_CLOSED), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_NONE, __pyx_k_IM_DRAW_FLAGS_NONE, sizeof(__pyx_k_IM_DRAW_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_ALL, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_ALL, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_2, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_2, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_2), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_3, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_3, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_3), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_DEFA, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_DEFA, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_DEFA), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_LEFT, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_LEFT, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_MASK, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_MASK, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_MASK), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_NONE, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_NONE, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_RIGH, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_RIGH, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_RIGH), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_2, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_2, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_2), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_3, __pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_3, sizeof(__pyx_k_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_3), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFF, __pyx_k_IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFF, sizeof(__pyx_k_IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFF), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED, __pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED, sizeof(__pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_2, __pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_2, sizeof(__pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_2), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_3, __pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_3, sizeof(__pyx_k_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_3), 0, 0, 1, 1},
  {&__pyx_n_s_IM_DRAW_LIST_FLAGS_NONE, __pyx_k_IM_DRAW_LIST_FLAGS_NONE, sizeof(__pyx_k_IM_DRAW_LIST_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IM_FONT_ATLAS_FLAGS_NONE, __pyx_k_IM_FONT_ATLAS_FLAGS_NONE, sizeof(__pyx_k_IM_FONT_ATLAS_FLAGS_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_BAKED_LIN, __pyx_k_IM_FONT_ATLAS_FLAGS_NO_BAKED_LIN, sizeof(__pyx_k_IM_FONT_ATLAS_FLAGS_NO_BAKED_LIN), 0, 0, 1, 1},
  {&__pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_MOUSE_CUR, __pyx_k_IM_FONT_ATLAS_FLAGS_NO_MOUSE_CUR, sizeof(__pyx_k_IM_FONT_ATLAS_FLAGS_NO_MOUSE_CUR), 0, 0, 1, 1},
  {&__pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_POWER_OF, __pyx_k_IM_FONT_ATLAS_FLAGS_NO_POWER_OF, sizeof(__pyx_k_IM_FONT_ATLAS_FLAGS_NO_POWER_OF), 0, 0, 1, 1},
  {&__pyx_n_s_ImColor, __pyx_k_ImColor, sizeof(__pyx_k_ImColor), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawChannel, __pyx_k_ImDrawChannel, sizeof(__pyx_k_ImDrawChannel), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawCmd, __pyx_k_ImDrawCmd, sizeof(__pyx_k_ImDrawCmd), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawCmdHeader, __pyx_k_ImDrawCmdHeader, sizeof(__pyx_k_ImDrawCmdHeader), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawData, __pyx_k_ImDrawData, sizeof(__pyx_k_ImDrawData), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawList, __pyx_k_ImDrawList, sizeof(__pyx_k_ImDrawList), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawListSharedData, __pyx_k_ImDrawListSharedData, sizeof(__pyx_k_ImDrawListSharedData), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawListSplitter, __pyx_k_ImDrawListSplitter, sizeof(__pyx_k_ImDrawListSplitter), 0, 0, 1, 1},
  {&__pyx_n_s_ImDrawVert, __pyx_k_ImDrawVert, sizeof(__pyx_k_ImDrawVert), 0, 0, 1, 1},
  {&__pyx_n_s_ImFont, __pyx_k_ImFont, sizeof(__pyx_k_ImFont), 0, 0, 1, 1},
  {&__pyx_n_s_ImFontAtlas, __pyx_k_ImFontAtlas, sizeof(__pyx_k_ImFontAtlas), 0, 0, 1, 1},
  {&__pyx_n_s_ImFontAtlasCustomRect, __pyx_k_ImFontAtlasCustomRect, sizeof(__pyx_k_ImFontAtlasCustomRect), 0, 0, 1, 1},
  {&__pyx_n_s_ImFontBuilderIO, __pyx_k_ImFontBuilderIO, sizeof(__pyx_k_ImFontBuilderIO), 0, 0, 1, 1},
  {&__pyx_n_s_ImFontConfig, __pyx_k_ImFontConfig, sizeof(__pyx_k_ImFontConfig), 0, 0, 1, 1},
  {&__pyx_n_s_ImFontGlyph, __pyx_k_ImFontGlyph, sizeof(__pyx_k_ImFontGlyph), 0, 0, 1, 1},
  {&__pyx_n_s_ImFontGlyphRangesBuilder, __pyx_k_ImFontGlyphRangesBuilder, sizeof(__pyx_k_ImFontGlyphRangesBuilder), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiContext, __pyx_k_ImGuiContext, sizeof(__pyx_k_ImGuiContext), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiIO, __pyx_k_ImGuiIO, sizeof(__pyx_k_ImGuiIO), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiKeyData, __pyx_k_ImGuiKeyData, sizeof(__pyx_k_ImGuiKeyData), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiListClipper, __pyx_k_ImGuiListClipper, sizeof(__pyx_k_ImGuiListClipper), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiOnceUponAFrame, __pyx_k_ImGuiOnceUponAFrame, sizeof(__pyx_k_ImGuiOnceUponAFrame), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiPayload, __pyx_k_ImGuiPayload, sizeof(__pyx_k_ImGuiPayload), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiPlatformIO, __pyx_k_ImGuiPlatformIO, sizeof(__pyx_k_ImGuiPlatformIO), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiPlatformImeData, __pyx_k_ImGuiPlatformImeData, sizeof(__pyx_k_ImGuiPlatformImeData), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiPlatformMonitor, __pyx_k_ImGuiPlatformMonitor, sizeof(__pyx_k_ImGuiPlatformMonitor), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiStorage, __pyx_k_ImGuiStorage, sizeof(__pyx_k_ImGuiStorage), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiStoragePair, __pyx_k_ImGuiStoragePair, sizeof(__pyx_k_ImGuiStoragePair), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiStyle, __pyx_k_ImGuiStyle, sizeof(__pyx_k_ImGuiStyle), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiTableColumnSortSpecs, __pyx_k_ImGuiTableColumnSortSpecs, sizeof(__pyx_k_ImGuiTableColumnSortSpecs), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiTableSortSpecs, __pyx_k_ImGuiTableSortSpecs, sizeof(__pyx_k_ImGuiTableSortSpecs), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiTextBuffer, __pyx_k_ImGuiTextBuffer, sizeof(__pyx_k_ImGuiTextBuffer), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiTextFilter, __pyx_k_ImGuiTextFilter, sizeof(__pyx_k_ImGuiTextFilter), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiTextRange, __pyx_k_ImGuiTextRange, sizeof(__pyx_k_ImGuiTextRange), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiViewport, __pyx_k_ImGuiViewport, sizeof(__pyx_k_ImGuiViewport), 0, 0, 1, 1},
  {&__pyx_n_s_ImGuiWindowClass, __pyx_k_ImGuiWindowClass, sizeof(__pyx_k_ImGuiWindowClass), 0, 0, 1, 1},
  {&__pyx_n_s_ImVec2, __pyx_k_ImVec2, sizeof(__pyx_k_ImVec2), 0, 0, 1, 1},
  {&__pyx_n_s_ImVec4, __pyx_k_ImVec4, sizeof(__pyx_k_ImVec4), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImDrawChannel, __pyx_k_ImVector_ImDrawChannel, sizeof(__pyx_k_ImVector_ImDrawChannel), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImDrawCmd, __pyx_k_ImVector_ImDrawCmd, sizeof(__pyx_k_ImVector_ImDrawCmd), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImDrawIdx, __pyx_k_ImVector_ImDrawIdx, sizeof(__pyx_k_ImVector_ImDrawIdx), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImDrawVert, __pyx_k_ImVector_ImDrawVert, sizeof(__pyx_k_ImVector_ImDrawVert), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImFontAtlasCustomRect, __pyx_k_ImVector_ImFontAtlasCustomRect, sizeof(__pyx_k_ImVector_ImFontAtlasCustomRect), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImFontConfig, __pyx_k_ImVector_ImFontConfig, sizeof(__pyx_k_ImVector_ImFontConfig), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImFontGlyph, __pyx_k_ImVector_ImFontGlyph, sizeof(__pyx_k_ImVector_ImFontGlyph), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImFontPtr, __pyx_k_ImVector_ImFontPtr, sizeof(__pyx_k_ImVector_ImFontPtr), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImGuiPlatformMonitor, __pyx_k_ImVector_ImGuiPlatformMonitor, sizeof(__pyx_k_ImVector_ImGuiPlatformMonitor), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImGuiStoragePair, __pyx_k_ImVector_ImGuiStoragePair, sizeof(__pyx_k_ImVector_ImGuiStoragePair), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImGuiTextRange, __pyx_k_ImVector_ImGuiTextRange, sizeof(__pyx_k_ImVector_ImGuiTextRange), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImGuiViewportPtr, __pyx_k_ImVector_ImGuiViewportPtr, sizeof(__pyx_k_ImVector_ImGuiViewportPtr), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImTextureID, __pyx_k_ImVector_ImTextureID, sizeof(__pyx_k_ImVector_ImTextureID), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImU32, __pyx_k_ImVector_ImU32, sizeof(__pyx_k_ImVector_ImU32), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImVec2, __pyx_k_ImVector_ImVec2, sizeof(__pyx_k_ImVector_ImVec2), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImVec4, __pyx_k_ImVector_ImVec4, sizeof(__pyx_k_ImVector_ImVec4), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_ImWchar, __pyx_k_ImVector_ImWchar, sizeof(__pyx_k_ImVector_ImWchar), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_char, __pyx_k_ImVector_char, sizeof(__pyx_k_ImVector_char), 0, 0, 1, 1},
  {&__pyx_n_s_ImVector_float, __pyx_k_ImVector_float, sizeof(__pyx_k_ImVector_float), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_u_This_class_cannot_be_instantiate, __pyx_k_This_class_cannot_be_instantiate, sizeof(__pyx_k_This_class_cannot_be_instantiate), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Vec2, __pyx_k_Vec2, sizeof(__pyx_k_Vec2), 0, 0, 1, 1},
  {&__pyx_n_u_Vec2, __pyx_k_Vec2, sizeof(__pyx_k_Vec2), 0, 1, 0, 1},
  {&__pyx_n_s_Vec4, __pyx_k_Vec4, sizeof(__pyx_k_Vec4), 0, 0, 1, 1},
  {&__pyx_n_u_Vec4, __pyx_k_Vec4, sizeof(__pyx_k_Vec4), 0, 1, 0, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_u_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 1, 0, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {&__pyx_n_s_button, __pyx_k_button, sizeof(__pyx_k_button), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_closable, __pyx_k_closable, sizeof(__pyx_k_closable), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_core, __pyx_k_core, sizeof(__pyx_k_core), 0, 0, 1, 1},
  {&__pyx_kp_s_core_core_pyx, __pyx_k_core_core_pyx, sizeof(__pyx_k_core_core_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_create_context, __pyx_k_create_context, sizeof(__pyx_k_create_context), 0, 0, 1, 1},
  {&__pyx_n_s_ctx, __pyx_k_ctx, sizeof(__pyx_k_ctx), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_destroy_context, __pyx_k_destroy_context, sizeof(__pyx_k_destroy_context), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_down, __pyx_k_down, sizeof(__pyx_k_down), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_errors, __pyx_k_errors, sizeof(__pyx_k_errors), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_fmt, __pyx_k_fmt, sizeof(__pyx_k_fmt), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_kp_u_func_is_not_a_callable_s, __pyx_k_func_is_not_a_callable_s, sizeof(__pyx_k_func_is_not_a_callable_s), 0, 1, 0, 0},
  {&__pyx_n_u_get_clipboard_text_fn, __pyx_k_get_clipboard_text_fn, sizeof(__pyx_k_get_clipboard_text_fn), 0, 1, 0, 1},
  {&__pyx_n_s_get_current_context, __pyx_k_get_current_context, sizeof(__pyx_k_get_current_context), 0, 0, 1, 1},
  {&__pyx_n_s_get_draw_data, __pyx_k_get_draw_data, sizeof(__pyx_k_get_draw_data), 0, 0, 1, 1},
  {&__pyx_n_s_get_io, __pyx_k_get_io, sizeof(__pyx_k_get_io), 0, 0, 1, 1},
  {&__pyx_n_s_get_version, __pyx_k_get_version, sizeof(__pyx_k_get_version), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_u_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 1, 0, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_u_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_initial_value, __pyx_k_initial_value, sizeof(__pyx_k_initial_value), 0, 0, 1, 1},
  {&__pyx_n_s_io_clipboard, __pyx_k_io_clipboard, sizeof(__pyx_k_io_clipboard), 0, 0, 1, 1},
  {&__pyx_n_s_is_open, __pyx_k_is_open, sizeof(__pyx_k_is_open), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_namedtuple, __pyx_k_namedtuple, sizeof(__pyx_k_namedtuple), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_frame, __pyx_k_new_frame, sizeof(__pyx_k_new_frame), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_opened, __pyx_k_opened, sizeof(__pyx_k_opened), 0, 0, 1, 1},
  {&__pyx_n_s_p_open, __pyx_k_p_open, sizeof(__pyx_k_p_open), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_kp_u_pair_param_must_be_length_of_2, __pyx_k_pair_param_must_be_length_of_2, sizeof(__pyx_k_pair_param_must_be_length_of_2), 0, 1, 0, 0},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_platform_render_arg, __pyx_k_platform_render_arg, sizeof(__pyx_k_platform_render_arg), 0, 0, 1, 1},
  {&__pyx_n_s_py_index_buffer_index_size, __pyx_k_py_index_buffer_index_size, sizeof(__pyx_k_py_index_buffer_index_size), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_col_off, __pyx_k_py_vertex_buffer_vertex_col_off, sizeof(__pyx_k_py_vertex_buffer_vertex_col_off), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_pos_off, __pyx_k_py_vertex_buffer_vertex_pos_off, sizeof(__pyx_k_py_vertex_buffer_vertex_pos_off), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_size, __pyx_k_py_vertex_buffer_vertex_size, sizeof(__pyx_k_py_vertex_buffer_vertex_size), 0, 0, 1, 1},
  {&__pyx_n_s_py_vertex_buffer_vertex_uv_offs, __pyx_k_py_vertex_buffer_vertex_uv_offs, sizeof(__pyx_k_py_vertex_buffer_vertex_uv_offs), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BoolPtr, __pyx_k_pyx_unpickle_BoolPtr, sizeof(__pyx_k_pyx_unpickle_BoolPtr), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_kp_u_quadruple_param_must_be_length_o, __pyx_k_quadruple_param_must_be_length_o, sizeof(__pyx_k_quadruple_param_must_be_length_o), 0, 1, 0, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_render, __pyx_k_render, sizeof(__pyx_k_render), 0, 0, 1, 1},
  {&__pyx_n_s_render_platform_windows_default, __pyx_k_render_platform_windows_default, sizeof(__pyx_k_render_platform_windows_default), 0, 0, 1, 1},
  {&__pyx_n_s_renderer_render_arg, __pyx_k_renderer_render_arg, sizeof(__pyx_k_renderer_render_arg), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_kp_s_self__ptr_cannot_be_converted_to, __pyx_k_self__ptr_cannot_be_converted_to, sizeof(__pyx_k_self__ptr_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_u_set_clipboard_text_fn, __pyx_k_set_clipboard_text_fn, sizeof(__pyx_k_set_clipboard_text_fn), 0, 1, 0, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shared_font_atlas, __pyx_k_shared_font_atlas, sizeof(__pyx_k_shared_font_atlas), 0, 0, 1, 1},
  {&__pyx_n_s_show_demo_window, __pyx_k_show_demo_window, sizeof(__pyx_k_show_demo_window), 0, 0, 1, 1},
  {&__pyx_n_s_show_user_guide, __pyx_k_show_user_guide, sizeof(__pyx_k_show_user_guide), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_platform_windows, __pyx_k_update_platform_windows, sizeof(__pyx_k_update_platform_windows), 0, 0, 1, 1},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_s_wheel_x, __pyx_k_wheel_x, sizeof(__pyx_k_wheel_x), 0, 0, 1, 1},
  {&__pyx_n_s_wheel_y, __pyx_k_wheel_y, sizeof(__pyx_k_wheel_y), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_u_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 1, 0, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_u_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 1, 0, 1},
  {&__pyx_n_u_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 661, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 5470, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 5540, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 8273, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 149, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 152, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 406, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 615, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 834, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "core.pyx":652
 * 
 * cdef str _from_bytes(bytes text):
 *     return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_utf_8); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "core.pyx":661
 *     cdef ccimgui.ImVec2 vec
 *     if len(pair) != 2:
 *         raise ValueError('pair param must be length of 2')             # <<<<<<<<<<<<<<
 *     vec.x, vec.y = pair
 *     return vec
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_pair_param_must_be_length_of_2); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "core.pyx":671
 *     cdef ccimgui.ImVec4 vec
 *     if len(quadruple) != 4:
 *         raise ValueError('quadruple param must be length of 4')             # <<<<<<<<<<<<<<
 * 
 *     vec.x, vec.y, vec.z, vec.w = quadruple
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_quadruple_param_must_be_length_o); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "core.pyx":5470
 * 
 *     def __init__(self):
 *         raise TypeError("This class cannot be instantiated directly.")             # <<<<<<<<<<<<<<
 *     # [End Class Constants]
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_This_class_cannot_be_instantiate); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 5470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "core.pyx":11181
 *     def keys_down(self):
 *         cdef cvarray res = cvarray(
 *             shape=(512,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_int_512); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 11181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "core.pyx":11239
 *     def mouse_down(self):
 *         cdef cvarray res = cvarray(
 *             shape=(5,),             # <<<<<<<<<<<<<<
 *             format='b',
 *             itemsize=sizeof(bool),
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_int_5); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 11239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__103 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "(tree fragment)":4
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._ptr cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_kp_s_self__ptr_cannot_be_converted_to); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_tuple__119 = PyTuple_Pack(3, __pyx_int_81374507, __pyx_int_138264305, __pyx_int_229591698); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__125 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__127 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__131 = PyTuple_New(1); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__131, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__134 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__134)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__134);
  __Pyx_GIVEREF(__pyx_slice__134);

  /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_tuple__138 = PyTuple_Pack(3, __pyx_int_184977713, __pyx_int_136983863, __pyx_int_112105877); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "core.pyx":677
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_pos_off, 677, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 677, __pyx_L1_error)

  /* "core.pyx":680
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 */
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_uv_offs, 680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(0, 680, __pyx_L1_error)

  /* "core.pyx":683
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_col_off, 683, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 683, __pyx_L1_error)

  /* "core.pyx":686
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 */
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_py_vertex_buffer_vertex_size, 686, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(0, 686, __pyx_L1_error)

  /* "core.pyx":689
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawIdx)
 * 
 */
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_py_index_buffer_index_size, 689, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 689, __pyx_L1_error)

  /* "core.pyx":746
 * # ?active(True)
 * # ?returns(Tuple[bool, bool])
 * def begin(name: str, p_open: BoolPtr, flags: int=0):             # <<<<<<<<<<<<<<
 *     cdef bool is_open = True
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)
 */
  __pyx_tuple__144 = PyTuple_Pack(5, __pyx_n_s_name, __pyx_n_s_p_open, __pyx_n_s_flags, __pyx_n_s_is_open, __pyx_n_s_res); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_begin, 746, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 746, __pyx_L1_error)

  /* "core.pyx":1280
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def create_context(shared_font_atlas: ImFontAtlas=None):             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res
 *     if shared_font_atlas is None:
 */
  __pyx_tuple__146 = PyTuple_Pack(2, __pyx_n_s_shared_font_atlas, __pyx_n_s_res); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_create_context, 1280, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 1280, __pyx_L1_error)

  /* "core.pyx":1322
 * # ?active(True)
 * # ?returns(None)
 * def destroy_context(ctx: ImGuiContext=None):             # <<<<<<<<<<<<<<
 *     """
 *     Null = destroy current context
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_n_s_ctx); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_destroy_context, 1322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 1322, __pyx_L1_error)

  /* "core.pyx":1600
 * # ?active(True)
 * # ?returns(None)
 * def end():             # <<<<<<<<<<<<<<
 *     ccimgui.igEnd()
 * # [End Function]
 */
  __pyx_codeobj__150 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_end, 1600, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__150)) __PYX_ERR(0, 1600, __pyx_L1_error)

  /* "core.pyx":1970
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
 *     return ImGuiContext.from_ptr(res)
 */
  __pyx_tuple__151 = PyTuple_Pack(1, __pyx_n_s_res); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 1970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__151, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_get_current_context, 1970, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(0, 1970, __pyx_L1_error)

  /* "core.pyx":2056
 * # ?active(True)
 * # ?returns(ImDrawData)
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """
 *     Valid after render() and until the next call to newframe(). this
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_n_s_res); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_codeobj__154 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__153, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_get_draw_data, 2056, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__154)) __PYX_ERR(0, 2056, __pyx_L1_error)

  /* "core.pyx":2214
 * # ?active(True)
 * # ?returns(ImGuiIO)
 * def get_io():             # <<<<<<<<<<<<<<
 *     """
 *     Access the io structure (mouse/keyboard/gamepad inputs, time,
 */
  __pyx_tuple__155 = PyTuple_Pack(1, __pyx_n_s_res); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_get_io, 2214, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(0, 2214, __pyx_L1_error)

  /* "core.pyx":2553
 * # ?active(True)
 * # ?returns(str)
 * def get_version():             # <<<<<<<<<<<<<<
 *     """
 *     Get the compiled version string e.g. 1.80 wip (essentially the
 */
  __pyx_tuple__157 = PyTuple_Pack(1, __pyx_n_s_res); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_get_version, 2553, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(0, 2553, __pyx_L1_error)

  /* "core.pyx":3472
 * # ?active(True)
 * # ?returns(None)
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """
 *     Start a new dear imgui frame, you can submit any command from
 */
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_new_frame, 3472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 3472, __pyx_L1_error)

  /* "core.pyx":3882
 * # ?active(True)
 * # ?returns(None)
 * def render():             # <<<<<<<<<<<<<<
 *     """
 *     Ends the dear imgui frame, finalize the draw data. you can then
 */
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_render, 3882, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(0, 3882, __pyx_L1_error)

  /* "core.pyx":3894
 * # ?active(True)
 * # ?returns(None)
 * def render_platform_windows_default(platform_render_arg: Any=None, renderer_render_arg: Any=None):             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call renderwindow/swapbuffers platform
 */
  __pyx_tuple__161 = PyTuple_Pack(2, __pyx_n_s_platform_render_arg, __pyx_n_s_renderer_render_arg); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 3894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_render_platform_windows_default, 3894, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 3894, __pyx_L1_error)

  /* "core.pyx":4599
 * # ?active(True)
 * # ?returns(None)
 * def show_demo_window(closable: bool=False):             # <<<<<<<<<<<<<<
 *     """
 *     Create demo window. demonstrate most imgui features. call this
 */
  __pyx_tuple__163 = PyTuple_Pack(2, __pyx_n_s_closable, __pyx_n_s_opened); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 4599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_show_demo_window, 4599, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 4599, __pyx_L1_error)

  /* "core.pyx":4680
 * # ?active(True)
 * # ?returns(None)
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """
 *     Add basic help/info block (not a window): how to manipulate imgui
 */
  __pyx_codeobj__165 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_show_user_guide, 4680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__165)) __PYX_ERR(0, 4680, __pyx_L1_error)

  /* "core.pyx":5131
 * # ?active(True)
 * # ?returns(None)
 * def text(fmt: str):             # <<<<<<<<<<<<<<
 *     """
 *     Formatted text
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_n_s_fmt); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 5131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_text, 5131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(0, 5131, __pyx_L1_error)

  /* "core.pyx":5364
 * # ?active(True)
 * # ?returns(None)
 * def update_platform_windows():             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call createwindow/resizewindow/etc. platform
 */
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_core_core_pyx, __pyx_n_s_update_platform_windows, 5364, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 5364, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_BoolPtr(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__169 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BoolPtr, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__172 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__173 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__174 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__175 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__176 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_codeobj__177 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__176, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__177)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_512 = PyInt_FromLong(512); if (unlikely(!__pyx_int_512)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_81374507 = PyInt_FromLong(81374507L); if (unlikely(!__pyx_int_81374507)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_138264305 = PyInt_FromLong(138264305L); if (unlikely(!__pyx_int_138264305)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_229591698 = PyInt_FromLong(229591698L); if (unlikely(!__pyx_int_229591698)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4core_BoolPtr) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_BoolPtr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_BoolPtr.tp_dictoffset && __pyx_type_4core_BoolPtr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_BoolPtr.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BoolPtr, (PyObject *)&__pyx_type_4core_BoolPtr) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_BoolPtr) < 0) __PYX_ERR(0, 692, __pyx_L1_error)
  __pyx_ptype_4core_BoolPtr = &__pyx_type_4core_BoolPtr;
  __pyx_vtabptr_4core_ImVector_ImDrawCmd = &__pyx_vtable_4core_ImVector_ImDrawCmd;
  __pyx_vtable_4core_ImVector_ImDrawCmd.from_ptr = (struct __pyx_obj_4core_ImVector_ImDrawCmd *(*)(ImVector_ImDrawCmd *))__pyx_f_4core_18ImVector_ImDrawCmd_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImDrawCmd) < 0) __PYX_ERR(0, 5460, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImDrawCmd.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImDrawCmd.tp_dictoffset && __pyx_type_4core_ImVector_ImDrawCmd.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImDrawCmd.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImDrawCmd.tp_dict, __pyx_vtabptr_4core_ImVector_ImDrawCmd) < 0) __PYX_ERR(0, 5460, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImDrawCmd, (PyObject *)&__pyx_type_4core_ImVector_ImDrawCmd) < 0) __PYX_ERR(0, 5460, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImDrawCmd) < 0) __PYX_ERR(0, 5460, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImDrawCmd = &__pyx_type_4core_ImVector_ImDrawCmd;
  __pyx_vtabptr_4core_ImVector_ImDrawIdx = &__pyx_vtable_4core_ImVector_ImDrawIdx;
  __pyx_vtable_4core_ImVector_ImDrawIdx.from_ptr = (struct __pyx_obj_4core_ImVector_ImDrawIdx *(*)(ImVector_ImDrawIdx *))__pyx_f_4core_18ImVector_ImDrawIdx_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImDrawIdx) < 0) __PYX_ERR(0, 5516, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImDrawIdx.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImDrawIdx.tp_dictoffset && __pyx_type_4core_ImVector_ImDrawIdx.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImDrawIdx.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImDrawIdx.tp_dict, __pyx_vtabptr_4core_ImVector_ImDrawIdx) < 0) __PYX_ERR(0, 5516, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImDrawIdx, (PyObject *)&__pyx_type_4core_ImVector_ImDrawIdx) < 0) __PYX_ERR(0, 5516, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImDrawIdx) < 0) __PYX_ERR(0, 5516, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImDrawIdx = &__pyx_type_4core_ImVector_ImDrawIdx;
  __pyx_vtabptr_4core_ImVector_ImDrawVert = &__pyx_vtable_4core_ImVector_ImDrawVert;
  __pyx_vtable_4core_ImVector_ImDrawVert.from_ptr = (struct __pyx_obj_4core_ImVector_ImDrawVert *(*)(ImVector_ImDrawVert *))__pyx_f_4core_19ImVector_ImDrawVert_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImDrawVert) < 0) __PYX_ERR(0, 5574, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImDrawVert.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImDrawVert.tp_dictoffset && __pyx_type_4core_ImVector_ImDrawVert.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImDrawVert.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImDrawVert.tp_dict, __pyx_vtabptr_4core_ImVector_ImDrawVert) < 0) __PYX_ERR(0, 5574, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImDrawVert, (PyObject *)&__pyx_type_4core_ImVector_ImDrawVert) < 0) __PYX_ERR(0, 5574, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImDrawVert) < 0) __PYX_ERR(0, 5574, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImDrawVert = &__pyx_type_4core_ImVector_ImDrawVert;
  __pyx_vtabptr_4core_ImVector_ImVec4 = &__pyx_vtable_4core_ImVector_ImVec4;
  __pyx_vtable_4core_ImVector_ImVec4.from_ptr = (struct __pyx_obj_4core_ImVector_ImVec4 *(*)(ImVector_ImVec4 *))__pyx_f_4core_15ImVector_ImVec4_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImVec4) < 0) __PYX_ERR(0, 5632, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImVec4.tp_dictoffset && __pyx_type_4core_ImVector_ImVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImVec4.tp_dict, __pyx_vtabptr_4core_ImVector_ImVec4) < 0) __PYX_ERR(0, 5632, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImVec4, (PyObject *)&__pyx_type_4core_ImVector_ImVec4) < 0) __PYX_ERR(0, 5632, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImVec4) < 0) __PYX_ERR(0, 5632, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImVec4 = &__pyx_type_4core_ImVector_ImVec4;
  __pyx_vtabptr_4core_ImVector_ImTextureID = &__pyx_vtable_4core_ImVector_ImTextureID;
  __pyx_vtable_4core_ImVector_ImTextureID.from_ptr = (struct __pyx_obj_4core_ImVector_ImTextureID *(*)(ImVector_ImTextureID *))__pyx_f_4core_20ImVector_ImTextureID_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImTextureID) < 0) __PYX_ERR(0, 5688, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImTextureID.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImTextureID.tp_dictoffset && __pyx_type_4core_ImVector_ImTextureID.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImTextureID.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImTextureID.tp_dict, __pyx_vtabptr_4core_ImVector_ImTextureID) < 0) __PYX_ERR(0, 5688, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImTextureID, (PyObject *)&__pyx_type_4core_ImVector_ImTextureID) < 0) __PYX_ERR(0, 5688, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImTextureID) < 0) __PYX_ERR(0, 5688, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImTextureID = &__pyx_type_4core_ImVector_ImTextureID;
  __pyx_vtabptr_4core_ImVector_ImVec2 = &__pyx_vtable_4core_ImVector_ImVec2;
  __pyx_vtable_4core_ImVector_ImVec2.from_ptr = (struct __pyx_obj_4core_ImVector_ImVec2 *(*)(ImVector_ImVec2 *))__pyx_f_4core_15ImVector_ImVec2_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImVec2) < 0) __PYX_ERR(0, 5744, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImVec2.tp_dictoffset && __pyx_type_4core_ImVector_ImVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImVec2.tp_dict, __pyx_vtabptr_4core_ImVector_ImVec2) < 0) __PYX_ERR(0, 5744, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImVec2, (PyObject *)&__pyx_type_4core_ImVector_ImVec2) < 0) __PYX_ERR(0, 5744, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImVec2) < 0) __PYX_ERR(0, 5744, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImVec2 = &__pyx_type_4core_ImVector_ImVec2;
  __pyx_vtabptr_4core_ImVector_ImDrawChannel = &__pyx_vtable_4core_ImVector_ImDrawChannel;
  __pyx_vtable_4core_ImVector_ImDrawChannel.from_ptr = (struct __pyx_obj_4core_ImVector_ImDrawChannel *(*)(ImVector_ImDrawChannel *))__pyx_f_4core_22ImVector_ImDrawChannel_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImDrawChannel) < 0) __PYX_ERR(0, 5800, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImDrawChannel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImDrawChannel.tp_dictoffset && __pyx_type_4core_ImVector_ImDrawChannel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImDrawChannel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImDrawChannel.tp_dict, __pyx_vtabptr_4core_ImVector_ImDrawChannel) < 0) __PYX_ERR(0, 5800, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImDrawChannel, (PyObject *)&__pyx_type_4core_ImVector_ImDrawChannel) < 0) __PYX_ERR(0, 5800, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImDrawChannel) < 0) __PYX_ERR(0, 5800, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImDrawChannel = &__pyx_type_4core_ImVector_ImDrawChannel;
  __pyx_vtabptr_4core_ImVector_float = &__pyx_vtable_4core_ImVector_float;
  __pyx_vtable_4core_ImVector_float.from_ptr = (struct __pyx_obj_4core_ImVector_float *(*)(ImVector_float *))__pyx_f_4core_14ImVector_float_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_float) < 0) __PYX_ERR(0, 5856, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_float.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_float.tp_dictoffset && __pyx_type_4core_ImVector_float.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_float.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_float.tp_dict, __pyx_vtabptr_4core_ImVector_float) < 0) __PYX_ERR(0, 5856, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_float, (PyObject *)&__pyx_type_4core_ImVector_float) < 0) __PYX_ERR(0, 5856, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_float) < 0) __PYX_ERR(0, 5856, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_float = &__pyx_type_4core_ImVector_float;
  __pyx_vtabptr_4core_ImVector_ImWchar = &__pyx_vtable_4core_ImVector_ImWchar;
  __pyx_vtable_4core_ImVector_ImWchar.from_ptr = (struct __pyx_obj_4core_ImVector_ImWchar *(*)(ImVector_ImWchar *))__pyx_f_4core_16ImVector_ImWchar_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImWchar) < 0) __PYX_ERR(0, 5912, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImWchar.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImWchar.tp_dictoffset && __pyx_type_4core_ImVector_ImWchar.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImWchar.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImWchar.tp_dict, __pyx_vtabptr_4core_ImVector_ImWchar) < 0) __PYX_ERR(0, 5912, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImWchar, (PyObject *)&__pyx_type_4core_ImVector_ImWchar) < 0) __PYX_ERR(0, 5912, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImWchar) < 0) __PYX_ERR(0, 5912, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImWchar = &__pyx_type_4core_ImVector_ImWchar;
  __pyx_vtabptr_4core_ImVector_ImFontGlyph = &__pyx_vtable_4core_ImVector_ImFontGlyph;
  __pyx_vtable_4core_ImVector_ImFontGlyph.from_ptr = (struct __pyx_obj_4core_ImVector_ImFontGlyph *(*)(ImVector_ImFontGlyph *))__pyx_f_4core_20ImVector_ImFontGlyph_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImFontGlyph) < 0) __PYX_ERR(0, 5968, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImFontGlyph.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImFontGlyph.tp_dictoffset && __pyx_type_4core_ImVector_ImFontGlyph.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImFontGlyph.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImFontGlyph.tp_dict, __pyx_vtabptr_4core_ImVector_ImFontGlyph) < 0) __PYX_ERR(0, 5968, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImFontGlyph, (PyObject *)&__pyx_type_4core_ImVector_ImFontGlyph) < 0) __PYX_ERR(0, 5968, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImFontGlyph) < 0) __PYX_ERR(0, 5968, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImFontGlyph = &__pyx_type_4core_ImVector_ImFontGlyph;
  __pyx_vtabptr_4core_ImVector_ImFontPtr = &__pyx_vtable_4core_ImVector_ImFontPtr;
  __pyx_vtable_4core_ImVector_ImFontPtr.from_ptr = (struct __pyx_obj_4core_ImVector_ImFontPtr *(*)(ImVector_ImFontPtr *))__pyx_f_4core_18ImVector_ImFontPtr_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImFontPtr) < 0) __PYX_ERR(0, 6024, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImFontPtr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImFontPtr.tp_dictoffset && __pyx_type_4core_ImVector_ImFontPtr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImFontPtr.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImFontPtr.tp_dict, __pyx_vtabptr_4core_ImVector_ImFontPtr) < 0) __PYX_ERR(0, 6024, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImFontPtr, (PyObject *)&__pyx_type_4core_ImVector_ImFontPtr) < 0) __PYX_ERR(0, 6024, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImFontPtr) < 0) __PYX_ERR(0, 6024, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImFontPtr = &__pyx_type_4core_ImVector_ImFontPtr;
  __pyx_vtabptr_4core_ImVector_ImFontAtlasCustomRect = &__pyx_vtable_4core_ImVector_ImFontAtlasCustomRect;
  __pyx_vtable_4core_ImVector_ImFontAtlasCustomRect.from_ptr = (struct __pyx_obj_4core_ImVector_ImFontAtlasCustomRect *(*)(ImVector_ImFontAtlasCustomRect *))__pyx_f_4core_30ImVector_ImFontAtlasCustomRect_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 6080, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImFontAtlasCustomRect.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImFontAtlasCustomRect.tp_dictoffset && __pyx_type_4core_ImVector_ImFontAtlasCustomRect.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImFontAtlasCustomRect.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImFontAtlasCustomRect.tp_dict, __pyx_vtabptr_4core_ImVector_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 6080, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImFontAtlasCustomRect, (PyObject *)&__pyx_type_4core_ImVector_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 6080, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 6080, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImFontAtlasCustomRect = &__pyx_type_4core_ImVector_ImFontAtlasCustomRect;
  __pyx_vtabptr_4core_ImVector_ImFontConfig = &__pyx_vtable_4core_ImVector_ImFontConfig;
  __pyx_vtable_4core_ImVector_ImFontConfig.from_ptr = (struct __pyx_obj_4core_ImVector_ImFontConfig *(*)(ImVector_ImFontConfig *))__pyx_f_4core_21ImVector_ImFontConfig_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImFontConfig) < 0) __PYX_ERR(0, 6136, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImFontConfig.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImFontConfig.tp_dictoffset && __pyx_type_4core_ImVector_ImFontConfig.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImFontConfig.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImFontConfig.tp_dict, __pyx_vtabptr_4core_ImVector_ImFontConfig) < 0) __PYX_ERR(0, 6136, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImFontConfig, (PyObject *)&__pyx_type_4core_ImVector_ImFontConfig) < 0) __PYX_ERR(0, 6136, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImFontConfig) < 0) __PYX_ERR(0, 6136, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImFontConfig = &__pyx_type_4core_ImVector_ImFontConfig;
  __pyx_vtabptr_4core_ImFontGlyph = &__pyx_vtable_4core_ImFontGlyph;
  __pyx_vtable_4core_ImFontGlyph.from_ptr = (struct __pyx_obj_4core_ImFontGlyph *(*)(ImFontGlyph *))__pyx_f_4core_11ImFontGlyph_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImFontGlyph) < 0) __PYX_ERR(0, 6192, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImFontGlyph.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImFontGlyph.tp_dictoffset && __pyx_type_4core_ImFontGlyph.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImFontGlyph.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImFontGlyph.tp_dict, __pyx_vtabptr_4core_ImFontGlyph) < 0) __PYX_ERR(0, 6192, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImFontGlyph, (PyObject *)&__pyx_type_4core_ImFontGlyph) < 0) __PYX_ERR(0, 6192, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImFontGlyph) < 0) __PYX_ERR(0, 6192, __pyx_L1_error)
  __pyx_ptype_4core_ImFontGlyph = &__pyx_type_4core_ImFontGlyph;
  __pyx_vtabptr_4core_ImVector_ImU32 = &__pyx_vtable_4core_ImVector_ImU32;
  __pyx_vtable_4core_ImVector_ImU32.from_ptr = (struct __pyx_obj_4core_ImVector_ImU32 *(*)(ImVector_ImU32 *))__pyx_f_4core_14ImVector_ImU32_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImU32) < 0) __PYX_ERR(0, 6365, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImU32.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImU32.tp_dictoffset && __pyx_type_4core_ImVector_ImU32.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImU32.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImU32.tp_dict, __pyx_vtabptr_4core_ImVector_ImU32) < 0) __PYX_ERR(0, 6365, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImU32, (PyObject *)&__pyx_type_4core_ImVector_ImU32) < 0) __PYX_ERR(0, 6365, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImU32) < 0) __PYX_ERR(0, 6365, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImU32 = &__pyx_type_4core_ImVector_ImU32;
  __pyx_vtabptr_4core_ImGuiKeyData = &__pyx_vtable_4core_ImGuiKeyData;
  __pyx_vtable_4core_ImGuiKeyData.from_ptr = (struct __pyx_obj_4core_ImGuiKeyData *(*)(ImGuiKeyData *))__pyx_f_4core_12ImGuiKeyData_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiKeyData) < 0) __PYX_ERR(0, 6421, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiKeyData.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiKeyData.tp_dictoffset && __pyx_type_4core_ImGuiKeyData.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiKeyData.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiKeyData.tp_dict, __pyx_vtabptr_4core_ImGuiKeyData) < 0) __PYX_ERR(0, 6421, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiKeyData, (PyObject *)&__pyx_type_4core_ImGuiKeyData) < 0) __PYX_ERR(0, 6421, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiKeyData) < 0) __PYX_ERR(0, 6421, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiKeyData = &__pyx_type_4core_ImGuiKeyData;
  __pyx_vtabptr_4core_ImGuiListClipper = &__pyx_vtable_4core_ImGuiListClipper;
  __pyx_vtable_4core_ImGuiListClipper.from_ptr = (struct __pyx_obj_4core_ImGuiListClipper *(*)(ImGuiListClipper *))__pyx_f_4core_16ImGuiListClipper_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiListClipper) < 0) __PYX_ERR(0, 6490, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiListClipper.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiListClipper.tp_dictoffset && __pyx_type_4core_ImGuiListClipper.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiListClipper.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiListClipper.tp_dict, __pyx_vtabptr_4core_ImGuiListClipper) < 0) __PYX_ERR(0, 6490, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiListClipper, (PyObject *)&__pyx_type_4core_ImGuiListClipper) < 0) __PYX_ERR(0, 6490, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiListClipper) < 0) __PYX_ERR(0, 6490, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiListClipper = &__pyx_type_4core_ImGuiListClipper;
  __pyx_vtabptr_4core_ImGuiOnceUponAFrame = &__pyx_vtable_4core_ImGuiOnceUponAFrame;
  __pyx_vtable_4core_ImGuiOnceUponAFrame.from_ptr = (struct __pyx_obj_4core_ImGuiOnceUponAFrame *(*)(ImGuiOnceUponAFrame *))__pyx_f_4core_19ImGuiOnceUponAFrame_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiOnceUponAFrame) < 0) __PYX_ERR(0, 6665, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiOnceUponAFrame.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiOnceUponAFrame.tp_dictoffset && __pyx_type_4core_ImGuiOnceUponAFrame.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiOnceUponAFrame.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiOnceUponAFrame.tp_dict, __pyx_vtabptr_4core_ImGuiOnceUponAFrame) < 0) __PYX_ERR(0, 6665, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiOnceUponAFrame, (PyObject *)&__pyx_type_4core_ImGuiOnceUponAFrame) < 0) __PYX_ERR(0, 6665, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiOnceUponAFrame) < 0) __PYX_ERR(0, 6665, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiOnceUponAFrame = &__pyx_type_4core_ImGuiOnceUponAFrame;
  __pyx_vtabptr_4core_ImGuiPayload = &__pyx_vtable_4core_ImGuiPayload;
  __pyx_vtable_4core_ImGuiPayload.from_ptr = (struct __pyx_obj_4core_ImGuiPayload *(*)(ImGuiPayload *))__pyx_f_4core_12ImGuiPayload_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiPayload) < 0) __PYX_ERR(0, 6715, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiPayload.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiPayload.tp_dictoffset && __pyx_type_4core_ImGuiPayload.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiPayload.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiPayload.tp_dict, __pyx_vtabptr_4core_ImGuiPayload) < 0) __PYX_ERR(0, 6715, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiPayload, (PyObject *)&__pyx_type_4core_ImGuiPayload) < 0) __PYX_ERR(0, 6715, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiPayload) < 0) __PYX_ERR(0, 6715, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiPayload = &__pyx_type_4core_ImGuiPayload;
  __pyx_vtabptr_4core_ImVector_ImGuiPlatformMonitor = &__pyx_vtable_4core_ImVector_ImGuiPlatformMonitor;
  __pyx_vtable_4core_ImVector_ImGuiPlatformMonitor.from_ptr = (struct __pyx_obj_4core_ImVector_ImGuiPlatformMonitor *(*)(ImVector_ImGuiPlatformMonitor *))__pyx_f_4core_29ImVector_ImGuiPlatformMonitor_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 6891, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImGuiPlatformMonitor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImGuiPlatformMonitor.tp_dictoffset && __pyx_type_4core_ImVector_ImGuiPlatformMonitor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImGuiPlatformMonitor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImGuiPlatformMonitor.tp_dict, __pyx_vtabptr_4core_ImVector_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 6891, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImGuiPlatformMonitor, (PyObject *)&__pyx_type_4core_ImVector_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 6891, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 6891, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImGuiPlatformMonitor = &__pyx_type_4core_ImVector_ImGuiPlatformMonitor;
  __pyx_vtabptr_4core_ImVector_ImGuiViewportPtr = &__pyx_vtable_4core_ImVector_ImGuiViewportPtr;
  __pyx_vtable_4core_ImVector_ImGuiViewportPtr.from_ptr = (struct __pyx_obj_4core_ImVector_ImGuiViewportPtr *(*)(ImVector_ImGuiViewportPtr *))__pyx_f_4core_25ImVector_ImGuiViewportPtr_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImGuiViewportPtr) < 0) __PYX_ERR(0, 6947, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImGuiViewportPtr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImGuiViewportPtr.tp_dictoffset && __pyx_type_4core_ImVector_ImGuiViewportPtr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImGuiViewportPtr.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImGuiViewportPtr.tp_dict, __pyx_vtabptr_4core_ImVector_ImGuiViewportPtr) < 0) __PYX_ERR(0, 6947, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImGuiViewportPtr, (PyObject *)&__pyx_type_4core_ImVector_ImGuiViewportPtr) < 0) __PYX_ERR(0, 6947, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImGuiViewportPtr) < 0) __PYX_ERR(0, 6947, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImGuiViewportPtr = &__pyx_type_4core_ImVector_ImGuiViewportPtr;
  __pyx_vtabptr_4core_ImVector_ImGuiStoragePair = &__pyx_vtable_4core_ImVector_ImGuiStoragePair;
  __pyx_vtable_4core_ImVector_ImGuiStoragePair.from_ptr = (struct __pyx_obj_4core_ImVector_ImGuiStoragePair *(*)(ImVector_ImGuiStoragePair *))__pyx_f_4core_25ImVector_ImGuiStoragePair_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImGuiStoragePair) < 0) __PYX_ERR(0, 7003, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImGuiStoragePair.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImGuiStoragePair.tp_dictoffset && __pyx_type_4core_ImVector_ImGuiStoragePair.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImGuiStoragePair.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImGuiStoragePair.tp_dict, __pyx_vtabptr_4core_ImVector_ImGuiStoragePair) < 0) __PYX_ERR(0, 7003, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImGuiStoragePair, (PyObject *)&__pyx_type_4core_ImVector_ImGuiStoragePair) < 0) __PYX_ERR(0, 7003, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImGuiStoragePair) < 0) __PYX_ERR(0, 7003, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImGuiStoragePair = &__pyx_type_4core_ImVector_ImGuiStoragePair;
  __pyx_vtabptr_4core_ImGuiStoragePair = &__pyx_vtable_4core_ImGuiStoragePair;
  __pyx_vtable_4core_ImGuiStoragePair.from_ptr = (struct __pyx_obj_4core_ImGuiStoragePair *(*)(ImGuiStoragePair *))__pyx_f_4core_16ImGuiStoragePair_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiStoragePair) < 0) __PYX_ERR(0, 7059, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiStoragePair.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiStoragePair.tp_dictoffset && __pyx_type_4core_ImGuiStoragePair.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiStoragePair.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiStoragePair.tp_dict, __pyx_vtabptr_4core_ImGuiStoragePair) < 0) __PYX_ERR(0, 7059, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiStoragePair, (PyObject *)&__pyx_type_4core_ImGuiStoragePair) < 0) __PYX_ERR(0, 7059, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiStoragePair) < 0) __PYX_ERR(0, 7059, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiStoragePair = &__pyx_type_4core_ImGuiStoragePair;
  __pyx_vtabptr_4core_ImGuiTableColumnSortSpecs = &__pyx_vtable_4core_ImGuiTableColumnSortSpecs;
  __pyx_vtable_4core_ImGuiTableColumnSortSpecs.from_ptr = (struct __pyx_obj_4core_ImGuiTableColumnSortSpecs *(*)(ImGuiTableColumnSortSpecs *))__pyx_f_4core_25ImGuiTableColumnSortSpecs_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiTableColumnSortSpecs) < 0) __PYX_ERR(0, 7172, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiTableColumnSortSpecs.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiTableColumnSortSpecs.tp_dictoffset && __pyx_type_4core_ImGuiTableColumnSortSpecs.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiTableColumnSortSpecs.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiTableColumnSortSpecs.tp_dict, __pyx_vtabptr_4core_ImGuiTableColumnSortSpecs) < 0) __PYX_ERR(0, 7172, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiTableColumnSortSpecs, (PyObject *)&__pyx_type_4core_ImGuiTableColumnSortSpecs) < 0) __PYX_ERR(0, 7172, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiTableColumnSortSpecs) < 0) __PYX_ERR(0, 7172, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiTableColumnSortSpecs = &__pyx_type_4core_ImGuiTableColumnSortSpecs;
  __pyx_vtabptr_4core_ImGuiTableSortSpecs = &__pyx_vtable_4core_ImGuiTableSortSpecs;
  __pyx_vtable_4core_ImGuiTableSortSpecs.from_ptr = (struct __pyx_obj_4core_ImGuiTableSortSpecs *(*)(ImGuiTableSortSpecs *))__pyx_f_4core_19ImGuiTableSortSpecs_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiTableSortSpecs) < 0) __PYX_ERR(0, 7261, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiTableSortSpecs.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiTableSortSpecs.tp_dictoffset && __pyx_type_4core_ImGuiTableSortSpecs.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiTableSortSpecs.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiTableSortSpecs.tp_dict, __pyx_vtabptr_4core_ImGuiTableSortSpecs) < 0) __PYX_ERR(0, 7261, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiTableSortSpecs, (PyObject *)&__pyx_type_4core_ImGuiTableSortSpecs) < 0) __PYX_ERR(0, 7261, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiTableSortSpecs) < 0) __PYX_ERR(0, 7261, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiTableSortSpecs = &__pyx_type_4core_ImGuiTableSortSpecs;
  __pyx_vtabptr_4core_ImVector_char = &__pyx_vtable_4core_ImVector_char;
  __pyx_vtable_4core_ImVector_char.from_ptr = (struct __pyx_obj_4core_ImVector_char *(*)(ImVector_char *))__pyx_f_4core_13ImVector_char_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_char) < 0) __PYX_ERR(0, 7337, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_char.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_char.tp_dictoffset && __pyx_type_4core_ImVector_char.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_char.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_char.tp_dict, __pyx_vtabptr_4core_ImVector_char) < 0) __PYX_ERR(0, 7337, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_char, (PyObject *)&__pyx_type_4core_ImVector_char) < 0) __PYX_ERR(0, 7337, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_char) < 0) __PYX_ERR(0, 7337, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_char = &__pyx_type_4core_ImVector_char;
  __pyx_vtabptr_4core_ImVector_ImGuiTextRange = &__pyx_vtable_4core_ImVector_ImGuiTextRange;
  __pyx_vtable_4core_ImVector_ImGuiTextRange.from_ptr = (struct __pyx_obj_4core_ImVector_ImGuiTextRange *(*)(ImVector_ImGuiTextRange *))__pyx_f_4core_23ImVector_ImGuiTextRange_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVector_ImGuiTextRange) < 0) __PYX_ERR(0, 7393, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVector_ImGuiTextRange.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVector_ImGuiTextRange.tp_dictoffset && __pyx_type_4core_ImVector_ImGuiTextRange.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVector_ImGuiTextRange.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVector_ImGuiTextRange.tp_dict, __pyx_vtabptr_4core_ImVector_ImGuiTextRange) < 0) __PYX_ERR(0, 7393, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVector_ImGuiTextRange, (PyObject *)&__pyx_type_4core_ImVector_ImGuiTextRange) < 0) __PYX_ERR(0, 7393, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVector_ImGuiTextRange) < 0) __PYX_ERR(0, 7393, __pyx_L1_error)
  __pyx_ptype_4core_ImVector_ImGuiTextRange = &__pyx_type_4core_ImVector_ImGuiTextRange;
  __pyx_vtabptr_4core_ImGuiTextRange = &__pyx_vtable_4core_ImGuiTextRange;
  __pyx_vtable_4core_ImGuiTextRange.from_ptr = (struct __pyx_obj_4core_ImGuiTextRange *(*)(ImGuiTextRange *))__pyx_f_4core_14ImGuiTextRange_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiTextRange) < 0) __PYX_ERR(0, 7449, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiTextRange.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiTextRange.tp_dictoffset && __pyx_type_4core_ImGuiTextRange.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiTextRange.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiTextRange.tp_dict, __pyx_vtabptr_4core_ImGuiTextRange) < 0) __PYX_ERR(0, 7449, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiTextRange, (PyObject *)&__pyx_type_4core_ImGuiTextRange) < 0) __PYX_ERR(0, 7449, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiTextRange) < 0) __PYX_ERR(0, 7449, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiTextRange = &__pyx_type_4core_ImGuiTextRange;
  __pyx_vtabptr_4core_ImGuiWindowClass = &__pyx_vtable_4core_ImGuiWindowClass;
  __pyx_vtable_4core_ImGuiWindowClass.from_ptr = (struct __pyx_obj_4core_ImGuiWindowClass *(*)(ImGuiWindowClass *))__pyx_f_4core_16ImGuiWindowClass_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiWindowClass) < 0) __PYX_ERR(0, 7541, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiWindowClass.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiWindowClass.tp_dictoffset && __pyx_type_4core_ImGuiWindowClass.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiWindowClass.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiWindowClass.tp_dict, __pyx_vtabptr_4core_ImGuiWindowClass) < 0) __PYX_ERR(0, 7541, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiWindowClass, (PyObject *)&__pyx_type_4core_ImGuiWindowClass) < 0) __PYX_ERR(0, 7541, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiWindowClass) < 0) __PYX_ERR(0, 7541, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiWindowClass = &__pyx_type_4core_ImGuiWindowClass;
  __pyx_vtabptr_4core_ImVec2 = &__pyx_vtable_4core_ImVec2;
  __pyx_vtable_4core_ImVec2.from_ptr = (struct __pyx_obj_4core_ImVec2 *(*)(ImVec2 *))__pyx_f_4core_6ImVec2_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVec2) < 0) __PYX_ERR(0, 7682, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVec2.tp_dictoffset && __pyx_type_4core_ImVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVec2.tp_dict, __pyx_vtabptr_4core_ImVec2) < 0) __PYX_ERR(0, 7682, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVec2, (PyObject *)&__pyx_type_4core_ImVec2) < 0) __PYX_ERR(0, 7682, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVec2) < 0) __PYX_ERR(0, 7682, __pyx_L1_error)
  __pyx_ptype_4core_ImVec2 = &__pyx_type_4core_ImVec2;
  __pyx_vtabptr_4core_ImVec4 = &__pyx_vtable_4core_ImVec4;
  __pyx_vtable_4core_ImVec4.from_ptr = (struct __pyx_obj_4core_ImVec4 *(*)(ImVec4 *))__pyx_f_4core_6ImVec4_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImVec4) < 0) __PYX_ERR(0, 7757, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImVec4.tp_dictoffset && __pyx_type_4core_ImVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImVec4.tp_dict, __pyx_vtabptr_4core_ImVec4) < 0) __PYX_ERR(0, 7757, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImVec4, (PyObject *)&__pyx_type_4core_ImVec4) < 0) __PYX_ERR(0, 7757, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImVec4) < 0) __PYX_ERR(0, 7757, __pyx_L1_error)
  __pyx_ptype_4core_ImVec4 = &__pyx_type_4core_ImVec4;
  __pyx_vtabptr_4core_ImColor = &__pyx_vtable_4core_ImColor;
  __pyx_vtable_4core_ImColor.from_ptr = (struct __pyx_obj_4core_ImColor *(*)(ImColor *))__pyx_f_4core_7ImColor_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImColor) < 0) __PYX_ERR(0, 7858, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImColor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImColor.tp_dictoffset && __pyx_type_4core_ImColor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImColor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImColor.tp_dict, __pyx_vtabptr_4core_ImColor) < 0) __PYX_ERR(0, 7858, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImColor, (PyObject *)&__pyx_type_4core_ImColor) < 0) __PYX_ERR(0, 7858, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImColor) < 0) __PYX_ERR(0, 7858, __pyx_L1_error)
  __pyx_ptype_4core_ImColor = &__pyx_type_4core_ImColor;
  __pyx_vtabptr_4core_ImDrawChannel = &__pyx_vtable_4core_ImDrawChannel;
  __pyx_vtable_4core_ImDrawChannel.from_ptr = (struct __pyx_obj_4core_ImDrawChannel *(*)(ImDrawChannel *))__pyx_f_4core_13ImDrawChannel_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawChannel) < 0) __PYX_ERR(0, 7972, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawChannel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawChannel.tp_dictoffset && __pyx_type_4core_ImDrawChannel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawChannel.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawChannel.tp_dict, __pyx_vtabptr_4core_ImDrawChannel) < 0) __PYX_ERR(0, 7972, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawChannel, (PyObject *)&__pyx_type_4core_ImDrawChannel) < 0) __PYX_ERR(0, 7972, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawChannel) < 0) __PYX_ERR(0, 7972, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawChannel = &__pyx_type_4core_ImDrawChannel;
  __pyx_vtabptr_4core_ImDrawCmd = &__pyx_vtable_4core_ImDrawCmd;
  __pyx_vtable_4core_ImDrawCmd.from_ptr = (struct __pyx_obj_4core_ImDrawCmd *(*)(ImDrawCmd *))__pyx_f_4core_9ImDrawCmd_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawCmd) < 0) __PYX_ERR(0, 8015, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawCmd.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawCmd.tp_dictoffset && __pyx_type_4core_ImDrawCmd.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawCmd.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawCmd.tp_dict, __pyx_vtabptr_4core_ImDrawCmd) < 0) __PYX_ERR(0, 8015, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawCmd, (PyObject *)&__pyx_type_4core_ImDrawCmd) < 0) __PYX_ERR(0, 8015, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawCmd) < 0) __PYX_ERR(0, 8015, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawCmd = &__pyx_type_4core_ImDrawCmd;
  __pyx_vtabptr_4core_ImDrawCmdHeader = &__pyx_vtable_4core_ImDrawCmdHeader;
  __pyx_vtable_4core_ImDrawCmdHeader.from_ptr = (struct __pyx_obj_4core_ImDrawCmdHeader *(*)(ImDrawCmdHeader *))__pyx_f_4core_15ImDrawCmdHeader_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawCmdHeader) < 0) __PYX_ERR(0, 8144, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawCmdHeader.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawCmdHeader.tp_dictoffset && __pyx_type_4core_ImDrawCmdHeader.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawCmdHeader.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawCmdHeader.tp_dict, __pyx_vtabptr_4core_ImDrawCmdHeader) < 0) __PYX_ERR(0, 8144, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawCmdHeader, (PyObject *)&__pyx_type_4core_ImDrawCmdHeader) < 0) __PYX_ERR(0, 8144, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawCmdHeader) < 0) __PYX_ERR(0, 8144, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawCmdHeader = &__pyx_type_4core_ImDrawCmdHeader;
  __pyx_vtabptr_4core_ImDrawData = &__pyx_vtable_4core_ImDrawData;
  __pyx_vtable_4core_ImDrawData.from_ptr = (struct __pyx_obj_4core_ImDrawData *(*)(ImDrawData *))__pyx_f_4core_10ImDrawData_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawData) < 0) __PYX_ERR(0, 8200, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawData.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawData.tp_dictoffset && __pyx_type_4core_ImDrawData.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawData.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawData.tp_dict, __pyx_vtabptr_4core_ImDrawData) < 0) __PYX_ERR(0, 8200, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawData, (PyObject *)&__pyx_type_4core_ImDrawData) < 0) __PYX_ERR(0, 8200, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawData) < 0) __PYX_ERR(0, 8200, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawData = &__pyx_type_4core_ImDrawData;
  __pyx_vtabptr_4core_ImDrawListSplitter = &__pyx_vtable_4core_ImDrawListSplitter;
  __pyx_vtable_4core_ImDrawListSplitter.from_ptr = (struct __pyx_obj_4core_ImDrawListSplitter *(*)(ImDrawListSplitter *))__pyx_f_4core_18ImDrawListSplitter_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawListSplitter) < 0) __PYX_ERR(0, 8395, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawListSplitter.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawListSplitter.tp_dictoffset && __pyx_type_4core_ImDrawListSplitter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawListSplitter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawListSplitter.tp_dict, __pyx_vtabptr_4core_ImDrawListSplitter) < 0) __PYX_ERR(0, 8395, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawListSplitter, (PyObject *)&__pyx_type_4core_ImDrawListSplitter) < 0) __PYX_ERR(0, 8395, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawListSplitter) < 0) __PYX_ERR(0, 8395, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawListSplitter = &__pyx_type_4core_ImDrawListSplitter;
  __pyx_vtabptr_4core_ImDrawVert = &__pyx_vtable_4core_ImDrawVert;
  __pyx_vtable_4core_ImDrawVert.from_ptr = (struct __pyx_obj_4core_ImDrawVert *(*)(ImDrawVert *))__pyx_f_4core_10ImDrawVert_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawVert) < 0) __PYX_ERR(0, 8514, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawVert.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawVert.tp_dictoffset && __pyx_type_4core_ImDrawVert.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawVert.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawVert.tp_dict, __pyx_vtabptr_4core_ImDrawVert) < 0) __PYX_ERR(0, 8514, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawVert, (PyObject *)&__pyx_type_4core_ImDrawVert) < 0) __PYX_ERR(0, 8514, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawVert) < 0) __PYX_ERR(0, 8514, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawVert = &__pyx_type_4core_ImDrawVert;
  __pyx_vtabptr_4core_ImFont = &__pyx_vtable_4core_ImFont;
  __pyx_vtable_4core_ImFont.from_ptr = (struct __pyx_obj_4core_ImFont *(*)(ImFont *))__pyx_f_4core_6ImFont_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImFont) < 0) __PYX_ERR(0, 8570, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImFont.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImFont.tp_dictoffset && __pyx_type_4core_ImFont.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImFont.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImFont.tp_dict, __pyx_vtabptr_4core_ImFont) < 0) __PYX_ERR(0, 8570, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImFont, (PyObject *)&__pyx_type_4core_ImFont) < 0) __PYX_ERR(0, 8570, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImFont) < 0) __PYX_ERR(0, 8570, __pyx_L1_error)
  __pyx_ptype_4core_ImFont = &__pyx_type_4core_ImFont;
  __pyx_vtabptr_4core_ImFontAtlas = &__pyx_vtable_4core_ImFontAtlas;
  __pyx_vtable_4core_ImFontAtlas.from_ptr = (struct __pyx_obj_4core_ImFontAtlas *(*)(ImFontAtlas *))__pyx_f_4core_11ImFontAtlas_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImFontAtlas) < 0) __PYX_ERR(0, 9049, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImFontAtlas.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImFontAtlas.tp_dictoffset && __pyx_type_4core_ImFontAtlas.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImFontAtlas.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImFontAtlas.tp_dict, __pyx_vtabptr_4core_ImFontAtlas) < 0) __PYX_ERR(0, 9049, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImFontAtlas, (PyObject *)&__pyx_type_4core_ImFontAtlas) < 0) __PYX_ERR(0, 9049, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImFontAtlas) < 0) __PYX_ERR(0, 9049, __pyx_L1_error)
  __pyx_ptype_4core_ImFontAtlas = &__pyx_type_4core_ImFontAtlas;
  __pyx_vtabptr_4core_ImFontAtlasCustomRect = &__pyx_vtable_4core_ImFontAtlasCustomRect;
  __pyx_vtable_4core_ImFontAtlasCustomRect.from_ptr = (struct __pyx_obj_4core_ImFontAtlasCustomRect *(*)(ImFontAtlasCustomRect *))__pyx_f_4core_21ImFontAtlasCustomRect_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 9739, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImFontAtlasCustomRect.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImFontAtlasCustomRect.tp_dictoffset && __pyx_type_4core_ImFontAtlasCustomRect.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImFontAtlasCustomRect.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImFontAtlasCustomRect.tp_dict, __pyx_vtabptr_4core_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 9739, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImFontAtlasCustomRect, (PyObject *)&__pyx_type_4core_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 9739, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImFontAtlasCustomRect) < 0) __PYX_ERR(0, 9739, __pyx_L1_error)
  __pyx_ptype_4core_ImFontAtlasCustomRect = &__pyx_type_4core_ImFontAtlasCustomRect;
  __pyx_vtabptr_4core_ImFontConfig = &__pyx_vtable_4core_ImFontConfig;
  __pyx_vtable_4core_ImFontConfig.from_ptr = (struct __pyx_obj_4core_ImFontConfig *(*)(ImFontConfig *))__pyx_f_4core_12ImFontConfig_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImFontConfig) < 0) __PYX_ERR(0, 9889, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImFontConfig.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImFontConfig.tp_dictoffset && __pyx_type_4core_ImFontConfig.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImFontConfig.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImFontConfig.tp_dict, __pyx_vtabptr_4core_ImFontConfig) < 0) __PYX_ERR(0, 9889, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImFontConfig, (PyObject *)&__pyx_type_4core_ImFontConfig) < 0) __PYX_ERR(0, 9889, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImFontConfig) < 0) __PYX_ERR(0, 9889, __pyx_L1_error)
  __pyx_ptype_4core_ImFontConfig = &__pyx_type_4core_ImFontConfig;
  __pyx_vtabptr_4core_ImFontGlyphRangesBuilder = &__pyx_vtable_4core_ImFontGlyphRangesBuilder;
  __pyx_vtable_4core_ImFontGlyphRangesBuilder.from_ptr = (struct __pyx_obj_4core_ImFontGlyphRangesBuilder *(*)(ImFontGlyphRangesBuilder *))__pyx_f_4core_24ImFontGlyphRangesBuilder_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImFontGlyphRangesBuilder) < 0) __PYX_ERR(0, 10173, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImFontGlyphRangesBuilder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImFontGlyphRangesBuilder.tp_dictoffset && __pyx_type_4core_ImFontGlyphRangesBuilder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImFontGlyphRangesBuilder.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImFontGlyphRangesBuilder.tp_dict, __pyx_vtabptr_4core_ImFontGlyphRangesBuilder) < 0) __PYX_ERR(0, 10173, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImFontGlyphRangesBuilder, (PyObject *)&__pyx_type_4core_ImFontGlyphRangesBuilder) < 0) __PYX_ERR(0, 10173, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImFontGlyphRangesBuilder) < 0) __PYX_ERR(0, 10173, __pyx_L1_error)
  __pyx_ptype_4core_ImFontGlyphRangesBuilder = &__pyx_type_4core_ImFontGlyphRangesBuilder;
  __pyx_vtabptr_4core_ImGuiIO = &__pyx_vtable_4core_ImGuiIO;
  __pyx_vtable_4core_ImGuiIO.from_ptr = (struct __pyx_obj_4core_ImGuiIO *(*)(ImGuiIO *))__pyx_f_4core_7ImGuiIO_from_ptr;
  __pyx_vtable_4core_ImGuiIO._get_clipboard_text = (char const *(*)(void *))__pyx_f_4core_7ImGuiIO__get_clipboard_text;
  __pyx_vtable_4core_ImGuiIO._set_clipboard_text = (void (*)(void *, char const *))__pyx_f_4core_7ImGuiIO__set_clipboard_text;
  if (PyType_Ready(&__pyx_type_4core_ImGuiIO) < 0) __PYX_ERR(0, 10300, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiIO.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiIO.tp_dictoffset && __pyx_type_4core_ImGuiIO.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiIO.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiIO.tp_dict, __pyx_vtabptr_4core_ImGuiIO) < 0) __PYX_ERR(0, 10300, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiIO, (PyObject *)&__pyx_type_4core_ImGuiIO) < 0) __PYX_ERR(0, 10300, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiIO) < 0) __PYX_ERR(0, 10300, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiIO = &__pyx_type_4core_ImGuiIO;
  __pyx_vtabptr_4core_ImGuiPlatformIO = &__pyx_vtable_4core_ImGuiPlatformIO;
  __pyx_vtable_4core_ImGuiPlatformIO.from_ptr = (struct __pyx_obj_4core_ImGuiPlatformIO *(*)(ImGuiPlatformIO *))__pyx_f_4core_15ImGuiPlatformIO_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiPlatformIO) < 0) __PYX_ERR(0, 11845, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiPlatformIO.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiPlatformIO.tp_dictoffset && __pyx_type_4core_ImGuiPlatformIO.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiPlatformIO.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiPlatformIO.tp_dict, __pyx_vtabptr_4core_ImGuiPlatformIO) < 0) __PYX_ERR(0, 11845, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiPlatformIO, (PyObject *)&__pyx_type_4core_ImGuiPlatformIO) < 0) __PYX_ERR(0, 11845, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiPlatformIO) < 0) __PYX_ERR(0, 11845, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiPlatformIO = &__pyx_type_4core_ImGuiPlatformIO;
  __pyx_vtabptr_4core_ImGuiPlatformImeData = &__pyx_vtable_4core_ImGuiPlatformImeData;
  __pyx_vtable_4core_ImGuiPlatformImeData.from_ptr = (struct __pyx_obj_4core_ImGuiPlatformImeData *(*)(ImGuiPlatformImeData *))__pyx_f_4core_20ImGuiPlatformImeData_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiPlatformImeData) < 0) __PYX_ERR(0, 12210, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiPlatformImeData.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiPlatformImeData.tp_dictoffset && __pyx_type_4core_ImGuiPlatformImeData.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiPlatformImeData.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiPlatformImeData.tp_dict, __pyx_vtabptr_4core_ImGuiPlatformImeData) < 0) __PYX_ERR(0, 12210, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiPlatformImeData, (PyObject *)&__pyx_type_4core_ImGuiPlatformImeData) < 0) __PYX_ERR(0, 12210, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiPlatformImeData) < 0) __PYX_ERR(0, 12210, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiPlatformImeData = &__pyx_type_4core_ImGuiPlatformImeData;
  __pyx_vtabptr_4core_ImGuiPlatformMonitor = &__pyx_vtable_4core_ImGuiPlatformMonitor;
  __pyx_vtable_4core_ImGuiPlatformMonitor.from_ptr = (struct __pyx_obj_4core_ImGuiPlatformMonitor *(*)(ImGuiPlatformMonitor *))__pyx_f_4core_20ImGuiPlatformMonitor_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 12286, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiPlatformMonitor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiPlatformMonitor.tp_dictoffset && __pyx_type_4core_ImGuiPlatformMonitor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiPlatformMonitor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiPlatformMonitor.tp_dict, __pyx_vtabptr_4core_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 12286, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiPlatformMonitor, (PyObject *)&__pyx_type_4core_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 12286, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiPlatformMonitor) < 0) __PYX_ERR(0, 12286, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiPlatformMonitor = &__pyx_type_4core_ImGuiPlatformMonitor;
  __pyx_vtabptr_4core_ImGuiStorage = &__pyx_vtable_4core_ImGuiStorage;
  __pyx_vtable_4core_ImGuiStorage.from_ptr = (struct __pyx_obj_4core_ImGuiStorage *(*)(ImGuiStorage *))__pyx_f_4core_12ImGuiStorage_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiStorage) < 0) __PYX_ERR(0, 12388, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiStorage.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiStorage.tp_dictoffset && __pyx_type_4core_ImGuiStorage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiStorage.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiStorage.tp_dict, __pyx_vtabptr_4core_ImGuiStorage) < 0) __PYX_ERR(0, 12388, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiStorage, (PyObject *)&__pyx_type_4core_ImGuiStorage) < 0) __PYX_ERR(0, 12388, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiStorage) < 0) __PYX_ERR(0, 12388, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiStorage = &__pyx_type_4core_ImGuiStorage;
  __pyx_vtabptr_4core_ImGuiStyle = &__pyx_vtable_4core_ImGuiStyle;
  __pyx_vtable_4core_ImGuiStyle.from_ptr = (struct __pyx_obj_4core_ImGuiStyle *(*)(ImGuiStyle *))__pyx_f_4core_10ImGuiStyle_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiStyle) < 0) __PYX_ERR(0, 12549, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiStyle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiStyle.tp_dictoffset && __pyx_type_4core_ImGuiStyle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiStyle.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiStyle.tp_dict, __pyx_vtabptr_4core_ImGuiStyle) < 0) __PYX_ERR(0, 12549, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiStyle, (PyObject *)&__pyx_type_4core_ImGuiStyle) < 0) __PYX_ERR(0, 12549, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiStyle) < 0) __PYX_ERR(0, 12549, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiStyle = &__pyx_type_4core_ImGuiStyle;
  __pyx_vtabptr_4core_ImGuiTextBuffer = &__pyx_vtable_4core_ImGuiTextBuffer;
  __pyx_vtable_4core_ImGuiTextBuffer.from_ptr = (struct __pyx_obj_4core_ImGuiTextBuffer *(*)(ImGuiTextBuffer *))__pyx_f_4core_15ImGuiTextBuffer_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiTextBuffer) < 0) __PYX_ERR(0, 13166, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiTextBuffer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiTextBuffer.tp_dictoffset && __pyx_type_4core_ImGuiTextBuffer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiTextBuffer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiTextBuffer.tp_dict, __pyx_vtabptr_4core_ImGuiTextBuffer) < 0) __PYX_ERR(0, 13166, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiTextBuffer, (PyObject *)&__pyx_type_4core_ImGuiTextBuffer) < 0) __PYX_ERR(0, 13166, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiTextBuffer) < 0) __PYX_ERR(0, 13166, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiTextBuffer = &__pyx_type_4core_ImGuiTextBuffer;
  __pyx_vtabptr_4core_ImGuiTextFilter = &__pyx_vtable_4core_ImGuiTextFilter;
  __pyx_vtable_4core_ImGuiTextFilter.from_ptr = (struct __pyx_obj_4core_ImGuiTextFilter *(*)(ImGuiTextFilter *))__pyx_f_4core_15ImGuiTextFilter_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiTextFilter) < 0) __PYX_ERR(0, 13304, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiTextFilter.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiTextFilter.tp_dictoffset && __pyx_type_4core_ImGuiTextFilter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiTextFilter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiTextFilter.tp_dict, __pyx_vtabptr_4core_ImGuiTextFilter) < 0) __PYX_ERR(0, 13304, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiTextFilter, (PyObject *)&__pyx_type_4core_ImGuiTextFilter) < 0) __PYX_ERR(0, 13304, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiTextFilter) < 0) __PYX_ERR(0, 13304, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiTextFilter = &__pyx_type_4core_ImGuiTextFilter;
  __pyx_vtabptr_4core_ImGuiViewport = &__pyx_vtable_4core_ImGuiViewport;
  __pyx_vtable_4core_ImGuiViewport.from_ptr = (struct __pyx_obj_4core_ImGuiViewport *(*)(ImGuiViewport *))__pyx_f_4core_13ImGuiViewport_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiViewport) < 0) __PYX_ERR(0, 13426, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiViewport.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiViewport.tp_dictoffset && __pyx_type_4core_ImGuiViewport.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiViewport.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiViewport.tp_dict, __pyx_vtabptr_4core_ImGuiViewport) < 0) __PYX_ERR(0, 13426, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiViewport, (PyObject *)&__pyx_type_4core_ImGuiViewport) < 0) __PYX_ERR(0, 13426, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiViewport) < 0) __PYX_ERR(0, 13426, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiViewport = &__pyx_type_4core_ImGuiViewport;
  __pyx_vtabptr_4core_ImDrawList = &__pyx_vtable_4core_ImDrawList;
  __pyx_vtable_4core_ImDrawList.from_ptr = (struct __pyx_obj_4core_ImDrawList *(*)(ImDrawList *))__pyx_f_4core_10ImDrawList_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawList) < 0) __PYX_ERR(0, 13700, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawList.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawList.tp_dictoffset && __pyx_type_4core_ImDrawList.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawList.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawList.tp_dict, __pyx_vtabptr_4core_ImDrawList) < 0) __PYX_ERR(0, 13700, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawList, (PyObject *)&__pyx_type_4core_ImDrawList) < 0) __PYX_ERR(0, 13700, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawList) < 0) __PYX_ERR(0, 13700, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawList = &__pyx_type_4core_ImDrawList;
  __pyx_vtabptr_4core_ImDrawListSharedData = &__pyx_vtable_4core_ImDrawListSharedData;
  __pyx_vtable_4core_ImDrawListSharedData.from_ptr = (struct __pyx_obj_4core_ImDrawListSharedData *(*)(ImDrawListSharedData *))__pyx_f_4core_20ImDrawListSharedData_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImDrawListSharedData) < 0) __PYX_ERR(0, 14630, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImDrawListSharedData.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImDrawListSharedData.tp_dictoffset && __pyx_type_4core_ImDrawListSharedData.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImDrawListSharedData.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImDrawListSharedData.tp_dict, __pyx_vtabptr_4core_ImDrawListSharedData) < 0) __PYX_ERR(0, 14630, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImDrawListSharedData, (PyObject *)&__pyx_type_4core_ImDrawListSharedData) < 0) __PYX_ERR(0, 14630, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImDrawListSharedData) < 0) __PYX_ERR(0, 14630, __pyx_L1_error)
  __pyx_ptype_4core_ImDrawListSharedData = &__pyx_type_4core_ImDrawListSharedData;
  __pyx_vtabptr_4core_ImFontBuilderIO = &__pyx_vtable_4core_ImFontBuilderIO;
  __pyx_vtable_4core_ImFontBuilderIO.from_ptr = (struct __pyx_obj_4core_ImFontBuilderIO *(*)(ImFontBuilderIO *))__pyx_f_4core_15ImFontBuilderIO_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImFontBuilderIO) < 0) __PYX_ERR(0, 14647, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImFontBuilderIO.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImFontBuilderIO.tp_dictoffset && __pyx_type_4core_ImFontBuilderIO.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImFontBuilderIO.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImFontBuilderIO.tp_dict, __pyx_vtabptr_4core_ImFontBuilderIO) < 0) __PYX_ERR(0, 14647, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImFontBuilderIO, (PyObject *)&__pyx_type_4core_ImFontBuilderIO) < 0) __PYX_ERR(0, 14647, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImFontBuilderIO) < 0) __PYX_ERR(0, 14647, __pyx_L1_error)
  __pyx_ptype_4core_ImFontBuilderIO = &__pyx_type_4core_ImFontBuilderIO;
  __pyx_vtabptr_4core_ImGuiContext = &__pyx_vtable_4core_ImGuiContext;
  __pyx_vtable_4core_ImGuiContext.from_ptr = (struct __pyx_obj_4core_ImGuiContext *(*)(ImGuiContext *))__pyx_f_4core_12ImGuiContext_from_ptr;
  if (PyType_Ready(&__pyx_type_4core_ImGuiContext) < 0) __PYX_ERR(0, 14664, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_4core_ImGuiContext.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_4core_ImGuiContext.tp_dictoffset && __pyx_type_4core_ImGuiContext.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_4core_ImGuiContext.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_4core_ImGuiContext.tp_dict, __pyx_vtabptr_4core_ImGuiContext) < 0) __PYX_ERR(0, 14664, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImGuiContext, (PyObject *)&__pyx_type_4core_ImGuiContext) < 0) __PYX_ERR(0, 14664, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_4core_ImGuiContext) < 0) __PYX_ERR(0, 14664, __pyx_L1_error)
  __pyx_ptype_4core_ImGuiContext = &__pyx_type_4core_ImGuiContext;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 280, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 280, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcore(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcore(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_core(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_core(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_core(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyThread_type_lock __pyx_t_4[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'core' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_core(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("core", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_core) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "core")) {
      if (unlikely(PyDict_SetItemString(modules, "core", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "core.pyx":9
 * from cython.operator import dereference
 * 
 * from collections import namedtuple             # <<<<<<<<<<<<<<
 * from typing import Callable, Any
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_namedtuple);
  __Pyx_GIVEREF(__pyx_n_s_namedtuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_namedtuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_namedtuple, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":10
 * 
 * from collections import namedtuple
 * from typing import Callable, Any             # <<<<<<<<<<<<<<
 * 
 * cimport ccimgui
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Callable);
  __Pyx_GIVEREF(__pyx_n_s_Callable);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Callable);
  __Pyx_INCREF(__pyx_n_s_Any);
  __Pyx_GIVEREF(__pyx_n_s_Any);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Any);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Callable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Callable, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Any, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":21
 * 
 * # [Enums]
 * IM_DRAW_FLAGS_NONE = ccimgui.ImDrawFlags_None             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":22
 * # [Enums]
 * IM_DRAW_FLAGS_NONE = ccimgui.ImDrawFlags_None
 * IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_Closed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_CLOSED, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":23
 * IM_DRAW_FLAGS_NONE = ccimgui.ImDrawFlags_None
 * IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersTopLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":24
 * IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersTopRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_2, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":25
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersBottomLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":26
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersBottomRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_2, __pyx_t_1) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":27
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersNone); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":28
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
 * IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersTop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_TOP_3, __pyx_t_1) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":29
 * IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersBottom); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_BOTT_3, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":30
 * IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
 * IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":31
 * IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
 * IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
 * IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_RIGH, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":32
 * IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
 * IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
 * IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersAll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_ALL, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":33
 * IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
 * IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
 * IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_             # <<<<<<<<<<<<<<
 * IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_
 * IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersDefault_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_DEFA, __pyx_t_1) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":34
 * IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
 * IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
 * IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_             # <<<<<<<<<<<<<<
 * IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_RoundCornersMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_FLAGS_ROUND_CORNERS_MASK, __pyx_t_1) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":35
 * IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
 * IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_
 * IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None             # <<<<<<<<<<<<<<
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawListFlags_(ImDrawListFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_LIST_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":36
 * IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_
 * IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines             # <<<<<<<<<<<<<<
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawListFlags_(ImDrawListFlags_AntiAliasedLines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED, __pyx_t_1) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":37
 * IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex             # <<<<<<<<<<<<<<
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
 * IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawListFlags_(ImDrawListFlags_AntiAliasedLinesUseTex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_2, __pyx_t_1) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":38
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill             # <<<<<<<<<<<<<<
 * IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset
 * IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawListFlags_(ImDrawListFlags_AntiAliasedFill); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_LIST_FLAGS_ANTI_ALIASED_3, __pyx_t_1) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":39
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
 * IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset             # <<<<<<<<<<<<<<
 * IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
 * IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImDrawListFlags_(ImDrawListFlags_AllowVtxOffset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFF, __pyx_t_1) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":40
 * IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
 * IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset
 * IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None             # <<<<<<<<<<<<<<
 * IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
 * IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImFontAtlasFlags_(ImFontAtlasFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_FONT_ATLAS_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":41
 * IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset
 * IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
 * IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight             # <<<<<<<<<<<<<<
 * IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
 * IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImFontAtlasFlags_(ImFontAtlasFlags_NoPowerOfTwoHeight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_POWER_OF, __pyx_t_1) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":42
 * IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
 * IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
 * IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors             # <<<<<<<<<<<<<<
 * IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines
 * IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImFontAtlasFlags_(ImFontAtlasFlags_NoMouseCursors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_MOUSE_CUR, __pyx_t_1) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":43
 * IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
 * IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
 * IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None
 * IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImFontAtlasFlags_(ImFontAtlasFlags_NoBakedLines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IM_FONT_ATLAS_FLAGS_NO_BAKED_LIN, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":44
 * IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
 * IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines
 * IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":45
 * IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines
 * IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None
 * IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors
 * IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_HasGamepad); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_GAMEPAD, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":46
 * IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None
 * IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_HasMouseCursors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_MOUSE_CU, __pyx_t_1) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":47
 * IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors
 * IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset
 * IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_HasSetMousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_SET_MOUS, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":48
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors
 * IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_RendererHasVtxOffset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_RENDERER_HAS, __pyx_t_1) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":49
 * IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset
 * IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_PlatformHasViewports); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_PLATFORM_HAS, __pyx_t_1) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":50
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset
 * IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport             # <<<<<<<<<<<<<<
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports
 * IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_HasMouseHoveredViewport); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_HAS_MOUSE_HO, __pyx_t_1) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":51
 * IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports             # <<<<<<<<<<<<<<
 * IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_RendererHasViewports); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BACKEND_FLAGS_RENDERER_HAS_2, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":52
 * IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports
 * IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BUTTON_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":53
 * IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports
 * IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft             # <<<<<<<<<<<<<<
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_MouseButtonLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON, __pyx_t_1) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":54
 * IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight             # <<<<<<<<<<<<<<
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_MouseButtonRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_2, __pyx_t_1) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":55
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle             # <<<<<<<<<<<<<<
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_MouseButtonMiddle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_3, __pyx_t_1) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":56
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_             # <<<<<<<<<<<<<<
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_
 * IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_MouseButtonMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_4, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":57
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_             # <<<<<<<<<<<<<<
 * IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text
 * IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_MouseButtonDefault_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_5, __pyx_t_1) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":58
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_
 * IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text             # <<<<<<<<<<<<<<
 * IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled
 * IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TEXT, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":59
 * IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_
 * IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text
 * IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled             # <<<<<<<<<<<<<<
 * IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg
 * IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TextDisabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TEXT_DISABLED, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":60
 * IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text
 * IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled
 * IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg
 * IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_WindowBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_WINDOW_BG, __pyx_t_1) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":61
 * IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled
 * IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg
 * IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg
 * IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ChildBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_CHILD_BG, __pyx_t_1) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":62
 * IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg
 * IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg
 * IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border
 * IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PopupBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_POPUP_BG, __pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":63
 * IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg
 * IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg
 * IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border             # <<<<<<<<<<<<<<
 * IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow
 * IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Border); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_BORDER, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":64
 * IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg
 * IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border
 * IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow             # <<<<<<<<<<<<<<
 * IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg
 * IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_BorderShadow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_BORDER_SHADOW, __pyx_t_1) < 0) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":65
 * IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border
 * IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow
 * IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered
 * IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_FRAME_BG, __pyx_t_1) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":66
 * IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow
 * IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg
 * IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive
 * IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBgHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_FRAME_BG_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":67
 * IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg
 * IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered
 * IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg
 * IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_FrameBgActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_FRAME_BG_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":68
 * IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered
 * IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive
 * IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive
 * IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TITLE_BG, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":69
 * IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive
 * IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg
 * IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed
 * IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBgActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TITLE_BG_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":70
 * IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg
 * IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive
 * IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed             # <<<<<<<<<<<<<<
 * IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg
 * IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TitleBgCollapsed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TITLE_BG_COLLAPSED, __pyx_t_1) < 0) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":71
 * IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive
 * IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed
 * IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg
 * IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_MenuBarBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_MENU_BAR_BG, __pyx_t_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":72
 * IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed
 * IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg
 * IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab
 * IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SCROLLBAR_BG, __pyx_t_1) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":73
 * IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg
 * IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg
 * IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab             # <<<<<<<<<<<<<<
 * IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered
 * IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrab); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB, __pyx_t_1) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":74
 * IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg
 * IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab
 * IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive
 * IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrabHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":75
 * IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab
 * IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered
 * IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark
 * IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ScrollbarGrabActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SCROLLBAR_GRAB_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":76
 * IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered
 * IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive
 * IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark             # <<<<<<<<<<<<<<
 * IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab
 * IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_CheckMark); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_CHECK_MARK, __pyx_t_1) < 0) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":77
 * IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive
 * IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark
 * IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab             # <<<<<<<<<<<<<<
 * IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive
 * IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SliderGrab); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SLIDER_GRAB, __pyx_t_1) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":78
 * IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark
 * IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab
 * IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button
 * IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SliderGrabActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SLIDER_GRAB_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":79
 * IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab
 * IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive
 * IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button             # <<<<<<<<<<<<<<
 * IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered
 * IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Button); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_BUTTON, __pyx_t_1) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":80
 * IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive
 * IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button
 * IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive
 * IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ButtonHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_BUTTON_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":81
 * IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button
 * IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered
 * IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header
 * IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ButtonActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_BUTTON_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":82
 * IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered
 * IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive
 * IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header             # <<<<<<<<<<<<<<
 * IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered
 * IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Header); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_HEADER, __pyx_t_1) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":83
 * IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive
 * IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header
 * IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive
 * IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_HeaderHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_HEADER_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":84
 * IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header
 * IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered
 * IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator
 * IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_HeaderActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_HEADER_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":85
 * IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered
 * IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive
 * IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator             # <<<<<<<<<<<<<<
 * IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered
 * IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Separator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SEPARATOR, __pyx_t_1) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":86
 * IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive
 * IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator
 * IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive
 * IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SeparatorHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SEPARATOR_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":87
 * IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator
 * IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered
 * IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip
 * IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_SeparatorActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_SEPARATOR_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":88
 * IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered
 * IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive
 * IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip             # <<<<<<<<<<<<<<
 * IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered
 * IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGrip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_RESIZE_GRIP, __pyx_t_1) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":89
 * IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive
 * IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip
 * IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive
 * IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGripHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_RESIZE_GRIP_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":90
 * IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip
 * IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered
 * IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab
 * IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ResizeGripActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_RESIZE_GRIP_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":91
 * IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered
 * IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive
 * IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab             # <<<<<<<<<<<<<<
 * IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered
 * IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_Tab); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TAB, __pyx_t_1) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":92
 * IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive
 * IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab
 * IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive
 * IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TabHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TAB_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":93
 * IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab
 * IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered
 * IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused
 * IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TabActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TAB_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":94
 * IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered
 * IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive
 * IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused             # <<<<<<<<<<<<<<
 * IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive
 * IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TabUnfocused); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TAB_UNFOCUSED, __pyx_t_1) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":95
 * IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive
 * IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused
 * IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive             # <<<<<<<<<<<<<<
 * IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview
 * IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TabUnfocusedActive); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TAB_UNFOCUSED_ACTIVE, __pyx_t_1) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":96
 * IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused
 * IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive
 * IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview             # <<<<<<<<<<<<<<
 * IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg
 * IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_DockingPreview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_DOCKING_PREVIEW, __pyx_t_1) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":97
 * IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive
 * IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview
 * IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines
 * IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_DockingEmptyBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_DOCKING_EMPTY_BG, __pyx_t_1) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":98
 * IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview
 * IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg
 * IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines             # <<<<<<<<<<<<<<
 * IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered
 * IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotLines); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_PLOT_LINES, __pyx_t_1) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":99
 * IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg
 * IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines
 * IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram
 * IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotLinesHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_PLOT_LINES_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":100
 * IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines
 * IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered
 * IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram             # <<<<<<<<<<<<<<
 * IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered
 * IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotHistogram); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_PLOT_HISTOGRAM, __pyx_t_1) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":101
 * IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered
 * IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram
 * IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered             # <<<<<<<<<<<<<<
 * IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg
 * IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_PlotHistogramHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_PLOT_HISTOGRAM_HOVERED, __pyx_t_1) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":102
 * IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram
 * IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered
 * IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong
 * IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TableHeaderBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TABLE_HEADER_BG, __pyx_t_1) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":103
 * IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered
 * IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg
 * IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong             # <<<<<<<<<<<<<<
 * IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight
 * IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TableBorderStrong); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TABLE_BORDER_STRONG, __pyx_t_1) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":104
 * IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg
 * IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong
 * IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight             # <<<<<<<<<<<<<<
 * IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg
 * IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TableBorderLight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TABLE_BORDER_LIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":105
 * IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong
 * IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight
 * IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt
 * IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TableRowBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TABLE_ROW_BG, __pyx_t_1) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":106
 * IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight
 * IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg
 * IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt             # <<<<<<<<<<<<<<
 * IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg
 * IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TableRowBgAlt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TABLE_ROW_BG_ALT, __pyx_t_1) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":107
 * IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg
 * IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt
 * IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget
 * IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_TextSelectedBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_TEXT_SELECTED_BG, __pyx_t_1) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":108
 * IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt
 * IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg
 * IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget             # <<<<<<<<<<<<<<
 * IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight
 * IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_DragDropTarget); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_DRAG_DROP_TARGET, __pyx_t_1) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":109
 * IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg
 * IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget
 * IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight             # <<<<<<<<<<<<<<
 * IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight
 * IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_NavHighlight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_NAV_HIGHLIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":110
 * IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget
 * IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight
 * IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight             # <<<<<<<<<<<<<<
 * IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg
 * IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_NavWindowingHighlight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_NAV_WINDOWING_HIGHLIGH, __pyx_t_1) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":111
 * IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight
 * IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight
 * IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg
 * IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_NavWindowingDimBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_NAV_WINDOWING_DIM_BG, __pyx_t_1) < 0) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":112
 * IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight
 * IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg
 * IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg             # <<<<<<<<<<<<<<
 * IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT
 * IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ModalWindowDimBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_MODAL_WINDOW_DIM_BG, __pyx_t_1) < 0) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":113
 * IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg
 * IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg
 * IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None
 * IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COL_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":114
 * IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg
 * IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT
 * IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha
 * IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":115
 * IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT
 * IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None
 * IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker
 * IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoAlpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA, __pyx_t_1) < 0) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":116
 * IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None
 * IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha
 * IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions
 * IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoPicker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_PICKER, __pyx_t_1) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":117
 * IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha
 * IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker
 * IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview
 * IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoOptions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_OPTION, __pyx_t_1) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":118
 * IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker
 * IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions
 * IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs
 * IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoSmallPreview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_SMALL, __pyx_t_1) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":119
 * IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions
 * IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview
 * IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip
 * IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoInputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":120
 * IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview
 * IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs
 * IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel
 * IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoTooltip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTI, __pyx_t_1) < 0) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":121
 * IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs
 * IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip
 * IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview
 * IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoLabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_LABEL, __pyx_t_1) < 0) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":122
 * IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip
 * IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel
 * IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop
 * IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoSidePreview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_P, __pyx_t_1) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":123
 * IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel
 * IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview
 * IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoDragDrop); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_D, __pyx_t_1) < 0) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":124
 * IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview
 * IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop
 * IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_NoBorder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_NO_BORDER, __pyx_t_1) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":125
 * IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop
 * IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_AlphaBar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR, __pyx_t_1) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":126
 * IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf
 * IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_AlphaPreview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE, __pyx_t_1) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":127
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_AlphaPreviewHalf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_ALPHA_PRE_2, __pyx_t_1) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":128
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf
 * IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_HDR); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_HDR, __pyx_t_1) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":129
 * IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf
 * IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_DisplayRGB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_R, __pyx_t_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":130
 * IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex
 * IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_DisplayHSV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H, __pyx_t_1) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":131
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8
 * IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_DisplayHex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_H_2, __pyx_t_1) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":132
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex
 * IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_Uint8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_UINT8, __pyx_t_1) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":133
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex
 * IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8
 * IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_Float); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_FLOAT, __pyx_t_1) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":134
 * IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8
 * IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_PickerHueBar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU, __pyx_t_1) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":135
 * IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_PickerHueWheel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_HU_2, __pyx_t_1) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":136
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV
 * IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_InputRGB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB, __pyx_t_1) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":137
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_InputHSV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV, __pyx_t_1) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":138
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV
 * IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_
 * IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_DefaultOptions_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DEFAULT_O, __pyx_t_1) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":139
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV
 * IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_DisplayMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DISPLAY_M, __pyx_t_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":140
 * IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_
 * IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_DataTypeMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE, __pyx_t_1) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":141
 * IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_
 * IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_             # <<<<<<<<<<<<<<
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_
 * IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_PickerMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_PICKER_MA, __pyx_t_1) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":142
 * IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None
 * IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_InputMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COLOR_EDIT_FLAGS_INPUT_MAS, __pyx_t_1) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":143
 * IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_
 * IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft
 * IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":144
 * IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_
 * IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None
 * IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall
 * IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_PopupAlignLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_POPUP_ALIGN_LE, __pyx_t_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":145
 * IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None
 * IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft
 * IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightSmall); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_SMALL, __pyx_t_1) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":146
 * IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft
 * IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall
 * IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightRegular); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_REGULAR, __pyx_t_1) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":147
 * IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall
 * IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest
 * IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightLarge); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_LARGE, __pyx_t_1) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":148
 * IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton
 * IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightLargest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_LARGEST, __pyx_t_1) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":149
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest
 * IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview
 * IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_NoArrowButton); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_NO_ARROW_BUTTO, __pyx_t_1) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":150
 * IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest
 * IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton
 * IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview             # <<<<<<<<<<<<<<
 * IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_
 * IMGUI_COND_NONE = ccimgui.ImGuiCond_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_NoPreview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_NO_PREVIEW, __pyx_t_1) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":151
 * IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton
 * IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview
 * IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_             # <<<<<<<<<<<<<<
 * IMGUI_COND_NONE = ccimgui.ImGuiCond_None
 * IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_HeightMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COMBO_FLAGS_HEIGHT_MASK, __pyx_t_1) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":152
 * IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview
 * IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_
 * IMGUI_COND_NONE = ccimgui.ImGuiCond_None             # <<<<<<<<<<<<<<
 * IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always
 * IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COND_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":153
 * IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_
 * IMGUI_COND_NONE = ccimgui.ImGuiCond_None
 * IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always             # <<<<<<<<<<<<<<
 * IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once
 * IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_Always); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COND_ALWAYS, __pyx_t_1) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":154
 * IMGUI_COND_NONE = ccimgui.ImGuiCond_None
 * IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always
 * IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once             # <<<<<<<<<<<<<<
 * IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver
 * IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_Once); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COND_ONCE, __pyx_t_1) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":155
 * IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always
 * IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once
 * IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver             # <<<<<<<<<<<<<<
 * IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing
 * IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_FirstUseEver); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COND_FIRST_USE_EVER, __pyx_t_1) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":156
 * IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once
 * IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver
 * IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_Appearing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_COND_APPEARING, __pyx_t_1) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":157
 * IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver
 * IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing
 * IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":158
 * IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing
 * IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavEnableKeyboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_KE, __pyx_t_1) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":159
 * IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos
 * IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavEnableGamepad); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_GA, __pyx_t_1) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":160
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard
 * IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavEnableSetMousePos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_ENABLE_SE, __pyx_t_1) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":161
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos
 * IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse
 * IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NavNoCaptureKeyboard); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_NAV_NO_CAPTUR, __pyx_t_1) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":162
 * IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos
 * IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard
 * IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange
 * IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NoMouse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_NO_MOUSE, __pyx_t_1) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":163
 * IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard
 * IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse
 * IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable
 * IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_NoMouseCursorChange); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_NO_MOUSE_CURS, __pyx_t_1) < 0) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":164
 * IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse
 * IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange
 * IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_DockingEnable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_DOCKING_ENABL, __pyx_t_1) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":165
 * IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange
 * IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable
 * IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_ViewportsEnable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_VIEWPORTS_ENA, __pyx_t_1) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":166
 * IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable
 * IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts
 * IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_DpiEnableScaleViewports); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC, __pyx_t_1) < 0) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":167
 * IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB
 * IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_DpiEnableScaleFonts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_DPI_ENABLE_SC_2, __pyx_t_1) < 0) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":168
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts
 * IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB             # <<<<<<<<<<<<<<
 * IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen
 * IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_IsSRGB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_IS_SRGB, __pyx_t_1) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":169
 * IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts
 * IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB
 * IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8
 * IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_IsTouchScreen); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_CONFIG_FLAGS_IS_TOUCH_SCRE, __pyx_t_1) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":170
 * IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB
 * IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen
 * IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8
 * IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_S8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_S8, __pyx_t_1) < 0) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":171
 * IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen
 * IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8
 * IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16
 * IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_U8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_U8, __pyx_t_1) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":172
 * IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8
 * IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8
 * IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16
 * IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_S16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_S16, __pyx_t_1) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":173
 * IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8
 * IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16
 * IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32
 * IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_U16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_U16, __pyx_t_1) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":174
 * IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16
 * IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16
 * IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32
 * IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_S32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_S32, __pyx_t_1) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":175
 * IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16
 * IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32
 * IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64
 * IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_U32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_U32, __pyx_t_1) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":176
 * IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32
 * IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32
 * IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64
 * IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_S64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_S64, __pyx_t_1) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":177
 * IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32
 * IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64
 * IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float
 * IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_U64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_U64, __pyx_t_1) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":178
 * IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64
 * IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64
 * IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double
 * IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_Float); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_FLOAT, __pyx_t_1) < 0) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":179
 * IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64
 * IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float
 * IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double             # <<<<<<<<<<<<<<
 * IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT
 * IMGUI_DIR_NONE = ccimgui.ImGuiDir_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_Double); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_DOUBLE, __pyx_t_1) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":180
 * IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float
 * IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double
 * IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_DIR_NONE = ccimgui.ImGuiDir_None
 * IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DATA_TYPE_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":181
 * IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double
 * IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT
 * IMGUI_DIR_NONE = ccimgui.ImGuiDir_None             # <<<<<<<<<<<<<<
 * IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left
 * IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DIR_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":182
 * IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT
 * IMGUI_DIR_NONE = ccimgui.ImGuiDir_None
 * IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left             # <<<<<<<<<<<<<<
 * IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right
 * IMGUI_DIR_UP = ccimgui.ImGuiDir_Up
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Left); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DIR_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":183
 * IMGUI_DIR_NONE = ccimgui.ImGuiDir_None
 * IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left
 * IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right             # <<<<<<<<<<<<<<
 * IMGUI_DIR_UP = ccimgui.ImGuiDir_Up
 * IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Right); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DIR_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":184
 * IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left
 * IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right
 * IMGUI_DIR_UP = ccimgui.ImGuiDir_Up             # <<<<<<<<<<<<<<
 * IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down
 * IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DIR_UP, __pyx_t_1) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":185
 * IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right
 * IMGUI_DIR_UP = ccimgui.ImGuiDir_Up
 * IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down             # <<<<<<<<<<<<<<
 * IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT
 * IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_Down); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DIR_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":186
 * IMGUI_DIR_UP = ccimgui.ImGuiDir_Up
 * IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down
 * IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None
 * IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DIR_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":187
 * IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down
 * IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT
 * IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly
 * IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":188
 * IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT
 * IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None
 * IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly             # <<<<<<<<<<<<<<
 * IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode
 * IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_KeepAliveOnly); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE, __pyx_t_1) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":189
 * IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None
 * IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly
 * IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode             # <<<<<<<<<<<<<<
 * IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode
 * IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_NoDockingInCentralNode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_DOCKING, __pyx_t_1) < 0) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":190
 * IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly
 * IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode
 * IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode             # <<<<<<<<<<<<<<
 * IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit
 * IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_PassthruCentralNode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DOCK_NODE_FLAGS_PASSTHRU_C, __pyx_t_1) < 0) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":191
 * IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode
 * IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode
 * IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit             # <<<<<<<<<<<<<<
 * IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize
 * IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_NoSplit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_SPLIT, __pyx_t_1) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":192
 * IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode
 * IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit
 * IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize             # <<<<<<<<<<<<<<
 * IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar
 * IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_NoResize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DOCK_NODE_FLAGS_NO_RESIZE, __pyx_t_1) < 0) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":193
 * IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit
 * IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize
 * IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_AutoHideTabBar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE, __pyx_t_1) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":194
 * IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize
 * IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar
 * IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":195
 * IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar
 * IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceNoPreviewTooltip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO, __pyx_t_1) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":196
 * IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceNoDisableHover); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_2, __pyx_t_1) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":197
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceNoHoldToOpenOthers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_3, __pyx_t_1) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":198
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceAllowNullID); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_ALL, __pyx_t_1) < 0) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":199
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceExtern); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_EXT, __pyx_t_1) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":200
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_SourceAutoExpirePayload); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_SOURCE_AUT, __pyx_t_1) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":201
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptBeforeDelivery); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEF, __pyx_t_1) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":202
 * IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptNoDrawDefaultRect); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO, __pyx_t_1) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":203
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip             # <<<<<<<<<<<<<<
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly
 * IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptNoPreviewTooltip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_2, __pyx_t_1) < 0) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":204
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly             # <<<<<<<<<<<<<<
 * IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None
 * IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_AcceptPeekOnly); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEE, __pyx_t_1) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":205
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly
 * IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows
 * IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_FOCUSED_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":206
 * IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly
 * IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None
 * IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows             # <<<<<<<<<<<<<<
 * IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow
 * IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_ChildWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_FOCUSED_FLAGS_CHILD_WINDOW, __pyx_t_1) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":207
 * IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None
 * IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows
 * IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow             # <<<<<<<<<<<<<<
 * IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow
 * IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_RootWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_FOCUSED_FLAGS_ROOT_WINDOW, __pyx_t_1) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":208
 * IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows
 * IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow
 * IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow             # <<<<<<<<<<<<<<
 * IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy
 * IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_AnyWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_FOCUSED_FLAGS_ANY_WINDOW, __pyx_t_1) < 0) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":209
 * IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow
 * IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow
 * IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy             # <<<<<<<<<<<<<<
 * IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy
 * IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_NoPopupHierarchy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_FOCUSED_FLAGS_NO_POPUP_HIE, __pyx_t_1) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":210
 * IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow
 * IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy
 * IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy             # <<<<<<<<<<<<<<
 * IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows
 * IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_DockHierarchy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_FOCUSED_FLAGS_DOCK_HIERARC, __pyx_t_1) < 0) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":211
 * IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy
 * IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy
 * IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None
 * IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_RootAndChildWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_FOCUSED_FLAGS_ROOT_AND_CHI, __pyx_t_1) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":212
 * IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy
 * IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows
 * IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows
 * IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":213
 * IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows
 * IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None
 * IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow
 * IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_ChildWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_CHILD_WINDOW, __pyx_t_1) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":214
 * IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None
 * IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows
 * IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow
 * IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_RootWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_ROOT_WINDOW, __pyx_t_1) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":215
 * IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows
 * IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow
 * IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy
 * IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AnyWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_ANY_WINDOW, __pyx_t_1) < 0) __PYX_ERR(0, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":216
 * IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow
 * IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow
 * IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_NoPopupHierarchy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_NO_POPUP_HIE, __pyx_t_1) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":217
 * IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow
 * IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy
 * IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_DockHierarchy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_DOCK_HIERARC, __pyx_t_1) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":218
 * IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy
 * IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AllowWhenBlockedByPopup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B, __pyx_t_1) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":219
 * IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_B_2, __pyx_t_1) < 0) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":220
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled
 * IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AllowWhenOverlapped); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_O, __pyx_t_1) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":221
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride
 * IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_AllowWhenDisabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_ALLOW_WHEN_D, __pyx_t_1) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":222
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled
 * IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly
 * IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_NoNavOverride); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_NO_NAV_OVERR, __pyx_t_1) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":223
 * IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled
 * IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride
 * IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows
 * IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_RectOnly); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_RECT_ONLY, __pyx_t_1) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":224
 * IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride
 * IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly
 * IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal
 * IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_RootAndChildWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_ROOT_AND_CHI, __pyx_t_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":225
 * IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly
 * IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows
 * IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort
 * IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_DelayNormal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_DELAY_NORMAL, __pyx_t_1) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":226
 * IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows
 * IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal
 * IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort             # <<<<<<<<<<<<<<
 * IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay
 * IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_DelayShort); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_DELAY_SHORT, __pyx_t_1) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":227
 * IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal
 * IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort
 * IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_NoSharedDelay); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_HOVERED_FLAGS_NO_SHARED_DE, __pyx_t_1) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":228
 * IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort
 * IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay
 * IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":229
 * IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay
 * IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsDecimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_DEC, __pyx_t_1) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":230
 * IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsHexadecimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_HEX, __pyx_t_1) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":231
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank
 * IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsUppercase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_UPP, __pyx_t_1) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":232
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll
 * IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsNoBlank); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_NO, __pyx_t_1) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":233
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank
 * IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AutoSelectAll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_AUTO_SELE, __pyx_t_1) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":234
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank
 * IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll
 * IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_EnterReturnsTrue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ENTER_RET, __pyx_t_1) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":235
 * IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll
 * IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackCompletion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK, __pyx_t_1) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":236
 * IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackHistory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_2, __pyx_t_1) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":237
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter
 * IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackAlways); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_3, __pyx_t_1) < 0) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":238
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput
 * IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackCharFilter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_4, __pyx_t_1) < 0) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":239
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter
 * IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine
 * IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AllowTabInput); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB, __pyx_t_1) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":240
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter
 * IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput
 * IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll
 * IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CtrlEnterForNewLine); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTE, __pyx_t_1) < 0) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":241
 * IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput
 * IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine
 * IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite
 * IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_NoHorizontalScroll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NO_HORIZO, __pyx_t_1) < 0) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":242
 * IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine
 * IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll
 * IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly
 * IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_AlwaysOverwrite); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OV, __pyx_t_1) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":243
 * IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll
 * IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite
 * IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password
 * IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ReadOnly); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_READ_ONLY, __pyx_t_1) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":244
 * IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite
 * IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly
 * IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_Password); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_PASSWORD, __pyx_t_1) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":245
 * IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly
 * IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password
 * IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_NoUndoRedo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_R, __pyx_t_1) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":246
 * IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password
 * IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CharsScientific); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CHARS_SCI, __pyx_t_1) < 0) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":247
 * IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit
 * IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackResize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_5, __pyx_t_1) < 0) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":248
 * IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit             # <<<<<<<<<<<<<<
 * IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll
 * IMGUI_KEY_NONE = ccimgui.ImGuiKey_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_CallbackEdit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_CALLBACK_6, __pyx_t_1) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":249
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit
 * IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll             # <<<<<<<<<<<<<<
 * IMGUI_KEY_NONE = ccimgui.ImGuiKey_None
 * IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_EscapeClearsAll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CL, __pyx_t_1) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":250
 * IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit
 * IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll
 * IMGUI_KEY_NONE = ccimgui.ImGuiKey_None             # <<<<<<<<<<<<<<
 * IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab
 * IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":251
 * IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll
 * IMGUI_KEY_NONE = ccimgui.ImGuiKey_None
 * IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab             # <<<<<<<<<<<<<<
 * IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow
 * IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Tab); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_TAB, __pyx_t_1) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":252
 * IMGUI_KEY_NONE = ccimgui.ImGuiKey_None
 * IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab
 * IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow
 * IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_LeftArrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_LEFT_ARROW, __pyx_t_1) < 0) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":253
 * IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab
 * IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow
 * IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow             # <<<<<<<<<<<<<<
 * IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow
 * IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_RightArrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RIGHT_ARROW, __pyx_t_1) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":254
 * IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow
 * IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow
 * IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow             # <<<<<<<<<<<<<<
 * IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow
 * IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_UpArrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_UP_ARROW, __pyx_t_1) < 0) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":255
 * IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow
 * IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow
 * IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow             # <<<<<<<<<<<<<<
 * IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp
 * IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_DownArrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_DOWN_ARROW, __pyx_t_1) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":256
 * IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow
 * IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow
 * IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp             # <<<<<<<<<<<<<<
 * IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown
 * IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_PageUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_PAGE_UP, __pyx_t_1) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":257
 * IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow
 * IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp
 * IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown             # <<<<<<<<<<<<<<
 * IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home
 * IMGUI_KEY_END = ccimgui.ImGuiKey_End
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_PageDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_PAGE_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":258
 * IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp
 * IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown
 * IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home             # <<<<<<<<<<<<<<
 * IMGUI_KEY_END = ccimgui.ImGuiKey_End
 * IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Home); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_HOME, __pyx_t_1) < 0) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":259
 * IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown
 * IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home
 * IMGUI_KEY_END = ccimgui.ImGuiKey_End             # <<<<<<<<<<<<<<
 * IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert
 * IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_End); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_END, __pyx_t_1) < 0) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":260
 * IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home
 * IMGUI_KEY_END = ccimgui.ImGuiKey_End
 * IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert             # <<<<<<<<<<<<<<
 * IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete
 * IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Insert); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_INSERT, __pyx_t_1) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":261
 * IMGUI_KEY_END = ccimgui.ImGuiKey_End
 * IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert
 * IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete             # <<<<<<<<<<<<<<
 * IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace
 * IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Delete); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_DELETE, __pyx_t_1) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":262
 * IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert
 * IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete
 * IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace             # <<<<<<<<<<<<<<
 * IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space
 * IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Backspace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_BACKSPACE, __pyx_t_1) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":263
 * IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete
 * IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace
 * IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space             # <<<<<<<<<<<<<<
 * IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter
 * IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Space); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_SPACE, __pyx_t_1) < 0) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":264
 * IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace
 * IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space
 * IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter             # <<<<<<<<<<<<<<
 * IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape
 * IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_ENTER, __pyx_t_1) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":265
 * IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space
 * IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter
 * IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape             # <<<<<<<<<<<<<<
 * IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl
 * IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Escape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_ESCAPE, __pyx_t_1) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":266
 * IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter
 * IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape
 * IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl             # <<<<<<<<<<<<<<
 * IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift
 * IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_LeftCtrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_LEFT_CTRL, __pyx_t_1) < 0) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":267
 * IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape
 * IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl
 * IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift             # <<<<<<<<<<<<<<
 * IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt
 * IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_LeftShift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_LEFT_SHIFT, __pyx_t_1) < 0) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":268
 * IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl
 * IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift
 * IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt             # <<<<<<<<<<<<<<
 * IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper
 * IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_LeftAlt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_LEFT_ALT, __pyx_t_1) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":269
 * IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift
 * IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt
 * IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl
 * IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_LeftSuper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_LEFT_SUPER, __pyx_t_1) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":270
 * IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt
 * IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper
 * IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift
 * IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_RightCtrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RIGHT_CTRL, __pyx_t_1) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":271
 * IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper
 * IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl
 * IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt
 * IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_RightShift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RIGHT_SHIFT, __pyx_t_1) < 0) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":272
 * IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl
 * IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift
 * IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper
 * IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_RightAlt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RIGHT_ALT, __pyx_t_1) < 0) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":273
 * IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift
 * IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt
 * IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu
 * IMGUI_KEY_0 = ccimgui.ImGuiKey_0
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_RightSuper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RIGHT_SUPER, __pyx_t_1) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":274
 * IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt
 * IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper
 * IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu             # <<<<<<<<<<<<<<
 * IMGUI_KEY_0 = ccimgui.ImGuiKey_0
 * IMGUI_KEY_1 = ccimgui.ImGuiKey_1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Menu); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MENU, __pyx_t_1) < 0) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":275
 * IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper
 * IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu
 * IMGUI_KEY_0 = ccimgui.ImGuiKey_0             # <<<<<<<<<<<<<<
 * IMGUI_KEY_1 = ccimgui.ImGuiKey_1
 * IMGUI_KEY_2 = ccimgui.ImGuiKey_2
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_0, __pyx_t_1) < 0) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":276
 * IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu
 * IMGUI_KEY_0 = ccimgui.ImGuiKey_0
 * IMGUI_KEY_1 = ccimgui.ImGuiKey_1             # <<<<<<<<<<<<<<
 * IMGUI_KEY_2 = ccimgui.ImGuiKey_2
 * IMGUI_KEY_3 = ccimgui.ImGuiKey_3
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_1, __pyx_t_1) < 0) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":277
 * IMGUI_KEY_0 = ccimgui.ImGuiKey_0
 * IMGUI_KEY_1 = ccimgui.ImGuiKey_1
 * IMGUI_KEY_2 = ccimgui.ImGuiKey_2             # <<<<<<<<<<<<<<
 * IMGUI_KEY_3 = ccimgui.ImGuiKey_3
 * IMGUI_KEY_4 = ccimgui.ImGuiKey_4
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_2, __pyx_t_1) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":278
 * IMGUI_KEY_1 = ccimgui.ImGuiKey_1
 * IMGUI_KEY_2 = ccimgui.ImGuiKey_2
 * IMGUI_KEY_3 = ccimgui.ImGuiKey_3             # <<<<<<<<<<<<<<
 * IMGUI_KEY_4 = ccimgui.ImGuiKey_4
 * IMGUI_KEY_5 = ccimgui.ImGuiKey_5
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_3, __pyx_t_1) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":279
 * IMGUI_KEY_2 = ccimgui.ImGuiKey_2
 * IMGUI_KEY_3 = ccimgui.ImGuiKey_3
 * IMGUI_KEY_4 = ccimgui.ImGuiKey_4             # <<<<<<<<<<<<<<
 * IMGUI_KEY_5 = ccimgui.ImGuiKey_5
 * IMGUI_KEY_6 = ccimgui.ImGuiKey_6
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_4, __pyx_t_1) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":280
 * IMGUI_KEY_3 = ccimgui.ImGuiKey_3
 * IMGUI_KEY_4 = ccimgui.ImGuiKey_4
 * IMGUI_KEY_5 = ccimgui.ImGuiKey_5             # <<<<<<<<<<<<<<
 * IMGUI_KEY_6 = ccimgui.ImGuiKey_6
 * IMGUI_KEY_7 = ccimgui.ImGuiKey_7
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_5, __pyx_t_1) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":281
 * IMGUI_KEY_4 = ccimgui.ImGuiKey_4
 * IMGUI_KEY_5 = ccimgui.ImGuiKey_5
 * IMGUI_KEY_6 = ccimgui.ImGuiKey_6             # <<<<<<<<<<<<<<
 * IMGUI_KEY_7 = ccimgui.ImGuiKey_7
 * IMGUI_KEY_8 = ccimgui.ImGuiKey_8
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_6, __pyx_t_1) < 0) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":282
 * IMGUI_KEY_5 = ccimgui.ImGuiKey_5
 * IMGUI_KEY_6 = ccimgui.ImGuiKey_6
 * IMGUI_KEY_7 = ccimgui.ImGuiKey_7             # <<<<<<<<<<<<<<
 * IMGUI_KEY_8 = ccimgui.ImGuiKey_8
 * IMGUI_KEY_9 = ccimgui.ImGuiKey_9
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_7, __pyx_t_1) < 0) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":283
 * IMGUI_KEY_6 = ccimgui.ImGuiKey_6
 * IMGUI_KEY_7 = ccimgui.ImGuiKey_7
 * IMGUI_KEY_8 = ccimgui.ImGuiKey_8             # <<<<<<<<<<<<<<
 * IMGUI_KEY_9 = ccimgui.ImGuiKey_9
 * IMGUI_KEY_A = ccimgui.ImGuiKey_A
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_8, __pyx_t_1) < 0) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":284
 * IMGUI_KEY_7 = ccimgui.ImGuiKey_7
 * IMGUI_KEY_8 = ccimgui.ImGuiKey_8
 * IMGUI_KEY_9 = ccimgui.ImGuiKey_9             # <<<<<<<<<<<<<<
 * IMGUI_KEY_A = ccimgui.ImGuiKey_A
 * IMGUI_KEY_B = ccimgui.ImGuiKey_B
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_9, __pyx_t_1) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":285
 * IMGUI_KEY_8 = ccimgui.ImGuiKey_8
 * IMGUI_KEY_9 = ccimgui.ImGuiKey_9
 * IMGUI_KEY_A = ccimgui.ImGuiKey_A             # <<<<<<<<<<<<<<
 * IMGUI_KEY_B = ccimgui.ImGuiKey_B
 * IMGUI_KEY_C = ccimgui.ImGuiKey_C
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_A, __pyx_t_1) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":286
 * IMGUI_KEY_9 = ccimgui.ImGuiKey_9
 * IMGUI_KEY_A = ccimgui.ImGuiKey_A
 * IMGUI_KEY_B = ccimgui.ImGuiKey_B             # <<<<<<<<<<<<<<
 * IMGUI_KEY_C = ccimgui.ImGuiKey_C
 * IMGUI_KEY_D = ccimgui.ImGuiKey_D
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_B); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_B, __pyx_t_1) < 0) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":287
 * IMGUI_KEY_A = ccimgui.ImGuiKey_A
 * IMGUI_KEY_B = ccimgui.ImGuiKey_B
 * IMGUI_KEY_C = ccimgui.ImGuiKey_C             # <<<<<<<<<<<<<<
 * IMGUI_KEY_D = ccimgui.ImGuiKey_D
 * IMGUI_KEY_E = ccimgui.ImGuiKey_E
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_C); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_C, __pyx_t_1) < 0) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":288
 * IMGUI_KEY_B = ccimgui.ImGuiKey_B
 * IMGUI_KEY_C = ccimgui.ImGuiKey_C
 * IMGUI_KEY_D = ccimgui.ImGuiKey_D             # <<<<<<<<<<<<<<
 * IMGUI_KEY_E = ccimgui.ImGuiKey_E
 * IMGUI_KEY_F = ccimgui.ImGuiKey_F
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_D); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_D, __pyx_t_1) < 0) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":289
 * IMGUI_KEY_C = ccimgui.ImGuiKey_C
 * IMGUI_KEY_D = ccimgui.ImGuiKey_D
 * IMGUI_KEY_E = ccimgui.ImGuiKey_E             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F = ccimgui.ImGuiKey_F
 * IMGUI_KEY_G = ccimgui.ImGuiKey_G
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_E); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_E, __pyx_t_1) < 0) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":290
 * IMGUI_KEY_D = ccimgui.ImGuiKey_D
 * IMGUI_KEY_E = ccimgui.ImGuiKey_E
 * IMGUI_KEY_F = ccimgui.ImGuiKey_F             # <<<<<<<<<<<<<<
 * IMGUI_KEY_G = ccimgui.ImGuiKey_G
 * IMGUI_KEY_H = ccimgui.ImGuiKey_H
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F, __pyx_t_1) < 0) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":291
 * IMGUI_KEY_E = ccimgui.ImGuiKey_E
 * IMGUI_KEY_F = ccimgui.ImGuiKey_F
 * IMGUI_KEY_G = ccimgui.ImGuiKey_G             # <<<<<<<<<<<<<<
 * IMGUI_KEY_H = ccimgui.ImGuiKey_H
 * IMGUI_KEY_I = ccimgui.ImGuiKey_I
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_G); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_G, __pyx_t_1) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":292
 * IMGUI_KEY_F = ccimgui.ImGuiKey_F
 * IMGUI_KEY_G = ccimgui.ImGuiKey_G
 * IMGUI_KEY_H = ccimgui.ImGuiKey_H             # <<<<<<<<<<<<<<
 * IMGUI_KEY_I = ccimgui.ImGuiKey_I
 * IMGUI_KEY_J = ccimgui.ImGuiKey_J
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_H); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_H, __pyx_t_1) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":293
 * IMGUI_KEY_G = ccimgui.ImGuiKey_G
 * IMGUI_KEY_H = ccimgui.ImGuiKey_H
 * IMGUI_KEY_I = ccimgui.ImGuiKey_I             # <<<<<<<<<<<<<<
 * IMGUI_KEY_J = ccimgui.ImGuiKey_J
 * IMGUI_KEY_K = ccimgui.ImGuiKey_K
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_I); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_I, __pyx_t_1) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":294
 * IMGUI_KEY_H = ccimgui.ImGuiKey_H
 * IMGUI_KEY_I = ccimgui.ImGuiKey_I
 * IMGUI_KEY_J = ccimgui.ImGuiKey_J             # <<<<<<<<<<<<<<
 * IMGUI_KEY_K = ccimgui.ImGuiKey_K
 * IMGUI_KEY_L = ccimgui.ImGuiKey_L
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_J); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_J, __pyx_t_1) < 0) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":295
 * IMGUI_KEY_I = ccimgui.ImGuiKey_I
 * IMGUI_KEY_J = ccimgui.ImGuiKey_J
 * IMGUI_KEY_K = ccimgui.ImGuiKey_K             # <<<<<<<<<<<<<<
 * IMGUI_KEY_L = ccimgui.ImGuiKey_L
 * IMGUI_KEY_M = ccimgui.ImGuiKey_M
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_K); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_K, __pyx_t_1) < 0) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":296
 * IMGUI_KEY_J = ccimgui.ImGuiKey_J
 * IMGUI_KEY_K = ccimgui.ImGuiKey_K
 * IMGUI_KEY_L = ccimgui.ImGuiKey_L             # <<<<<<<<<<<<<<
 * IMGUI_KEY_M = ccimgui.ImGuiKey_M
 * IMGUI_KEY_N = ccimgui.ImGuiKey_N
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_L, __pyx_t_1) < 0) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":297
 * IMGUI_KEY_K = ccimgui.ImGuiKey_K
 * IMGUI_KEY_L = ccimgui.ImGuiKey_L
 * IMGUI_KEY_M = ccimgui.ImGuiKey_M             # <<<<<<<<<<<<<<
 * IMGUI_KEY_N = ccimgui.ImGuiKey_N
 * IMGUI_KEY_O = ccimgui.ImGuiKey_O
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_M); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_M, __pyx_t_1) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":298
 * IMGUI_KEY_L = ccimgui.ImGuiKey_L
 * IMGUI_KEY_M = ccimgui.ImGuiKey_M
 * IMGUI_KEY_N = ccimgui.ImGuiKey_N             # <<<<<<<<<<<<<<
 * IMGUI_KEY_O = ccimgui.ImGuiKey_O
 * IMGUI_KEY_P = ccimgui.ImGuiKey_P
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_N, __pyx_t_1) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":299
 * IMGUI_KEY_M = ccimgui.ImGuiKey_M
 * IMGUI_KEY_N = ccimgui.ImGuiKey_N
 * IMGUI_KEY_O = ccimgui.ImGuiKey_O             # <<<<<<<<<<<<<<
 * IMGUI_KEY_P = ccimgui.ImGuiKey_P
 * IMGUI_KEY_Q = ccimgui.ImGuiKey_Q
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_O); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_O, __pyx_t_1) < 0) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":300
 * IMGUI_KEY_N = ccimgui.ImGuiKey_N
 * IMGUI_KEY_O = ccimgui.ImGuiKey_O
 * IMGUI_KEY_P = ccimgui.ImGuiKey_P             # <<<<<<<<<<<<<<
 * IMGUI_KEY_Q = ccimgui.ImGuiKey_Q
 * IMGUI_KEY_R = ccimgui.ImGuiKey_R
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_P); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_P, __pyx_t_1) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":301
 * IMGUI_KEY_O = ccimgui.ImGuiKey_O
 * IMGUI_KEY_P = ccimgui.ImGuiKey_P
 * IMGUI_KEY_Q = ccimgui.ImGuiKey_Q             # <<<<<<<<<<<<<<
 * IMGUI_KEY_R = ccimgui.ImGuiKey_R
 * IMGUI_KEY_S = ccimgui.ImGuiKey_S
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Q); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_Q, __pyx_t_1) < 0) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":302
 * IMGUI_KEY_P = ccimgui.ImGuiKey_P
 * IMGUI_KEY_Q = ccimgui.ImGuiKey_Q
 * IMGUI_KEY_R = ccimgui.ImGuiKey_R             # <<<<<<<<<<<<<<
 * IMGUI_KEY_S = ccimgui.ImGuiKey_S
 * IMGUI_KEY_T = ccimgui.ImGuiKey_T
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_R); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_R, __pyx_t_1) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":303
 * IMGUI_KEY_Q = ccimgui.ImGuiKey_Q
 * IMGUI_KEY_R = ccimgui.ImGuiKey_R
 * IMGUI_KEY_S = ccimgui.ImGuiKey_S             # <<<<<<<<<<<<<<
 * IMGUI_KEY_T = ccimgui.ImGuiKey_T
 * IMGUI_KEY_U = ccimgui.ImGuiKey_U
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_S); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_S, __pyx_t_1) < 0) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":304
 * IMGUI_KEY_R = ccimgui.ImGuiKey_R
 * IMGUI_KEY_S = ccimgui.ImGuiKey_S
 * IMGUI_KEY_T = ccimgui.ImGuiKey_T             # <<<<<<<<<<<<<<
 * IMGUI_KEY_U = ccimgui.ImGuiKey_U
 * IMGUI_KEY_V = ccimgui.ImGuiKey_V
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_T, __pyx_t_1) < 0) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":305
 * IMGUI_KEY_S = ccimgui.ImGuiKey_S
 * IMGUI_KEY_T = ccimgui.ImGuiKey_T
 * IMGUI_KEY_U = ccimgui.ImGuiKey_U             # <<<<<<<<<<<<<<
 * IMGUI_KEY_V = ccimgui.ImGuiKey_V
 * IMGUI_KEY_W = ccimgui.ImGuiKey_W
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_U); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_U, __pyx_t_1) < 0) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":306
 * IMGUI_KEY_T = ccimgui.ImGuiKey_T
 * IMGUI_KEY_U = ccimgui.ImGuiKey_U
 * IMGUI_KEY_V = ccimgui.ImGuiKey_V             # <<<<<<<<<<<<<<
 * IMGUI_KEY_W = ccimgui.ImGuiKey_W
 * IMGUI_KEY_X = ccimgui.ImGuiKey_X
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_V); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_V, __pyx_t_1) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":307
 * IMGUI_KEY_U = ccimgui.ImGuiKey_U
 * IMGUI_KEY_V = ccimgui.ImGuiKey_V
 * IMGUI_KEY_W = ccimgui.ImGuiKey_W             # <<<<<<<<<<<<<<
 * IMGUI_KEY_X = ccimgui.ImGuiKey_X
 * IMGUI_KEY_Y = ccimgui.ImGuiKey_Y
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_W); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_W, __pyx_t_1) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":308
 * IMGUI_KEY_V = ccimgui.ImGuiKey_V
 * IMGUI_KEY_W = ccimgui.ImGuiKey_W
 * IMGUI_KEY_X = ccimgui.ImGuiKey_X             # <<<<<<<<<<<<<<
 * IMGUI_KEY_Y = ccimgui.ImGuiKey_Y
 * IMGUI_KEY_Z = ccimgui.ImGuiKey_Z
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_X, __pyx_t_1) < 0) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":309
 * IMGUI_KEY_W = ccimgui.ImGuiKey_W
 * IMGUI_KEY_X = ccimgui.ImGuiKey_X
 * IMGUI_KEY_Y = ccimgui.ImGuiKey_Y             # <<<<<<<<<<<<<<
 * IMGUI_KEY_Z = ccimgui.ImGuiKey_Z
 * IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_Y, __pyx_t_1) < 0) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":310
 * IMGUI_KEY_X = ccimgui.ImGuiKey_X
 * IMGUI_KEY_Y = ccimgui.ImGuiKey_Y
 * IMGUI_KEY_Z = ccimgui.ImGuiKey_Z             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1
 * IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_Z, __pyx_t_1) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":311
 * IMGUI_KEY_Y = ccimgui.ImGuiKey_Y
 * IMGUI_KEY_Z = ccimgui.ImGuiKey_Z
 * IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2
 * IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F1, __pyx_t_1) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":312
 * IMGUI_KEY_Z = ccimgui.ImGuiKey_Z
 * IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1
 * IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3
 * IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F2, __pyx_t_1) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":313
 * IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1
 * IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2
 * IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4
 * IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F3, __pyx_t_1) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":314
 * IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2
 * IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3
 * IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5
 * IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F4, __pyx_t_1) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":315
 * IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3
 * IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4
 * IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6
 * IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F5, __pyx_t_1) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":316
 * IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4
 * IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5
 * IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7
 * IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F6, __pyx_t_1) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":317
 * IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5
 * IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6
 * IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8
 * IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F7, __pyx_t_1) < 0) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":318
 * IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6
 * IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7
 * IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9
 * IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F8, __pyx_t_1) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":319
 * IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7
 * IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8
 * IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10
 * IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F9, __pyx_t_1) < 0) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":320
 * IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8
 * IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9
 * IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11
 * IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F10, __pyx_t_1) < 0) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":321
 * IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9
 * IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10
 * IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11             # <<<<<<<<<<<<<<
 * IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12
 * IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F11, __pyx_t_1) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":322
 * IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10
 * IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11
 * IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12             # <<<<<<<<<<<<<<
 * IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe
 * IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_F12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_F12, __pyx_t_1) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":323
 * IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11
 * IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12
 * IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe             # <<<<<<<<<<<<<<
 * IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma
 * IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Apostrophe); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_APOSTROPHE, __pyx_t_1) < 0) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":324
 * IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12
 * IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe
 * IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus
 * IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Comma); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_COMMA, __pyx_t_1) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":325
 * IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe
 * IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma
 * IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus             # <<<<<<<<<<<<<<
 * IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period
 * IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Minus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MINUS, __pyx_t_1) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":326
 * IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma
 * IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus
 * IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period             # <<<<<<<<<<<<<<
 * IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash
 * IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Period); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_PERIOD, __pyx_t_1) < 0) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":327
 * IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus
 * IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period
 * IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash             # <<<<<<<<<<<<<<
 * IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon
 * IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Slash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_SLASH, __pyx_t_1) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":328
 * IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period
 * IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash
 * IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon             # <<<<<<<<<<<<<<
 * IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal
 * IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Semicolon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_SEMICOLON, __pyx_t_1) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":329
 * IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash
 * IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon
 * IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal             # <<<<<<<<<<<<<<
 * IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket
 * IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Equal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_EQUAL, __pyx_t_1) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":330
 * IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon
 * IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal
 * IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket             # <<<<<<<<<<<<<<
 * IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash
 * IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_LeftBracket); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_LEFT_BRACKET, __pyx_t_1) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":331
 * IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal
 * IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket
 * IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket
 * IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Backslash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_BACKSLASH, __pyx_t_1) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":332
 * IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket
 * IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash
 * IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent
 * IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_RightBracket); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RIGHT_BRACKET, __pyx_t_1) < 0) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":333
 * IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash
 * IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket
 * IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent             # <<<<<<<<<<<<<<
 * IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock
 * IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GraveAccent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GRAVE_ACCENT, __pyx_t_1) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":334
 * IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket
 * IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent
 * IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock             # <<<<<<<<<<<<<<
 * IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock
 * IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_CapsLock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_CAPS_LOCK, __pyx_t_1) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":335
 * IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent
 * IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock
 * IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock             # <<<<<<<<<<<<<<
 * IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock
 * IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_ScrollLock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_SCROLL_LOCK, __pyx_t_1) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":336
 * IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock
 * IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock
 * IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock             # <<<<<<<<<<<<<<
 * IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen
 * IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_NumLock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_NUM_LOCK, __pyx_t_1) < 0) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":337
 * IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock
 * IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock
 * IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen             # <<<<<<<<<<<<<<
 * IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause
 * IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_PrintScreen); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_PRINT_SCREEN, __pyx_t_1) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":338
 * IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock
 * IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen
 * IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0
 * IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Pause); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_PAUSE, __pyx_t_1) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":339
 * IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen
 * IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause
 * IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1
 * IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD0, __pyx_t_1) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":340
 * IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause
 * IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0
 * IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2
 * IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD1, __pyx_t_1) < 0) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":341
 * IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0
 * IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1
 * IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3
 * IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD2, __pyx_t_1) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":342
 * IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1
 * IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2
 * IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4
 * IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD3, __pyx_t_1) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":343
 * IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2
 * IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3
 * IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5
 * IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD4, __pyx_t_1) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":344
 * IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3
 * IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4
 * IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6
 * IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD5, __pyx_t_1) < 0) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":345
 * IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4
 * IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5
 * IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7
 * IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD6, __pyx_t_1) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":346
 * IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5
 * IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6
 * IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8
 * IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD7, __pyx_t_1) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":347
 * IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6
 * IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7
 * IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9
 * IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD8, __pyx_t_1) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":348
 * IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7
 * IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8
 * IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal
 * IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_Keypad9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD9, __pyx_t_1) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":349
 * IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8
 * IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9
 * IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide
 * IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeypadDecimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD_DECIMAL, __pyx_t_1) < 0) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":350
 * IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9
 * IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal
 * IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply
 * IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeypadDivide); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD_DIVIDE, __pyx_t_1) < 0) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":351
 * IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal
 * IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide
 * IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract
 * IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeypadMultiply); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD_MULTIPLY, __pyx_t_1) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":352
 * IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide
 * IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply
 * IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd
 * IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeypadSubtract); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD_SUBTRACT, __pyx_t_1) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":353
 * IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply
 * IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract
 * IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter
 * IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeypadAdd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD_ADD, __pyx_t_1) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":354
 * IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract
 * IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd
 * IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual
 * IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeypadEnter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD_ENTER, __pyx_t_1) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":355
 * IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd
 * IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter
 * IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart
 * IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeypadEqual); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYPAD_EQUAL, __pyx_t_1) < 0) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":356
 * IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter
 * IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual
 * IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack
 * IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadStart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_START, __pyx_t_1) < 0) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":357
 * IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual
 * IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart
 * IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft
 * IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadBack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_BACK, __pyx_t_1) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":358
 * IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart
 * IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack
 * IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight
 * IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadFaceLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":359
 * IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack
 * IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft
 * IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp
 * IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadFaceRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":360
 * IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft
 * IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight
 * IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown
 * IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadFaceUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_UP, __pyx_t_1) < 0) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":361
 * IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight
 * IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp
 * IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft
 * IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadFaceDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_FACE_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":362
 * IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp
 * IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown
 * IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight
 * IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadDpadLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":363
 * IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown
 * IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft
 * IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp
 * IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadDpadRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":364
 * IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft
 * IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight
 * IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown
 * IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadDpadUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_UP, __pyx_t_1) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":365
 * IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight
 * IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp
 * IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1
 * IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadDpadDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_DPAD_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":366
 * IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp
 * IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown
 * IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1
 * IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadL1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_L1, __pyx_t_1) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":367
 * IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown
 * IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1
 * IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2
 * IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadR1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_R1, __pyx_t_1) < 0) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":368
 * IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1
 * IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1
 * IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2
 * IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadL2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_L2, __pyx_t_1) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":369
 * IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1
 * IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2
 * IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3
 * IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadR2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_R2, __pyx_t_1) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":370
 * IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2
 * IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2
 * IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3
 * IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadL3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_L3, __pyx_t_1) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":371
 * IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2
 * IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3
 * IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft
 * IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadR3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_R3, __pyx_t_1) < 0) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":372
 * IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3
 * IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3
 * IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight
 * IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadLStickLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":373
 * IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3
 * IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft
 * IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp
 * IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadLStickRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":374
 * IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft
 * IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight
 * IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown
 * IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadLStickUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_UP, __pyx_t_1) < 0) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":375
 * IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight
 * IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp
 * IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft
 * IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadLStickDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_L_STICK_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":376
 * IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp
 * IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown
 * IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight
 * IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadRStickLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":377
 * IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown
 * IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft
 * IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp
 * IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadRStickRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":378
 * IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft
 * IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight
 * IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp             # <<<<<<<<<<<<<<
 * IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown
 * IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadRStickUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_UP, __pyx_t_1) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":379
 * IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight
 * IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp
 * IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft
 * IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_GamepadRStickDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_GAMEPAD_R_STICK_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":380
 * IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp
 * IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown
 * IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight
 * IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_MouseLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MOUSE_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":381
 * IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown
 * IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft
 * IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle
 * IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_MouseRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MOUSE_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":382
 * IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft
 * IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight
 * IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1
 * IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_MouseMiddle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MOUSE_MIDDLE, __pyx_t_1) < 0) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":383
 * IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight
 * IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle
 * IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2
 * IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_MouseX1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MOUSE_X1, __pyx_t_1) < 0) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":384
 * IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle
 * IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1
 * IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX
 * IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_MouseX2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MOUSE_X2, __pyx_t_1) < 0) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":385
 * IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1
 * IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2
 * IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX             # <<<<<<<<<<<<<<
 * IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY
 * IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_MouseWheelX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MOUSE_WHEELX, __pyx_t_1) < 0) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":386
 * IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2
 * IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX
 * IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl
 * IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_MouseWheelY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_MOUSE_WHEELY, __pyx_t_1) < 0) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":387
 * IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX
 * IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY
 * IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift
 * IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_ReservedForModCtrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_CTRL, __pyx_t_1) < 0) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":388
 * IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY
 * IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl
 * IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt
 * IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_ReservedForModShift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_SHIFT, __pyx_t_1) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":389
 * IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl
 * IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift
 * IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt             # <<<<<<<<<<<<<<
 * IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper
 * IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_ReservedForModAlt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_ALT, __pyx_t_1) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":390
 * IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift
 * IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt
 * IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper             # <<<<<<<<<<<<<<
 * IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT
 * IMGUI_MOD_NONE = ccimgui.ImGuiMod_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_ReservedForModSuper); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_RESERVED_FOR_MOD_SUPER, __pyx_t_1) < 0) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":391
 * IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt
 * IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper
 * IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_MOD_NONE = ccimgui.ImGuiMod_None
 * IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":392
 * IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper
 * IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT
 * IMGUI_MOD_NONE = ccimgui.ImGuiMod_None             # <<<<<<<<<<<<<<
 * IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl
 * IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiMod_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOD_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":393
 * IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT
 * IMGUI_MOD_NONE = ccimgui.ImGuiMod_None
 * IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl             # <<<<<<<<<<<<<<
 * IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift
 * IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiMod_Ctrl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOD_CTRL, __pyx_t_1) < 0) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":394
 * IMGUI_MOD_NONE = ccimgui.ImGuiMod_None
 * IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl
 * IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift             # <<<<<<<<<<<<<<
 * IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt
 * IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiMod_Shift); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOD_SHIFT, __pyx_t_1) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":395
 * IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl
 * IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift
 * IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt             # <<<<<<<<<<<<<<
 * IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super
 * IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiMod_Alt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOD_ALT, __pyx_t_1) < 0) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":396
 * IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift
 * IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt
 * IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super             # <<<<<<<<<<<<<<
 * IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut
 * IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiMod_Super); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOD_SUPER, __pyx_t_1) < 0) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":397
 * IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt
 * IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super
 * IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut             # <<<<<<<<<<<<<<
 * IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_
 * IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiMod_Shortcut); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOD_SHORTCUT, __pyx_t_1) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":398
 * IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super
 * IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut
 * IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_             # <<<<<<<<<<<<<<
 * IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN
 * IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiMod_Mask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOD_MASK, __pyx_t_1) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":399
 * IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut
 * IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_
 * IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN             # <<<<<<<<<<<<<<
 * IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END
 * IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_NamedKey_BEGIN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_NAMED_KEY_BEGIN, __pyx_t_1) < 0) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":400
 * IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_
 * IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN
 * IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END             # <<<<<<<<<<<<<<
 * IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT
 * IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_NamedKey_END); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_NAMED_KEY_END, __pyx_t_1) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":401
 * IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN
 * IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END
 * IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE
 * IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_NamedKey_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_NAMED_KEY_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":402
 * IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END
 * IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT
 * IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE             # <<<<<<<<<<<<<<
 * IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET
 * IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeysData_SIZE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYS_DATA_SIZE, __pyx_t_1) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":403
 * IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT
 * IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE
 * IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left
 * IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiKey(ImGuiKey_KeysData_OFFSET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_KEY_KEYS_DATA_OFFSET, __pyx_t_1) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":404
 * IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE
 * IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET
 * IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right
 * IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseButton_(ImGuiMouseButton_Left); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_BUTTON_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":405
 * IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET
 * IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left
 * IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle
 * IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseButton_(ImGuiMouseButton_Right); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_BUTTON_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":406
 * IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left
 * IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right
 * IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT
 * IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseButton_(ImGuiMouseButton_Middle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_BUTTON_MIDDLE, __pyx_t_1) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":407
 * IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right
 * IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle
 * IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None
 * IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseButton_(ImGuiMouseButton_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_BUTTON_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":408
 * IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle
 * IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT
 * IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow
 * IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":409
 * IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT
 * IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None
 * IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput
 * IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_Arrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_ARROW, __pyx_t_1) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":410
 * IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None
 * IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow
 * IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll
 * IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_TextInput); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_TEXT_INPUT, __pyx_t_1) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":411
 * IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow
 * IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput
 * IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS
 * IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeAll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_ALL, __pyx_t_1) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":412
 * IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput
 * IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll
 * IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW
 * IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NS, __pyx_t_1) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":413
 * IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll
 * IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS
 * IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW
 * IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeEW); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_EW, __pyx_t_1) < 0) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":414
 * IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS
 * IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW
 * IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE
 * IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNESW); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NESW, __pyx_t_1) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":415
 * IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW
 * IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW
 * IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand
 * IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ResizeNWSE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_RESIZE_NWSE, __pyx_t_1) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":416
 * IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW
 * IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE
 * IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed
 * IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_Hand); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_HAND, __pyx_t_1) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":417
 * IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE
 * IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand
 * IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed             # <<<<<<<<<<<<<<
 * IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT
 * IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_NotAllowed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_NOT_ALLOWED, __pyx_t_1) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":418
 * IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand
 * IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed
 * IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate
 * IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_MOUSE_CURSOR_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":419
 * IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed
 * IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT
 * IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel
 * IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_Activate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_ACTIVATE, __pyx_t_1) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":420
 * IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT
 * IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate
 * IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input
 * IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_Cancel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_CANCEL, __pyx_t_1) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":421
 * IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate
 * IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel
 * IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu
 * IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_Input); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_INPUT, __pyx_t_1) < 0) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":422
 * IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel
 * IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input
 * IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft
 * IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_Menu); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_MENU, __pyx_t_1) < 0) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":423
 * IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input
 * IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu
 * IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight
 * IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_DpadLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_DPAD_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":424
 * IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu
 * IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft
 * IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp
 * IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_DpadRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_DPAD_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":425
 * IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft
 * IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight
 * IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown
 * IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_DpadUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_DPAD_UP, __pyx_t_1) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":426
 * IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight
 * IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp
 * IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft
 * IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_DpadDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_DPAD_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":427
 * IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp
 * IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown
 * IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight
 * IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_LStickLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_L_STICK_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":428
 * IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown
 * IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft
 * IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp
 * IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_LStickRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_L_STICK_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":429
 * IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft
 * IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight
 * IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown
 * IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_LStickUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_L_STICK_UP, __pyx_t_1) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":430
 * IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight
 * IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp
 * IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev
 * IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_LStickDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_L_STICK_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":431
 * IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp
 * IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown
 * IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext
 * IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_FocusPrev); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_FOCUS_PREV, __pyx_t_1) < 0) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":432
 * IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown
 * IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev
 * IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow
 * IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_FocusNext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_FOCUS_NEXT, __pyx_t_1) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":433
 * IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev
 * IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext
 * IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast
 * IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_TweakSlow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_TWEAK_SLOW, __pyx_t_1) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":434
 * IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext
 * IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow
 * IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast             # <<<<<<<<<<<<<<
 * IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT
 * IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_TweakFast); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_TWEAK_FAST, __pyx_t_1) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":435
 * IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow
 * IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast
 * IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_NAV_INPUT_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":436
 * IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast
 * IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT
 * IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":437
 * IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT
 * IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_MouseButtonLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_L, __pyx_t_1) < 0) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":438
 * IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_MouseButtonRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_R, __pyx_t_1) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":439
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_MouseButtonMiddle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M, __pyx_t_1) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":440
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_MouseButtonMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_M_2, __pyx_t_1) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":441
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_MouseButtonDefault_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_MOUSE_BUTTON_D, __pyx_t_1) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":442
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems
 * IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_NoOpenOverExistingPopup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_E, __pyx_t_1) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":443
 * IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId
 * IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_NoOpenOverItems); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_NO_OPEN_OVER_I, __pyx_t_1) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":444
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems
 * IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel
 * IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_AnyPopupId); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP_ID, __pyx_t_1) < 0) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":445
 * IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems
 * IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId
 * IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel             # <<<<<<<<<<<<<<
 * IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup
 * IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_AnyPopupLevel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP_LEVE, __pyx_t_1) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":446
 * IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId
 * IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel
 * IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup             # <<<<<<<<<<<<<<
 * IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None
 * IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_AnyPopup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_POPUP_FLAGS_ANY_POPUP, __pyx_t_1) < 0) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":447
 * IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel
 * IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup
 * IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups
 * IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SELECTABLE_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":448
 * IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup
 * IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None
 * IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups             # <<<<<<<<<<<<<<
 * IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns
 * IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_DontClosePopups); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SELECTABLE_FLAGS_DONT_CLOS, __pyx_t_1) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":449
 * IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None
 * IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups
 * IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns             # <<<<<<<<<<<<<<
 * IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick
 * IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_SpanAllColumns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SELECTABLE_FLAGS_SPAN_ALL, __pyx_t_1) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":450
 * IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups
 * IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns
 * IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick             # <<<<<<<<<<<<<<
 * IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled
 * IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_AllowDoubleClick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SELECTABLE_FLAGS_ALLOW_DOU, __pyx_t_1) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":451
 * IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns
 * IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick
 * IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled             # <<<<<<<<<<<<<<
 * IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap
 * IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_Disabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SELECTABLE_FLAGS_DISABLED, __pyx_t_1) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":452
 * IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick
 * IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled
 * IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap             # <<<<<<<<<<<<<<
 * IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None
 * IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_AllowItemOverlap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SELECTABLE_FLAGS_ALLOW_ITE, __pyx_t_1) < 0) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":453
 * IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled
 * IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap
 * IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp
 * IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SLIDER_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":454
 * IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap
 * IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None
 * IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp             # <<<<<<<<<<<<<<
 * IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic
 * IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_AlwaysClamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP, __pyx_t_1) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":455
 * IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None
 * IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp
 * IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic             # <<<<<<<<<<<<<<
 * IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat
 * IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_Logarithmic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SLIDER_FLAGS_LOGARITHMIC, __pyx_t_1) < 0) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":456
 * IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp
 * IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic
 * IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat             # <<<<<<<<<<<<<<
 * IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput
 * IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_NoRoundToFormat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SLIDER_FLAGS_NO_ROUND_TO_F, __pyx_t_1) < 0) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":457
 * IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic
 * IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat
 * IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput             # <<<<<<<<<<<<<<
 * IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_
 * IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_NoInput); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SLIDER_FLAGS_NO_INPUT, __pyx_t_1) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":458
 * IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat
 * IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput
 * IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_             # <<<<<<<<<<<<<<
 * IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None
 * IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_InvalidMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SLIDER_FLAGS_INVALID_MASK, __pyx_t_1) < 0) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":459
 * IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput
 * IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_
 * IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None             # <<<<<<<<<<<<<<
 * IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending
 * IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSortDirection_(ImGuiSortDirection_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SORT_DIRECTION_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":460
 * IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_
 * IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None
 * IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending             # <<<<<<<<<<<<<<
 * IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending
 * IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSortDirection_(ImGuiSortDirection_Ascending); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SORT_DIRECTION_ASCENDING, __pyx_t_1) < 0) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":461
 * IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None
 * IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending
 * IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha
 * IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiSortDirection_(ImGuiSortDirection_Descending); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_SORT_DIRECTION_DESCENDING, __pyx_t_1) < 0) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":462
 * IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending
 * IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending
 * IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha
 * IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_Alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_ALPHA, __pyx_t_1) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":463
 * IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending
 * IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha
 * IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding
 * IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_DisabledAlpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_DISABLED_ALPHA, __pyx_t_1) < 0) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":464
 * IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha
 * IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha
 * IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding
 * IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_WINDOW_PADDING, __pyx_t_1) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":465
 * IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha
 * IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding
 * IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize
 * IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_WINDOW_ROUNDING, __pyx_t_1) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":466
 * IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding
 * IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding
 * IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize
 * IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_WINDOW_BORDER_SI, __pyx_t_1) < 0) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":467
 * IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding
 * IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize
 * IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign
 * IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_WINDOW_MIN_SIZE, __pyx_t_1) < 0) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":468
 * IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize
 * IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize
 * IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding
 * IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_WindowTitleAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_WINDOW_TITLE_ALI, __pyx_t_1) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":469
 * IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize
 * IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign
 * IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize
 * IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ChildRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_CHILD_ROUNDING, __pyx_t_1) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":470
 * IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign
 * IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding
 * IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding
 * IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ChildBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_CHILD_BORDER_SIZ, __pyx_t_1) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":471
 * IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding
 * IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize
 * IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize
 * IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_PopupRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_POPUP_ROUNDING, __pyx_t_1) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":472
 * IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize
 * IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding
 * IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding
 * IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_PopupBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_POPUP_BORDER_SIZ, __pyx_t_1) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":473
 * IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding
 * IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize
 * IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding
 * IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FramePadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_FRAME_PADDING, __pyx_t_1) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":474
 * IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize
 * IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding
 * IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize
 * IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FrameRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_FRAME_ROUNDING, __pyx_t_1) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":475
 * IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding
 * IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding
 * IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing
 * IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_FrameBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_FRAME_BORDER_SIZ, __pyx_t_1) < 0) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":476
 * IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding
 * IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize
 * IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing
 * IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ItemSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_ITEM_SPACING, __pyx_t_1) < 0) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":477
 * IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize
 * IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing
 * IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing
 * IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ItemInnerSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_ITEM_INNER_SPACI, __pyx_t_1) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":478
 * IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing
 * IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing
 * IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding
 * IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_IndentSpacing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_INDENT_SPACING, __pyx_t_1) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":479
 * IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing
 * IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing
 * IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize
 * IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_CellPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_CELL_PADDING, __pyx_t_1) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":480
 * IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing
 * IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding
 * IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding
 * IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ScrollbarSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_SCROLLBAR_SIZE, __pyx_t_1) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":481
 * IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding
 * IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize
 * IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize
 * IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ScrollbarRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_SCROLLBAR_ROUNDI, __pyx_t_1) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":482
 * IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize
 * IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding
 * IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding
 * IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_GrabMinSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_GRAB_MIN_SIZE, __pyx_t_1) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":483
 * IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding
 * IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize
 * IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding
 * IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_GrabRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_GRAB_ROUNDING, __pyx_t_1) < 0) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":484
 * IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize
 * IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding
 * IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign
 * IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_TabRounding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_TAB_ROUNDING, __pyx_t_1) < 0) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":485
 * IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding
 * IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding
 * IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ButtonTextAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_BUTTON_TEXT_ALIG, __pyx_t_1) < 0) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":486
 * IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding
 * IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign
 * IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_SelectableTextAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_SELECTABLE_TEXT, __pyx_t_1) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":487
 * IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign
 * IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_SeparatorTextBorderSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_B, __pyx_t_1) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":488
 * IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding
 * IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_SeparatorTextAlign); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_A, __pyx_t_1) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":489
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding             # <<<<<<<<<<<<<<
 * IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT
 * IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_SeparatorTextPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_SEPARATOR_TEXT_P, __pyx_t_1) < 0) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":490
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding
 * IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None
 * IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_COUNT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_STYLE_VAR_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":491
 * IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding
 * IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT
 * IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable
 * IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":492
 * IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT
 * IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None
 * IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs
 * IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_Reorderable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_REORDERABLE, __pyx_t_1) < 0) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":493
 * IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None
 * IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable
 * IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton
 * IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_AutoSelectNewTabs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_AUTO_SELECT, __pyx_t_1) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":494
 * IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable
 * IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs
 * IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
 * IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_TabListPopupButton); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_TAB_LIST_POP, __pyx_t_1) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":495
 * IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs
 * IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton
 * IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons
 * IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_NoCloseWithMiddleMouseButton); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WIT, __pyx_t_1) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":496
 * IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton
 * IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
 * IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_NoTabListScrollingButtons); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST, __pyx_t_1) < 0) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":497
 * IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
 * IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons
 * IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_NoTooltip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP, __pyx_t_1) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":498
 * IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons
 * IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_FittingPolicyResizeDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI, __pyx_t_1) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":499
 * IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_FittingPolicyScroll); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_2, __pyx_t_1) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":500
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_             # <<<<<<<<<<<<<<
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_
 * IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_FittingPolicyMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_3, __pyx_t_1) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":501
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None
 * IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_FittingPolicyDefault_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_BAR_FLAGS_FITTING_POLI_4, __pyx_t_1) < 0) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":502
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_
 * IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument
 * IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":503
 * IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_
 * IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None
 * IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected
 * IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_UnsavedDocument); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOC, __pyx_t_1) < 0) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":504
 * IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None
 * IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument
 * IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
 * IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_SetSelected); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_SET_SELECTE, __pyx_t_1) < 0) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":505
 * IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument
 * IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected
 * IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId
 * IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_NoCloseWithMiddleMouseButton); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WI, __pyx_t_1) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":506
 * IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected
 * IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
 * IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip
 * IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_NoPushId); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID, __pyx_t_1) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":507
 * IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
 * IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId
 * IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder
 * IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_NoTooltip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP, __pyx_t_1) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":508
 * IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId
 * IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip
 * IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading
 * IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_NoReorder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_NO_REORDER, __pyx_t_1) < 0) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":509
 * IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip
 * IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder
 * IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading             # <<<<<<<<<<<<<<
 * IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing
 * IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_Leading); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_LEADING, __pyx_t_1) < 0) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":510
 * IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder
 * IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading
 * IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None
 * IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_Trailing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TAB_ITEM_FLAGS_TRAILING, __pyx_t_1) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":511
 * IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading
 * IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing
 * IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0
 * IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableBgTarget_(ImGuiTableBgTarget_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_BG_TARGET_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":512
 * IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing
 * IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None
 * IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1
 * IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableBgTarget_(ImGuiTableBgTarget_RowBg0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_BG_TARGET_ROW_BG0, __pyx_t_1) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":513
 * IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None
 * IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0
 * IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg
 * IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableBgTarget_(ImGuiTableBgTarget_RowBg1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_BG_TARGET_ROW_BG1, __pyx_t_1) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":514
 * IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0
 * IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1
 * IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None
 * IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableBgTarget_(ImGuiTableBgTarget_CellBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_BG_TARGET_CELL_BG, __pyx_t_1) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":515
 * IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1
 * IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg
 * IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":516
 * IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg
 * IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None
 * IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_Disabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DISABLE, __pyx_t_1) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":517
 * IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None
 * IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_DefaultHide); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT, __pyx_t_1) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":518
 * IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_DefaultSort); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_2, __pyx_t_1) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":519
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed
 * IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_WidthStretch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_S, __pyx_t_1) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":520
 * IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize
 * IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_WidthFixed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_F, __pyx_t_1) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":521
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed
 * IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoResize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_RESI, __pyx_t_1) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":522
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed
 * IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize
 * IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide
 * IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoReorder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_REOR, __pyx_t_1) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":523
 * IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize
 * IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoHide); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE, __pyx_t_1) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":524
 * IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide
 * IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoClip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP, __pyx_t_1) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":525
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide
 * IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoSort); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT, __pyx_t_1) < 0) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":526
 * IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoSortAscending); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_2, __pyx_t_1) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":527
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoSortDescending); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_3, __pyx_t_1) < 0) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":528
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoHeaderLabel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD, __pyx_t_1) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":529
 * IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoHeaderWidth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_HEAD_2, __pyx_t_1) < 0) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":530
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_PreferSortAscending); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_PREFER, __pyx_t_1) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":531
 * IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_PreferSortDescending); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_PREFER_2, __pyx_t_1) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":532
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable
 * IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_IndentEnable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT, __pyx_t_1) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":533
 * IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled
 * IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_IndentDisable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT_2, __pyx_t_1) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":534
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable
 * IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible
 * IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_IsEnabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_ENAB, __pyx_t_1) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":535
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable
 * IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled
 * IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted
 * IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_IsVisible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_VISI, __pyx_t_1) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":536
 * IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled
 * IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible
 * IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_IsSorted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_SORT, __pyx_t_1) < 0) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":537
 * IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible
 * IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted
 * IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_IsHovered); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_IS_HOVE, __pyx_t_1) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":538
 * IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted
 * IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_
 * IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_WidthMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_WIDTH_M, __pyx_t_1) < 0) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":539
 * IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_
 * IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_IndentMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_INDENT_3, __pyx_t_1) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":540
 * IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_
 * IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_
 * IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_StatusMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_STATUS, __pyx_t_1) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":541
 * IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_
 * IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_
 * IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None
 * IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_NoDirectResize_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_COLUMN_FLAGS_NO_DIRE, __pyx_t_1) < 0) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":542
 * IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_
 * IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_
 * IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable
 * IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":543
 * IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_
 * IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None
 * IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable
 * IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_Resizable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_RESIZABLE, __pyx_t_1) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":544
 * IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None
 * IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable
 * IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable
 * IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_Reorderable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_REORDERABLE, __pyx_t_1) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":545
 * IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable
 * IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable
 * IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable
 * IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_Hideable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_HIDEABLE, __pyx_t_1) < 0) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":546
 * IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable
 * IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable
 * IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings
 * IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_Sortable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SORTABLE, __pyx_t_1) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":547
 * IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable
 * IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable
 * IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody
 * IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoSavedSettings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_SAVED_SETTI, __pyx_t_1) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":548
 * IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable
 * IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings
 * IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg
 * IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_ContextMenuInBody); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_CONTEXT_MENU_I, __pyx_t_1) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":549
 * IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings
 * IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody
 * IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_RowBg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_ROW_BG, __pyx_t_1) < 0) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":550
 * IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody
 * IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg
 * IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH
 * IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersInnerH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNERH, __pyx_t_1) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":551
 * IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg
 * IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersOuterH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTERH, __pyx_t_1) < 0) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":552
 * IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH
 * IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV
 * IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersInnerV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNERV, __pyx_t_1) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":553
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH
 * IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH
 * IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersOuterV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTERV, __pyx_t_1) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":554
 * IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV
 * IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV
 * IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERSH, __pyx_t_1) < 0) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":555
 * IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV
 * IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH
 * IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner
 * IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersV); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERSV, __pyx_t_1) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":556
 * IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH
 * IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV
 * IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter
 * IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersInner); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_INNER, __pyx_t_1) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":557
 * IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV
 * IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner
 * IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_BordersOuter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS_OUTER, __pyx_t_1) < 0) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":558
 * IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner
 * IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter
 * IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_Borders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_BORDERS, __pyx_t_1) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":559
 * IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter
 * IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoBordersInBody); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_BORDERS_IN, __pyx_t_1) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":560
 * IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoBordersInBodyUntilResize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_BORDERS_IN_2, __pyx_t_1) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":561
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_SizingFixedFit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_FIXED_F, __pyx_t_1) < 0) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":562
 * IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_SizingFixedSame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_FIXED_S, __pyx_t_1) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":563
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_SizingStretchProp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_STRETCH, __pyx_t_1) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":564
 * IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_SizingStretchSame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_STRETCH_2, __pyx_t_1) < 0) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":565
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY
 * IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoHostExtendX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND, __pyx_t_1) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":566
 * IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible
 * IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoHostExtendY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_HOST_EXTEND_2, __pyx_t_1) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":567
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY
 * IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths
 * IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoKeepColumnsVisible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_KEEP_COLUMN, __pyx_t_1) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":568
 * IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY
 * IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible
 * IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip
 * IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_PreciseWidths); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_PRECISE_WIDTHS, __pyx_t_1) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":569
 * IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible
 * IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths
 * IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX
 * IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoClip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_CLIP, __pyx_t_1) < 0) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":570
 * IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths
 * IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip
 * IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX
 * IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_PadOuterX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_PAD_OUTERX, __pyx_t_1) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":571
 * IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip
 * IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX
 * IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX
 * IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoPadOuterX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_PAD_OUTERX, __pyx_t_1) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":572
 * IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX
 * IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX
 * IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX
 * IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_NoPadInnerX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_NO_PAD_INNERX, __pyx_t_1) < 0) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":573
 * IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX
 * IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX
 * IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY
 * IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_ScrollX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SCROLLX, __pyx_t_1) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":574
 * IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX
 * IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX
 * IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti
 * IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_ScrollY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SCROLLY, __pyx_t_1) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":575
 * IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX
 * IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY
 * IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate
 * IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_SortMulti); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SORT_MULTI, __pyx_t_1) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":576
 * IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY
 * IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti
 * IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_
 * IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_SortTristate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SORT_TRISTATE, __pyx_t_1) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":577
 * IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti
 * IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate
 * IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None
 * IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_SizingMask_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_FLAGS_SIZING_MASK, __pyx_t_1) < 0) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":578
 * IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate
 * IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_
 * IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers
 * IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableRowFlags_(ImGuiTableRowFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_ROW_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":579
 * IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_
 * IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None
 * IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None
 * IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTableRowFlags_(ImGuiTableRowFlags_Headers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TABLE_ROW_FLAGS_HEADERS, __pyx_t_1) < 0) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":580
 * IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None
 * IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers
 * IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected
 * IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":581
 * IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers
 * IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None
 * IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed
 * IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Selected); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_SELECTED, __pyx_t_1) < 0) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":582
 * IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None
 * IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected
 * IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap
 * IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Framed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_FRAMED, __pyx_t_1) < 0) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":583
 * IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected
 * IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed
 * IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_AllowItemOverlap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM, __pyx_t_1) < 0) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":584
 * IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed
 * IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap
 * IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_NoTreePushOnOpen); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_NO_TREE_PU, __pyx_t_1) < 0) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":585
 * IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap
 * IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_NoAutoOpenOnLog); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_NO_AUTO_OP, __pyx_t_1) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":586
 * IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen
 * IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_DefaultOpen); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_DEFAULT_OP, __pyx_t_1) < 0) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":587
 * IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog
 * IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow
 * IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_OpenOnDoubleClick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_OPEN_ON_DO, __pyx_t_1) < 0) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":588
 * IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf
 * IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_OpenOnArrow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_OPEN_ON_AR, __pyx_t_1) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":589
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow
 * IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet
 * IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Leaf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_LEAF, __pyx_t_1) < 0) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":590
 * IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow
 * IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf
 * IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding
 * IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_Bullet); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_BULLET, __pyx_t_1) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":591
 * IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf
 * IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet
 * IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth
 * IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_FramePadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_FRAME_PADD, __pyx_t_1) < 0) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":592
 * IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet
 * IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding
 * IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth
 * IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_SpanAvailWidth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL, __pyx_t_1) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":593
 * IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding
 * IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth
 * IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
 * IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_SpanFullWidth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_SPAN_FULL, __pyx_t_1) < 0) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":594
 * IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth
 * IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth
 * IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere             # <<<<<<<<<<<<<<
 * IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader
 * IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_NavLeftJumpsBackHere); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_NAV_LEFT_J, __pyx_t_1) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":595
 * IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth
 * IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
 * IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_CollapsingHeader); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_TREE_NODE_FLAGS_COLLAPSING, __pyx_t_1) < 0) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":596
 * IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
 * IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader
 * IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":597
 * IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader
 * IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor
 * IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_IsPlatformWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM, __pyx_t_1) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":598
 * IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp
 * IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_IsPlatformMonitor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_2, __pyx_t_1) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":599
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor
 * IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration
 * IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_OwnedByApp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_OWNED_BY_AP, __pyx_t_1) < 0) __PYX_ERR(0, 599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":600
 * IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor
 * IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp
 * IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_NoDecoration); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_DECORATI, __pyx_t_1) < 0) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":601
 * IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp
 * IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration
 * IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_NoTaskBarIcon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR, __pyx_t_1) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":602
 * IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration
 * IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick
 * IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_NoFocusOnAppearing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON, __pyx_t_1) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":603
 * IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs
 * IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_NoFocusOnClick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_2, __pyx_t_1) < 0) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":604
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick
 * IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear
 * IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_NoInputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":605
 * IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick
 * IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs
 * IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost
 * IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_NoRendererClear); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_RENDERER, __pyx_t_1) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":606
 * IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs
 * IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear
 * IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized
 * IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_TopMost); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_TOP_MOST, __pyx_t_1) < 0) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":607
 * IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear
 * IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost
 * IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge
 * IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_Minimized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_MINIMIZED, __pyx_t_1) < 0) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":608
 * IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost
 * IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized
 * IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge             # <<<<<<<<<<<<<<
 * IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows
 * IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_NoAutoMerge); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_NO_AUTO_MER, __pyx_t_1) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":609
 * IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized
 * IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge
 * IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None
 * IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_CanHostOtherWindows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_VIEWPORT_FLAGS_CAN_HOST_OT, __pyx_t_1) < 0) __PYX_ERR(0, 609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":610
 * IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge
 * IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows
 * IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar
 * IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":611
 * IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows
 * IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None
 * IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize
 * IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoTitleBar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_TITLE_BAR, __pyx_t_1) < 0) __PYX_ERR(0, 611, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":612
 * IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None
 * IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar
 * IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove
 * IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoResize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_RESIZE, __pyx_t_1) < 0) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":613
 * IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar
 * IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize
 * IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar
 * IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoMove); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_MOVE, __pyx_t_1) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":614
 * IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize
 * IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove
 * IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse
 * IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoScrollbar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SCROLLBAR, __pyx_t_1) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":615
 * IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove
 * IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar
 * IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse
 * IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoScrollWithMouse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SCROLL_WIT, __pyx_t_1) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":616
 * IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar
 * IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse
 * IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize
 * IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoCollapse); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_COLLAPSE, __pyx_t_1) < 0) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":617
 * IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse
 * IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse
 * IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground
 * IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysAutoResize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_R, __pyx_t_1) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":618
 * IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse
 * IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize
 * IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings
 * IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoBackground); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_BACKGROUND, __pyx_t_1) < 0) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":619
 * IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize
 * IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground
 * IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs
 * IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoSavedSettings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_SAVED_SETT, __pyx_t_1) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":620
 * IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground
 * IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings
 * IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar
 * IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoMouseInputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_MOUSE_INPU, __pyx_t_1) < 0) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":621
 * IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings
 * IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs
 * IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar
 * IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_MenuBar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_MENU_BAR, __pyx_t_1) < 0) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":622
 * IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs
 * IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar
 * IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing
 * IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_HorizontalScrollbar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_HORIZONTAL_SC, __pyx_t_1) < 0) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":623
 * IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar
 * IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar
 * IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus
 * IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoFocusOnAppearing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_A, __pyx_t_1) < 0) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":624
 * IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar
 * IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing
 * IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoBringToFrontOnFocus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_BRING_TO_F, __pyx_t_1) < 0) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":625
 * IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing
 * IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus
 * IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysVerticalScrollbar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_VERTIC, __pyx_t_1) < 0) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":626
 * IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus
 * IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding
 * IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysHorizontalScrollbar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_HORIZO, __pyx_t_1) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":627
 * IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar
 * IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs
 * IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_AlwaysUseWindowPadding); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_ALWAYS_USE_WI, __pyx_t_1) < 0) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":628
 * IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar
 * IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding
 * IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus
 * IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoNavInputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":629
 * IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding
 * IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs
 * IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument
 * IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoNavFocus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS, __pyx_t_1) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":630
 * IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs
 * IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus
 * IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking
 * IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_UnsavedDocument); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_UNSAVED_DOCUM, __pyx_t_1) < 0) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":631
 * IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus
 * IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument
 * IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav
 * IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoDocking); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_DOCKING, __pyx_t_1) < 0) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":632
 * IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument
 * IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking
 * IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration
 * IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoNav); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_NAV, __pyx_t_1) < 0) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":633
 * IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking
 * IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav
 * IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs
 * IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoDecoration); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_DECORATION, __pyx_t_1) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":634
 * IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav
 * IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration
 * IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened
 * IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NoInputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NO_INPUTS, __pyx_t_1) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":635
 * IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration
 * IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs
 * IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow
 * IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_NavFlattened); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_NAV_FLATTENED, __pyx_t_1) < 0) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":636
 * IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs
 * IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened
 * IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip
 * IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ChildWindow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_CHILD_WINDOW, __pyx_t_1) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":637
 * IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened
 * IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow
 * IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup
 * IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_Tooltip); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_TOOLTIP, __pyx_t_1) < 0) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":638
 * IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow
 * IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip
 * IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal
 * IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImGuiWindowFlags_ChildMenu
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_Popup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_POPUP, __pyx_t_1) < 0) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":639
 * IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip
 * IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup
 * IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImGuiWindowFlags_ChildMenu
 * IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST = ccimgui.ImGuiWindowFlags_DockNodeHost
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_Modal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_MODAL, __pyx_t_1) < 0) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":640
 * IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup
 * IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal
 * IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImGuiWindowFlags_ChildMenu             # <<<<<<<<<<<<<<
 * IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST = ccimgui.ImGuiWindowFlags_DockNodeHost
 * # [End Enums]
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ChildMenu); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_CHILD_MENU, __pyx_t_1) < 0) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":641
 * IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal
 * IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImGuiWindowFlags_ChildMenu
 * IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST = ccimgui.ImGuiWindowFlags_DockNodeHost             # <<<<<<<<<<<<<<
 * # [End Enums]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_DockNodeHost); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IMGUI_WINDOW_FLAGS_DOCK_NODE_HOS, __pyx_t_1) < 0) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "core.pyx":645
 * 
 * # [Constant Functions]
 * Vec2 = namedtuple('Vec2', ['x', 'y'])             # <<<<<<<<<<<<<<
 * Vec4 = namedtuple('Vec4', ['x', 'y', 'z', 'w'])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_x);
  __Pyx_GIVEREF(__pyx_n_u_x);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_x);
  __Pyx_INCREF(__pyx_n_u_y);
  __Pyx_GIVEREF(__pyx_n_u_y);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_y);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_Vec2);
  __Pyx_GIVEREF(__pyx_n_u_Vec2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_Vec2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec2, __pyx_t_2) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "core.pyx":646
 * # [Constant Functions]
 * Vec2 = namedtuple('Vec2', ['x', 'y'])
 * Vec4 = namedtuple('Vec4', ['x', 'y', 'z', 'w'])             # <<<<<<<<<<<<<<
 * 
 * cdef bytes _bytes(str text):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_namedtuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_x);
  __Pyx_GIVEREF(__pyx_n_u_x);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_x);
  __Pyx_INCREF(__pyx_n_u_y);
  __Pyx_GIVEREF(__pyx_n_u_y);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_u_y);
  __Pyx_INCREF(__pyx_n_u_z);
  __Pyx_GIVEREF(__pyx_n_u_z);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_u_z);
  __Pyx_INCREF(__pyx_n_u_w);
  __Pyx_GIVEREF(__pyx_n_u_w);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_n_u_w);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_Vec4);
  __Pyx_GIVEREF(__pyx_n_u_Vec4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_Vec4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Vec4, __pyx_t_3) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":677
 * 
 * 
 * def _py_vertex_buffer_vertex_pos_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_1_py_vertex_buffer_vertex_pos_offset, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_pos_off, __pyx_t_3) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":680
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos
 * 
 * def _py_vertex_buffer_vertex_uv_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_3_py_vertex_buffer_vertex_uv_offset, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_uv_offs, __pyx_t_3) < 0) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":683
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv
 * 
 * def _py_vertex_buffer_vertex_col_offset():             # <<<<<<<<<<<<<<
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_5_py_vertex_buffer_vertex_col_offset, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_col_off, __pyx_t_3) < 0) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":686
 *     return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col
 * 
 * def _py_vertex_buffer_vertex_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_7_py_vertex_buffer_vertex_size, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_vertex_buffer_vertex_size, __pyx_t_3) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":689
 *     return sizeof(ccimgui.ImDrawVert)
 * 
 * def _py_index_buffer_index_size():             # <<<<<<<<<<<<<<
 *     return sizeof(ccimgui.ImDrawIdx)
 * 
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_9_py_index_buffer_index_size, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_index_buffer_index_size, __pyx_t_3) < 0) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":746
 * # ?active(True)
 * # ?returns(Tuple[bool, bool])
 * def begin(name: str, p_open: BoolPtr, flags: int=0):             # <<<<<<<<<<<<<<
 *     cdef bool is_open = True
 *     cdef ccimgui.bool res = ccimgui.igBegin(_bytes(name), &is_open, flags)
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_11begin, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_begin, __pyx_t_3) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":1280
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def create_context(shared_font_atlas: ImFontAtlas=None):             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res
 *     if shared_font_atlas is None:
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_13create_context, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create_context, __pyx_t_3) < 0) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":1322
 * # ?active(True)
 * # ?returns(None)
 * def destroy_context(ctx: ImGuiContext=None):             # <<<<<<<<<<<<<<
 *     """
 *     Null = destroy current context
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_15destroy_context, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_destroy_context, __pyx_t_3) < 0) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":1600
 * # ?active(True)
 * # ?returns(None)
 * def end():             # <<<<<<<<<<<<<<
 *     ccimgui.igEnd()
 * # [End Function]
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_17end, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_end, __pyx_t_3) < 0) __PYX_ERR(0, 1600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":1970
 * # ?active(True)
 * # ?returns(ImGuiContext)
 * def get_current_context():             # <<<<<<<<<<<<<<
 *     cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
 *     return ImGuiContext.from_ptr(res)
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_19get_current_context, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_current_context, __pyx_t_3) < 0) __PYX_ERR(0, 1970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":2056
 * # ?active(True)
 * # ?returns(ImDrawData)
 * def get_draw_data():             # <<<<<<<<<<<<<<
 *     """
 *     Valid after render() and until the next call to newframe(). this
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_21get_draw_data, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_draw_data, __pyx_t_3) < 0) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":2214
 * # ?active(True)
 * # ?returns(ImGuiIO)
 * def get_io():             # <<<<<<<<<<<<<<
 *     """
 *     Access the io structure (mouse/keyboard/gamepad inputs, time,
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_23get_io, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_io, __pyx_t_3) < 0) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":2553
 * # ?active(True)
 * # ?returns(str)
 * def get_version():             # <<<<<<<<<<<<<<
 *     """
 *     Get the compiled version string e.g. 1.80 wip (essentially the
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_25get_version, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_version, __pyx_t_3) < 0) __PYX_ERR(0, 2553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":3472
 * # ?active(True)
 * # ?returns(None)
 * def new_frame():             # <<<<<<<<<<<<<<
 *     """
 *     Start a new dear imgui frame, you can submit any command from
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_27new_frame, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_new_frame, __pyx_t_3) < 0) __PYX_ERR(0, 3472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":3882
 * # ?active(True)
 * # ?returns(None)
 * def render():             # <<<<<<<<<<<<<<
 *     """
 *     Ends the dear imgui frame, finalize the draw data. you can then
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_29render, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_render, __pyx_t_3) < 0) __PYX_ERR(0, 3882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":3894
 * # ?active(True)
 * # ?returns(None)
 * def render_platform_windows_default(platform_render_arg: Any=None, renderer_render_arg: Any=None):             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call renderwindow/swapbuffers platform
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_31render_platform_windows_default, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_render_platform_windows_default, __pyx_t_3) < 0) __PYX_ERR(0, 3894, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":4599
 * # ?active(True)
 * # ?returns(None)
 * def show_demo_window(closable: bool=False):             # <<<<<<<<<<<<<<
 *     """
 *     Create demo window. demonstrate most imgui features. call this
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_33show_demo_window, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_demo_window, __pyx_t_3) < 0) __PYX_ERR(0, 4599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":4680
 * # ?active(True)
 * # ?returns(None)
 * def show_user_guide():             # <<<<<<<<<<<<<<
 *     """
 *     Add basic help/info block (not a window): how to manipulate imgui
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_35show_user_guide, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_show_user_guide, __pyx_t_3) < 0) __PYX_ERR(0, 4680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":5131
 * # ?active(True)
 * # ?returns(None)
 * def text(fmt: str):             # <<<<<<<<<<<<<<
 *     """
 *     Formatted text
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_37text, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_text, __pyx_t_3) < 0) __PYX_ERR(0, 5131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":5364
 * # ?active(True)
 * # ?returns(None)
 * def update_platform_windows():             # <<<<<<<<<<<<<<
 *     """
 *     Call in main loop. will call createwindow/resizewindow/etc. platform
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_39update_platform_windows, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_update_platform_windows, __pyx_t_3) < 0) __PYX_ERR(0, 5364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":10299
 * # [Class Constants]
 * # ?use_template(True)
 * _io_clipboard = {}             # <<<<<<<<<<<<<<
 * cdef class ImGuiIO:
 *     cdef ccimgui.ImGuiIO* _ptr
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_io_clipboard, __pyx_t_3) < 0) __PYX_ERR(0, 10299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BoolPtr(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_4core_41__pyx_unpickle_BoolPtr, NULL, __pyx_n_s_core); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BoolPtr, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "core.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # cython: language_level = 3
 * # cython: embedsignature=True
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":210
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_3 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_3) < 0) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__171, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__172, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__173, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__174, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__175, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":317
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":318
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_4[0] = PyThread_allocate_lock();
  __pyx_t_4[1] = PyThread_allocate_lock();
  __pyx_t_4[2] = PyThread_allocate_lock();
  __pyx_t_4[3] = PyThread_allocate_lock();
  __pyx_t_4[4] = PyThread_allocate_lock();
  __pyx_t_4[5] = PyThread_allocate_lock();
  __pyx_t_4[6] = PyThread_allocate_lock();
  __pyx_t_4[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_4, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":551
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_3) < 0) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":997
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_3) < 0) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_3 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init core", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* MemviewSliceCopyTemplate */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImDrawFlags_(ImDrawFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImDrawFlags_ neg_one = (ImDrawFlags_) -1, const_zero = (ImDrawFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImDrawFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImDrawFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImDrawFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImDrawFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImDrawFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImDrawFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImDrawListFlags_(ImDrawListFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImDrawListFlags_ neg_one = (ImDrawListFlags_) -1, const_zero = (ImDrawListFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImDrawListFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImDrawListFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImDrawListFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImDrawListFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImDrawListFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImDrawListFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImFontAtlasFlags_(ImFontAtlasFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImFontAtlasFlags_ neg_one = (ImFontAtlasFlags_) -1, const_zero = (ImFontAtlasFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImFontAtlasFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImFontAtlasFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImFontAtlasFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImFontAtlasFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImFontAtlasFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImFontAtlasFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiBackendFlags_(ImGuiBackendFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiBackendFlags_ neg_one = (ImGuiBackendFlags_) -1, const_zero = (ImGuiBackendFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiBackendFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiBackendFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiBackendFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiBackendFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiBackendFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiBackendFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiButtonFlags_(ImGuiButtonFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiButtonFlags_ neg_one = (ImGuiButtonFlags_) -1, const_zero = (ImGuiButtonFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiButtonFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiButtonFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiButtonFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiButtonFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiButtonFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiButtonFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCol_(ImGuiCol_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiCol_ neg_one = (ImGuiCol_) -1, const_zero = (ImGuiCol_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiCol_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiCol_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiCol_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCol_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiCol_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiColorEditFlags_(ImGuiColorEditFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiColorEditFlags_ neg_one = (ImGuiColorEditFlags_) -1, const_zero = (ImGuiColorEditFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiColorEditFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiColorEditFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiColorEditFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiColorEditFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiColorEditFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiColorEditFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiComboFlags_(ImGuiComboFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiComboFlags_ neg_one = (ImGuiComboFlags_) -1, const_zero = (ImGuiComboFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiComboFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiComboFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiComboFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiComboFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiComboFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiComboFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiCond_(ImGuiCond_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiCond_ neg_one = (ImGuiCond_) -1, const_zero = (ImGuiCond_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiCond_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiCond_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCond_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiCond_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiCond_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiCond_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags_(ImGuiConfigFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiConfigFlags_ neg_one = (ImGuiConfigFlags_) -1, const_zero = (ImGuiConfigFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiConfigFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiConfigFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiConfigFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiConfigFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDataType_(ImGuiDataType_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiDataType_ neg_one = (ImGuiDataType_) -1, const_zero = (ImGuiDataType_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiDataType_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiDataType_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDataType_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiDataType_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDataType_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiDataType_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDir_(ImGuiDir_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiDir_ neg_one = (ImGuiDir_) -1, const_zero = (ImGuiDir_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiDir_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiDir_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDir_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiDir_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDir_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiDir_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDockNodeFlags_(ImGuiDockNodeFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiDockNodeFlags_ neg_one = (ImGuiDockNodeFlags_) -1, const_zero = (ImGuiDockNodeFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiDockNodeFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiDockNodeFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDockNodeFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiDockNodeFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDockNodeFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiDockNodeFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiDragDropFlags_(ImGuiDragDropFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiDragDropFlags_ neg_one = (ImGuiDragDropFlags_) -1, const_zero = (ImGuiDragDropFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiDragDropFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiDragDropFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDragDropFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiDragDropFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiDragDropFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiDragDropFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiFocusedFlags_(ImGuiFocusedFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiFocusedFlags_ neg_one = (ImGuiFocusedFlags_) -1, const_zero = (ImGuiFocusedFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiFocusedFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiFocusedFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiFocusedFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiFocusedFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiFocusedFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiFocusedFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiHoveredFlags_(ImGuiHoveredFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiHoveredFlags_ neg_one = (ImGuiHoveredFlags_) -1, const_zero = (ImGuiHoveredFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiHoveredFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiHoveredFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiHoveredFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiHoveredFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiHoveredFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiHoveredFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiInputTextFlags_(ImGuiInputTextFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiInputTextFlags_ neg_one = (ImGuiInputTextFlags_) -1, const_zero = (ImGuiInputTextFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiInputTextFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiInputTextFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiInputTextFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiInputTextFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiKey(ImGuiKey value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiKey neg_one = (ImGuiKey) -1, const_zero = (ImGuiKey) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiKey) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiKey) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiKey) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiKey) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiKey) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiKey),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseButton_(ImGuiMouseButton_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiMouseButton_ neg_one = (ImGuiMouseButton_) -1, const_zero = (ImGuiMouseButton_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiMouseButton_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiMouseButton_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseButton_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiMouseButton_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseButton_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiMouseButton_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiMouseCursor_(ImGuiMouseCursor_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiMouseCursor_ neg_one = (ImGuiMouseCursor_) -1, const_zero = (ImGuiMouseCursor_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiMouseCursor_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiMouseCursor_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiMouseCursor_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiMouseCursor_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiNavInput(ImGuiNavInput value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiNavInput neg_one = (ImGuiNavInput) -1, const_zero = (ImGuiNavInput) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiNavInput) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiNavInput) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavInput) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiNavInput) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiNavInput) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiNavInput),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiPopupFlags_(ImGuiPopupFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiPopupFlags_ neg_one = (ImGuiPopupFlags_) -1, const_zero = (ImGuiPopupFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiPopupFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiPopupFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiPopupFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiPopupFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiPopupFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiPopupFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSelectableFlags_(ImGuiSelectableFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiSelectableFlags_ neg_one = (ImGuiSelectableFlags_) -1, const_zero = (ImGuiSelectableFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSelectableFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSelectableFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSelectableFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSelectableFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSliderFlags_(ImGuiSliderFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiSliderFlags_ neg_one = (ImGuiSliderFlags_) -1, const_zero = (ImGuiSliderFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSliderFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSliderFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSliderFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSliderFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSliderFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSliderFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiSortDirection_(ImGuiSortDirection_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiSortDirection_ neg_one = (ImGuiSortDirection_) -1, const_zero = (ImGuiSortDirection_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiSortDirection_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiSortDirection_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSortDirection_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiSortDirection_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiSortDirection_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiSortDirection_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiStyleVar_(ImGuiStyleVar_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiStyleVar_ neg_one = (ImGuiStyleVar_) -1, const_zero = (ImGuiStyleVar_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiStyleVar_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiStyleVar_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiStyleVar_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiStyleVar_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabBarFlags_(ImGuiTabBarFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTabBarFlags_ neg_one = (ImGuiTabBarFlags_) -1, const_zero = (ImGuiTabBarFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTabBarFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTabBarFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabBarFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTabBarFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabBarFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTabBarFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTabItemFlags_(ImGuiTabItemFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTabItemFlags_ neg_one = (ImGuiTabItemFlags_) -1, const_zero = (ImGuiTabItemFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTabItemFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTabItemFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabItemFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTabItemFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTabItemFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTabItemFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableBgTarget_(ImGuiTableBgTarget_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTableBgTarget_ neg_one = (ImGuiTableBgTarget_) -1, const_zero = (ImGuiTableBgTarget_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTableBgTarget_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTableBgTarget_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableBgTarget_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTableBgTarget_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableBgTarget_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTableBgTarget_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableColumnFlags_(ImGuiTableColumnFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTableColumnFlags_ neg_one = (ImGuiTableColumnFlags_) -1, const_zero = (ImGuiTableColumnFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTableColumnFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTableColumnFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableColumnFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTableColumnFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableColumnFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTableColumnFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableFlags_(ImGuiTableFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTableFlags_ neg_one = (ImGuiTableFlags_) -1, const_zero = (ImGuiTableFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTableFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTableFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTableFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTableFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTableRowFlags_(ImGuiTableRowFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTableRowFlags_ neg_one = (ImGuiTableRowFlags_) -1, const_zero = (ImGuiTableRowFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTableRowFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTableRowFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableRowFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTableRowFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTableRowFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTableRowFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiTreeNodeFlags_(ImGuiTreeNodeFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiTreeNodeFlags_ neg_one = (ImGuiTreeNodeFlags_) -1, const_zero = (ImGuiTreeNodeFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiTreeNodeFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiTreeNodeFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiTreeNodeFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiViewportFlags_(ImGuiViewportFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiViewportFlags_ neg_one = (ImGuiViewportFlags_) -1, const_zero = (ImGuiViewportFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiViewportFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiViewportFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiViewportFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiViewportFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiViewportFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiViewportFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiWindowFlags_(ImGuiWindowFlags_ value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiWindowFlags_ neg_one = (ImGuiWindowFlags_) -1, const_zero = (ImGuiWindowFlags_) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiWindowFlags_) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiWindowFlags_) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiWindowFlags_) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiWindowFlags_),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE ImGuiWindowFlags __Pyx_PyInt_As_ImGuiWindowFlags(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiWindowFlags neg_one = (ImGuiWindowFlags) -1, const_zero = (ImGuiWindowFlags) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiWindowFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiWindowFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiWindowFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiWindowFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiWindowFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiWindowFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiWindowFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiWindowFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiWindowFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiWindowFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiWindowFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((((ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiWindowFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) (((ImGuiWindowFlags)-1)*(((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiWindowFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiWindowFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiWindowFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiWindowFlags) ((((((((((ImGuiWindowFlags)digits[3]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[2]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[1]) << PyLong_SHIFT) | (ImGuiWindowFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiWindowFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiWindowFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiWindowFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiWindowFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiWindowFlags) -1;
        }
    } else {
        ImGuiWindowFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiWindowFlags) -1;
        val = __Pyx_PyInt_As_ImGuiWindowFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiWindowFlags");
    return (ImGuiWindowFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiWindowFlags");
    return (ImGuiWindowFlags) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ImGuiConfigFlags(ImGuiConfigFlags value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiConfigFlags neg_one = (ImGuiConfigFlags) -1, const_zero = (ImGuiConfigFlags) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ImGuiConfigFlags) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ImGuiConfigFlags) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ImGuiConfigFlags) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ImGuiConfigFlags),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE ImGuiConfigFlags __Pyx_PyInt_As_ImGuiConfigFlags(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiConfigFlags neg_one = (ImGuiConfigFlags) -1, const_zero = (ImGuiConfigFlags) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiConfigFlags) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiConfigFlags) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiConfigFlags) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiConfigFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) >= 2 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((((ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiConfigFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) >= 3 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((((((ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiConfigFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) >= 4 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((((((((ImGuiConfigFlags)digits[3]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiConfigFlags) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiConfigFlags) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiConfigFlags) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiConfigFlags) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((ImGuiConfigFlags)-1)*(((((ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiConfigFlags) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) ((((((ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiConfigFlags) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((ImGuiConfigFlags)-1)*(((((((ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiConfigFlags) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) ((((((((ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiConfigFlags) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) (((ImGuiConfigFlags)-1)*(((((((((ImGuiConfigFlags)digits[3]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiConfigFlags) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiConfigFlags, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiConfigFlags) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiConfigFlags) ((((((((((ImGuiConfigFlags)digits[3]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[2]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[1]) << PyLong_SHIFT) | (ImGuiConfigFlags)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiConfigFlags) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiConfigFlags) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiConfigFlags, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiConfigFlags val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiConfigFlags) -1;
        }
    } else {
        ImGuiConfigFlags val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiConfigFlags) -1;
        val = __Pyx_PyInt_As_ImGuiConfigFlags(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiConfigFlags");
    return (ImGuiConfigFlags) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiConfigFlags");
    return (ImGuiConfigFlags) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE ImGuiKey __Pyx_PyInt_As_ImGuiKey(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const ImGuiKey neg_one = (ImGuiKey) -1, const_zero = (ImGuiKey) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ImGuiKey) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ImGuiKey, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ImGuiKey) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiKey) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiKey, digit, digits[0])
                case 2:
                    if (8 * sizeof(ImGuiKey) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) >= 2 * PyLong_SHIFT) {
                            return (ImGuiKey) (((((ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiKey) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) >= 3 * PyLong_SHIFT) {
                            return (ImGuiKey) (((((((ImGuiKey)digits[2]) << PyLong_SHIFT) | (ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiKey) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) >= 4 * PyLong_SHIFT) {
                            return (ImGuiKey) (((((((((ImGuiKey)digits[3]) << PyLong_SHIFT) | (ImGuiKey)digits[2]) << PyLong_SHIFT) | (ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ImGuiKey) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ImGuiKey) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiKey, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiKey) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiKey, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ImGuiKey) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ImGuiKey, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ImGuiKey,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ImGuiKey) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiKey) (((ImGuiKey)-1)*(((((ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ImGuiKey) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) - 1 > 2 * PyLong_SHIFT) {
                            return (ImGuiKey) ((((((ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ImGuiKey) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiKey) (((ImGuiKey)-1)*(((((((ImGuiKey)digits[2]) << PyLong_SHIFT) | (ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ImGuiKey) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) - 1 > 3 * PyLong_SHIFT) {
                            return (ImGuiKey) ((((((((ImGuiKey)digits[2]) << PyLong_SHIFT) | (ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ImGuiKey) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiKey) (((ImGuiKey)-1)*(((((((((ImGuiKey)digits[3]) << PyLong_SHIFT) | (ImGuiKey)digits[2]) << PyLong_SHIFT) | (ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ImGuiKey) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ImGuiKey, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ImGuiKey) - 1 > 4 * PyLong_SHIFT) {
                            return (ImGuiKey) ((((((((((ImGuiKey)digits[3]) << PyLong_SHIFT) | (ImGuiKey)digits[2]) << PyLong_SHIFT) | (ImGuiKey)digits[1]) << PyLong_SHIFT) | (ImGuiKey)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ImGuiKey) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiKey, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ImGuiKey) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ImGuiKey, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ImGuiKey val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ImGuiKey) -1;
        }
    } else {
        ImGuiKey val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ImGuiKey) -1;
        val = __Pyx_PyInt_As_ImGuiKey(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ImGuiKey");
    return (ImGuiKey) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ImGuiKey");
    return (ImGuiKey) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
