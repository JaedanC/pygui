# distutils: language = c++
# cython: language_level = 3
# cython: embedsignature=True

# [Imports]
import cython
import ctypes
from cython.operator import dereference

from collections import namedtuple
from typing import Callable, Any

cimport ccimgui
from libcpp cimport bool
from libc.stdint cimport uintptr_t
from libc.float cimport FLT_MAX, FLT_MIN
from cython.view cimport array as cvarray
from cpython.version cimport PY_MAJOR_VERSION
# [End Imports]

# [Enums]
IM_DRAW_FLAGS_NONE = ccimgui.ImDrawFlags_None
IM_DRAW_FLAGS_CLOSED = ccimgui.ImDrawFlags_Closed
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT = ccimgui.ImDrawFlags_RoundCornersTopLeft
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT = ccimgui.ImDrawFlags_RoundCornersTopRight
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT = ccimgui.ImDrawFlags_RoundCornersBottomLeft
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT = ccimgui.ImDrawFlags_RoundCornersBottomRight
IM_DRAW_FLAGS_ROUND_CORNERS_NONE = ccimgui.ImDrawFlags_RoundCornersNone
IM_DRAW_FLAGS_ROUND_CORNERS_TOP = ccimgui.ImDrawFlags_RoundCornersTop
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM = ccimgui.ImDrawFlags_RoundCornersBottom
IM_DRAW_FLAGS_ROUND_CORNERS_LEFT = ccimgui.ImDrawFlags_RoundCornersLeft
IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT = ccimgui.ImDrawFlags_RoundCornersRight
IM_DRAW_FLAGS_ROUND_CORNERS_ALL = ccimgui.ImDrawFlags_RoundCornersAll
IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT_ = ccimgui.ImDrawFlags_RoundCornersDefault_
IM_DRAW_FLAGS_ROUND_CORNERS_MASK_ = ccimgui.ImDrawFlags_RoundCornersMask_
IM_DRAW_LIST_FLAGS_NONE = ccimgui.ImDrawListFlags_None
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES = ccimgui.ImDrawListFlags_AntiAliasedLines
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX = ccimgui.ImDrawListFlags_AntiAliasedLinesUseTex
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL = ccimgui.ImDrawListFlags_AntiAliasedFill
IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET = ccimgui.ImDrawListFlags_AllowVtxOffset
IM_FONT_ATLAS_FLAGS_NONE = ccimgui.ImFontAtlasFlags_None
IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT = ccimgui.ImFontAtlasFlags_NoPowerOfTwoHeight
IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS = ccimgui.ImFontAtlasFlags_NoMouseCursors
IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES = ccimgui.ImFontAtlasFlags_NoBakedLines
IMGUI_BACKEND_FLAGS_NONE = ccimgui.ImGuiBackendFlags_None
IMGUI_BACKEND_FLAGS_HAS_GAMEPAD = ccimgui.ImGuiBackendFlags_HasGamepad
IMGUI_BACKEND_FLAGS_HAS_MOUSE_CURSORS = ccimgui.ImGuiBackendFlags_HasMouseCursors
IMGUI_BACKEND_FLAGS_HAS_SET_MOUSE_POS = ccimgui.ImGuiBackendFlags_HasSetMousePos
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET = ccimgui.ImGuiBackendFlags_RendererHasVtxOffset
IMGUI_BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_PlatformHasViewports
IMGUI_BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT = ccimgui.ImGuiBackendFlags_HasMouseHoveredViewport
IMGUI_BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS = ccimgui.ImGuiBackendFlags_RendererHasViewports
IMGUI_BUTTON_FLAGS_NONE = ccimgui.ImGuiButtonFlags_None
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiButtonFlags_MouseButtonLeft
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiButtonFlags_MouseButtonRight
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiButtonFlags_MouseButtonMiddle
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiButtonFlags_MouseButtonMask_
IMGUI_BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiButtonFlags_MouseButtonDefault_
IMGUI_COL_TEXT = ccimgui.ImGuiCol_Text
IMGUI_COL_TEXT_DISABLED = ccimgui.ImGuiCol_TextDisabled
IMGUI_COL_WINDOW_BG = ccimgui.ImGuiCol_WindowBg
IMGUI_COL_CHILD_BG = ccimgui.ImGuiCol_ChildBg
IMGUI_COL_POPUP_BG = ccimgui.ImGuiCol_PopupBg
IMGUI_COL_BORDER = ccimgui.ImGuiCol_Border
IMGUI_COL_BORDER_SHADOW = ccimgui.ImGuiCol_BorderShadow
IMGUI_COL_FRAME_BG = ccimgui.ImGuiCol_FrameBg
IMGUI_COL_FRAME_BG_HOVERED = ccimgui.ImGuiCol_FrameBgHovered
IMGUI_COL_FRAME_BG_ACTIVE = ccimgui.ImGuiCol_FrameBgActive
IMGUI_COL_TITLE_BG = ccimgui.ImGuiCol_TitleBg
IMGUI_COL_TITLE_BG_ACTIVE = ccimgui.ImGuiCol_TitleBgActive
IMGUI_COL_TITLE_BG_COLLAPSED = ccimgui.ImGuiCol_TitleBgCollapsed
IMGUI_COL_MENU_BAR_BG = ccimgui.ImGuiCol_MenuBarBg
IMGUI_COL_SCROLLBAR_BG = ccimgui.ImGuiCol_ScrollbarBg
IMGUI_COL_SCROLLBAR_GRAB = ccimgui.ImGuiCol_ScrollbarGrab
IMGUI_COL_SCROLLBAR_GRAB_HOVERED = ccimgui.ImGuiCol_ScrollbarGrabHovered
IMGUI_COL_SCROLLBAR_GRAB_ACTIVE = ccimgui.ImGuiCol_ScrollbarGrabActive
IMGUI_COL_CHECK_MARK = ccimgui.ImGuiCol_CheckMark
IMGUI_COL_SLIDER_GRAB = ccimgui.ImGuiCol_SliderGrab
IMGUI_COL_SLIDER_GRAB_ACTIVE = ccimgui.ImGuiCol_SliderGrabActive
IMGUI_COL_BUTTON = ccimgui.ImGuiCol_Button
IMGUI_COL_BUTTON_HOVERED = ccimgui.ImGuiCol_ButtonHovered
IMGUI_COL_BUTTON_ACTIVE = ccimgui.ImGuiCol_ButtonActive
IMGUI_COL_HEADER = ccimgui.ImGuiCol_Header
IMGUI_COL_HEADER_HOVERED = ccimgui.ImGuiCol_HeaderHovered
IMGUI_COL_HEADER_ACTIVE = ccimgui.ImGuiCol_HeaderActive
IMGUI_COL_SEPARATOR = ccimgui.ImGuiCol_Separator
IMGUI_COL_SEPARATOR_HOVERED = ccimgui.ImGuiCol_SeparatorHovered
IMGUI_COL_SEPARATOR_ACTIVE = ccimgui.ImGuiCol_SeparatorActive
IMGUI_COL_RESIZE_GRIP = ccimgui.ImGuiCol_ResizeGrip
IMGUI_COL_RESIZE_GRIP_HOVERED = ccimgui.ImGuiCol_ResizeGripHovered
IMGUI_COL_RESIZE_GRIP_ACTIVE = ccimgui.ImGuiCol_ResizeGripActive
IMGUI_COL_TAB = ccimgui.ImGuiCol_Tab
IMGUI_COL_TAB_HOVERED = ccimgui.ImGuiCol_TabHovered
IMGUI_COL_TAB_ACTIVE = ccimgui.ImGuiCol_TabActive
IMGUI_COL_TAB_UNFOCUSED = ccimgui.ImGuiCol_TabUnfocused
IMGUI_COL_TAB_UNFOCUSED_ACTIVE = ccimgui.ImGuiCol_TabUnfocusedActive
IMGUI_COL_DOCKING_PREVIEW = ccimgui.ImGuiCol_DockingPreview
IMGUI_COL_DOCKING_EMPTY_BG = ccimgui.ImGuiCol_DockingEmptyBg
IMGUI_COL_PLOT_LINES = ccimgui.ImGuiCol_PlotLines
IMGUI_COL_PLOT_LINES_HOVERED = ccimgui.ImGuiCol_PlotLinesHovered
IMGUI_COL_PLOT_HISTOGRAM = ccimgui.ImGuiCol_PlotHistogram
IMGUI_COL_PLOT_HISTOGRAM_HOVERED = ccimgui.ImGuiCol_PlotHistogramHovered
IMGUI_COL_TABLE_HEADER_BG = ccimgui.ImGuiCol_TableHeaderBg
IMGUI_COL_TABLE_BORDER_STRONG = ccimgui.ImGuiCol_TableBorderStrong
IMGUI_COL_TABLE_BORDER_LIGHT = ccimgui.ImGuiCol_TableBorderLight
IMGUI_COL_TABLE_ROW_BG = ccimgui.ImGuiCol_TableRowBg
IMGUI_COL_TABLE_ROW_BG_ALT = ccimgui.ImGuiCol_TableRowBgAlt
IMGUI_COL_TEXT_SELECTED_BG = ccimgui.ImGuiCol_TextSelectedBg
IMGUI_COL_DRAG_DROP_TARGET = ccimgui.ImGuiCol_DragDropTarget
IMGUI_COL_NAV_HIGHLIGHT = ccimgui.ImGuiCol_NavHighlight
IMGUI_COL_NAV_WINDOWING_HIGHLIGHT = ccimgui.ImGuiCol_NavWindowingHighlight
IMGUI_COL_NAV_WINDOWING_DIM_BG = ccimgui.ImGuiCol_NavWindowingDimBg
IMGUI_COL_MODAL_WINDOW_DIM_BG = ccimgui.ImGuiCol_ModalWindowDimBg
IMGUI_COL_COUNT = ccimgui.ImGuiCol_COUNT
IMGUI_COLOR_EDIT_FLAGS_NONE = ccimgui.ImGuiColorEditFlags_None
IMGUI_COLOR_EDIT_FLAGS_NO_ALPHA = ccimgui.ImGuiColorEditFlags_NoAlpha
IMGUI_COLOR_EDIT_FLAGS_NO_PICKER = ccimgui.ImGuiColorEditFlags_NoPicker
IMGUI_COLOR_EDIT_FLAGS_NO_OPTIONS = ccimgui.ImGuiColorEditFlags_NoOptions
IMGUI_COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSmallPreview
IMGUI_COLOR_EDIT_FLAGS_NO_INPUTS = ccimgui.ImGuiColorEditFlags_NoInputs
IMGUI_COLOR_EDIT_FLAGS_NO_TOOLTIP = ccimgui.ImGuiColorEditFlags_NoTooltip
IMGUI_COLOR_EDIT_FLAGS_NO_LABEL = ccimgui.ImGuiColorEditFlags_NoLabel
IMGUI_COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW = ccimgui.ImGuiColorEditFlags_NoSidePreview
IMGUI_COLOR_EDIT_FLAGS_NO_DRAG_DROP = ccimgui.ImGuiColorEditFlags_NoDragDrop
IMGUI_COLOR_EDIT_FLAGS_NO_BORDER = ccimgui.ImGuiColorEditFlags_NoBorder
IMGUI_COLOR_EDIT_FLAGS_ALPHA_BAR = ccimgui.ImGuiColorEditFlags_AlphaBar
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW = ccimgui.ImGuiColorEditFlags_AlphaPreview
IMGUI_COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF = ccimgui.ImGuiColorEditFlags_AlphaPreviewHalf
IMGUI_COLOR_EDIT_FLAGS_HDR = ccimgui.ImGuiColorEditFlags_HDR
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_RGB = ccimgui.ImGuiColorEditFlags_DisplayRGB
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HSV = ccimgui.ImGuiColorEditFlags_DisplayHSV
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_HEX = ccimgui.ImGuiColorEditFlags_DisplayHex
IMGUI_COLOR_EDIT_FLAGS_UINT8 = ccimgui.ImGuiColorEditFlags_Uint8
IMGUI_COLOR_EDIT_FLAGS_FLOAT = ccimgui.ImGuiColorEditFlags_Float
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_BAR = ccimgui.ImGuiColorEditFlags_PickerHueBar
IMGUI_COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL = ccimgui.ImGuiColorEditFlags_PickerHueWheel
IMGUI_COLOR_EDIT_FLAGS_INPUT_RGB = ccimgui.ImGuiColorEditFlags_InputRGB
IMGUI_COLOR_EDIT_FLAGS_INPUT_HSV = ccimgui.ImGuiColorEditFlags_InputHSV
IMGUI_COLOR_EDIT_FLAGS_DEFAULT_OPTIONS_ = ccimgui.ImGuiColorEditFlags_DefaultOptions_
IMGUI_COLOR_EDIT_FLAGS_DISPLAY_MASK_ = ccimgui.ImGuiColorEditFlags_DisplayMask_
IMGUI_COLOR_EDIT_FLAGS_DATA_TYPE_MASK_ = ccimgui.ImGuiColorEditFlags_DataTypeMask_
IMGUI_COLOR_EDIT_FLAGS_PICKER_MASK_ = ccimgui.ImGuiColorEditFlags_PickerMask_
IMGUI_COLOR_EDIT_FLAGS_INPUT_MASK_ = ccimgui.ImGuiColorEditFlags_InputMask_
IMGUI_COMBO_FLAGS_NONE = ccimgui.ImGuiComboFlags_None
IMGUI_COMBO_FLAGS_POPUP_ALIGN_LEFT = ccimgui.ImGuiComboFlags_PopupAlignLeft
IMGUI_COMBO_FLAGS_HEIGHT_SMALL = ccimgui.ImGuiComboFlags_HeightSmall
IMGUI_COMBO_FLAGS_HEIGHT_REGULAR = ccimgui.ImGuiComboFlags_HeightRegular
IMGUI_COMBO_FLAGS_HEIGHT_LARGE = ccimgui.ImGuiComboFlags_HeightLarge
IMGUI_COMBO_FLAGS_HEIGHT_LARGEST = ccimgui.ImGuiComboFlags_HeightLargest
IMGUI_COMBO_FLAGS_NO_ARROW_BUTTON = ccimgui.ImGuiComboFlags_NoArrowButton
IMGUI_COMBO_FLAGS_NO_PREVIEW = ccimgui.ImGuiComboFlags_NoPreview
IMGUI_COMBO_FLAGS_HEIGHT_MASK_ = ccimgui.ImGuiComboFlags_HeightMask_
IMGUI_COND_NONE = ccimgui.ImGuiCond_None
IMGUI_COND_ALWAYS = ccimgui.ImGuiCond_Always
IMGUI_COND_ONCE = ccimgui.ImGuiCond_Once
IMGUI_COND_FIRST_USE_EVER = ccimgui.ImGuiCond_FirstUseEver
IMGUI_COND_APPEARING = ccimgui.ImGuiCond_Appearing
IMGUI_CONFIG_FLAGS_NONE = ccimgui.ImGuiConfigFlags_None
IMGUI_CONFIG_FLAGS_NAV_ENABLE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavEnableKeyboard
IMGUI_CONFIG_FLAGS_NAV_ENABLE_GAMEPAD = ccimgui.ImGuiConfigFlags_NavEnableGamepad
IMGUI_CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS = ccimgui.ImGuiConfigFlags_NavEnableSetMousePos
IMGUI_CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD = ccimgui.ImGuiConfigFlags_NavNoCaptureKeyboard
IMGUI_CONFIG_FLAGS_NO_MOUSE = ccimgui.ImGuiConfigFlags_NoMouse
IMGUI_CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE = ccimgui.ImGuiConfigFlags_NoMouseCursorChange
IMGUI_CONFIG_FLAGS_DOCKING_ENABLE = ccimgui.ImGuiConfigFlags_DockingEnable
IMGUI_CONFIG_FLAGS_VIEWPORTS_ENABLE = ccimgui.ImGuiConfigFlags_ViewportsEnable
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleViewports
IMGUI_CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS = ccimgui.ImGuiConfigFlags_DpiEnableScaleFonts
IMGUI_CONFIG_FLAGS_IS_SRGB = ccimgui.ImGuiConfigFlags_IsSRGB
IMGUI_CONFIG_FLAGS_IS_TOUCH_SCREEN = ccimgui.ImGuiConfigFlags_IsTouchScreen
IMGUI_DATA_TYPE_S8 = ccimgui.ImGuiDataType_S8
IMGUI_DATA_TYPE_U8 = ccimgui.ImGuiDataType_U8
IMGUI_DATA_TYPE_S16 = ccimgui.ImGuiDataType_S16
IMGUI_DATA_TYPE_U16 = ccimgui.ImGuiDataType_U16
IMGUI_DATA_TYPE_S32 = ccimgui.ImGuiDataType_S32
IMGUI_DATA_TYPE_U32 = ccimgui.ImGuiDataType_U32
IMGUI_DATA_TYPE_S64 = ccimgui.ImGuiDataType_S64
IMGUI_DATA_TYPE_U64 = ccimgui.ImGuiDataType_U64
IMGUI_DATA_TYPE_FLOAT = ccimgui.ImGuiDataType_Float
IMGUI_DATA_TYPE_DOUBLE = ccimgui.ImGuiDataType_Double
IMGUI_DATA_TYPE_COUNT = ccimgui.ImGuiDataType_COUNT
IMGUI_DIR_NONE = ccimgui.ImGuiDir_None
IMGUI_DIR_LEFT = ccimgui.ImGuiDir_Left
IMGUI_DIR_RIGHT = ccimgui.ImGuiDir_Right
IMGUI_DIR_UP = ccimgui.ImGuiDir_Up
IMGUI_DIR_DOWN = ccimgui.ImGuiDir_Down
IMGUI_DIR_COUNT = ccimgui.ImGuiDir_COUNT
IMGUI_DOCK_NODE_FLAGS_NONE = ccimgui.ImGuiDockNodeFlags_None
IMGUI_DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY = ccimgui.ImGuiDockNodeFlags_KeepAliveOnly
IMGUI_DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_NoDockingInCentralNode
IMGUI_DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE = ccimgui.ImGuiDockNodeFlags_PassthruCentralNode
IMGUI_DOCK_NODE_FLAGS_NO_SPLIT = ccimgui.ImGuiDockNodeFlags_NoSplit
IMGUI_DOCK_NODE_FLAGS_NO_RESIZE = ccimgui.ImGuiDockNodeFlags_NoResize
IMGUI_DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR = ccimgui.ImGuiDockNodeFlags_AutoHideTabBar
IMGUI_DRAG_DROP_FLAGS_NONE = ccimgui.ImGuiDragDropFlags_None
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_SourceNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER = ccimgui.ImGuiDragDropFlags_SourceNoDisableHover
IMGUI_DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS = ccimgui.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
IMGUI_DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID = ccimgui.ImGuiDragDropFlags_SourceAllowNullID
IMGUI_DRAG_DROP_FLAGS_SOURCE_EXTERN = ccimgui.ImGuiDragDropFlags_SourceExtern
IMGUI_DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD = ccimgui.ImGuiDragDropFlags_SourceAutoExpirePayload
IMGUI_DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY = ccimgui.ImGuiDragDropFlags_AcceptBeforeDelivery
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT = ccimgui.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
IMGUI_DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP = ccimgui.ImGuiDragDropFlags_AcceptNoPreviewTooltip
IMGUI_DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY = ccimgui.ImGuiDragDropFlags_AcceptPeekOnly
IMGUI_FOCUSED_FLAGS_NONE = ccimgui.ImGuiFocusedFlags_None
IMGUI_FOCUSED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_ChildWindows
IMGUI_FOCUSED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiFocusedFlags_RootWindow
IMGUI_FOCUSED_FLAGS_ANY_WINDOW = ccimgui.ImGuiFocusedFlags_AnyWindow
IMGUI_FOCUSED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiFocusedFlags_NoPopupHierarchy
IMGUI_FOCUSED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiFocusedFlags_DockHierarchy
IMGUI_FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiFocusedFlags_RootAndChildWindows
IMGUI_HOVERED_FLAGS_NONE = ccimgui.ImGuiHoveredFlags_None
IMGUI_HOVERED_FLAGS_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_ChildWindows
IMGUI_HOVERED_FLAGS_ROOT_WINDOW = ccimgui.ImGuiHoveredFlags_RootWindow
IMGUI_HOVERED_FLAGS_ANY_WINDOW = ccimgui.ImGuiHoveredFlags_AnyWindow
IMGUI_HOVERED_FLAGS_NO_POPUP_HIERARCHY = ccimgui.ImGuiHoveredFlags_NoPopupHierarchy
IMGUI_HOVERED_FLAGS_DOCK_HIERARCHY = ccimgui.ImGuiHoveredFlags_DockHierarchy
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByPopup
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM = ccimgui.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED = ccimgui.ImGuiHoveredFlags_AllowWhenOverlapped
IMGUI_HOVERED_FLAGS_ALLOW_WHEN_DISABLED = ccimgui.ImGuiHoveredFlags_AllowWhenDisabled
IMGUI_HOVERED_FLAGS_NO_NAV_OVERRIDE = ccimgui.ImGuiHoveredFlags_NoNavOverride
IMGUI_HOVERED_FLAGS_RECT_ONLY = ccimgui.ImGuiHoveredFlags_RectOnly
IMGUI_HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS = ccimgui.ImGuiHoveredFlags_RootAndChildWindows
IMGUI_HOVERED_FLAGS_DELAY_NORMAL = ccimgui.ImGuiHoveredFlags_DelayNormal
IMGUI_HOVERED_FLAGS_DELAY_SHORT = ccimgui.ImGuiHoveredFlags_DelayShort
IMGUI_HOVERED_FLAGS_NO_SHARED_DELAY = ccimgui.ImGuiHoveredFlags_NoSharedDelay
IMGUI_INPUT_TEXT_FLAGS_NONE = ccimgui.ImGuiInputTextFlags_None
IMGUI_INPUT_TEXT_FLAGS_CHARS_DECIMAL = ccimgui.ImGuiInputTextFlags_CharsDecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL = ccimgui.ImGuiInputTextFlags_CharsHexadecimal
IMGUI_INPUT_TEXT_FLAGS_CHARS_UPPERCASE = ccimgui.ImGuiInputTextFlags_CharsUppercase
IMGUI_INPUT_TEXT_FLAGS_CHARS_NO_BLANK = ccimgui.ImGuiInputTextFlags_CharsNoBlank
IMGUI_INPUT_TEXT_FLAGS_AUTO_SELECT_ALL = ccimgui.ImGuiInputTextFlags_AutoSelectAll
IMGUI_INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE = ccimgui.ImGuiInputTextFlags_EnterReturnsTrue
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_COMPLETION = ccimgui.ImGuiInputTextFlags_CallbackCompletion
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_HISTORY = ccimgui.ImGuiInputTextFlags_CallbackHistory
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_ALWAYS = ccimgui.ImGuiInputTextFlags_CallbackAlways
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER = ccimgui.ImGuiInputTextFlags_CallbackCharFilter
IMGUI_INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT = ccimgui.ImGuiInputTextFlags_AllowTabInput
IMGUI_INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE = ccimgui.ImGuiInputTextFlags_CtrlEnterForNewLine
IMGUI_INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL = ccimgui.ImGuiInputTextFlags_NoHorizontalScroll
IMGUI_INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE = ccimgui.ImGuiInputTextFlags_AlwaysOverwrite
IMGUI_INPUT_TEXT_FLAGS_READ_ONLY = ccimgui.ImGuiInputTextFlags_ReadOnly
IMGUI_INPUT_TEXT_FLAGS_PASSWORD = ccimgui.ImGuiInputTextFlags_Password
IMGUI_INPUT_TEXT_FLAGS_NO_UNDO_REDO = ccimgui.ImGuiInputTextFlags_NoUndoRedo
IMGUI_INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC = ccimgui.ImGuiInputTextFlags_CharsScientific
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_RESIZE = ccimgui.ImGuiInputTextFlags_CallbackResize
IMGUI_INPUT_TEXT_FLAGS_CALLBACK_EDIT = ccimgui.ImGuiInputTextFlags_CallbackEdit
IMGUI_INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL = ccimgui.ImGuiInputTextFlags_EscapeClearsAll
IMGUI_KEY_NONE = ccimgui.ImGuiKey_None
IMGUI_KEY_TAB = ccimgui.ImGuiKey_Tab
IMGUI_KEY_LEFT_ARROW = ccimgui.ImGuiKey_LeftArrow
IMGUI_KEY_RIGHT_ARROW = ccimgui.ImGuiKey_RightArrow
IMGUI_KEY_UP_ARROW = ccimgui.ImGuiKey_UpArrow
IMGUI_KEY_DOWN_ARROW = ccimgui.ImGuiKey_DownArrow
IMGUI_KEY_PAGE_UP = ccimgui.ImGuiKey_PageUp
IMGUI_KEY_PAGE_DOWN = ccimgui.ImGuiKey_PageDown
IMGUI_KEY_HOME = ccimgui.ImGuiKey_Home
IMGUI_KEY_END = ccimgui.ImGuiKey_End
IMGUI_KEY_INSERT = ccimgui.ImGuiKey_Insert
IMGUI_KEY_DELETE = ccimgui.ImGuiKey_Delete
IMGUI_KEY_BACKSPACE = ccimgui.ImGuiKey_Backspace
IMGUI_KEY_SPACE = ccimgui.ImGuiKey_Space
IMGUI_KEY_ENTER = ccimgui.ImGuiKey_Enter
IMGUI_KEY_ESCAPE = ccimgui.ImGuiKey_Escape
IMGUI_KEY_LEFT_CTRL = ccimgui.ImGuiKey_LeftCtrl
IMGUI_KEY_LEFT_SHIFT = ccimgui.ImGuiKey_LeftShift
IMGUI_KEY_LEFT_ALT = ccimgui.ImGuiKey_LeftAlt
IMGUI_KEY_LEFT_SUPER = ccimgui.ImGuiKey_LeftSuper
IMGUI_KEY_RIGHT_CTRL = ccimgui.ImGuiKey_RightCtrl
IMGUI_KEY_RIGHT_SHIFT = ccimgui.ImGuiKey_RightShift
IMGUI_KEY_RIGHT_ALT = ccimgui.ImGuiKey_RightAlt
IMGUI_KEY_RIGHT_SUPER = ccimgui.ImGuiKey_RightSuper
IMGUI_KEY_MENU = ccimgui.ImGuiKey_Menu
IMGUI_KEY_0 = ccimgui.ImGuiKey_0
IMGUI_KEY_1 = ccimgui.ImGuiKey_1
IMGUI_KEY_2 = ccimgui.ImGuiKey_2
IMGUI_KEY_3 = ccimgui.ImGuiKey_3
IMGUI_KEY_4 = ccimgui.ImGuiKey_4
IMGUI_KEY_5 = ccimgui.ImGuiKey_5
IMGUI_KEY_6 = ccimgui.ImGuiKey_6
IMGUI_KEY_7 = ccimgui.ImGuiKey_7
IMGUI_KEY_8 = ccimgui.ImGuiKey_8
IMGUI_KEY_9 = ccimgui.ImGuiKey_9
IMGUI_KEY_A = ccimgui.ImGuiKey_A
IMGUI_KEY_B = ccimgui.ImGuiKey_B
IMGUI_KEY_C = ccimgui.ImGuiKey_C
IMGUI_KEY_D = ccimgui.ImGuiKey_D
IMGUI_KEY_E = ccimgui.ImGuiKey_E
IMGUI_KEY_F = ccimgui.ImGuiKey_F
IMGUI_KEY_G = ccimgui.ImGuiKey_G
IMGUI_KEY_H = ccimgui.ImGuiKey_H
IMGUI_KEY_I = ccimgui.ImGuiKey_I
IMGUI_KEY_J = ccimgui.ImGuiKey_J
IMGUI_KEY_K = ccimgui.ImGuiKey_K
IMGUI_KEY_L = ccimgui.ImGuiKey_L
IMGUI_KEY_M = ccimgui.ImGuiKey_M
IMGUI_KEY_N = ccimgui.ImGuiKey_N
IMGUI_KEY_O = ccimgui.ImGuiKey_O
IMGUI_KEY_P = ccimgui.ImGuiKey_P
IMGUI_KEY_Q = ccimgui.ImGuiKey_Q
IMGUI_KEY_R = ccimgui.ImGuiKey_R
IMGUI_KEY_S = ccimgui.ImGuiKey_S
IMGUI_KEY_T = ccimgui.ImGuiKey_T
IMGUI_KEY_U = ccimgui.ImGuiKey_U
IMGUI_KEY_V = ccimgui.ImGuiKey_V
IMGUI_KEY_W = ccimgui.ImGuiKey_W
IMGUI_KEY_X = ccimgui.ImGuiKey_X
IMGUI_KEY_Y = ccimgui.ImGuiKey_Y
IMGUI_KEY_Z = ccimgui.ImGuiKey_Z
IMGUI_KEY_F1 = ccimgui.ImGuiKey_F1
IMGUI_KEY_F2 = ccimgui.ImGuiKey_F2
IMGUI_KEY_F3 = ccimgui.ImGuiKey_F3
IMGUI_KEY_F4 = ccimgui.ImGuiKey_F4
IMGUI_KEY_F5 = ccimgui.ImGuiKey_F5
IMGUI_KEY_F6 = ccimgui.ImGuiKey_F6
IMGUI_KEY_F7 = ccimgui.ImGuiKey_F7
IMGUI_KEY_F8 = ccimgui.ImGuiKey_F8
IMGUI_KEY_F9 = ccimgui.ImGuiKey_F9
IMGUI_KEY_F10 = ccimgui.ImGuiKey_F10
IMGUI_KEY_F11 = ccimgui.ImGuiKey_F11
IMGUI_KEY_F12 = ccimgui.ImGuiKey_F12
IMGUI_KEY_APOSTROPHE = ccimgui.ImGuiKey_Apostrophe
IMGUI_KEY_COMMA = ccimgui.ImGuiKey_Comma
IMGUI_KEY_MINUS = ccimgui.ImGuiKey_Minus
IMGUI_KEY_PERIOD = ccimgui.ImGuiKey_Period
IMGUI_KEY_SLASH = ccimgui.ImGuiKey_Slash
IMGUI_KEY_SEMICOLON = ccimgui.ImGuiKey_Semicolon
IMGUI_KEY_EQUAL = ccimgui.ImGuiKey_Equal
IMGUI_KEY_LEFT_BRACKET = ccimgui.ImGuiKey_LeftBracket
IMGUI_KEY_BACKSLASH = ccimgui.ImGuiKey_Backslash
IMGUI_KEY_RIGHT_BRACKET = ccimgui.ImGuiKey_RightBracket
IMGUI_KEY_GRAVE_ACCENT = ccimgui.ImGuiKey_GraveAccent
IMGUI_KEY_CAPS_LOCK = ccimgui.ImGuiKey_CapsLock
IMGUI_KEY_SCROLL_LOCK = ccimgui.ImGuiKey_ScrollLock
IMGUI_KEY_NUM_LOCK = ccimgui.ImGuiKey_NumLock
IMGUI_KEY_PRINT_SCREEN = ccimgui.ImGuiKey_PrintScreen
IMGUI_KEY_PAUSE = ccimgui.ImGuiKey_Pause
IMGUI_KEY_KEYPAD0 = ccimgui.ImGuiKey_Keypad0
IMGUI_KEY_KEYPAD1 = ccimgui.ImGuiKey_Keypad1
IMGUI_KEY_KEYPAD2 = ccimgui.ImGuiKey_Keypad2
IMGUI_KEY_KEYPAD3 = ccimgui.ImGuiKey_Keypad3
IMGUI_KEY_KEYPAD4 = ccimgui.ImGuiKey_Keypad4
IMGUI_KEY_KEYPAD5 = ccimgui.ImGuiKey_Keypad5
IMGUI_KEY_KEYPAD6 = ccimgui.ImGuiKey_Keypad6
IMGUI_KEY_KEYPAD7 = ccimgui.ImGuiKey_Keypad7
IMGUI_KEY_KEYPAD8 = ccimgui.ImGuiKey_Keypad8
IMGUI_KEY_KEYPAD9 = ccimgui.ImGuiKey_Keypad9
IMGUI_KEY_KEYPAD_DECIMAL = ccimgui.ImGuiKey_KeypadDecimal
IMGUI_KEY_KEYPAD_DIVIDE = ccimgui.ImGuiKey_KeypadDivide
IMGUI_KEY_KEYPAD_MULTIPLY = ccimgui.ImGuiKey_KeypadMultiply
IMGUI_KEY_KEYPAD_SUBTRACT = ccimgui.ImGuiKey_KeypadSubtract
IMGUI_KEY_KEYPAD_ADD = ccimgui.ImGuiKey_KeypadAdd
IMGUI_KEY_KEYPAD_ENTER = ccimgui.ImGuiKey_KeypadEnter
IMGUI_KEY_KEYPAD_EQUAL = ccimgui.ImGuiKey_KeypadEqual
IMGUI_KEY_GAMEPAD_START = ccimgui.ImGuiKey_GamepadStart
IMGUI_KEY_GAMEPAD_BACK = ccimgui.ImGuiKey_GamepadBack
IMGUI_KEY_GAMEPAD_FACE_LEFT = ccimgui.ImGuiKey_GamepadFaceLeft
IMGUI_KEY_GAMEPAD_FACE_RIGHT = ccimgui.ImGuiKey_GamepadFaceRight
IMGUI_KEY_GAMEPAD_FACE_UP = ccimgui.ImGuiKey_GamepadFaceUp
IMGUI_KEY_GAMEPAD_FACE_DOWN = ccimgui.ImGuiKey_GamepadFaceDown
IMGUI_KEY_GAMEPAD_DPAD_LEFT = ccimgui.ImGuiKey_GamepadDpadLeft
IMGUI_KEY_GAMEPAD_DPAD_RIGHT = ccimgui.ImGuiKey_GamepadDpadRight
IMGUI_KEY_GAMEPAD_DPAD_UP = ccimgui.ImGuiKey_GamepadDpadUp
IMGUI_KEY_GAMEPAD_DPAD_DOWN = ccimgui.ImGuiKey_GamepadDpadDown
IMGUI_KEY_GAMEPAD_L1 = ccimgui.ImGuiKey_GamepadL1
IMGUI_KEY_GAMEPAD_R1 = ccimgui.ImGuiKey_GamepadR1
IMGUI_KEY_GAMEPAD_L2 = ccimgui.ImGuiKey_GamepadL2
IMGUI_KEY_GAMEPAD_R2 = ccimgui.ImGuiKey_GamepadR2
IMGUI_KEY_GAMEPAD_L3 = ccimgui.ImGuiKey_GamepadL3
IMGUI_KEY_GAMEPAD_R3 = ccimgui.ImGuiKey_GamepadR3
IMGUI_KEY_GAMEPAD_L_STICK_LEFT = ccimgui.ImGuiKey_GamepadLStickLeft
IMGUI_KEY_GAMEPAD_L_STICK_RIGHT = ccimgui.ImGuiKey_GamepadLStickRight
IMGUI_KEY_GAMEPAD_L_STICK_UP = ccimgui.ImGuiKey_GamepadLStickUp
IMGUI_KEY_GAMEPAD_L_STICK_DOWN = ccimgui.ImGuiKey_GamepadLStickDown
IMGUI_KEY_GAMEPAD_R_STICK_LEFT = ccimgui.ImGuiKey_GamepadRStickLeft
IMGUI_KEY_GAMEPAD_R_STICK_RIGHT = ccimgui.ImGuiKey_GamepadRStickRight
IMGUI_KEY_GAMEPAD_R_STICK_UP = ccimgui.ImGuiKey_GamepadRStickUp
IMGUI_KEY_GAMEPAD_R_STICK_DOWN = ccimgui.ImGuiKey_GamepadRStickDown
IMGUI_KEY_MOUSE_LEFT = ccimgui.ImGuiKey_MouseLeft
IMGUI_KEY_MOUSE_RIGHT = ccimgui.ImGuiKey_MouseRight
IMGUI_KEY_MOUSE_MIDDLE = ccimgui.ImGuiKey_MouseMiddle
IMGUI_KEY_MOUSE_X1 = ccimgui.ImGuiKey_MouseX1
IMGUI_KEY_MOUSE_X2 = ccimgui.ImGuiKey_MouseX2
IMGUI_KEY_MOUSE_WHEELX = ccimgui.ImGuiKey_MouseWheelX
IMGUI_KEY_MOUSE_WHEELY = ccimgui.ImGuiKey_MouseWheelY
IMGUI_KEY_RESERVED_FOR_MOD_CTRL = ccimgui.ImGuiKey_ReservedForModCtrl
IMGUI_KEY_RESERVED_FOR_MOD_SHIFT = ccimgui.ImGuiKey_ReservedForModShift
IMGUI_KEY_RESERVED_FOR_MOD_ALT = ccimgui.ImGuiKey_ReservedForModAlt
IMGUI_KEY_RESERVED_FOR_MOD_SUPER = ccimgui.ImGuiKey_ReservedForModSuper
IMGUI_KEY_COUNT = ccimgui.ImGuiKey_COUNT
IMGUI_MOD_NONE = ccimgui.ImGuiMod_None
IMGUI_MOD_CTRL = ccimgui.ImGuiMod_Ctrl
IMGUI_MOD_SHIFT = ccimgui.ImGuiMod_Shift
IMGUI_MOD_ALT = ccimgui.ImGuiMod_Alt
IMGUI_MOD_SUPER = ccimgui.ImGuiMod_Super
IMGUI_MOD_SHORTCUT = ccimgui.ImGuiMod_Shortcut
IMGUI_MOD_MASK_ = ccimgui.ImGuiMod_Mask_
IMGUI_KEY_NAMED_KEY_BEGIN = ccimgui.ImGuiKey_NamedKey_BEGIN
IMGUI_KEY_NAMED_KEY_END = ccimgui.ImGuiKey_NamedKey_END
IMGUI_KEY_NAMED_KEY_COUNT = ccimgui.ImGuiKey_NamedKey_COUNT
IMGUI_KEY_KEYS_DATA_SIZE = ccimgui.ImGuiKey_KeysData_SIZE
IMGUI_KEY_KEYS_DATA_OFFSET = ccimgui.ImGuiKey_KeysData_OFFSET
IMGUI_MOUSE_BUTTON_LEFT = ccimgui.ImGuiMouseButton_Left
IMGUI_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiMouseButton_Right
IMGUI_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiMouseButton_Middle
IMGUI_MOUSE_BUTTON_COUNT = ccimgui.ImGuiMouseButton_COUNT
IMGUI_MOUSE_CURSOR_NONE = ccimgui.ImGuiMouseCursor_None
IMGUI_MOUSE_CURSOR_ARROW = ccimgui.ImGuiMouseCursor_Arrow
IMGUI_MOUSE_CURSOR_TEXT_INPUT = ccimgui.ImGuiMouseCursor_TextInput
IMGUI_MOUSE_CURSOR_RESIZE_ALL = ccimgui.ImGuiMouseCursor_ResizeAll
IMGUI_MOUSE_CURSOR_RESIZE_NS = ccimgui.ImGuiMouseCursor_ResizeNS
IMGUI_MOUSE_CURSOR_RESIZE_EW = ccimgui.ImGuiMouseCursor_ResizeEW
IMGUI_MOUSE_CURSOR_RESIZE_NESW = ccimgui.ImGuiMouseCursor_ResizeNESW
IMGUI_MOUSE_CURSOR_RESIZE_NWSE = ccimgui.ImGuiMouseCursor_ResizeNWSE
IMGUI_MOUSE_CURSOR_HAND = ccimgui.ImGuiMouseCursor_Hand
IMGUI_MOUSE_CURSOR_NOT_ALLOWED = ccimgui.ImGuiMouseCursor_NotAllowed
IMGUI_MOUSE_CURSOR_COUNT = ccimgui.ImGuiMouseCursor_COUNT
IMGUI_NAV_INPUT_ACTIVATE = ccimgui.ImGuiNavInput_Activate
IMGUI_NAV_INPUT_CANCEL = ccimgui.ImGuiNavInput_Cancel
IMGUI_NAV_INPUT_INPUT = ccimgui.ImGuiNavInput_Input
IMGUI_NAV_INPUT_MENU = ccimgui.ImGuiNavInput_Menu
IMGUI_NAV_INPUT_DPAD_LEFT = ccimgui.ImGuiNavInput_DpadLeft
IMGUI_NAV_INPUT_DPAD_RIGHT = ccimgui.ImGuiNavInput_DpadRight
IMGUI_NAV_INPUT_DPAD_UP = ccimgui.ImGuiNavInput_DpadUp
IMGUI_NAV_INPUT_DPAD_DOWN = ccimgui.ImGuiNavInput_DpadDown
IMGUI_NAV_INPUT_L_STICK_LEFT = ccimgui.ImGuiNavInput_LStickLeft
IMGUI_NAV_INPUT_L_STICK_RIGHT = ccimgui.ImGuiNavInput_LStickRight
IMGUI_NAV_INPUT_L_STICK_UP = ccimgui.ImGuiNavInput_LStickUp
IMGUI_NAV_INPUT_L_STICK_DOWN = ccimgui.ImGuiNavInput_LStickDown
IMGUI_NAV_INPUT_FOCUS_PREV = ccimgui.ImGuiNavInput_FocusPrev
IMGUI_NAV_INPUT_FOCUS_NEXT = ccimgui.ImGuiNavInput_FocusNext
IMGUI_NAV_INPUT_TWEAK_SLOW = ccimgui.ImGuiNavInput_TweakSlow
IMGUI_NAV_INPUT_TWEAK_FAST = ccimgui.ImGuiNavInput_TweakFast
IMGUI_NAV_INPUT_COUNT = ccimgui.ImGuiNavInput_COUNT
IMGUI_POPUP_FLAGS_NONE = ccimgui.ImGuiPopupFlags_None
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_LEFT = ccimgui.ImGuiPopupFlags_MouseButtonLeft
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_RIGHT = ccimgui.ImGuiPopupFlags_MouseButtonRight
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MIDDLE = ccimgui.ImGuiPopupFlags_MouseButtonMiddle
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_MASK_ = ccimgui.ImGuiPopupFlags_MouseButtonMask_
IMGUI_POPUP_FLAGS_MOUSE_BUTTON_DEFAULT_ = ccimgui.ImGuiPopupFlags_MouseButtonDefault_
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP = ccimgui.ImGuiPopupFlags_NoOpenOverExistingPopup
IMGUI_POPUP_FLAGS_NO_OPEN_OVER_ITEMS = ccimgui.ImGuiPopupFlags_NoOpenOverItems
IMGUI_POPUP_FLAGS_ANY_POPUP_ID = ccimgui.ImGuiPopupFlags_AnyPopupId
IMGUI_POPUP_FLAGS_ANY_POPUP_LEVEL = ccimgui.ImGuiPopupFlags_AnyPopupLevel
IMGUI_POPUP_FLAGS_ANY_POPUP = ccimgui.ImGuiPopupFlags_AnyPopup
IMGUI_SELECTABLE_FLAGS_NONE = ccimgui.ImGuiSelectableFlags_None
IMGUI_SELECTABLE_FLAGS_DONT_CLOSE_POPUPS = ccimgui.ImGuiSelectableFlags_DontClosePopups
IMGUI_SELECTABLE_FLAGS_SPAN_ALL_COLUMNS = ccimgui.ImGuiSelectableFlags_SpanAllColumns
IMGUI_SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK = ccimgui.ImGuiSelectableFlags_AllowDoubleClick
IMGUI_SELECTABLE_FLAGS_DISABLED = ccimgui.ImGuiSelectableFlags_Disabled
IMGUI_SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiSelectableFlags_AllowItemOverlap
IMGUI_SLIDER_FLAGS_NONE = ccimgui.ImGuiSliderFlags_None
IMGUI_SLIDER_FLAGS_ALWAYS_CLAMP = ccimgui.ImGuiSliderFlags_AlwaysClamp
IMGUI_SLIDER_FLAGS_LOGARITHMIC = ccimgui.ImGuiSliderFlags_Logarithmic
IMGUI_SLIDER_FLAGS_NO_ROUND_TO_FORMAT = ccimgui.ImGuiSliderFlags_NoRoundToFormat
IMGUI_SLIDER_FLAGS_NO_INPUT = ccimgui.ImGuiSliderFlags_NoInput
IMGUI_SLIDER_FLAGS_INVALID_MASK_ = ccimgui.ImGuiSliderFlags_InvalidMask_
IMGUI_SORT_DIRECTION_NONE = ccimgui.ImGuiSortDirection_None
IMGUI_SORT_DIRECTION_ASCENDING = ccimgui.ImGuiSortDirection_Ascending
IMGUI_SORT_DIRECTION_DESCENDING = ccimgui.ImGuiSortDirection_Descending
IMGUI_STYLE_VAR_ALPHA = ccimgui.ImGuiStyleVar_Alpha
IMGUI_STYLE_VAR_DISABLED_ALPHA = ccimgui.ImGuiStyleVar_DisabledAlpha
IMGUI_STYLE_VAR_WINDOW_PADDING = ccimgui.ImGuiStyleVar_WindowPadding
IMGUI_STYLE_VAR_WINDOW_ROUNDING = ccimgui.ImGuiStyleVar_WindowRounding
IMGUI_STYLE_VAR_WINDOW_BORDER_SIZE = ccimgui.ImGuiStyleVar_WindowBorderSize
IMGUI_STYLE_VAR_WINDOW_MIN_SIZE = ccimgui.ImGuiStyleVar_WindowMinSize
IMGUI_STYLE_VAR_WINDOW_TITLE_ALIGN = ccimgui.ImGuiStyleVar_WindowTitleAlign
IMGUI_STYLE_VAR_CHILD_ROUNDING = ccimgui.ImGuiStyleVar_ChildRounding
IMGUI_STYLE_VAR_CHILD_BORDER_SIZE = ccimgui.ImGuiStyleVar_ChildBorderSize
IMGUI_STYLE_VAR_POPUP_ROUNDING = ccimgui.ImGuiStyleVar_PopupRounding
IMGUI_STYLE_VAR_POPUP_BORDER_SIZE = ccimgui.ImGuiStyleVar_PopupBorderSize
IMGUI_STYLE_VAR_FRAME_PADDING = ccimgui.ImGuiStyleVar_FramePadding
IMGUI_STYLE_VAR_FRAME_ROUNDING = ccimgui.ImGuiStyleVar_FrameRounding
IMGUI_STYLE_VAR_FRAME_BORDER_SIZE = ccimgui.ImGuiStyleVar_FrameBorderSize
IMGUI_STYLE_VAR_ITEM_SPACING = ccimgui.ImGuiStyleVar_ItemSpacing
IMGUI_STYLE_VAR_ITEM_INNER_SPACING = ccimgui.ImGuiStyleVar_ItemInnerSpacing
IMGUI_STYLE_VAR_INDENT_SPACING = ccimgui.ImGuiStyleVar_IndentSpacing
IMGUI_STYLE_VAR_CELL_PADDING = ccimgui.ImGuiStyleVar_CellPadding
IMGUI_STYLE_VAR_SCROLLBAR_SIZE = ccimgui.ImGuiStyleVar_ScrollbarSize
IMGUI_STYLE_VAR_SCROLLBAR_ROUNDING = ccimgui.ImGuiStyleVar_ScrollbarRounding
IMGUI_STYLE_VAR_GRAB_MIN_SIZE = ccimgui.ImGuiStyleVar_GrabMinSize
IMGUI_STYLE_VAR_GRAB_ROUNDING = ccimgui.ImGuiStyleVar_GrabRounding
IMGUI_STYLE_VAR_TAB_ROUNDING = ccimgui.ImGuiStyleVar_TabRounding
IMGUI_STYLE_VAR_BUTTON_TEXT_ALIGN = ccimgui.ImGuiStyleVar_ButtonTextAlign
IMGUI_STYLE_VAR_SELECTABLE_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SelectableTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE = ccimgui.ImGuiStyleVar_SeparatorTextBorderSize
IMGUI_STYLE_VAR_SEPARATOR_TEXT_ALIGN = ccimgui.ImGuiStyleVar_SeparatorTextAlign
IMGUI_STYLE_VAR_SEPARATOR_TEXT_PADDING = ccimgui.ImGuiStyleVar_SeparatorTextPadding
IMGUI_STYLE_VAR_COUNT = ccimgui.ImGuiStyleVar_COUNT
IMGUI_TAB_BAR_FLAGS_NONE = ccimgui.ImGuiTabBarFlags_None
IMGUI_TAB_BAR_FLAGS_REORDERABLE = ccimgui.ImGuiTabBarFlags_Reorderable
IMGUI_TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS = ccimgui.ImGuiTabBarFlags_AutoSelectNewTabs
IMGUI_TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON = ccimgui.ImGuiTabBarFlags_TabListPopupButton
IMGUI_TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS = ccimgui.ImGuiTabBarFlags_NoTabListScrollingButtons
IMGUI_TAB_BAR_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabBarFlags_NoTooltip
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN = ccimgui.ImGuiTabBarFlags_FittingPolicyResizeDown
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_SCROLL = ccimgui.ImGuiTabBarFlags_FittingPolicyScroll
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_MASK_ = ccimgui.ImGuiTabBarFlags_FittingPolicyMask_
IMGUI_TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT_ = ccimgui.ImGuiTabBarFlags_FittingPolicyDefault_
IMGUI_TAB_ITEM_FLAGS_NONE = ccimgui.ImGuiTabItemFlags_None
IMGUI_TAB_ITEM_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiTabItemFlags_UnsavedDocument
IMGUI_TAB_ITEM_FLAGS_SET_SELECTED = ccimgui.ImGuiTabItemFlags_SetSelected
IMGUI_TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON = ccimgui.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
IMGUI_TAB_ITEM_FLAGS_NO_PUSH_ID = ccimgui.ImGuiTabItemFlags_NoPushId
IMGUI_TAB_ITEM_FLAGS_NO_TOOLTIP = ccimgui.ImGuiTabItemFlags_NoTooltip
IMGUI_TAB_ITEM_FLAGS_NO_REORDER = ccimgui.ImGuiTabItemFlags_NoReorder
IMGUI_TAB_ITEM_FLAGS_LEADING = ccimgui.ImGuiTabItemFlags_Leading
IMGUI_TAB_ITEM_FLAGS_TRAILING = ccimgui.ImGuiTabItemFlags_Trailing
IMGUI_TABLE_BG_TARGET_NONE = ccimgui.ImGuiTableBgTarget_None
IMGUI_TABLE_BG_TARGET_ROW_BG0 = ccimgui.ImGuiTableBgTarget_RowBg0
IMGUI_TABLE_BG_TARGET_ROW_BG1 = ccimgui.ImGuiTableBgTarget_RowBg1
IMGUI_TABLE_BG_TARGET_CELL_BG = ccimgui.ImGuiTableBgTarget_CellBg
IMGUI_TABLE_COLUMN_FLAGS_NONE = ccimgui.ImGuiTableColumnFlags_None
IMGUI_TABLE_COLUMN_FLAGS_DISABLED = ccimgui.ImGuiTableColumnFlags_Disabled
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_HIDE = ccimgui.ImGuiTableColumnFlags_DefaultHide
IMGUI_TABLE_COLUMN_FLAGS_DEFAULT_SORT = ccimgui.ImGuiTableColumnFlags_DefaultSort
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_STRETCH = ccimgui.ImGuiTableColumnFlags_WidthStretch
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_FIXED = ccimgui.ImGuiTableColumnFlags_WidthFixed
IMGUI_TABLE_COLUMN_FLAGS_NO_RESIZE = ccimgui.ImGuiTableColumnFlags_NoResize
IMGUI_TABLE_COLUMN_FLAGS_NO_REORDER = ccimgui.ImGuiTableColumnFlags_NoReorder
IMGUI_TABLE_COLUMN_FLAGS_NO_HIDE = ccimgui.ImGuiTableColumnFlags_NoHide
IMGUI_TABLE_COLUMN_FLAGS_NO_CLIP = ccimgui.ImGuiTableColumnFlags_NoClip
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT = ccimgui.ImGuiTableColumnFlags_NoSort
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_NoSortAscending
IMGUI_TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_NoSortDescending
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_LABEL = ccimgui.ImGuiTableColumnFlags_NoHeaderLabel
IMGUI_TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH = ccimgui.ImGuiTableColumnFlags_NoHeaderWidth
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortAscending
IMGUI_TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING = ccimgui.ImGuiTableColumnFlags_PreferSortDescending
IMGUI_TABLE_COLUMN_FLAGS_INDENT_ENABLE = ccimgui.ImGuiTableColumnFlags_IndentEnable
IMGUI_TABLE_COLUMN_FLAGS_INDENT_DISABLE = ccimgui.ImGuiTableColumnFlags_IndentDisable
IMGUI_TABLE_COLUMN_FLAGS_IS_ENABLED = ccimgui.ImGuiTableColumnFlags_IsEnabled
IMGUI_TABLE_COLUMN_FLAGS_IS_VISIBLE = ccimgui.ImGuiTableColumnFlags_IsVisible
IMGUI_TABLE_COLUMN_FLAGS_IS_SORTED = ccimgui.ImGuiTableColumnFlags_IsSorted
IMGUI_TABLE_COLUMN_FLAGS_IS_HOVERED = ccimgui.ImGuiTableColumnFlags_IsHovered
IMGUI_TABLE_COLUMN_FLAGS_WIDTH_MASK_ = ccimgui.ImGuiTableColumnFlags_WidthMask_
IMGUI_TABLE_COLUMN_FLAGS_INDENT_MASK_ = ccimgui.ImGuiTableColumnFlags_IndentMask_
IMGUI_TABLE_COLUMN_FLAGS_STATUS_MASK_ = ccimgui.ImGuiTableColumnFlags_StatusMask_
IMGUI_TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE_ = ccimgui.ImGuiTableColumnFlags_NoDirectResize_
IMGUI_TABLE_FLAGS_NONE = ccimgui.ImGuiTableFlags_None
IMGUI_TABLE_FLAGS_RESIZABLE = ccimgui.ImGuiTableFlags_Resizable
IMGUI_TABLE_FLAGS_REORDERABLE = ccimgui.ImGuiTableFlags_Reorderable
IMGUI_TABLE_FLAGS_HIDEABLE = ccimgui.ImGuiTableFlags_Hideable
IMGUI_TABLE_FLAGS_SORTABLE = ccimgui.ImGuiTableFlags_Sortable
IMGUI_TABLE_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiTableFlags_NoSavedSettings
IMGUI_TABLE_FLAGS_CONTEXT_MENU_IN_BODY = ccimgui.ImGuiTableFlags_ContextMenuInBody
IMGUI_TABLE_FLAGS_ROW_BG = ccimgui.ImGuiTableFlags_RowBg
IMGUI_TABLE_FLAGS_BORDERS_INNERH = ccimgui.ImGuiTableFlags_BordersInnerH
IMGUI_TABLE_FLAGS_BORDERS_OUTERH = ccimgui.ImGuiTableFlags_BordersOuterH
IMGUI_TABLE_FLAGS_BORDERS_INNERV = ccimgui.ImGuiTableFlags_BordersInnerV
IMGUI_TABLE_FLAGS_BORDERS_OUTERV = ccimgui.ImGuiTableFlags_BordersOuterV
IMGUI_TABLE_FLAGS_BORDERSH = ccimgui.ImGuiTableFlags_BordersH
IMGUI_TABLE_FLAGS_BORDERSV = ccimgui.ImGuiTableFlags_BordersV
IMGUI_TABLE_FLAGS_BORDERS_INNER = ccimgui.ImGuiTableFlags_BordersInner
IMGUI_TABLE_FLAGS_BORDERS_OUTER = ccimgui.ImGuiTableFlags_BordersOuter
IMGUI_TABLE_FLAGS_BORDERS = ccimgui.ImGuiTableFlags_Borders
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY = ccimgui.ImGuiTableFlags_NoBordersInBody
IMGUI_TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE = ccimgui.ImGuiTableFlags_NoBordersInBodyUntilResize
IMGUI_TABLE_FLAGS_SIZING_FIXED_FIT = ccimgui.ImGuiTableFlags_SizingFixedFit
IMGUI_TABLE_FLAGS_SIZING_FIXED_SAME = ccimgui.ImGuiTableFlags_SizingFixedSame
IMGUI_TABLE_FLAGS_SIZING_STRETCH_PROP = ccimgui.ImGuiTableFlags_SizingStretchProp
IMGUI_TABLE_FLAGS_SIZING_STRETCH_SAME = ccimgui.ImGuiTableFlags_SizingStretchSame
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDX = ccimgui.ImGuiTableFlags_NoHostExtendX
IMGUI_TABLE_FLAGS_NO_HOST_EXTENDY = ccimgui.ImGuiTableFlags_NoHostExtendY
IMGUI_TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE = ccimgui.ImGuiTableFlags_NoKeepColumnsVisible
IMGUI_TABLE_FLAGS_PRECISE_WIDTHS = ccimgui.ImGuiTableFlags_PreciseWidths
IMGUI_TABLE_FLAGS_NO_CLIP = ccimgui.ImGuiTableFlags_NoClip
IMGUI_TABLE_FLAGS_PAD_OUTERX = ccimgui.ImGuiTableFlags_PadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_OUTERX = ccimgui.ImGuiTableFlags_NoPadOuterX
IMGUI_TABLE_FLAGS_NO_PAD_INNERX = ccimgui.ImGuiTableFlags_NoPadInnerX
IMGUI_TABLE_FLAGS_SCROLLX = ccimgui.ImGuiTableFlags_ScrollX
IMGUI_TABLE_FLAGS_SCROLLY = ccimgui.ImGuiTableFlags_ScrollY
IMGUI_TABLE_FLAGS_SORT_MULTI = ccimgui.ImGuiTableFlags_SortMulti
IMGUI_TABLE_FLAGS_SORT_TRISTATE = ccimgui.ImGuiTableFlags_SortTristate
IMGUI_TABLE_FLAGS_SIZING_MASK_ = ccimgui.ImGuiTableFlags_SizingMask_
IMGUI_TABLE_ROW_FLAGS_NONE = ccimgui.ImGuiTableRowFlags_None
IMGUI_TABLE_ROW_FLAGS_HEADERS = ccimgui.ImGuiTableRowFlags_Headers
IMGUI_TREE_NODE_FLAGS_NONE = ccimgui.ImGuiTreeNodeFlags_None
IMGUI_TREE_NODE_FLAGS_SELECTED = ccimgui.ImGuiTreeNodeFlags_Selected
IMGUI_TREE_NODE_FLAGS_FRAMED = ccimgui.ImGuiTreeNodeFlags_Framed
IMGUI_TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP = ccimgui.ImGuiTreeNodeFlags_AllowItemOverlap
IMGUI_TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN = ccimgui.ImGuiTreeNodeFlags_NoTreePushOnOpen
IMGUI_TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG = ccimgui.ImGuiTreeNodeFlags_NoAutoOpenOnLog
IMGUI_TREE_NODE_FLAGS_DEFAULT_OPEN = ccimgui.ImGuiTreeNodeFlags_DefaultOpen
IMGUI_TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK = ccimgui.ImGuiTreeNodeFlags_OpenOnDoubleClick
IMGUI_TREE_NODE_FLAGS_OPEN_ON_ARROW = ccimgui.ImGuiTreeNodeFlags_OpenOnArrow
IMGUI_TREE_NODE_FLAGS_LEAF = ccimgui.ImGuiTreeNodeFlags_Leaf
IMGUI_TREE_NODE_FLAGS_BULLET = ccimgui.ImGuiTreeNodeFlags_Bullet
IMGUI_TREE_NODE_FLAGS_FRAME_PADDING = ccimgui.ImGuiTreeNodeFlags_FramePadding
IMGUI_TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanAvailWidth
IMGUI_TREE_NODE_FLAGS_SPAN_FULL_WIDTH = ccimgui.ImGuiTreeNodeFlags_SpanFullWidth
IMGUI_TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE = ccimgui.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
IMGUI_TREE_NODE_FLAGS_COLLAPSING_HEADER = ccimgui.ImGuiTreeNodeFlags_CollapsingHeader
IMGUI_VIEWPORT_FLAGS_NONE = ccimgui.ImGuiViewportFlags_None
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_WINDOW = ccimgui.ImGuiViewportFlags_IsPlatformWindow
IMGUI_VIEWPORT_FLAGS_IS_PLATFORM_MONITOR = ccimgui.ImGuiViewportFlags_IsPlatformMonitor
IMGUI_VIEWPORT_FLAGS_OWNED_BY_APP = ccimgui.ImGuiViewportFlags_OwnedByApp
IMGUI_VIEWPORT_FLAGS_NO_DECORATION = ccimgui.ImGuiViewportFlags_NoDecoration
IMGUI_VIEWPORT_FLAGS_NO_TASK_BAR_ICON = ccimgui.ImGuiViewportFlags_NoTaskBarIcon
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiViewportFlags_NoFocusOnAppearing
IMGUI_VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK = ccimgui.ImGuiViewportFlags_NoFocusOnClick
IMGUI_VIEWPORT_FLAGS_NO_INPUTS = ccimgui.ImGuiViewportFlags_NoInputs
IMGUI_VIEWPORT_FLAGS_NO_RENDERER_CLEAR = ccimgui.ImGuiViewportFlags_NoRendererClear
IMGUI_VIEWPORT_FLAGS_TOP_MOST = ccimgui.ImGuiViewportFlags_TopMost
IMGUI_VIEWPORT_FLAGS_MINIMIZED = ccimgui.ImGuiViewportFlags_Minimized
IMGUI_VIEWPORT_FLAGS_NO_AUTO_MERGE = ccimgui.ImGuiViewportFlags_NoAutoMerge
IMGUI_VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS = ccimgui.ImGuiViewportFlags_CanHostOtherWindows
IMGUI_WINDOW_FLAGS_NONE = ccimgui.ImGuiWindowFlags_None
IMGUI_WINDOW_FLAGS_NO_TITLE_BAR = ccimgui.ImGuiWindowFlags_NoTitleBar
IMGUI_WINDOW_FLAGS_NO_RESIZE = ccimgui.ImGuiWindowFlags_NoResize
IMGUI_WINDOW_FLAGS_NO_MOVE = ccimgui.ImGuiWindowFlags_NoMove
IMGUI_WINDOW_FLAGS_NO_SCROLLBAR = ccimgui.ImGuiWindowFlags_NoScrollbar
IMGUI_WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE = ccimgui.ImGuiWindowFlags_NoScrollWithMouse
IMGUI_WINDOW_FLAGS_NO_COLLAPSE = ccimgui.ImGuiWindowFlags_NoCollapse
IMGUI_WINDOW_FLAGS_ALWAYS_AUTO_RESIZE = ccimgui.ImGuiWindowFlags_AlwaysAutoResize
IMGUI_WINDOW_FLAGS_NO_BACKGROUND = ccimgui.ImGuiWindowFlags_NoBackground
IMGUI_WINDOW_FLAGS_NO_SAVED_SETTINGS = ccimgui.ImGuiWindowFlags_NoSavedSettings
IMGUI_WINDOW_FLAGS_NO_MOUSE_INPUTS = ccimgui.ImGuiWindowFlags_NoMouseInputs
IMGUI_WINDOW_FLAGS_MENU_BAR = ccimgui.ImGuiWindowFlags_MenuBar
IMGUI_WINDOW_FLAGS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_HorizontalScrollbar
IMGUI_WINDOW_FLAGS_NO_FOCUS_ON_APPEARING = ccimgui.ImGuiWindowFlags_NoFocusOnAppearing
IMGUI_WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS = ccimgui.ImGuiWindowFlags_NoBringToFrontOnFocus
IMGUI_WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysVerticalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR = ccimgui.ImGuiWindowFlags_AlwaysHorizontalScrollbar
IMGUI_WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING = ccimgui.ImGuiWindowFlags_AlwaysUseWindowPadding
IMGUI_WINDOW_FLAGS_NO_NAV_INPUTS = ccimgui.ImGuiWindowFlags_NoNavInputs
IMGUI_WINDOW_FLAGS_NO_NAV_FOCUS = ccimgui.ImGuiWindowFlags_NoNavFocus
IMGUI_WINDOW_FLAGS_UNSAVED_DOCUMENT = ccimgui.ImGuiWindowFlags_UnsavedDocument
IMGUI_WINDOW_FLAGS_NO_DOCKING = ccimgui.ImGuiWindowFlags_NoDocking
IMGUI_WINDOW_FLAGS_NO_NAV = ccimgui.ImGuiWindowFlags_NoNav
IMGUI_WINDOW_FLAGS_NO_DECORATION = ccimgui.ImGuiWindowFlags_NoDecoration
IMGUI_WINDOW_FLAGS_NO_INPUTS = ccimgui.ImGuiWindowFlags_NoInputs
IMGUI_WINDOW_FLAGS_NAV_FLATTENED = ccimgui.ImGuiWindowFlags_NavFlattened
IMGUI_WINDOW_FLAGS_CHILD_WINDOW = ccimgui.ImGuiWindowFlags_ChildWindow
IMGUI_WINDOW_FLAGS_TOOLTIP = ccimgui.ImGuiWindowFlags_Tooltip
IMGUI_WINDOW_FLAGS_POPUP = ccimgui.ImGuiWindowFlags_Popup
IMGUI_WINDOW_FLAGS_MODAL = ccimgui.ImGuiWindowFlags_Modal
IMGUI_WINDOW_FLAGS_CHILD_MENU = ccimgui.ImGuiWindowFlags_ChildMenu
IMGUI_WINDOW_FLAGS_DOCK_NODE_HOST = ccimgui.ImGuiWindowFlags_DockNodeHost
# [End Enums]

# [Constant Functions]
Vec2 = namedtuple('Vec2', ['x', 'y'])
Vec4 = namedtuple('Vec4', ['x', 'y', 'z', 'w'])

cdef bytes _bytes(str text):
    return <bytes>(text if PY_MAJOR_VERSION < 3 else text.encode('utf-8'))

cdef str _from_bytes(bytes text):
    return <str>(text if PY_MAJOR_VERSION < 3 else text.decode('utf-8', errors='ignore'))


cdef _cast_ImVec2_tuple(ccimgui.ImVec2 vec):
    return Vec2(vec.x, vec.y)

cdef ccimgui.ImVec2 _cast_tuple_ImVec2(pair) except +:
    cdef ccimgui.ImVec2 vec
    if len(pair) != 2:
        raise ValueError('pair param must be length of 2')
    vec.x, vec.y = pair
    return vec

cdef _cast_ImVec4_tuple(ccimgui.ImVec4 vec):
    return Vec4(vec.x, vec.y, vec.z, vec.w)

cdef ccimgui.ImVec4 _cast_tuple_ImVec4(quadruple):
    cdef ccimgui.ImVec4 vec
    if len(quadruple) != 4:
        raise ValueError('quadruple param must be length of 4')

    vec.x, vec.y, vec.z, vec.w = quadruple
    return vec


def _py_vertex_buffer_vertex_pos_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).pos

def _py_vertex_buffer_vertex_uv_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).uv

def _py_vertex_buffer_vertex_col_offset():
    return <uintptr_t><size_t>&(<ccimgui.ImDrawVert*>NULL).col

def _py_vertex_buffer_vertex_size():
    return sizeof(ccimgui.ImDrawVert)

def _py_index_buffer_index_size():
    return sizeof(ccimgui.ImDrawIdx)

cdef class BoolPtr:
    cdef bool ptr

    def __init__(self, initial_value: bool):
        self.ptr: bool = initial_value

    def __bool__(self):
        return self.ptr

# [End Constant Functions]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiPayload)
def accept_drag_drop_payload(type_: str, flags: int=0):
    """
    Accept contents of a given type. if imguidragdropflags_acceptbeforedelivery
    is set you can peek into the payload before the mouse button
    is released.
    """
    cdef ccimgui.ImGuiPayload* res = ccimgui.igAcceptDragDropPayload(_bytes(type_), flags)
    return ImGuiPayload.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def align_text_to_frame_padding():
    """
    Vertically align upcoming text baseline to framepadding.y so
    that it will align properly to regularly framed items (call
    if you have text on a line before a framed item)
    """
    ccimgui.igAlignTextToFramePadding()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def arrow_button(str_id: str, dir_: int):
    """
    Square button with an arrow shape
    """
    cdef ccimgui.bool res = ccimgui.igArrowButton(_bytes(str_id), dir_)
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(bool)
def begin(name: str, p_open: BoolPtr=None, flags: int=0):
    cdef bool is_open = True
    cdef ccimgui.bool res
    if p_open is None:
        res = ccimgui.igBegin(_bytes(name), NULL, flags)
    else:
        res = ccimgui.igBegin(_bytes(name), &is_open, flags)
        p_open.ptr = is_open
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_child_frame(id_: int, size: tuple, flags: int=0):
    """
    Helper to create a child window / scrolling region that looks
    like a normal widget frame
    """
    cdef ccimgui.bool res = ccimgui.igBeginChildFrame(id_, _cast_tuple_ImVec2(size), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_child_id(id_: int, size: tuple=(0, 0), border: Any=False, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igBeginChild_ID(id_, _cast_tuple_ImVec2(size), border, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_child_str(str_id: str, size: tuple=(0, 0), border: Any=False, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igBeginChild_Str(_bytes(str_id), _cast_tuple_ImVec2(size), border, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_combo(label: str, preview_value: str, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igBeginCombo(_bytes(label), _bytes(preview_value), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def begin_disabled(disabled: Any=True):
    ccimgui.igBeginDisabled(disabled)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_drag_drop_source(flags: int=0):
    """
    Call after submitting an item which may be dragged. when this
    return true, you can call setdragdroppayload() + enddragdropsource()
    """
    cdef ccimgui.bool res = ccimgui.igBeginDragDropSource(flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_drag_drop_target():
    """
    Call after submitting an item that may receive a payload. if
    this returns true, you can call acceptdragdroppayload() + enddragdroptarget()
    """
    cdef ccimgui.bool res = ccimgui.igBeginDragDropTarget()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def begin_group():
    """
    Lock horizontal starting position
    """
    ccimgui.igBeginGroup()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_list_box(label: str, size: tuple=(0, 0)):
    """
    Open a framed scrolling region
    """
    cdef ccimgui.bool res = ccimgui.igBeginListBox(_bytes(label), _cast_tuple_ImVec2(size))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_main_menu_bar():
    """
    Create and append to a full screen menu-bar.
    """
    cdef ccimgui.bool res = ccimgui.igBeginMainMenuBar()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_menu(label: str, enabled: Any=True):
    """
    Create a sub-menu entry. only call endmenu() if this returns
    true!
    """
    cdef ccimgui.bool res = ccimgui.igBeginMenu(_bytes(label), enabled)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_menu_bar():
    """
    Append to menu-bar of current window (requires imguiwindowflags_menubar
    flag set on parent window).
    """
    cdef ccimgui.bool res = ccimgui.igBeginMenuBar()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_popup(str_id: str, flags: int=0):
    """
    Return true if the popup is open, and you can start outputting
    to it.
    """
    cdef ccimgui.bool res = ccimgui.igBeginPopup(_bytes(str_id), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_popup_context_item(str_id: str=None, popup_flags: int=1):
    """
    Open+begin popup when clicked on last item. use str_id==null
    to associate the popup to previous item. if you want to use
    that on a non-interactive item such as text() you need to pass
    in an explicit id here. read comments in .cpp!
    """
    cdef ccimgui.bool res = ccimgui.igBeginPopupContextItem(_bytes(str_id), popup_flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_popup_context_void(str_id: str=None, popup_flags: int=1):
    """
    Open+begin popup when clicked in void (where there are no windows).
    """
    cdef ccimgui.bool res = ccimgui.igBeginPopupContextVoid(_bytes(str_id), popup_flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_popup_context_window(str_id: str=None, popup_flags: int=1):
    """
    Open+begin popup when clicked on current window.
    """
    cdef ccimgui.bool res = ccimgui.igBeginPopupContextWindow(_bytes(str_id), popup_flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_popup_modal(name: str, p_open: Any=None, flags: int=0):
    """
    Return true if the modal is open, and you can start outputting
    to it.
    """
    cdef ccimgui.bool res = ccimgui.igBeginPopupModal(_bytes(name), p_open, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_tab_bar(str_id: str, flags: int=0):
    """
    Create and append into a tabbar
    """
    cdef ccimgui.bool res = ccimgui.igBeginTabBar(_bytes(str_id), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_tab_item(label: str, p_open: Any=None, flags: int=0):
    """
    Create a tab. returns true if the tab is selected.
    """
    cdef ccimgui.bool res = ccimgui.igBeginTabItem(_bytes(label), p_open, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_table(str_id: str, column: int, flags: int=0, outer_size: tuple=(0.0, 0.0), inner_width: float=0.0):
    cdef ccimgui.bool res = ccimgui.igBeginTable(_bytes(str_id), column, flags, _cast_tuple_ImVec2(outer_size), inner_width)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def begin_tooltip():
    """
    Begin/append a tooltip window. to create full-featured tooltip
    (with any kind of items).
    """
    cdef ccimgui.bool res = ccimgui.igBeginTooltip()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def bullet():
    """
    Draw a small circle + keep the cursor on the same line. advance
    cursor x position by gettreenodetolabelspacing(), same distance
    that treenode() uses
    """
    ccimgui.igBullet()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def bullet_text(fmt: str):
    """
    Shortcut for bullet()+text()
    """
    ccimgui.igBulletText(_bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def bullet_textv(fmt: str, args: str):
    ccimgui.igBulletTextV(_bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(Any)
def button(label: str, size: tuple=(0, 0)):
    """
    Button
    """
    cdef ccimgui.bool res = ccimgui.igButton(_bytes(label), _cast_tuple_ImVec2(size))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def calc_item_width():
    """
    Width of item given pushed settings and current cursor position.
    not necessarily the width of last item unlike most 'item' functions.
    """
    cdef float res = ccimgui.igCalcItemWidth()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def calc_text_size(pOut: ImVec2, text: str, text_end: str=None, hide_text_after_double_hash: Any=False, wrap_width: float=-1.0):
    ccimgui.igCalcTextSize(pOut._ptr, _bytes(text), _bytes(text_end), hide_text_after_double_hash, wrap_width)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(bool)
def checkbox(label: str, value: BoolPtr):
    cdef bool value_ptr = value.ptr
    cdef ccimgui.bool res = ccimgui.igCheckbox(_bytes(label), &value_ptr)
    value.ptr = value_ptr
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def checkbox_flags_int_ptr(label: str, flags: int, flags_value: int):
    cdef ccimgui.bool res = ccimgui.igCheckboxFlags_IntPtr(_bytes(label), flags, flags_value)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def checkbox_flags_uint_ptr(label: str, flags: int, flags_value: int):
    cdef ccimgui.bool res = ccimgui.igCheckboxFlags_UintPtr(_bytes(label), flags, flags_value)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def close_current_popup():
    """
    Manually close the popup we have begin-ed into.
    """
    ccimgui.igCloseCurrentPopup()
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(Any)
def collapsing_header_bool_ptr(label: str, p_visible: BoolPtr=None, flags: int=0):
    """
    When 'p_visible != null': if '*p_visible==true' display an additional
    small close button on upper right of the header which will set
    the bool to false when clicked, if '*p_visible==false' don't
    display the header.
    """
    cdef bool p_visible_ptr = p_visible.ptr
    if p_visible is not None:
        res = ccimgui.igCollapsingHeader_BoolPtr(_bytes(label), &p_visible_ptr, flags)
        p_visible.ptr = p_visible_ptr
        return res
    else:
        res = ccimgui.igCollapsingHeader_BoolPtr(_bytes(label), NULL, flags)
        return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def collapsing_header_tree_node_flags(label: str, flags: int=0):
    """
    If returning 'true' the header is open. doesn't indent nor push
    on id stack. user doesn't have to call treepop().
    """
    cdef ccimgui.bool res = ccimgui.igCollapsingHeader_TreeNodeFlags(_bytes(label), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def color_button(desc_id: str, col: tuple, flags: int=0, size: tuple=(0, 0)):
    """
    Display a color square/button, hover for details, return true
    when pressed.
    """
    cdef ccimgui.bool res = ccimgui.igColorButton(_bytes(desc_id), _cast_tuple_ImVec4(col), flags, _cast_tuple_ImVec2(size))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def color_convert_float_4_to_u32(in_: tuple):
    cdef ccimgui.ImU32 res = ccimgui.igColorConvertFloat4ToU32(_cast_tuple_ImVec4(in_))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def color_convert_hs_vto_rgb(h: float, s: float, value: float, out_r: float, out_g: float, out_b: float):
    ccimgui.igColorConvertHSVtoRGB(
        h,
        s,
        value,
        out_r,
        out_g,
        out_b
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def color_convert_rg_bto_hsv(r: float, g: float, b: float, out_h: float, out_s: float, out_v: float):
    ccimgui.igColorConvertRGBtoHSV(
        r,
        g,
        b,
        out_h,
        out_s,
        out_v
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def color_convert_u32_to_float4(pOut: ImVec4, in_: int):
    ccimgui.igColorConvertU32ToFloat4(pOut._ptr, in_)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def color_edit3(label: str, col0: float, col1: float, col2: float, flags: int=0):
    cdef float[3] io_float_col = [col0, col1, col2]
    cdef ccimgui.bool res = ccimgui.igColorEdit3(_bytes(label), <float*>&io_float_col, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def color_edit4(label: str, col0: float, col1: float, col2: float, col3: float, flags: int=0):
    cdef float[4] io_float_col = [col0, col1, col2, col3]
    cdef ccimgui.bool res = ccimgui.igColorEdit4(_bytes(label), <float*>&io_float_col, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def color_picker3(label: str, col0: float, col1: float, col2: float, flags: int=0):
    cdef float[3] io_float_col = [col0, col1, col2]
    cdef ccimgui.bool res = ccimgui.igColorPicker3(_bytes(label), <float*>&io_float_col, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def color_picker4(label: str, col0: float, col1: float, col2: float, col3: float, flags: int=0, ref_col: float=None):
    cdef float[4] io_float_col = [col0, col1, col2, col3]
    cdef ccimgui.bool res = ccimgui.igColorPicker4(_bytes(label), <float*>&io_float_col, flags, ref_col)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def columns(count: int=1, id_: str=None, border: Any=True):
    ccimgui.igColumns(count, _bytes(id_), border)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def combo_fn_bool_ptr(label: str, current_item: int, items_getter: Callable, data: Any, items_count: int, popup_max_height_in_items: int=-1):
    cdef ccimgui.bool res = ccimgui.igCombo_FnBoolPtr(
        _bytes(label),
        current_item,
        items_getter,
        data,
        items_count,
        popup_max_height_in_items
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def combo_str(label: str, current_item: int, items_separated_by_zeros: str, popup_max_height_in_items: int=-1):
    """
    Separate items with \0 within a string, end item-list with \0\0.
    e.g. one\0two\0three\0
    """
    cdef ccimgui.bool res = ccimgui.igCombo_Str(_bytes(label), current_item, _bytes(items_separated_by_zeros), popup_max_height_in_items)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def combo_str_arr(label: str, current_item: int, items: Any, items_count: int, popup_max_height_in_items: int=-1):
    cdef ccimgui.bool res = ccimgui.igCombo_Str_arr(_bytes(label), current_item, items, items_count, popup_max_height_in_items)
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(ImGuiContext)
def create_context(shared_font_atlas: ImFontAtlas=None):
    cdef ccimgui.ImGuiContext* res
    if shared_font_atlas is None:
        res = ccimgui.igCreateContext(NULL)
    else:
        res = ccimgui.igCreateContext(shared_font_atlas._ptr)
    
    return ImGuiContext.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def debug_check_version_and_data_layout(version_str: str, sz_io: Any, sz_style: Any, sz_vec2: Any, sz_vec4: Any, sz_drawvert: Any, sz_drawidx: Any):
    """
    This is called by imgui_checkversion() macro.
    """
    cdef ccimgui.bool res = ccimgui.igDebugCheckVersionAndDataLayout(
        _bytes(version_str),
        sz_io,
        sz_style,
        sz_vec2,
        sz_vec4,
        sz_drawvert,
        sz_drawidx
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def debug_text_encoding(text: str):
    ccimgui.igDebugTextEncoding(_bytes(text))
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def destroy_context(ctx: ImGuiContext=None):
    """
    Null = destroy current context
    """
    if ctx is not None:
        ccimgui.igDestroyContext(ctx._ptr)
    else:
        ccimgui.igDestroyContext(NULL)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def destroy_platform_windows():
    """
    Call destroywindow platform functions for all viewports. call
    from backend shutdown() if you need to close platform windows
    before imgui shutdown. otherwise will be called by destroycontext().
    """
    ccimgui.igDestroyPlatformWindows()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def dock_space(id_: int, size: tuple=(0, 0), flags: int=0, window_class: ImGuiWindowClass=None):
    cdef ccimgui.ImGuiID res = ccimgui.igDockSpace(id_, _cast_tuple_ImVec2(size), flags, window_class._ptr)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def dock_space_over_viewport(viewport: ImGuiViewport=None, flags: int=0, window_class: ImGuiWindowClass=None):
    cdef ccimgui.ImGuiID res = ccimgui.igDockSpaceOverViewport(viewport._ptr, flags, window_class._ptr)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_float(label: str, value: float, v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3", flags: int=0):
    """
    If v_min >= v_max we have no bound
    """
    cdef ccimgui.bool res = ccimgui.igDragFloat(
        _bytes(label),
        value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_float2(label: str, value0: float, value1: float, v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3", flags: int=0):
    cdef float[2] io_float_value = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igDragFloat2(
        _bytes(label),
        <float*>&io_float_value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_float3(label: str, value0: float, value1: float, value2: float, v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3", flags: int=0):
    cdef float[3] io_float_value = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igDragFloat3(
        _bytes(label),
        <float*>&io_float_value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_float4(label: str, value0: float, value1: float, value2: float, value3: float, v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3", flags: int=0):
    cdef float[4] io_float_value = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igDragFloat4(
        _bytes(label),
        <float*>&io_float_value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_float_range2(label: str, v_current_min: float, v_current_max: float, v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3", format_max: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igDragFloatRange2(
        _bytes(label),
        v_current_min,
        v_current_max,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        _bytes(format_max),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_int(label: str, value: int, v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0):
    """
    If v_min >= v_max we have no bound
    """
    cdef ccimgui.bool res = ccimgui.igDragInt(
        _bytes(label),
        value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_int2(label: str, value0: int, value1: int, v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0):
    cdef int[2] io_int_value = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igDragInt2(
        _bytes(label),
        <int*>&io_int_value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_int3(label: str, value0: int, value1: int, value2: int, v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0):
    cdef int[3] io_int_value = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igDragInt3(
        _bytes(label),
        <int*>&io_int_value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_int4(label: str, value0: int, value1: int, value2: int, value3: int, v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0):
    cdef int[4] io_int_value = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igDragInt4(
        _bytes(label),
        <int*>&io_int_value,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_int_range2(label: str, v_current_min: int, v_current_max: int, v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", format_max: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igDragIntRange2(
        _bytes(label),
        v_current_min,
        v_current_max,
        v_speed,
        v_min,
        v_max,
        _bytes(format_),
        _bytes(format_max),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_scalar(label: str, data_type: int, p_data: Any, v_speed: float=1.0, p_min: Any=None, p_max: Any=None, format_: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igDragScalar(
        _bytes(label),
        data_type,
        p_data,
        v_speed,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def drag_scalarn(label: str, data_type: int, p_data: Any, components: int, v_speed: float=1.0, p_min: Any=None, p_max: Any=None, format_: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igDragScalarN(
        _bytes(label),
        data_type,
        p_data,
        components,
        v_speed,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def dummy(size: tuple):
    """
    Add a dummy item of given size. unlike invisiblebutton(), dummy()
    won't take the mouse click or be navigable into.
    """
    ccimgui.igDummy(_cast_tuple_ImVec2(size))
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def end():
    ccimgui.igEnd()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_child():
    ccimgui.igEndChild()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_child_frame():
    """
    Always call endchildframe() regardless of beginchildframe() return
    values (which indicates a collapsed/clipped window)
    """
    ccimgui.igEndChildFrame()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_combo():
    """
    Only call endcombo() if begincombo() returns true!
    """
    ccimgui.igEndCombo()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_disabled():
    ccimgui.igEndDisabled()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_drag_drop_source():
    """
    Only call enddragdropsource() if begindragdropsource() returns
    true!
    """
    ccimgui.igEndDragDropSource()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_drag_drop_target():
    """
    Only call enddragdroptarget() if begindragdroptarget() returns
    true!
    """
    ccimgui.igEndDragDropTarget()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_frame():
    """
    Ends the dear imgui frame. automatically called by render().
    if you don't need to render data (skipping rendering) you may
    call endframe() without render()... but you'll have wasted cpu
    already! if you don't need to render, better to not create any
    windows and not call newframe() at all!
    """
    ccimgui.igEndFrame()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_group():
    """
    Unlock horizontal starting position + capture the whole group
    bounding box into one item (so you can use isitemhovered() or
    layout primitives such as sameline() on whole group, etc.)
    """
    ccimgui.igEndGroup()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_list_box():
    """
    Only call endlistbox() if beginlistbox() returned true!
    """
    ccimgui.igEndListBox()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_main_menu_bar():
    """
    Only call endmainmenubar() if beginmainmenubar() returns true!
    """
    ccimgui.igEndMainMenuBar()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_menu():
    """
    Only call endmenu() if beginmenu() returns true!
    """
    ccimgui.igEndMenu()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_menu_bar():
    """
    Only call endmenubar() if beginmenubar() returns true!
    """
    ccimgui.igEndMenuBar()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_popup():
    """
    Only call endpopup() if beginpopupxxx() returns true!
    """
    ccimgui.igEndPopup()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_tab_bar():
    """
    Only call endtabbar() if begintabbar() returns true!
    """
    ccimgui.igEndTabBar()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_tab_item():
    """
    Only call endtabitem() if begintabitem() returns true!
    """
    ccimgui.igEndTabItem()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_table():
    """
    Only call endtable() if begintable() returns true!
    """
    ccimgui.igEndTable()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def end_tooltip():
    """
    Only call endtooltip() if begintooltip() returns true!
    """
    ccimgui.igEndTooltip()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiViewport)
def find_viewport_by_id(id_: int):
    """
    This is a helper for backends.
    """
    cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByID(id_)
    return ImGuiViewport.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiViewport)
def find_viewport_by_platform_handle(platform_handle: Any):
    """
    This is a helper for backends. the type platform_handle is decided
    by the backend (e.g. hwnd, mywindow*, glfwwindow* etc.)
    """
    cdef ccimgui.ImGuiViewport* res = ccimgui.igFindViewportByPlatformHandle(platform_handle)
    return ImGuiViewport.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImDrawList)
def get_background_draw_list_nil():
    """
    Get background draw list for the viewport associated to the current
    window. this draw list will be the first rendering one. useful
    to quickly draw shapes/text behind dear imgui contents.
    """
    cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_Nil()
    return ImDrawList.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImDrawList)
def get_background_draw_list_viewport_ptr(viewport: ImGuiViewport):
    """
    Get background draw list for the given viewport. this draw list
    will be the first rendering one. useful to quickly draw shapes/text
    behind dear imgui contents.
    """
    cdef ccimgui.ImDrawList* res = ccimgui.igGetBackgroundDrawList_ViewportPtr(viewport._ptr)
    return ImDrawList.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(str)
def get_clipboard_text():
    cdef const char* res = ccimgui.igGetClipboardText()
    return _bytes(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_color_u32_col(idx: int, alpha_mul: float=1.0):
    """
    Retrieve given style color with style alpha applied and optional
    extra alpha multiplier, packed as a 32-bit value suitable for
    imdrawlist
    """
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Col(idx, alpha_mul)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_color_u32_u32(col: int):
    """
    Retrieve given color with style alpha applied, packed as a 32-bit
    value suitable for imdrawlist
    """
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_U32(col)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_color_u32_vec4(col: tuple):
    """
    Retrieve given color with style alpha applied, packed as a 32-bit
    value suitable for imdrawlist
    """
    cdef ccimgui.ImU32 res = ccimgui.igGetColorU32_Vec4(_cast_tuple_ImVec4(col))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_column_index():
    """
    Get current column index
    """
    cdef int res = ccimgui.igGetColumnIndex()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_column_offset(column_index: int=-1):
    """
    Get position of column line (in pixels, from the left side of
    the contents region). pass -1 to use current column, otherwise
    0..getcolumnscount() inclusive. column 0 is typically 0.0f
    """
    cdef float res = ccimgui.igGetColumnOffset(column_index)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_column_width(column_index: int=-1):
    """
    Get column width (in pixels). pass -1 to use current column
    """
    cdef float res = ccimgui.igGetColumnWidth(column_index)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_columns_count():
    cdef int res = ccimgui.igGetColumnsCount()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_content_region_avail(pOut: ImVec2):
    """
    == getcontentregionmax() - getcursorpos()
    """
    ccimgui.igGetContentRegionAvail(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_content_region_max(pOut: ImVec2):
    """
    Current content boundaries (typically window boundaries including
    scrolling, or current column boundaries), in windows coordinates
    """
    ccimgui.igGetContentRegionMax(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(ImGuiContext)
def get_current_context():
    cdef ccimgui.ImGuiContext* res = ccimgui.igGetCurrentContext()
    return ImGuiContext.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_cursor_pos(pOut: ImVec2):
    """
    Cursor position in window coordinates (relative to window position)
    """
    ccimgui.igGetCursorPos(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_cursor_posx():
    """
      (some functions are using window-relative coordinates, such
    as: getcursorpos, getcursorstartpos, getcontentregionmax, getwindowcontentregion*
    etc.
    """
    cdef float res = ccimgui.igGetCursorPosX()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_cursor_posy():
    """
       other functions such as getcursorscreenpos or everything in
    imdrawlist::
    """
    cdef float res = ccimgui.igGetCursorPosY()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_cursor_screen_pos(pOut: ImVec2):
    """
    Cursor position in absolute coordinates (useful to work with
    imdrawlist api). generally top-left == getmainviewport()->pos
    == (0,0) in single viewport mode, and bottom-right == getmainviewport()->pos+size
    == io.displaysize in single-viewport mode.
    """
    ccimgui.igGetCursorScreenPos(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_cursor_start_pos(pOut: ImVec2):
    """
    Initial cursor position in window coordinates
    """
    ccimgui.igGetCursorStartPos(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiPayload)
def get_drag_drop_payload():
    """
    Peek directly into the current payload from anywhere. may return
    null. use imguipayload::isdatatype() to test for the payload
    type.
    """
    cdef ccimgui.ImGuiPayload* res = ccimgui.igGetDragDropPayload()
    return ImGuiPayload.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(ImDrawData)
def get_draw_data():
    """
    Valid after render() and until the next call to newframe(). this
    is what you have to render.
    """
    cdef ccimgui.ImDrawData* res = ccimgui.igGetDrawData()
    return ImDrawData.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImDrawListSharedData)
def get_draw_list_shared_data():
    """
    You may use this when creating your own imdrawlist instances.
    """
    cdef ccimgui.ImDrawListSharedData* res = ccimgui.igGetDrawListSharedData()
    return ImDrawListSharedData.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImFont)
def get_font():
    """
    Get current font
    """
    cdef ccimgui.ImFont* res = ccimgui.igGetFont()
    return ImFont.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_font_size():
    """
    Get current font size (= height in pixels) of current font with
    current scale applied
    """
    cdef float res = ccimgui.igGetFontSize()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_font_tex_uv_white_pixel(pOut: ImVec2):
    """
    Get uv coordinate for a while pixel, useful to draw custom shapes
    via the imdrawlist api
    """
    ccimgui.igGetFontTexUvWhitePixel(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImDrawList)
def get_foreground_draw_list_nil():
    """
    Get foreground draw list for the viewport associated to the current
    window. this draw list will be the last rendered one. useful
    to quickly draw shapes/text over dear imgui contents.
    """
    cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_Nil()
    return ImDrawList.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImDrawList)
def get_foreground_draw_list_viewport_ptr(viewport: ImGuiViewport):
    """
    Get foreground draw list for the given viewport. this draw list
    will be the last rendered one. useful to quickly draw shapes/text
    over dear imgui contents.
    """
    cdef ccimgui.ImDrawList* res = ccimgui.igGetForegroundDrawList_ViewportPtr(viewport._ptr)
    return ImDrawList.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_frame_count():
    """
    Get global imgui frame count. incremented by 1 every frame.
    """
    cdef int res = ccimgui.igGetFrameCount()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_frame_height():
    """
    ~ fontsize + style.framepadding.y * 2
    """
    cdef float res = ccimgui.igGetFrameHeight()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_frame_height_with_spacing():
    """
    ~ fontsize + style.framepadding.y * 2 + style.itemspacing.y (distance
    in pixels between 2 consecutive lines of framed widgets)
    """
    cdef float res = ccimgui.igGetFrameHeightWithSpacing()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_id_ptr(ptr_id: Any):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_Ptr(ptr_id)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_id_str(str_id: str):
    """
    Calculate unique id (hash of whole id stack + given parameter).
    e.g. if you want to query into imguistorage yourself
    """
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_Str(_bytes(str_id))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_id_str_str(str_id_begin: str, str_id_end: str):
    cdef ccimgui.ImGuiID res = ccimgui.igGetID_StrStr(_bytes(str_id_begin), _bytes(str_id_end))
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(ImGuiIO)
def get_io():
    """
    Access the io structure (mouse/keyboard/gamepad inputs, time,
    various configuration options/flags)
    """
    cdef ccimgui.ImGuiIO* res = ccimgui.igGetIO()
    return ImGuiIO.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_item_id():
    """
    Get id of last item (~~ often same imgui::getid(label) beforehand)
    """
    cdef ccimgui.ImGuiID res = ccimgui.igGetItemID()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_item_rect_max(pOut: ImVec2):
    """
    Get lower-right bounding rectangle of the last item (screen space)
    """
    ccimgui.igGetItemRectMax(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_item_rect_min(pOut: ImVec2):
    """
    Get upper-left bounding rectangle of the last item (screen space)
    """
    ccimgui.igGetItemRectMin(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_item_rect_size(pOut: ImVec2):
    """
    Get size of last item
    """
    ccimgui.igGetItemRectSize(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def get_key_index(key: Any):
    """
    Map imguikey_* values into legacy native key index. == io.keymap[key]
    """
    cdef ccimgui.ImGuiKey res = ccimgui.igGetKeyIndex(key)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(str)
def get_key_name(key: Any):
    """
    [debug] returns english name of the key. those names a provided
    for debugging purpose and are not meant to be saved persistently
    not compared.
    """
    cdef const char* res = ccimgui.igGetKeyName(key)
    return _bytes(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_key_pressed_amount(key: Any, repeat_delay: float, rate: float):
    """
    Uses provided repeat rate/delay. return a count, most often 0
    or 1 but might be >1 if repeatrate is small enough that deltatime
    > repeatrate
    """
    cdef int res = ccimgui.igGetKeyPressedAmount(key, repeat_delay, rate)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiViewport)
def get_main_viewport():
    """
    Return primary/default viewport. this can never be null.
    """
    cdef ccimgui.ImGuiViewport* res = ccimgui.igGetMainViewport()
    return ImGuiViewport.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_mouse_clicked_count(button: int):
    """
    Return the number of successive mouse-clicks at the time where
    a click happen (otherwise 0).
    """
    cdef int res = ccimgui.igGetMouseClickedCount(button)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_mouse_cursor():
    """
    Get desired mouse cursor shape. important: reset in imgui::newframe(),
    this is updated during the frame. valid before render(). if
    you use software rendering by setting io.mousedrawcursor imgui
    will render those for you
    """
    cdef ccimgui.ImGuiMouseCursor res = ccimgui.igGetMouseCursor()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_mouse_drag_delta(pOut: ImVec2, button: int=0, lock_threshold: float=-1.0):
    """
    Return the delta from the initial clicking position while the
    mouse button is pressed or was just released. this is locked
    and return 0.0f until the mouse moves past a distance threshold
    at least once (if lock_threshold < -1.0f, uses io.mousedraggingthreshold)
    """
    ccimgui.igGetMouseDragDelta(pOut._ptr, button, lock_threshold)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_mouse_pos(pOut: ImVec2):
    """
    Shortcut to imgui::getio().mousepos provided by user, to be consistent
    with other calls
    """
    ccimgui.igGetMousePos(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_mouse_pos_on_opening_current_popup(pOut: ImVec2):
    """
    Retrieve mouse position at the time of opening popup we have
    beginpopup() into (helper to avoid user backing that value themselves)
    """
    ccimgui.igGetMousePosOnOpeningCurrentPopup(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiPlatformIO)
def get_platform_io():
    """
    Platform/renderer functions, for backend to setup + viewports
    list.
    """
    cdef ccimgui.ImGuiPlatformIO* res = ccimgui.igGetPlatformIO()
    return ImGuiPlatformIO.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_scroll_maxx():
    """
    Get maximum scrolling amount ~~ contentsize.x - windowsize.x
    - decorationssize.x
    """
    cdef float res = ccimgui.igGetScrollMaxX()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_scroll_maxy():
    """
    Get maximum scrolling amount ~~ contentsize.y - windowsize.y
    - decorationssize.y
    """
    cdef float res = ccimgui.igGetScrollMaxY()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_scrollx():
    """
    Get scrolling amount [0 .. getscrollmaxx()]
    """
    cdef float res = ccimgui.igGetScrollX()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_scrolly():
    """
    Get scrolling amount [0 .. getscrollmaxy()]
    """
    cdef float res = ccimgui.igGetScrollY()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiStorage)
def get_state_storage():
    cdef ccimgui.ImGuiStorage* res = ccimgui.igGetStateStorage()
    return ImGuiStorage.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiStyle)
def get_style():
    """
    Access the style structure (colors, sizes). always use pushstylecol(),
    pushstylevar() to modify style mid-frame!
    """
    cdef ccimgui.ImGuiStyle* res = ccimgui.igGetStyle()
    return ImGuiStyle.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(str)
def get_style_color_name(idx: int):
    """
    Get a string corresponding to the enum value (for display, saving,
    etc.).
    """
    cdef const char* res = ccimgui.igGetStyleColorName(idx)
    return _bytes(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImVec4)
def get_style_color_vec4(idx: int):
    """
    Retrieve style color as stored in imguistyle structure. use to
    feed back into pushstylecolor(), otherwise use getcoloru32()
    to get style color with style alpha baked in.
    """
    cdef ccimgui.ImVec4* res = ccimgui.igGetStyleColorVec4(idx)
    return ImVec4.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_text_line_height():
    """
    ~ fontsize
    """
    cdef float res = ccimgui.igGetTextLineHeight()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_text_line_height_with_spacing():
    """
    ~ fontsize + style.itemspacing.y (distance in pixels between
    2 consecutive lines of text)
    """
    cdef float res = ccimgui.igGetTextLineHeightWithSpacing()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_time():
    """
    Get global imgui time. incremented by io.deltatime every frame.
    """
    cdef double res = ccimgui.igGetTime()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_tree_node_to_label_spacing():
    """
    Horizontal distance preceding label when using treenode*() or
    bullet() == (g.fontsize + style.framepadding.x*2) for a regular
    unframed treenode
    """
    cdef float res = ccimgui.igGetTreeNodeToLabelSpacing()
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(str)
def get_version():
    """
    Get the compiled version string e.g. 1.80 wip (essentially the
    value for imgui_version from the compiled version of imgui.cpp)
    """
    cdef const char* res = ccimgui.igGetVersion()
    return _from_bytes(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_window_content_region_max(pOut: ImVec2):
    """
    Content boundaries max for the full window (roughly (0,0)+size-scroll)
    where size can be overridden with setnextwindowcontentsize(),
    in window coordinates
    """
    ccimgui.igGetWindowContentRegionMax(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_window_content_region_min(pOut: ImVec2):
    """
    Content boundaries min for the full window (roughly (0,0)-scroll),
    in window coordinates
    """
    ccimgui.igGetWindowContentRegionMin(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def get_window_dock_id():
    cdef ccimgui.ImGuiID res = ccimgui.igGetWindowDockID()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_window_dpi_scale():
    """
    Get dpi scale currently associated to the current window's viewport.
    """
    cdef float res = ccimgui.igGetWindowDpiScale()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImDrawList)
def get_window_draw_list():
    """
    Get draw list associated to the current window, to append your
    own drawing primitives
    """
    cdef ccimgui.ImDrawList* res = ccimgui.igGetWindowDrawList()
    return ImDrawList.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_window_height():
    """
    Get current window height (shortcut for getwindowsize().y)
    """
    cdef float res = ccimgui.igGetWindowHeight()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_window_pos(pOut: ImVec2):
    """
    Get current window position in screen space (useful if you want
    to do your own drawing via the drawlist api)
    """
    ccimgui.igGetWindowPos(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def get_window_size(pOut: ImVec2):
    """
    Get current window size
    """
    ccimgui.igGetWindowSize(pOut._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiViewport)
def get_window_viewport():
    """
    Get viewport currently associated to the current window.
    """
    cdef ccimgui.ImGuiViewport* res = ccimgui.igGetWindowViewport()
    return ImGuiViewport.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(float)
def get_window_width():
    """
    Get current window width (shortcut for getwindowsize().x)
    """
    cdef float res = ccimgui.igGetWindowWidth()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def image(user_texture_id: Any, size: tuple, uv0: tuple=(0, 0), uv1: tuple=(1, 1), tint_col: tuple=(1, 1, 1, 1), border_col: tuple=(0, 0, 0, 0)):
    ccimgui.igImage(
        user_texture_id,
        _cast_tuple_ImVec2(size),
        _cast_tuple_ImVec2(uv0),
        _cast_tuple_ImVec2(uv1),
        _cast_tuple_ImVec4(tint_col),
        _cast_tuple_ImVec4(border_col)
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def image_button(str_id: str, user_texture_id: Any, size: tuple, uv0: tuple=(0, 0), uv1: tuple=(1, 1), bg_col: tuple=(0, 0, 0, 0), tint_col: tuple=(1, 1, 1, 1)):
    cdef ccimgui.bool res = ccimgui.igImageButton(
        _bytes(str_id),
        user_texture_id,
        _cast_tuple_ImVec2(size),
        _cast_tuple_ImVec2(uv0),
        _cast_tuple_ImVec2(uv1),
        _cast_tuple_ImVec4(bg_col),
        _cast_tuple_ImVec4(tint_col)
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def indent(indent_w: float=0.0):
    """
    Move content position toward the right, by indent_w, or style.indentspacing
    if indent_w <= 0
    """
    ccimgui.igIndent(indent_w)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_double(label: str, value: Any, step: float=0.0, step_fast: float=0.0, format_: str="%.6", flags: int=0):
    cdef ccimgui.bool res = ccimgui.igInputDouble(
        _bytes(label),
        value,
        step,
        step_fast,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_float(label: str, value: float, step: float=0.0, step_fast: float=0.0, format_: str="%.3", flags: int=0):
    cdef ccimgui.bool res = ccimgui.igInputFloat(
        _bytes(label),
        value,
        step,
        step_fast,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_float2(label: str, value0: float, value1: float, format_: str="%.3", flags: int=0):
    cdef float[2] io_float_value = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igInputFloat2(_bytes(label), <float*>&io_float_value, _bytes(format_), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_float3(label: str, value0: float, value1: float, value2: float, format_: str="%.3", flags: int=0):
    cdef float[3] io_float_value = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igInputFloat3(_bytes(label), <float*>&io_float_value, _bytes(format_), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_float4(label: str, value0: float, value1: float, value2: float, value3: float, format_: str="%.3", flags: int=0):
    cdef float[4] io_float_value = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igInputFloat4(_bytes(label), <float*>&io_float_value, _bytes(format_), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_int(label: str, value: int, step: int=1, step_fast: int=100, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igInputInt(_bytes(label), value, step, step_fast, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_int2(label: str, value0: int, value1: int, flags: int=0):
    cdef int[2] io_int_value = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igInputInt2(_bytes(label), <int*>&io_int_value, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_int3(label: str, value0: int, value1: int, value2: int, flags: int=0):
    cdef int[3] io_int_value = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igInputInt3(_bytes(label), <int*>&io_int_value, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_int4(label: str, value0: int, value1: int, value2: int, value3: int, flags: int=0):
    cdef int[4] io_int_value = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igInputInt4(_bytes(label), <int*>&io_int_value, flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_scalar(label: str, data_type: int, p_data: Any, p_step: Any=None, p_step_fast: Any=None, format_: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igInputScalar(
        _bytes(label),
        data_type,
        p_data,
        p_step,
        p_step_fast,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def input_scalarn(label: str, data_type: int, p_data: Any, components: int, p_step: Any=None, p_step_fast: Any=None, format_: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igInputScalarN(
        _bytes(label),
        data_type,
        p_data,
        components,
        p_step,
        p_step_fast,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def invisible_button(str_id: str, size: tuple, flags: int=0):
    """
    Flexible button behavior without the visuals, frequently useful
    to build custom behaviors using the public api (along with isitemactive,
    isitemhovered, etc.)
    """
    cdef ccimgui.bool res = ccimgui.igInvisibleButton(_bytes(str_id), _cast_tuple_ImVec2(size), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_any_item_active():
    """
    Is any item active?
    """
    cdef ccimgui.bool res = ccimgui.igIsAnyItemActive()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_any_item_focused():
    """
    Is any item focused?
    """
    cdef ccimgui.bool res = ccimgui.igIsAnyItemFocused()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_any_item_hovered():
    """
    Is any item hovered?
    """
    cdef ccimgui.bool res = ccimgui.igIsAnyItemHovered()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_any_mouse_down():
    """
    [will obsolete] is any mouse button held? this was designed for
    backends, but prefer having backend maintain a mask of held
    mouse buttons, because upcoming input queue system will make
    this invalid.
    """
    cdef ccimgui.bool res = ccimgui.igIsAnyMouseDown()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_activated():
    """
    Was the last item just made active (item was previously inactive).
    """
    cdef ccimgui.bool res = ccimgui.igIsItemActivated()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_active():
    """
    Is the last item active? (e.g. button being held, text field
    being edited. this will continuously return true while holding
    mouse button on an item. items that don't interact will always
    return false)
    """
    cdef ccimgui.bool res = ccimgui.igIsItemActive()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_clicked(mouse_button: int=0):
    """
    Is the last item hovered and mouse clicked on? (**)  == ismouseclicked(mouse_button)
    && isitemhovered()important. (**) this is not equivalent to
    the behavior of e.g. button(). read comments in function definition.
    """
    cdef ccimgui.bool res = ccimgui.igIsItemClicked(mouse_button)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_deactivated():
    """
    Was the last item just made inactive (item was previously active).
    useful for undo/redo patterns with widgets that require continuous
    editing.
    """
    cdef ccimgui.bool res = ccimgui.igIsItemDeactivated()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_deactivated_after_edit():
    """
    Was the last item just made inactive and made a value change
    when it was active? (e.g. slider/drag moved). useful for undo/redo
    patterns with widgets that require continuous editing. note
    that you may get false positives (some widgets such as combo()/listbox()/selectable()
    will return true even when clicking an already selected item).
    """
    cdef ccimgui.bool res = ccimgui.igIsItemDeactivatedAfterEdit()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_edited():
    """
    Did the last item modify its underlying value this frame? or
    was pressed? this is generally the same as the bool return value
    of many widgets.
    """
    cdef ccimgui.bool res = ccimgui.igIsItemEdited()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_focused():
    """
    Is the last item focused for keyboard/gamepad navigation?
    """
    cdef ccimgui.bool res = ccimgui.igIsItemFocused()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_hovered(flags: int=0):
    """
    Is the last item hovered? (and usable, aka not blocked by a popup,
    etc.). see imguihoveredflags for more options.
    """
    cdef ccimgui.bool res = ccimgui.igIsItemHovered(flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_toggled_open():
    """
    Was the last item open state toggled? set by treenode().
    """
    cdef ccimgui.bool res = ccimgui.igIsItemToggledOpen()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_item_visible():
    """
    Is the last item visible? (items may be out of sight because
    of clipping/scrolling)
    """
    cdef ccimgui.bool res = ccimgui.igIsItemVisible()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_key_down(key: Any):
    """
    Is key being held.
    """
    cdef ccimgui.bool res = ccimgui.igIsKeyDown(key)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_key_pressed(key: Any, repeat: Any=True):
    """
    Was key pressed (went from !down to down)? if repeat=true, uses
    io.keyrepeatdelay / keyrepeatrate
    """
    cdef ccimgui.bool res = ccimgui.igIsKeyPressed(key, repeat)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_key_released(key: Any):
    """
    Was key released (went from down to !down)?
    """
    cdef ccimgui.bool res = ccimgui.igIsKeyReleased(key)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_mouse_clicked(button: int, repeat: Any=False):
    """
    Did mouse button clicked? (went from !down to down). same as
    getmouseclickedcount() == 1.
    """
    cdef ccimgui.bool res = ccimgui.igIsMouseClicked(button, repeat)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_mouse_double_clicked(button: int):
    """
    Did mouse button double-clicked? same as getmouseclickedcount()
    == 2. (note that a double-click will also report ismouseclicked()
    == true)
    """
    cdef ccimgui.bool res = ccimgui.igIsMouseDoubleClicked(button)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_mouse_down(button: int):
    """
    Is mouse button held?
    """
    cdef ccimgui.bool res = ccimgui.igIsMouseDown(button)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_mouse_dragging(button: int, lock_threshold: float=-1.0):
    """
    Is mouse dragging? (if lock_threshold < -1.0f, uses io.mousedraggingthreshold)
    """
    cdef ccimgui.bool res = ccimgui.igIsMouseDragging(button, lock_threshold)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_mouse_hovering_rect(r_min: tuple, r_max: tuple, clip: Any=True):
    """
    Is mouse hovering given bounding rect (in screen space). clipped
    by current clipping settings, but disregarding of other consideration
    of focus/window ordering/popup-block.
    """
    cdef ccimgui.bool res = ccimgui.igIsMouseHoveringRect(_cast_tuple_ImVec2(r_min), _cast_tuple_ImVec2(r_max), clip)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_mouse_pos_valid(mouse_pos: ImVec2=None):
    """
    By convention we use (-flt_max,-flt_max) to denote that there
    is no mouse available
    """
    cdef ccimgui.bool res = ccimgui.igIsMousePosValid(mouse_pos._ptr)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_mouse_released(button: int):
    """
    Did mouse button released? (went from down to !down)
    """
    cdef ccimgui.bool res = ccimgui.igIsMouseReleased(button)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_popup_open(str_id: str, flags: int=0):
    """
    Return true if the popup is open.
    """
    cdef ccimgui.bool res = ccimgui.igIsPopupOpen(_bytes(str_id), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_rect_visible_nil(size: tuple):
    """
    Test if rectangle (of given size, starting from cursor position)
    is visible / not clipped.
    """
    cdef ccimgui.bool res = ccimgui.igIsRectVisible_Nil(_cast_tuple_ImVec2(size))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_rect_visible_vec2(rect_min: tuple, rect_max: tuple):
    """
    Test if rectangle (in screen space) is visible / not clipped.
    to perform coarse clipping on user's side.
    """
    cdef ccimgui.bool res = ccimgui.igIsRectVisible_Vec2(_cast_tuple_ImVec2(rect_min), _cast_tuple_ImVec2(rect_max))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_window_appearing():
    cdef ccimgui.bool res = ccimgui.igIsWindowAppearing()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_window_collapsed():
    cdef ccimgui.bool res = ccimgui.igIsWindowCollapsed()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_window_docked():
    """
    Is current window docked into another window?
    """
    cdef ccimgui.bool res = ccimgui.igIsWindowDocked()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_window_focused(flags: int=0):
    """
    Is current window focused? or its root/child, depending on flags.
    see flags for options.
    """
    cdef ccimgui.bool res = ccimgui.igIsWindowFocused(flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def is_window_hovered(flags: int=0):
    """
    Is current window hovered (and typically: not blocked by a popup/modal)?
    see flags for options. nb: if you are trying to check whether
    your mouse should be dispatched to imgui or to your app, you
    should use the 'io.wantcapturemouse' boolean for that! please
    read the faq!
    """
    cdef ccimgui.bool res = ccimgui.igIsWindowHovered(flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def label_text(label: str, fmt: str):
    """
    Display text+label aligned the same way as value+label widgets
    """
    ccimgui.igLabelText(_bytes(label), _bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def label_textv(label: str, fmt: str, args: str):
    ccimgui.igLabelTextV(_bytes(label), _bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def list_box_fn_bool_ptr(label: str, current_item: int, items_getter: Callable, data: Any, items_count: int, height_in_items: int=-1):
    cdef ccimgui.bool res = ccimgui.igListBox_FnBoolPtr(
        _bytes(label),
        current_item,
        items_getter,
        data,
        items_count,
        height_in_items
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def list_box_str_arr(label: str, current_item: int, items: Any, items_count: int, height_in_items: int=-1):
    cdef ccimgui.bool res = ccimgui.igListBox_Str_arr(_bytes(label), current_item, items, items_count, height_in_items)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def load_ini_settings_from_disk(ini_filename: str):
    """
    Call after createcontext() and before the first call to newframe().
    newframe() automatically calls loadinisettingsfromdisk(io.inifilename).
    """
    ccimgui.igLoadIniSettingsFromDisk(_bytes(ini_filename))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def load_ini_settings_from_memory(ini_data: str, ini_size: Any=0):
    """
    Call after createcontext() and before the first call to newframe()
    to provide .ini data from your own data source.
    """
    ccimgui.igLoadIniSettingsFromMemory(_bytes(ini_data), ini_size)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def log_buttons():
    """
    Helper to display buttons for logging to tty/file/clipboard
    """
    ccimgui.igLogButtons()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def log_finish():
    """
    Stop logging (close file, etc.)
    """
    ccimgui.igLogFinish()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def log_text(fmt: str):
    """
    Pass text data straight to log (without being displayed)
    """
    ccimgui.igLogText(_bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def log_textv(fmt: str, args: str):
    ccimgui.igLogTextV(_bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def log_to_clipboard(auto_open_depth: int=-1):
    """
    Start logging to os clipboard
    """
    ccimgui.igLogToClipboard(auto_open_depth)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def log_to_file(auto_open_depth: int=-1, filename: str=None):
    """
    Start logging to file
    """
    ccimgui.igLogToFile(auto_open_depth, _bytes(filename))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def log_to_tty(auto_open_depth: int=-1):
    """
    Start logging to tty (stdout)
    """
    ccimgui.igLogToTTY(auto_open_depth)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def mem_alloc(size: Any):
    cdef void* res = ccimgui.igMemAlloc(size)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def mem_free(ptr: Any):
    ccimgui.igMemFree(ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def menu_item_bool(label: str, shortcut: str=None, selected: Any=False, enabled: Any=True):
    """
    Return true when activated.
    """
    cdef ccimgui.bool res = ccimgui.igMenuItem_Bool(_bytes(label), _bytes(shortcut), selected, enabled)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def menu_item_bool_ptr(label: str, shortcut: str, p_selected: Any, enabled: Any=True):
    """
    Return true when activated + toggle (*p_selected) if p_selected
    != null
    """
    cdef ccimgui.bool res = ccimgui.igMenuItem_BoolPtr(_bytes(label), _bytes(shortcut), p_selected, enabled)
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def new_frame():
    """
    Start a new dear imgui frame, you can submit any command from
    this point until render()/endframe().
    """
    ccimgui.igNewFrame()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def new_line():
    """
    Undo a sameline() or force a new line when in a horizontal-layout
    context.
    """
    ccimgui.igNewLine()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def next_column():
    """
    Next column, defaults to current row or next row if the current
    row is finished
    """
    ccimgui.igNextColumn()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def open_popup_on_item_click(str_id: str=None, popup_flags: int=1):
    """
    Helper to open popup when clicked on last item. default to imguipopupflags_mousebuttonright
    == 1. (note: actually triggers on the mouse _released_ event
    to be consistent with popup behaviors)
    """
    ccimgui.igOpenPopupOnItemClick(_bytes(str_id), popup_flags)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def open_popup_id(id_: int, popup_flags: int=0):
    """
    Id overload to facilitate calling from nested stacks
    """
    ccimgui.igOpenPopup_ID(id_, popup_flags)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def open_popup_str(str_id: str, popup_flags: int=0):
    """
    Call to mark popup as open (don't call every frame!).
    """
    ccimgui.igOpenPopup_Str(_bytes(str_id), popup_flags)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def plot_histogram_float_ptr(label: str, values: float, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0), stride: int=sizeof(float)):
    ccimgui.igPlotHistogram_FloatPtr(
        _bytes(label),
        values,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        _cast_tuple_ImVec2(graph_size),
        stride
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def plot_histogram_fn_float_ptr(label: str, values_getter: Callable, data: Any, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0)):
    ccimgui.igPlotHistogram_FnFloatPtr(
        _bytes(label),
        values_getter,
        data,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        _cast_tuple_ImVec2(graph_size)
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def plot_lines_float_ptr(label: str, values: float, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0), stride: int=sizeof(float)):
    ccimgui.igPlotLines_FloatPtr(
        _bytes(label),
        values,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        _cast_tuple_ImVec2(graph_size),
        stride
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def plot_lines_fn_float_ptr(label: str, values_getter: Callable, data: Any, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0)):
    ccimgui.igPlotLines_FnFloatPtr(
        _bytes(label),
        values_getter,
        data,
        values_count,
        values_offset,
        _bytes(overlay_text),
        scale_min,
        scale_max,
        _cast_tuple_ImVec2(graph_size)
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_button_repeat():
    ccimgui.igPopButtonRepeat()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_clip_rect():
    ccimgui.igPopClipRect()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_font():
    ccimgui.igPopFont()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_id():
    """
    Pop from the id stack.
    """
    ccimgui.igPopID()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_item_width():
    ccimgui.igPopItemWidth()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_style_color(count: int=1):
    ccimgui.igPopStyleColor(count)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_style_var(count: int=1):
    ccimgui.igPopStyleVar(count)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_tab_stop():
    ccimgui.igPopTabStop()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def pop_text_wrap_pos():
    ccimgui.igPopTextWrapPos()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def progress_bar(fraction: float, size_arg: tuple=(-FLT_MIN, 0), overlay: str=None):
    ccimgui.igProgressBar(fraction, _cast_tuple_ImVec2(size_arg), _bytes(overlay))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_button_repeat(repeat: Any):
    """
    In 'repeat' mode, button*() functions return repeated true in
    a typematic manner (using io.keyrepeatdelay/io.keyrepeatrate
    setting). note that you can call isitemactive() after any button()
    to tell if the button is held in the current frame.
    """
    ccimgui.igPushButtonRepeat(repeat)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_clip_rect(clip_rect_min: tuple, clip_rect_max: tuple, intersect_with_current_clip_rect: Any):
    ccimgui.igPushClipRect(_cast_tuple_ImVec2(clip_rect_min), _cast_tuple_ImVec2(clip_rect_max), intersect_with_current_clip_rect)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_font(font: ImFont):
    """
    Use null as a shortcut to push default font
    """
    ccimgui.igPushFont(font._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_id_int(int_id: int):
    """
    Push integer into the id stack (will hash integer).
    """
    ccimgui.igPushID_Int(int_id)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_id_ptr(ptr_id: Any):
    """
    Push pointer into the id stack (will hash pointer).
    """
    ccimgui.igPushID_Ptr(ptr_id)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_id_str(str_id: str):
    """
    Push string into the id stack (will hash string).
    """
    ccimgui.igPushID_Str(_bytes(str_id))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_id_str_str(str_id_begin: str, str_id_end: str):
    """
    Push string into the id stack (will hash string).
    """
    ccimgui.igPushID_StrStr(_bytes(str_id_begin), _bytes(str_id_end))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_item_width(item_width: float):
    """
    Push width of items for common large item+label widgets. >0.0f:
    width in pixels, <0.0f align xx pixels to the right of window
    (so -flt_min always align width to the right side).
    """
    ccimgui.igPushItemWidth(item_width)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_style_color_u32(idx: int, col: int):
    """
    Modify a style color. always use this if you modify the style
    after newframe().
    """
    ccimgui.igPushStyleColor_U32(idx, col)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_style_color_vec4(idx: int, col: tuple):
    ccimgui.igPushStyleColor_Vec4(idx, _cast_tuple_ImVec4(col))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_style_var_float(idx: int, val: float):
    """
    Modify a style float variable. always use this if you modify
    the style after newframe().
    """
    ccimgui.igPushStyleVar_Float(idx, val)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_style_var_vec2(idx: int, val: tuple):
    """
    Modify a style imvec2 variable. always use this if you modify
    the style after newframe().
    """
    ccimgui.igPushStyleVar_Vec2(idx, _cast_tuple_ImVec2(val))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_tab_stop(tab_stop: Any):
    """
    == tab stop enable. allow focusing using tab/shift-tab, enabled
    by default but you can disable it for certain widgets
    """
    ccimgui.igPushTabStop(tab_stop)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def push_text_wrap_pos(wrap_local_pos_x: float=0.0):
    """
    Push word-wrapping position for text*() commands. < 0.0f: no
    wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap
    at 'wrap_pos_x' position in window local space
    """
    ccimgui.igPushTextWrapPos(wrap_local_pos_x)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def radio_button_bool(label: str, active: Any):
    """
    Use with e.g. if (radiobutton(one, my_value==1)) { my_value
    = 1; }
    """
    cdef ccimgui.bool res = ccimgui.igRadioButton_Bool(_bytes(label), active)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def radio_button_int_ptr(label: str, value: int, v_button: int):
    """
    Shortcut to handle the above pattern when value is an integer
    """
    cdef ccimgui.bool res = ccimgui.igRadioButton_IntPtr(_bytes(label), value, v_button)
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def render():
    """
    Ends the dear imgui frame, finalize the draw data. you can then
    get call getdrawdata().
    """
    ccimgui.igRender()
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def render_platform_windows_default(platform_render_arg: Any=None, renderer_render_arg: Any=None):
    """
    Call in main loop. will call renderwindow/swapbuffers platform
    functions for each secondary viewport which doesn't have the
    imguiviewportflags_minimized flag set. may be reimplemented
    by user for custom rendering needs.
    """
    ccimgui.igRenderPlatformWindowsDefault(
        NULL if platform_render_arg is None else <void*>platform_render_arg,
        NULL if renderer_render_arg is None else <void*>renderer_render_arg
    )
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def reset_mouse_drag_delta(button: int=0):
    """
    //
    """
    ccimgui.igResetMouseDragDelta(button)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def same_line(offset_from_start_x: float=0.0, spacing: float=-1.0):
    """
    Call between widgets or groups to layout them horizontally. x
    position given in window coordinates.
    """
    ccimgui.igSameLine(offset_from_start_x, spacing)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def save_ini_settings_to_disk(ini_filename: str):
    """
    This is automatically called (if io.inifilename is not empty)
    a few seconds after any modification that should be reflected
    in the .ini file (and also by destroycontext).
    """
    ccimgui.igSaveIniSettingsToDisk(_bytes(ini_filename))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(str)
def save_ini_settings_to_memory(out_ini_size: Any=None):
    """
    Return a zero-terminated string with the .ini data which you
    can save by your own mean. call when io.wantsaveinisettings
    is set, then save data by your own mean and clear io.wantsaveinisettings.
    """
    cdef const char* res = ccimgui.igSaveIniSettingsToMemory(out_ini_size)
    return _bytes(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def selectable_bool(label: str, selected: Any=False, flags: int=0, size: tuple=(0, 0)):
    """
    Bool selected carry the selection state (read-only). selectable()
    is clicked is returns true so you can modify your selection
    state. size.x==0.0: use remaining width, size.x>0.0: specify
    width. size.y==0.0: use label height, size.y>0.0: specify height
    """
    cdef ccimgui.bool res = ccimgui.igSelectable_Bool(_bytes(label), selected, flags, _cast_tuple_ImVec2(size))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def selectable_bool_ptr(label: str, p_selected: Any, flags: int=0, size: tuple=(0, 0)):
    """
    Bool* p_selected point to the selection state (read-write), as
    a convenient helper.
    """
    cdef ccimgui.bool res = ccimgui.igSelectable_BoolPtr(_bytes(label), p_selected, flags, _cast_tuple_ImVec2(size))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def separator():
    """
    Separator, generally horizontal. inside a menu bar or in horizontal
    layout mode, this becomes a vertical separator.
    """
    ccimgui.igSeparator()
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def separator_text(label: str):
    """
    Currently: formatted text with an horizontal line
    """
    ccimgui.igSeparatorText(_bytes(label))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_clipboard_text(text: str):
    ccimgui.igSetClipboardText(_bytes(text))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_color_edit_options(flags: int):
    """
    Initialize current options (generally on application startup)
    if you want to select a default format, picker type, etc. user
    will be able to change many settings, unless you pass the _nooptions
    flag to your calls.
    """
    ccimgui.igSetColorEditOptions(flags)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_column_offset(column_index: int, offset_x: float):
    """
    Set position of column line (in pixels, from the left side of
    the contents region). pass -1 to use current column
    """
    ccimgui.igSetColumnOffset(column_index, offset_x)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_column_width(column_index: int, width: float):
    """
    Set column width (in pixels). pass -1 to use current column
    """
    ccimgui.igSetColumnWidth(column_index, width)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_current_context(ctx: ImGuiContext):
    ccimgui.igSetCurrentContext(ctx._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_cursor_pos(local_pos: tuple):
    """
       are using the main, absolute coordinate system.
    """
    ccimgui.igSetCursorPos(_cast_tuple_ImVec2(local_pos))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_cursor_posx(local_x: float):
    """
       getwindowpos() + getcursorpos() == getcursorscreenpos() etc.)
    """
    ccimgui.igSetCursorPosX(local_x)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_cursor_posy(local_y: float):
    """
    //
    """
    ccimgui.igSetCursorPosY(local_y)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_cursor_screen_pos(pos: tuple):
    """
    Cursor position in absolute coordinates
    """
    ccimgui.igSetCursorScreenPos(_cast_tuple_ImVec2(pos))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def set_drag_drop_payload(type_: str, data: Any, sz: Any, cond: int=0):
    """
    Type is a user defined string of maximum 32 characters. strings
    starting with '_' are reserved for dear imgui internal types.
    data is copied and held by imgui. return true when payload has
    been accepted.
    """
    cdef ccimgui.bool res = ccimgui.igSetDragDropPayload(_bytes(type_), data, sz, cond)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_item_allow_overlap():
    """
    Allow last item to be overlapped by a subsequent item. sometimes
    useful with invisible buttons, selectables, etc. to catch unused
    area.
    """
    ccimgui.igSetItemAllowOverlap()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_item_default_focus():
    """
    Make last item the default focused item of a window.
    """
    ccimgui.igSetItemDefaultFocus()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_keyboard_focus_here(offset: int=0):
    """
    Focus keyboard on the next widget. use positive 'offset' to access
    sub components of a multiple component widget. use -1 to access
    previous widget.
    """
    ccimgui.igSetKeyboardFocusHere(offset)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_mouse_cursor(cursor_type: int):
    """
    Set desired mouse cursor shape
    """
    ccimgui.igSetMouseCursor(cursor_type)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_frame_want_capture_keyboard(want_capture_keyboard: Any):
    """
    Override io.wantcapturekeyboard flag next frame (said flag is
    left for your application to handle, typically when true it
    instructs your app to ignore inputs). e.g. force capture keyboard
    when your widget is being hovered. this is equivalent to setting
    io.wantcapturekeyboard = want_capture_keyboard; after the next
    newframe() call.
    """
    ccimgui.igSetNextFrameWantCaptureKeyboard(want_capture_keyboard)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_frame_want_capture_mouse(want_capture_mouse: Any):
    """
    Override io.wantcapturemouse flag next frame (said flag is left
    for your application to handle, typical when true it instucts
    your app to ignore inputs). this is equivalent to setting io.wantcapturemouse
    = want_capture_mouse; after the next newframe() call.
    """
    ccimgui.igSetNextFrameWantCaptureMouse(want_capture_mouse)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_item_open(is_open: Any, cond: int=0):
    """
    Set next treenode/collapsingheader open state.
    """
    ccimgui.igSetNextItemOpen(is_open, cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_item_width(item_width: float):
    """
    Set width of the _next_ common large item+label widget. >0.0f:
    width in pixels, <0.0f align xx pixels to the right of window
    (so -flt_min always align width to the right side)
    """
    ccimgui.igSetNextItemWidth(item_width)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_bg_alpha(alpha: float):
    """
    Set next window background color alpha. helper to easily override
    the alpha component of imguicol_windowbg/childbg/popupbg. you
    may also use imguiwindowflags_nobackground.
    """
    ccimgui.igSetNextWindowBgAlpha(alpha)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_class(window_class: ImGuiWindowClass):
    """
    Set next window class (control docking compatibility + provide
    hints to platform backend via custom viewport flags and platform
    parent/child relationship)
    """
    ccimgui.igSetNextWindowClass(window_class._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_collapsed(collapsed: Any, cond: int=0):
    """
    Set next window collapsed state. call before begin()
    """
    ccimgui.igSetNextWindowCollapsed(collapsed, cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_content_size(size: tuple):
    """
    Set next window content size (~ scrollable client area, which
    enforce the range of scrollbars). not including window decorations
    (title bar, menu bar, etc.) nor windowpadding. set an axis to
    0.0f to leave it automatic. call before begin()
    """
    ccimgui.igSetNextWindowContentSize(_cast_tuple_ImVec2(size))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_dock_id(dock_id: int, cond: int=0):
    """
    Set next window dock id
    """
    ccimgui.igSetNextWindowDockID(dock_id, cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_focus():
    """
    Set next window to be focused / top-most. call before begin()
    """
    ccimgui.igSetNextWindowFocus()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_pos(pos: tuple, cond: int=0, pivot: tuple=(0, 0)):
    """
    Set next window position. call before begin(). use pivot=(0.5f,0.5f)
    to center on given point, etc.
    """
    ccimgui.igSetNextWindowPos(_cast_tuple_ImVec2(pos), cond, _cast_tuple_ImVec2(pivot))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_scroll(scroll: tuple):
    """
    Set next window scrolling value (use < 0.0f to not affect a given
    axis).
    """
    ccimgui.igSetNextWindowScroll(_cast_tuple_ImVec2(scroll))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_size(size: tuple, cond: int=0):
    """
    Set next window size. set axis to 0.0f to force an auto-fit on
    this axis. call before begin()
    """
    ccimgui.igSetNextWindowSize(_cast_tuple_ImVec2(size), cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_next_window_viewport(viewport_id: int):
    """
    Set next window viewport
    """
    ccimgui.igSetNextWindowViewport(viewport_id)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_scroll_from_posx(local_x: float, center_x_ratio: float=0.5):
    """
    Adjust scrolling amount to make given position visible. generally
    getcursorstartpos() + offset to compute a valid position.
    """
    ccimgui.igSetScrollFromPosX(local_x, center_x_ratio)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_scroll_from_posy(local_y: float, center_y_ratio: float=0.5):
    """
    Adjust scrolling amount to make given position visible. generally
    getcursorstartpos() + offset to compute a valid position.
    """
    ccimgui.igSetScrollFromPosY(local_y, center_y_ratio)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_scroll_herex(center_x_ratio: float=0.5):
    """
    Adjust scrolling amount to make current cursor position visible.
    center_x_ratio=0.0: left, 0.5: center, 1.0: right. when using
    to make a default/current item visible, consider using setitemdefaultfocus()
    instead.
    """
    ccimgui.igSetScrollHereX(center_x_ratio)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_scroll_herey(center_y_ratio: float=0.5):
    """
    Adjust scrolling amount to make current cursor position visible.
    center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. when using
    to make a default/current item visible, consider using setitemdefaultfocus()
    instead.
    """
    ccimgui.igSetScrollHereY(center_y_ratio)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_scrollx(scroll_x: float):
    """
    Set scrolling amount [0 .. getscrollmaxx()]
    """
    ccimgui.igSetScrollX(scroll_x)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_scrolly(scroll_y: float):
    """
    Set scrolling amount [0 .. getscrollmaxy()]
    """
    ccimgui.igSetScrollY(scroll_y)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_state_storage(storage: ImGuiStorage):
    """
    Replace current window storage with our own (if you want to manipulate
    it yourself, typically clear subsection of it)
    """
    ccimgui.igSetStateStorage(storage._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_tab_item_closed(tab_or_docked_window_label: str):
    """
    Notify tabbar or docking system of a closed tab/window ahead
    (useful to reduce visual flicker on reorderable tab bars). for
    tab-bar: call after begintabbar() and before tab submissions.
    otherwise call with a window name.
    """
    ccimgui.igSetTabItemClosed(_bytes(tab_or_docked_window_label))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_tooltip(fmt: str):
    """
    Set a text-only tooltip, typically use with imgui::isitemhovered().
    override any previous call to settooltip().
    """
    ccimgui.igSetTooltip(_bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_tooltipv(fmt: str, args: str):
    ccimgui.igSetTooltipV(_bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_collapsed_bool(collapsed: Any, cond: int=0):
    """
    (not recommended) set current window collapsed state. prefer
    using setnextwindowcollapsed().
    """
    ccimgui.igSetWindowCollapsed_Bool(collapsed, cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_collapsed_str(name: str, collapsed: Any, cond: int=0):
    """
    Set named window collapsed state
    """
    ccimgui.igSetWindowCollapsed_Str(_bytes(name), collapsed, cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_focus_nil():
    """
    (not recommended) set current window to be focused / top-most.
    prefer using setnextwindowfocus().
    """
    ccimgui.igSetWindowFocus_Nil()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_focus_str(name: str):
    """
    Set named window to be focused / top-most. use null to remove
    focus.
    """
    ccimgui.igSetWindowFocus_Str(_bytes(name))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_font_scale(scale: float):
    """
    [obsolete] set font scale. adjust io.fontglobalscale if you want
    to scale all windows. this is an old api! for correct scaling,
    prefer to reload font + rebuild imfontatlas + call style.scaleallsizes().
    """
    ccimgui.igSetWindowFontScale(scale)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_pos_str(name: str, pos: tuple, cond: int=0):
    """
    Set named window position.
    """
    ccimgui.igSetWindowPos_Str(_bytes(name), _cast_tuple_ImVec2(pos), cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_pos_vec2(pos: tuple, cond: int=0):
    """
    (not recommended) set current window position - call within begin()/end().
    prefer using setnextwindowpos(), as this may incur tearing and
    side-effects.
    """
    ccimgui.igSetWindowPos_Vec2(_cast_tuple_ImVec2(pos), cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_size_str(name: str, size: tuple, cond: int=0):
    """
    Set named window size. set axis to 0.0f to force an auto-fit
    on this axis.
    """
    ccimgui.igSetWindowSize_Str(_bytes(name), _cast_tuple_ImVec2(size), cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def set_window_size_vec2(size: tuple, cond: int=0):
    """
    (not recommended) set current window size - call within begin()/end().
    set to imvec2(0, 0) to force an auto-fit. prefer using setnextwindowsize(),
    as this may incur tearing and minor side-effects.
    """
    ccimgui.igSetWindowSize_Vec2(_cast_tuple_ImVec2(size), cond)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def show_about_window(p_open: Any=None):
    """
    Create about window. display dear imgui version, credits and
    build/system information.
    """
    ccimgui.igShowAboutWindow(p_open)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def show_debug_log_window(p_open: Any=None):
    """
    Create debug log window. display a simplified log of important
    dear imgui events.
    """
    ccimgui.igShowDebugLogWindow(p_open)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def show_demo_window(closable: bool=False):
    """
    Create demo window. demonstrate most imgui features. call this
    to learn about the library! try to make it always available
    in your application!
    """
    cdef bool opened = True
    if closable:
        ccimgui.igShowDemoWindow(&opened)
    else:
        ccimgui.igShowDemoWindow(NULL)
    
    return opened
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def show_font_selector(label: str):
    """
    Add font selector block (not a window), essentially a combo listing
    the loaded fonts.
    """
    ccimgui.igShowFontSelector(_bytes(label))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def show_metrics_window(p_open: Any=None):
    """
    Create metrics/debugger window. display dear imgui internals:
    windows, draw commands, various internal state, etc.
    """
    ccimgui.igShowMetricsWindow(p_open)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def show_stack_tool_window(p_open: Any=None):
    """
    Create stack tool window. hover items with mouse to query information
    about the source of their unique id.
    """
    ccimgui.igShowStackToolWindow(p_open)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def show_style_editor(ref: ImGuiStyle=None):
    """
    Add style editor block (not a window). you can pass in a reference
    imguistyle structure to compare to, revert to and save to (else
    it uses the default style)
    """
    ccimgui.igShowStyleEditor(ref._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def show_style_selector(label: str):
    """
    Add style selector block (not a window), essentially a combo
    listing the default styles.
    """
    cdef ccimgui.bool res = ccimgui.igShowStyleSelector(_bytes(label))
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def show_user_guide():
    """
    Add basic help/info block (not a window): how to manipulate imgui
    as an end-user (mouse/keyboard controls).
    """
    ccimgui.igShowUserGuide()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_angle(label: str, v_rad: float, v_degrees_min: float=-360.0, v_degrees_max: float=+360.0, format_: str="%.0 deg", flags: int=0):
    cdef ccimgui.bool res = ccimgui.igSliderAngle(
        _bytes(label),
        v_rad,
        v_degrees_min,
        v_degrees_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_float(label: str, value: float, v_min: float, v_max: float, format_: str="%.3", flags: int=0):
    """
    Adjust format to decorate the value with a prefix or a suffix
    for in-slider labels or unit display.
    """
    cdef ccimgui.bool res = ccimgui.igSliderFloat(
        _bytes(label),
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_float2(label: str, value0: float, value1: float, v_min: float, v_max: float, format_: str="%.3", flags: int=0):
    cdef float[2] io_float_value = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igSliderFloat2(
        _bytes(label),
        <float*>&io_float_value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_float3(label: str, value0: float, value1: float, value2: float, v_min: float, v_max: float, format_: str="%.3", flags: int=0):
    cdef float[3] io_float_value = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igSliderFloat3(
        _bytes(label),
        <float*>&io_float_value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_float4(label: str, value0: float, value1: float, value2: float, value3: float, v_min: float, v_max: float, format_: str="%.3", flags: int=0):
    cdef float[4] io_float_value = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igSliderFloat4(
        _bytes(label),
        <float*>&io_float_value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_int(label: str, value: int, v_min: int, v_max: int, format_: str="%d", flags: int=0):
    cdef ccimgui.bool res = ccimgui.igSliderInt(
        _bytes(label),
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_int2(label: str, value0: int, value1: int, v_min: int, v_max: int, format_: str="%d", flags: int=0):
    cdef int[2] io_int_value = [value0, value1]
    cdef ccimgui.bool res = ccimgui.igSliderInt2(
        _bytes(label),
        <int*>&io_int_value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_int3(label: str, value0: int, value1: int, value2: int, v_min: int, v_max: int, format_: str="%d", flags: int=0):
    cdef int[3] io_int_value = [value0, value1, value2]
    cdef ccimgui.bool res = ccimgui.igSliderInt3(
        _bytes(label),
        <int*>&io_int_value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_int4(label: str, value0: int, value1: int, value2: int, value3: int, v_min: int, v_max: int, format_: str="%d", flags: int=0):
    cdef int[4] io_int_value = [value0, value1, value2, value3]
    cdef ccimgui.bool res = ccimgui.igSliderInt4(
        _bytes(label),
        <int*>&io_int_value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_scalar(label: str, data_type: int, p_data: Any, p_min: Any, p_max: Any, format_: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igSliderScalar(
        _bytes(label),
        data_type,
        p_data,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def slider_scalarn(label: str, data_type: int, p_data: Any, components: int, p_min: Any, p_max: Any, format_: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igSliderScalarN(
        _bytes(label),
        data_type,
        p_data,
        components,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def small_button(label: str):
    """
    Button with framepadding=(0,0) to easily embed within text
    """
    cdef ccimgui.bool res = ccimgui.igSmallButton(_bytes(label))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def spacing():
    """
    Add vertical spacing.
    """
    ccimgui.igSpacing()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def style_colors_classic(dst: ImGuiStyle=None):
    """
    Classic imgui style
    """
    ccimgui.igStyleColorsClassic(dst._ptr)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def style_colors_dark(dst: ImGuiStyle=None):
    """
    New, recommended style (default)
    """
    ccimgui.igStyleColorsDark(dst._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def style_colors_light(dst: ImGuiStyle=None):
    """
    Best used with borders and a custom, thicker font
    """
    ccimgui.igStyleColorsLight(dst._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tab_item_button(label: str, flags: int=0):
    """
    Create a tab behaving like a button. return true when clicked.
    cannot be selected in the tab bar.
    """
    cdef ccimgui.bool res = ccimgui.igTabItemButton(_bytes(label), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def table_get_column_count():
    """
    Return number of columns (value passed to begintable)
    """
    cdef int res = ccimgui.igTableGetColumnCount()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def table_get_column_flags(column_n: int=-1):
    """
    Return column flags so you can query their enabled/visible/sorted/hovered
    status flags. pass -1 to use current column.
    """
    cdef ccimgui.ImGuiTableColumnFlags res = ccimgui.igTableGetColumnFlags(column_n)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def table_get_column_index():
    """
    Return current column index.
    """
    cdef int res = ccimgui.igTableGetColumnIndex()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(str)
def table_get_column_name(column_n: int=-1):
    """
    Return  if column didn't have a name declared by tablesetupcolumn().
    pass -1 to use current column.
    """
    cdef const char* res = ccimgui.igTableGetColumnName(column_n)
    return _bytes(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(int)
def table_get_row_index():
    """
    Return current row index.
    """
    cdef int res = ccimgui.igTableGetRowIndex()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(ImGuiTableSortSpecs)
def table_get_sort_specs():
    """
    Get latest sort specs for the table (null if not sorting).  lifetime:
    don't hold on this pointer over multiple frames or past any
    subsequent call to begintable().
    """
    cdef ccimgui.ImGuiTableSortSpecs* res = ccimgui.igTableGetSortSpecs()
    return ImGuiTableSortSpecs.from_ptr(res)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def table_header(label: str):
    """
    Submit one header cell manually (rarely used)
    """
    ccimgui.igTableHeader(_bytes(label))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def table_headers_row():
    """
    Submit all headers cells based on data provided to tablesetupcolumn()
    + submit context menu
    """
    ccimgui.igTableHeadersRow()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def table_next_column():
    """
    Append into the next column (or first column of next row if currently
    in last column). return true when column is visible.
    """
    cdef ccimgui.bool res = ccimgui.igTableNextColumn()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def table_next_row(row_flags: int=0, min_row_height: float=0.0):
    """
    Append into the first cell of a new row.
    """
    ccimgui.igTableNextRow(row_flags, min_row_height)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def table_set_bg_color(target: int, color: int, column_n: int=-1):
    """
    Change the color of a cell, row, or column. see imguitablebgtarget_
    flags for details.
    """
    ccimgui.igTableSetBgColor(target, color, column_n)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def table_set_column_enabled(column_n: int, value: Any):
    """
    Change user accessible enabled/disabled state of a column. set
    to false to hide the column. user can use the context menu to
    change this themselves (right-click in headers, or right-click
    in columns body with imguitableflags_contextmenuinbody)
    """
    ccimgui.igTableSetColumnEnabled(column_n, value)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def table_set_column_index(column_n: int):
    """
    Append into the specified column. return true when column is
    visible.
    """
    cdef ccimgui.bool res = ccimgui.igTableSetColumnIndex(column_n)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def table_setup_column(label: str, flags: int=0, init_width_or_weight: float=0.0, user_id: int=0):
    ccimgui.igTableSetupColumn(_bytes(label), flags, init_width_or_weight, user_id)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def table_setup_scroll_freeze(cols: int, rows: int):
    """
    Lock columns/rows so they stay visible when scrolled.
    """
    ccimgui.igTableSetupScrollFreeze(cols, rows)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def text(fmt: str):
    """
    Formatted text
    """
    ccimgui.igText(_bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def text_colored(col: tuple, fmt: str):
    """
    Shortcut for pushstylecolor(imguicol_text, col); text(fmt, ...);
    popstylecolor();
    """
    ccimgui.igTextColored(_cast_tuple_ImVec4(col), _bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def text_coloredv(col: tuple, fmt: str, args: str):
    ccimgui.igTextColoredV(_cast_tuple_ImVec4(col), _bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def text_disabled(fmt: str):
    """
    Shortcut for pushstylecolor(imguicol_text, style.colors[imguicol_textdisabled]);
    text(fmt, ...); popstylecolor();
    """
    ccimgui.igTextDisabled(_bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def text_disabledv(fmt: str, args: str):
    ccimgui.igTextDisabledV(_bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def text_unformatted(text: str, text_end: str=None):
    """
    Raw text without formatting. roughly equivalent to text(%s, text)
    but: a) doesn't require null terminated string if 'text_end'
    is specified, b) it's faster, no memory copy is done, no buffer
    size limits, recommended for long chunks of text.
    """
    ccimgui.igTextUnformatted(_bytes(text), _bytes(text_end))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def textv(fmt: str, args: str):
    ccimgui.igTextV(_bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def text_wrapped(fmt: str):
    """
    Shortcut for pushtextwrappos(0.0f); text(fmt, ...); poptextwrappos();.
    note that this won't work on an auto-resizing window if there's
    no other widgets to extend the window width, yoy may need to
    set a size using setnextwindowsize().
    """
    ccimgui.igTextWrapped(_bytes(fmt))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def text_wrappedv(fmt: str, args: str):
    ccimgui.igTextWrappedV(_bytes(fmt), _bytes(args))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_ex_v_ptr(ptr_id: Any, flags: int, fmt: str, args: str):
    cdef ccimgui.bool res = ccimgui.igTreeNodeExV_Ptr(ptr_id, flags, _bytes(fmt), _bytes(args))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_ex_v_str(str_id: str, flags: int, fmt: str, args: str):
    cdef ccimgui.bool res = ccimgui.igTreeNodeExV_Str(_bytes(str_id), flags, _bytes(fmt), _bytes(args))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_ex_ptr(ptr_id: Any, flags: int, fmt: str):
    cdef ccimgui.bool res = ccimgui.igTreeNodeEx_Ptr(ptr_id, flags, _bytes(fmt))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_ex_str(label: str, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igTreeNodeEx_Str(_bytes(label), flags)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_ex_str_str(str_id: str, flags: int, fmt: str):
    cdef ccimgui.bool res = ccimgui.igTreeNodeEx_StrStr(_bytes(str_id), flags, _bytes(fmt))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_v_ptr(ptr_id: Any, fmt: str, args: str):
    cdef ccimgui.bool res = ccimgui.igTreeNodeV_Ptr(ptr_id, _bytes(fmt), _bytes(args))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_v_str(str_id: str, fmt: str, args: str):
    cdef ccimgui.bool res = ccimgui.igTreeNodeV_Str(_bytes(str_id), _bytes(fmt), _bytes(args))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_ptr(ptr_id: Any, fmt: str):
    cdef ccimgui.bool res = ccimgui.igTreeNode_Ptr(ptr_id, _bytes(fmt))
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(bool)
def tree_node_str(label: str):
    cdef ccimgui.bool res = ccimgui.igTreeNode_Str(_bytes(label))
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def tree_node_str_str(str_id: str, fmt: str):
    """
    Helper variation to easily decorelate the id from the displayed
    string. read the faq about why and how to use id. to align arbitrary
    text at the same level as a treenode() you can use bullet().
    """
    cdef ccimgui.bool res = ccimgui.igTreeNode_StrStr(_bytes(str_id), _bytes(fmt))
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def tree_pop():
    """
    ~ unindent()+popid()
    """
    ccimgui.igTreePop()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def tree_push_ptr(ptr_id: Any):
    ccimgui.igTreePush_Ptr(ptr_id)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def tree_push_str(str_id: str):
    """
    ~ indent()+pushid(). already called by treenode() when returning
    true, but you can call treepush/treepop yourself if desired.
    """
    ccimgui.igTreePush_Str(_bytes(str_id))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def unindent(indent_w: float=0.0):
    """
    Move content position back to the left, by indent_w, or style.indentspacing
    if indent_w <= 0
    """
    ccimgui.igUnindent(indent_w)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def update_platform_windows():
    """
    Call in main loop. will call createwindow/resizewindow/etc. platform
    functions for each secondary viewport, and destroywindow for
    each inactive viewport.
    """
    ccimgui.igUpdatePlatformWindows()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def v_slider_float(label: str, size: tuple, value: float, v_min: float, v_max: float, format_: str="%.3", flags: int=0):
    cdef ccimgui.bool res = ccimgui.igVSliderFloat(
        _bytes(label),
        _cast_tuple_ImVec2(size),
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def v_slider_int(label: str, size: tuple, value: int, v_min: int, v_max: int, format_: str="%d", flags: int=0):
    cdef ccimgui.bool res = ccimgui.igVSliderInt(
        _bytes(label),
        _cast_tuple_ImVec2(size),
        value,
        v_min,
        v_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def v_slider_scalar(label: str, size: tuple, data_type: int, p_data: Any, p_min: Any, p_max: Any, format_: str=None, flags: int=0):
    cdef ccimgui.bool res = ccimgui.igVSliderScalar(
        _bytes(label),
        _cast_tuple_ImVec2(size),
        data_type,
        p_data,
        p_min,
        p_max,
        _bytes(format_),
        flags
    )
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def value_bool(prefix: str, b: Any):
    ccimgui.igValue_Bool(_bytes(prefix), b)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def value_float(prefix: str, value: float, float_format: str=None):
    ccimgui.igValue_Float(_bytes(prefix), value, _bytes(float_format))
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def value_int(prefix: str, value: int):
    ccimgui.igValue_Int(_bytes(prefix), value)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def value_uint(prefix: str, value: int):
    ccimgui.igValue_Uint(_bytes(prefix), value)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_char_callback(window: GLFWwindow, c: int):
    ccimgui.ImGui_ImplGlfw_CharCallback(window._ptr, c)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_cursor_enter_callback(window: GLFWwindow, entered: int):
    ccimgui.ImGui_ImplGlfw_CursorEnterCallback(window._ptr, entered)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_cursor_pos_callback(window: GLFWwindow, x: float, y: float):
    ccimgui.ImGui_ImplGlfw_CursorPosCallback(window._ptr, x, y)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(bool)
def impl_glfw_init_for_open_gl(window, install_callbacks: bool):
    cdef uintptr_t adr = <uintptr_t>ctypes.addressof(window.contents)
    cdef ccimgui.bool res = ccimgui.ImGui_ImplGlfw_InitForOpenGL(<ccimgui.GLFWwindow*>adr, install_callbacks)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def impl_glfw_init_for_other(window: GLFWwindow, install_callbacks: Any):
    cdef ccimgui.bool res = ccimgui.ImGui_ImplGlfw_InitForOther(window._ptr, install_callbacks)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def impl_glfw_init_for_vulkan(window: GLFWwindow, install_callbacks: Any):
    cdef ccimgui.bool res = ccimgui.ImGui_ImplGlfw_InitForVulkan(window._ptr, install_callbacks)
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_install_callbacks(window: GLFWwindow):
    ccimgui.ImGui_ImplGlfw_InstallCallbacks(window._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_key_callback(window: GLFWwindow, key: int, scancode: int, action: int, mods: int):
    ccimgui.ImGui_ImplGlfw_KeyCallback(window._ptr, key, scancode, action, mods)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_monitor_callback(monitor: GLFWmonitor, event: int):
    ccimgui.ImGui_ImplGlfw_MonitorCallback(monitor._ptr, event)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_mouse_button_callback(window: GLFWwindow, button: int, action: int, mods: int):
    ccimgui.ImGui_ImplGlfw_MouseButtonCallback(window._ptr, button, action, mods)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def impl_glfw_new_frame():
    ccimgui.ImGui_ImplGlfw_NewFrame()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_restore_callbacks(window: GLFWwindow):
    ccimgui.ImGui_ImplGlfw_RestoreCallbacks(window._ptr)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_scroll_callback(window: GLFWwindow, xoffset: float, yoffset: float):
    ccimgui.ImGui_ImplGlfw_ScrollCallback(window._ptr, xoffset, yoffset)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_set_callbacks_chain_for_all_windows(chain_for_all_windows: Any):
    ccimgui.ImGui_ImplGlfw_SetCallbacksChainForAllWindows(chain_for_all_windows)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def impl_glfw_shutdown():
    ccimgui.ImGui_ImplGlfw_Shutdown()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_glfw_window_focus_callback(window: GLFWwindow, focused: int):
    ccimgui.ImGui_ImplGlfw_WindowFocusCallback(window._ptr, focused)
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def impl_open_gl3_create_device_objects():
    cdef ccimgui.bool res = ccimgui.ImGui_ImplOpenGL3_CreateDeviceObjects()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(Any)
def impl_open_gl3_create_fonts_texture():
    cdef ccimgui.bool res = ccimgui.ImGui_ImplOpenGL3_CreateFontsTexture()
    return res
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_open_gl3_destroy_device_objects():
    ccimgui.ImGui_ImplOpenGL3_DestroyDeviceObjects()
# [End Function]

# [Function]
# ?use_template(False)
# ?active(False)
# ?returns(None)
def impl_open_gl3_destroy_fonts_texture():
    ccimgui.ImGui_ImplOpenGL3_DestroyFontsTexture()
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(bool)
def impl_open_gl3_init(glsl_version: str=None):
    cdef ccimgui.bool res
    if glsl_version is None:
        res = ccimgui.ImGui_ImplOpenGL3_Init(NULL)
    else:
        res = ccimgui.ImGui_ImplOpenGL3_Init(_bytes(glsl_version))
    return res
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def impl_open_gl3_new_frame():
    ccimgui.ImGui_ImplOpenGL3_NewFrame()
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def impl_open_gl3_render_draw_data(draw_data: ImDrawData):
    ccimgui.ImGui_ImplOpenGL3_RenderDrawData(draw_data._ptr)
# [End Function]

# [Function]
# ?use_template(True)
# ?active(True)
# ?returns(None)
def impl_open_gl3_shutdown():
    ccimgui.ImGui_ImplOpenGL3_Shutdown()
# [End Function]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImDrawCmd:
    cdef ccimgui.ImVector_ImDrawCmd* _ptr
    
    @staticmethod
    cdef ImVector_ImDrawCmd from_ptr(ccimgui.ImVector_ImDrawCmd* _ptr):
        cdef ImVector_ImDrawCmd wrapper = ImVector_ImDrawCmd.__new__(ImVector_ImDrawCmd)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawCmd)
    @property
    def data(self):
        cdef ccimgui.ImDrawCmd res = dereference(self._ptr).Data
        return ImDrawCmd.from_ptr(res)
    @data.setter
    def data(self, value: ImDrawCmd):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImDrawIdx:
    cdef ccimgui.ImVector_ImDrawIdx* _ptr
    
    @staticmethod
    cdef ImVector_ImDrawIdx from_ptr(ccimgui.ImVector_ImDrawIdx* _ptr):
        cdef ImVector_ImDrawIdx wrapper = ImVector_ImDrawIdx.__new__(ImVector_ImDrawIdx)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        # dereference(self._ptr).Size = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(int)
    @property
    def data(self):
        cdef size_t res = <uintptr_t>dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: int):
        # dereference(self._ptr).Data = value
        raise NotImplementedError
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImDrawVert:
    cdef ccimgui.ImVector_ImDrawVert* _ptr
    
    @staticmethod
    cdef ImVector_ImDrawVert from_ptr(ccimgui.ImVector_ImDrawVert* _ptr):
        cdef ImVector_ImDrawVert wrapper = ImVector_ImDrawVert.__new__(ImVector_ImDrawVert)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        # dereference(self._ptr).Size = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(int)
    @property
    def data(self):
        cdef size_t res = <uintptr_t>dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: ImDrawVert):
        # dereference(self._ptr).Data = value._ptr
        raise NotImplementedError
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImVec4:
    cdef ccimgui.ImVector_ImVec4* _ptr
    
    @staticmethod
    cdef ImVector_ImVec4 from_ptr(ccimgui.ImVector_ImVec4* _ptr):
        cdef ImVector_ImVec4 wrapper = ImVector_ImVec4.__new__(ImVector_ImVec4)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVec4)
    @property
    def data(self):
        cdef ccimgui.ImVec4 res = dereference(self._ptr).Data
        return ImVec4.from_ptr(res)
    @data.setter
    def data(self, value: ImVec4):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImTextureID:
    cdef ccimgui.ImVector_ImTextureID* _ptr
    
    @staticmethod
    cdef ImVector_ImTextureID from_ptr(ccimgui.ImVector_ImTextureID* _ptr):
        cdef ImVector_ImTextureID wrapper = ImVector_ImTextureID.__new__(ImVector_ImTextureID)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def data(self):
        cdef Any res = dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: Any):
        dereference(self._ptr).Data = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImVec2:
    cdef ccimgui.ImVector_ImVec2* _ptr
    
    @staticmethod
    cdef ImVector_ImVec2 from_ptr(ccimgui.ImVector_ImVec2* _ptr):
        cdef ImVector_ImVec2 wrapper = ImVector_ImVec2.__new__(ImVector_ImVec2)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVec2)
    @property
    def data(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).Data
        return ImVec2.from_ptr(res)
    @data.setter
    def data(self, value: ImVec2):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImDrawChannel:
    cdef ccimgui.ImVector_ImDrawChannel* _ptr
    
    @staticmethod
    cdef ImVector_ImDrawChannel from_ptr(ccimgui.ImVector_ImDrawChannel* _ptr):
        cdef ImVector_ImDrawChannel wrapper = ImVector_ImDrawChannel.__new__(ImVector_ImDrawChannel)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawChannel)
    @property
    def data(self):
        cdef ccimgui.ImDrawChannel res = dereference(self._ptr).Data
        return ImDrawChannel.from_ptr(res)
    @data.setter
    def data(self, value: ImDrawChannel):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_float:
    cdef ccimgui.ImVector_float* _ptr
    
    @staticmethod
    cdef ImVector_float from_ptr(ccimgui.ImVector_float* _ptr):
        cdef ImVector_float wrapper = ImVector_float.__new__(ImVector_float)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def data(self):
        cdef float res = dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: float):
        dereference(self._ptr).Data = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImWchar:
    cdef ccimgui.ImVector_ImWchar* _ptr
    
    @staticmethod
    cdef ImVector_ImWchar from_ptr(ccimgui.ImVector_ImWchar* _ptr):
        cdef ImVector_ImWchar wrapper = ImVector_ImWchar.__new__(ImVector_ImWchar)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def data(self):
        cdef Any res = dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: int):
        dereference(self._ptr).Data = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImFontGlyph:
    cdef ccimgui.ImVector_ImFontGlyph* _ptr
    
    @staticmethod
    cdef ImVector_ImFontGlyph from_ptr(ccimgui.ImVector_ImFontGlyph* _ptr):
        cdef ImVector_ImFontGlyph wrapper = ImVector_ImFontGlyph.__new__(ImVector_ImFontGlyph)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontGlyph)
    @property
    def data(self):
        cdef ccimgui.ImFontGlyph res = dereference(self._ptr).Data
        return ImFontGlyph.from_ptr(res)
    @data.setter
    def data(self, value: ImFontGlyph):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImFontPtr:
    cdef ccimgui.ImVector_ImFontPtr* _ptr
    
    @staticmethod
    cdef ImVector_ImFontPtr from_ptr(ccimgui.ImVector_ImFontPtr* _ptr):
        cdef ImVector_ImFontPtr wrapper = ImVector_ImFontPtr.__new__(ImVector_ImFontPtr)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    @property
    def data(self):
        cdef ccimgui.ImFont res = dereference(self._ptr).Data
        return ImFont.from_ptr(res)
    @data.setter
    def data(self, value: ImFont):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImFontAtlasCustomRect:
    cdef ccimgui.ImVector_ImFontAtlasCustomRect* _ptr
    
    @staticmethod
    cdef ImVector_ImFontAtlasCustomRect from_ptr(ccimgui.ImVector_ImFontAtlasCustomRect* _ptr):
        cdef ImVector_ImFontAtlasCustomRect wrapper = ImVector_ImFontAtlasCustomRect.__new__(ImVector_ImFontAtlasCustomRect)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontAtlasCustomRect)
    @property
    def data(self):
        cdef ccimgui.ImFontAtlasCustomRect res = dereference(self._ptr).Data
        return ImFontAtlasCustomRect.from_ptr(res)
    @data.setter
    def data(self, value: ImFontAtlasCustomRect):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImFontConfig:
    cdef ccimgui.ImVector_ImFontConfig* _ptr
    
    @staticmethod
    cdef ImVector_ImFontConfig from_ptr(ccimgui.ImVector_ImFontConfig* _ptr):
        cdef ImVector_ImFontConfig wrapper = ImVector_ImFontConfig.__new__(ImVector_ImFontConfig)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontConfig)
    @property
    def data(self):
        cdef ccimgui.ImFontConfig res = dereference(self._ptr).Data
        return ImFontConfig.from_ptr(res)
    @data.setter
    def data(self, value: ImFontConfig):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImFontGlyph:
    cdef ccimgui.ImFontGlyph* _ptr
    
    @staticmethod
    cdef ImFontGlyph from_ptr(ccimgui.ImFontGlyph* _ptr):
        cdef ImFontGlyph wrapper = ImFontGlyph.__new__(ImFontGlyph)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def colored(self):
        cdef Any res = dereference(self._ptr).Colored
        return res
    @colored.setter
    def colored(self, value: int):
        dereference(self._ptr).Colored = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def visible(self):
        cdef Any res = dereference(self._ptr).Visible
        return res
    @visible.setter
    def visible(self, value: int):
        dereference(self._ptr).Visible = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def codepoint(self):
        cdef Any res = dereference(self._ptr).Codepoint
        return res
    @codepoint.setter
    def codepoint(self, value: int):
        dereference(self._ptr).Codepoint = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def advancex(self):
        cdef float res = dereference(self._ptr).AdvanceX
        return res
    @advancex.setter
    def advancex(self, value: float):
        dereference(self._ptr).AdvanceX = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def x0(self):
        cdef float res = dereference(self._ptr).X0
        return res
    @x0.setter
    def x0(self, value: float):
        dereference(self._ptr).X0 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def y0(self):
        cdef float res = dereference(self._ptr).Y0
        return res
    @y0.setter
    def y0(self, value: float):
        dereference(self._ptr).Y0 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def x1(self):
        cdef float res = dereference(self._ptr).X1
        return res
    @x1.setter
    def x1(self, value: float):
        dereference(self._ptr).X1 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def y1(self):
        cdef float res = dereference(self._ptr).Y1
        return res
    @y1.setter
    def y1(self, value: float):
        dereference(self._ptr).Y1 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def u0(self):
        cdef float res = dereference(self._ptr).U0
        return res
    @u0.setter
    def u0(self, value: float):
        dereference(self._ptr).U0 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def v0(self):
        cdef float res = dereference(self._ptr).V0
        return res
    @v0.setter
    def v0(self, value: float):
        dereference(self._ptr).V0 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def u1(self):
        cdef float res = dereference(self._ptr).U1
        return res
    @u1.setter
    def u1(self, value: float):
        dereference(self._ptr).U1 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def v1(self):
        cdef float res = dereference(self._ptr).V1
        return res
    @v1.setter
    def v1(self, value: float):
        dereference(self._ptr).V1 = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImU32:
    cdef ccimgui.ImVector_ImU32* _ptr
    
    @staticmethod
    cdef ImVector_ImU32 from_ptr(ccimgui.ImVector_ImU32* _ptr):
        cdef ImVector_ImU32 wrapper = ImVector_ImU32.__new__(ImVector_ImU32)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def data(self):
        cdef Any res = dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: int):
        dereference(self._ptr).Data = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiKeyData:
    cdef ccimgui.ImGuiKeyData* _ptr
    
    @staticmethod
    cdef ImGuiKeyData from_ptr(ccimgui.ImGuiKeyData* _ptr):
        cdef ImGuiKeyData wrapper = ImGuiKeyData.__new__(ImGuiKeyData)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def down(self):
        cdef Any res = dereference(self._ptr).Down
        return res
    @down.setter
    def down(self, value: Any):
        dereference(self._ptr).Down = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def down_duration(self):
        cdef float res = dereference(self._ptr).DownDuration
        return res
    @down_duration.setter
    def down_duration(self, value: float):
        dereference(self._ptr).DownDuration = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def down_duration_prev(self):
        cdef float res = dereference(self._ptr).DownDurationPrev
        return res
    @down_duration_prev.setter
    def down_duration_prev(self, value: float):
        dereference(self._ptr).DownDurationPrev = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def analog_value(self):
        cdef float res = dereference(self._ptr).AnalogValue
        return res
    @analog_value.setter
    def analog_value(self, value: float):
        dereference(self._ptr).AnalogValue = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiListClipper:
    cdef ccimgui.ImGuiListClipper* _ptr
    
    @staticmethod
    cdef ImGuiListClipper from_ptr(ccimgui.ImGuiListClipper* _ptr):
        cdef ImGuiListClipper wrapper = ImGuiListClipper.__new__(ImGuiListClipper)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiContext)
    @property
    def ctx(self):
        cdef ccimgui.ImGuiContext res = dereference(self._ptr).Ctx
        return ImGuiContext.from_ptr(res)
    @ctx.setter
    def ctx(self, value: ImGuiContext):
        dereference(self._ptr).Ctx = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def display_start(self):
        cdef int res = dereference(self._ptr).DisplayStart
        return res
    @display_start.setter
    def display_start(self, value: int):
        dereference(self._ptr).DisplayStart = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def display_end(self):
        cdef int res = dereference(self._ptr).DisplayEnd
        return res
    @display_end.setter
    def display_end(self, value: int):
        dereference(self._ptr).DisplayEnd = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def items_count(self):
        cdef int res = dereference(self._ptr).ItemsCount
        return res
    @items_count.setter
    def items_count(self, value: int):
        dereference(self._ptr).ItemsCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def items_height(self):
        cdef float res = dereference(self._ptr).ItemsHeight
        return res
    @items_height.setter
    def items_height(self, value: float):
        dereference(self._ptr).ItemsHeight = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def start_posy(self):
        cdef float res = dereference(self._ptr).StartPosY
        return res
    @start_posy.setter
    def start_posy(self, value: float):
        dereference(self._ptr).StartPosY = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def temp_data(self):
        cdef Any res = dereference(self._ptr).TempData
        return res
    @temp_data.setter
    def temp_data(self, value: Any):
        dereference(self._ptr).TempData = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiListClipper)
    @staticmethod
    def list_clipper():
        cdef ccimgui.ImGuiListClipper* _ptr = ccimgui.ImGuiListClipper_ImGuiListClipper()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiListClipper.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiListClipper):
        ccimgui.ImGuiListClipper_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def begin(self: ImGuiListClipper, items_count: int, items_height: float=-1.0):
        ccimgui.ImGuiListClipper_Begin(self._ptr, items_count, items_height)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def end(self: ImGuiListClipper):
        """
        Automatically called on the last call of step() that returns
        false.
        """
        ccimgui.ImGuiListClipper_End(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def force_display_range_by_indices(self: ImGuiListClipper, item_min: int, item_max: int):
        """
        Item_max is exclusive e.g. use (42, 42+1) to make item 42 always
        visible but due to alignment/padding of certain items it is
        likely that an extra item may be included on either end of the
        display range.
        """
        ccimgui.ImGuiListClipper_ForceDisplayRangeByIndices(self._ptr, item_min, item_max)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def step(self: ImGuiListClipper):
        """
        Call until it returns false. the displaystart/displayend fields
        will be set and you can process/draw those items.
        """
        cdef ccimgui.bool res = ccimgui.ImGuiListClipper_Step(self._ptr)
        return res
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiOnceUponAFrame:
    cdef ccimgui.ImGuiOnceUponAFrame* _ptr
    
    @staticmethod
    cdef ImGuiOnceUponAFrame from_ptr(ccimgui.ImGuiOnceUponAFrame* _ptr):
        cdef ImGuiOnceUponAFrame wrapper = ImGuiOnceUponAFrame.__new__(ImGuiOnceUponAFrame)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def ref_frame(self):
        cdef int res = dereference(self._ptr).RefFrame
        return res
    @ref_frame.setter
    def ref_frame(self, value: int):
        dereference(self._ptr).RefFrame = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiOnceUponAFrame)
    @staticmethod
    def once_upon_a_frame():
        cdef ccimgui.ImGuiOnceUponAFrame* _ptr = ccimgui.ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiOnceUponAFrame.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiOnceUponAFrame):
        ccimgui.ImGuiOnceUponAFrame_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiPayload:
    cdef ccimgui.ImGuiPayload* _ptr
    
    @staticmethod
    cdef ImGuiPayload from_ptr(ccimgui.ImGuiPayload* _ptr):
        cdef ImGuiPayload wrapper = ImGuiPayload.__new__(ImGuiPayload)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def data(self):
        cdef Any res = dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: Any):
        dereference(self._ptr).Data = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def data_size(self):
        cdef int res = dereference(self._ptr).DataSize
        return res
    @data_size.setter
    def data_size(self, value: int):
        dereference(self._ptr).DataSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def source_id(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).SourceId
        return res
    @source_id.setter
    def source_id(self, value: int):
        dereference(self._ptr).SourceId = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def source_parent_id(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).SourceParentId
        return res
    @source_parent_id.setter
    def source_parent_id(self, value: int):
        dereference(self._ptr).SourceParentId = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def data_frame_count(self):
        cdef int res = dereference(self._ptr).DataFrameCount
        return res
    @data_frame_count.setter
    def data_frame_count(self, value: int):
        dereference(self._ptr).DataFrameCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def data_type(self):
        cdef Any res = dereference(self._ptr).DataType
        return res
    @data_type.setter
    def data_type(self, value: int):
        dereference(self._ptr).DataType = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def preview(self):
        cdef Any res = dereference(self._ptr).Preview
        return res
    @preview.setter
    def preview(self, value: Any):
        dereference(self._ptr).Preview = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def delivery(self):
        cdef Any res = dereference(self._ptr).Delivery
        return res
    @delivery.setter
    def delivery(self, value: Any):
        dereference(self._ptr).Delivery = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiPayload)
    @staticmethod
    def payload():
        cdef ccimgui.ImGuiPayload* _ptr = ccimgui.ImGuiPayload_ImGuiPayload()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiPayload.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiPayload):
        ccimgui.ImGuiPayload_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImGuiPayload):
        ccimgui.ImGuiPayload_Clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_data_type(self: ImGuiPayload, type_: str):
        cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsDataType(self._ptr, _bytes(type_))
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_delivery(self: ImGuiPayload):
        cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsDelivery(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_preview(self: ImGuiPayload):
        cdef ccimgui.bool res = ccimgui.ImGuiPayload_IsPreview(self._ptr)
        return res
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImGuiPlatformMonitor:
    cdef ccimgui.ImVector_ImGuiPlatformMonitor* _ptr
    
    @staticmethod
    cdef ImVector_ImGuiPlatformMonitor from_ptr(ccimgui.ImVector_ImGuiPlatformMonitor* _ptr):
        cdef ImVector_ImGuiPlatformMonitor wrapper = ImVector_ImGuiPlatformMonitor.__new__(ImVector_ImGuiPlatformMonitor)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiPlatformMonitor)
    @property
    def data(self):
        cdef ccimgui.ImGuiPlatformMonitor res = dereference(self._ptr).Data
        return ImGuiPlatformMonitor.from_ptr(res)
    @data.setter
    def data(self, value: ImGuiPlatformMonitor):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImGuiViewportPtr:
    cdef ccimgui.ImVector_ImGuiViewportPtr* _ptr
    
    @staticmethod
    cdef ImVector_ImGuiViewportPtr from_ptr(ccimgui.ImVector_ImGuiViewportPtr* _ptr):
        cdef ImVector_ImGuiViewportPtr wrapper = ImVector_ImGuiViewportPtr.__new__(ImVector_ImGuiViewportPtr)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiViewport)
    @property
    def data(self):
        cdef ccimgui.ImGuiViewport res = dereference(self._ptr).Data
        return ImGuiViewport.from_ptr(res)
    @data.setter
    def data(self, value: ImGuiViewport):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImGuiStoragePair:
    cdef ccimgui.ImVector_ImGuiStoragePair* _ptr
    
    @staticmethod
    cdef ImVector_ImGuiStoragePair from_ptr(ccimgui.ImVector_ImGuiStoragePair* _ptr):
        cdef ImVector_ImGuiStoragePair wrapper = ImVector_ImGuiStoragePair.__new__(ImVector_ImGuiStoragePair)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiStoragePair)
    @property
    def data(self):
        cdef ccimgui.ImGuiStoragePair res = dereference(self._ptr).Data
        return ImGuiStoragePair.from_ptr(res)
    @data.setter
    def data(self, value: ImGuiStoragePair):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiStoragePair:
    cdef ccimgui.ImGuiStoragePair* _ptr
    
    @staticmethod
    cdef ImGuiStoragePair from_ptr(ccimgui.ImGuiStoragePair* _ptr):
        cdef ImGuiStoragePair wrapper = ImGuiStoragePair.__new__(ImGuiStoragePair)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def key(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).key
        return res
    @key.setter
    def key(self, value: int):
        dereference(self._ptr).key = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def val_i(self):
        cdef int res = dereference(self._ptr).val_i
        return res
    @val_i.setter
    def val_i(self, value: int):
        dereference(self._ptr).val_i = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def val_f(self):
        cdef float res = dereference(self._ptr).val_f
        return res
    @val_f.setter
    def val_f(self, value: float):
        dereference(self._ptr).val_f = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def val_p(self):
        cdef Any res = dereference(self._ptr).val_p
        return res
    @val_p.setter
    def val_p(self, value: Any):
        dereference(self._ptr).val_p = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiStoragePair)
    @staticmethod
    def float_(_key: int, _val_f: float):
        cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Float(_key, _val_f)
        if _ptr is NULL:
            raise MemoryError
        return ImGuiStoragePair.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiStoragePair)
    @staticmethod
    def int_(_key: int, _val_i: int):
        cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Int(_key, _val_i)
        if _ptr is NULL:
            raise MemoryError
        return ImGuiStoragePair.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiStoragePair)
    @staticmethod
    def ptr(_key: int, _val_p: Any):
        cdef ccimgui.ImGuiStoragePair* _ptr = ccimgui.ImGuiStoragePair_ImGuiStoragePair_Ptr(_key, _val_p)
        if _ptr is NULL:
            raise MemoryError
        return ImGuiStoragePair.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiStoragePair):
        ccimgui.ImGuiStoragePair_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiTableColumnSortSpecs:
    cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr
    
    @staticmethod
    cdef ImGuiTableColumnSortSpecs from_ptr(ccimgui.ImGuiTableColumnSortSpecs* _ptr):
        cdef ImGuiTableColumnSortSpecs wrapper = ImGuiTableColumnSortSpecs.__new__(ImGuiTableColumnSortSpecs)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def column_user_id(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).ColumnUserID
        return res
    @column_user_id.setter
    def column_user_id(self, value: int):
        dereference(self._ptr).ColumnUserID = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def column_index(self):
        cdef ccimgui.ImS16 res = dereference(self._ptr).ColumnIndex
        return res
    @column_index.setter
    def column_index(self, value: int):
        dereference(self._ptr).ColumnIndex = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def sort_order(self):
        cdef ccimgui.ImS16 res = dereference(self._ptr).SortOrder
        return res
    @sort_order.setter
    def sort_order(self, value: int):
        dereference(self._ptr).SortOrder = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def sort_direction(self):
        cdef ccimgui.ImGuiSortDirection res = dereference(self._ptr).SortDirection
        return res
    @sort_direction.setter
    def sort_direction(self, value: int):
        dereference(self._ptr).SortDirection = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTableColumnSortSpecs)
    @staticmethod
    def table_column_sort_specs():
        cdef ccimgui.ImGuiTableColumnSortSpecs* _ptr = ccimgui.ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiTableColumnSortSpecs.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiTableColumnSortSpecs):
        ccimgui.ImGuiTableColumnSortSpecs_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiTableSortSpecs:
    cdef ccimgui.ImGuiTableSortSpecs* _ptr
    
    @staticmethod
    cdef ImGuiTableSortSpecs from_ptr(ccimgui.ImGuiTableSortSpecs* _ptr):
        cdef ImGuiTableSortSpecs wrapper = ImGuiTableSortSpecs.__new__(ImGuiTableSortSpecs)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTableColumnSortSpecs)
    @property
    def specs(self):
        cdef ccimgui.ImGuiTableColumnSortSpecs res = dereference(self._ptr).Specs
        return ImGuiTableColumnSortSpecs.from_ptr(res)
    @specs.setter
    def specs(self, value: ImGuiTableColumnSortSpecs):
        dereference(self._ptr).Specs = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def specs_count(self):
        cdef int res = dereference(self._ptr).SpecsCount
        return res
    @specs_count.setter
    def specs_count(self, value: int):
        dereference(self._ptr).SpecsCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def specs_dirty(self):
        cdef Any res = dereference(self._ptr).SpecsDirty
        return res
    @specs_dirty.setter
    def specs_dirty(self, value: Any):
        dereference(self._ptr).SpecsDirty = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTableSortSpecs)
    @staticmethod
    def table_sort_specs():
        cdef ccimgui.ImGuiTableSortSpecs* _ptr = ccimgui.ImGuiTableSortSpecs_ImGuiTableSortSpecs()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiTableSortSpecs.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiTableSortSpecs):
        ccimgui.ImGuiTableSortSpecs_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_char:
    cdef ccimgui.ImVector_char* _ptr
    
    @staticmethod
    cdef ImVector_char from_ptr(ccimgui.ImVector_char* _ptr):
        cdef ImVector_char wrapper = ImVector_char.__new__(ImVector_char)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def data(self):
        cdef str res = dereference(self._ptr).Data
        return res
    @data.setter
    def data(self, value: str):
        dereference(self._ptr).Data = _bytes(value)
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVector_ImGuiTextRange:
    cdef ccimgui.ImVector_ImGuiTextRange* _ptr
    
    @staticmethod
    cdef ImVector_ImGuiTextRange from_ptr(ccimgui.ImVector_ImGuiTextRange* _ptr):
        cdef ImVector_ImGuiTextRange wrapper = ImVector_ImGuiTextRange.__new__(ImVector_ImGuiTextRange)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def size(self):
        cdef int res = dereference(self._ptr).Size
        return res
    @size.setter
    def size(self, value: int):
        dereference(self._ptr).Size = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def capacity(self):
        cdef int res = dereference(self._ptr).Capacity
        return res
    @capacity.setter
    def capacity(self, value: int):
        dereference(self._ptr).Capacity = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTextRange)
    @property
    def data(self):
        cdef ccimgui.ImGuiTextRange res = dereference(self._ptr).Data
        return ImGuiTextRange.from_ptr(res)
    @data.setter
    def data(self, value: ImGuiTextRange):
        dereference(self._ptr).Data = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiTextRange:
    cdef ccimgui.ImGuiTextRange* _ptr
    
    @staticmethod
    cdef ImGuiTextRange from_ptr(ccimgui.ImGuiTextRange* _ptr):
        cdef ImGuiTextRange wrapper = ImGuiTextRange.__new__(ImGuiTextRange)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def b(self):
        cdef str res = dereference(self._ptr).b
        return res
    @b.setter
    def b(self, value: str):
        dereference(self._ptr).b = _bytes(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def e(self):
        cdef str res = dereference(self._ptr).e
        return res
    @e.setter
    def e(self, value: str):
        dereference(self._ptr).e = _bytes(value)
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTextRange)
    @staticmethod
    def nil():
        cdef ccimgui.ImGuiTextRange* _ptr = ccimgui.ImGuiTextRange_ImGuiTextRange_Nil()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiTextRange.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTextRange)
    @staticmethod
    def str_(_b: str, _e: str):
        cdef ccimgui.ImGuiTextRange* _ptr = ccimgui.ImGuiTextRange_ImGuiTextRange_Str(_bytes(_b), _bytes(_e))
        if _ptr is NULL:
            raise MemoryError
        return ImGuiTextRange.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiTextRange):
        ccimgui.ImGuiTextRange_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def empty(self: ImGuiTextRange):
        cdef ccimgui.bool res = ccimgui.ImGuiTextRange_empty(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def split(self: ImGuiTextRange, separator: int, out: ImVector_ImGuiTextRange):
        ccimgui.ImGuiTextRange_split(self._ptr, separator, out._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiWindowClass:
    cdef ccimgui.ImGuiWindowClass* _ptr
    
    @staticmethod
    cdef ImGuiWindowClass from_ptr(ccimgui.ImGuiWindowClass* _ptr):
        cdef ImGuiWindowClass wrapper = ImGuiWindowClass.__new__(ImGuiWindowClass)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def class_id(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).ClassId
        return res
    @class_id.setter
    def class_id(self, value: int):
        dereference(self._ptr).ClassId = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def parent_viewport_id(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).ParentViewportId
        return res
    @parent_viewport_id.setter
    def parent_viewport_id(self, value: int):
        dereference(self._ptr).ParentViewportId = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def viewport_flags_override_set(self):
        cdef ccimgui.ImGuiViewportFlags res = dereference(self._ptr).ViewportFlagsOverrideSet
        return res
    @viewport_flags_override_set.setter
    def viewport_flags_override_set(self, value: int):
        dereference(self._ptr).ViewportFlagsOverrideSet = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def viewport_flags_override_clear(self):
        cdef ccimgui.ImGuiViewportFlags res = dereference(self._ptr).ViewportFlagsOverrideClear
        return res
    @viewport_flags_override_clear.setter
    def viewport_flags_override_clear(self, value: int):
        dereference(self._ptr).ViewportFlagsOverrideClear = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def tab_item_flags_override_set(self):
        cdef ccimgui.ImGuiTabItemFlags res = dereference(self._ptr).TabItemFlagsOverrideSet
        return res
    @tab_item_flags_override_set.setter
    def tab_item_flags_override_set(self, value: int):
        dereference(self._ptr).TabItemFlagsOverrideSet = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def dock_node_flags_override_set(self):
        cdef ccimgui.ImGuiDockNodeFlags res = dereference(self._ptr).DockNodeFlagsOverrideSet
        return res
    @dock_node_flags_override_set.setter
    def dock_node_flags_override_set(self, value: int):
        dereference(self._ptr).DockNodeFlagsOverrideSet = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def docking_always_tab_bar(self):
        cdef Any res = dereference(self._ptr).DockingAlwaysTabBar
        return res
    @docking_always_tab_bar.setter
    def docking_always_tab_bar(self, value: Any):
        dereference(self._ptr).DockingAlwaysTabBar = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def docking_allow_unclassed(self):
        cdef Any res = dereference(self._ptr).DockingAllowUnclassed
        return res
    @docking_allow_unclassed.setter
    def docking_allow_unclassed(self, value: Any):
        dereference(self._ptr).DockingAllowUnclassed = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiWindowClass)
    @staticmethod
    def window_class():
        cdef ccimgui.ImGuiWindowClass* _ptr = ccimgui.ImGuiWindowClass_ImGuiWindowClass()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiWindowClass.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiWindowClass):
        ccimgui.ImGuiWindowClass_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVec2:
    cdef ccimgui.ImVec2* _ptr
    
    @staticmethod
    cdef ImVec2 from_ptr(ccimgui.ImVec2* _ptr):
        cdef ImVec2 wrapper = ImVec2.__new__(ImVec2)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def x(self):
        cdef float res = dereference(self._ptr).x
        return res
    @x.setter
    def x(self, value: float):
        dereference(self._ptr).x = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def y(self):
        cdef float res = dereference(self._ptr).y
        return res
    @y.setter
    def y(self, value: float):
        dereference(self._ptr).y = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVec2)
    @staticmethod
    def float_(_x: float, _y: float):
        cdef ccimgui.ImVec2* _ptr = ccimgui.ImVec2_ImVec2_Float(_x, _y)
        if _ptr is NULL:
            raise MemoryError
        return ImVec2.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVec2)
    @staticmethod
    def nil():
        cdef ccimgui.ImVec2* _ptr = ccimgui.ImVec2_ImVec2_Nil()
        if _ptr is NULL:
            raise MemoryError
        return ImVec2.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImVec2):
        ccimgui.ImVec2_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImVec4:
    cdef ccimgui.ImVec4* _ptr
    
    @staticmethod
    cdef ImVec4 from_ptr(ccimgui.ImVec4* _ptr):
        cdef ImVec4 wrapper = ImVec4.__new__(ImVec4)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def x(self):
        cdef float res = dereference(self._ptr).x
        return res
    @x.setter
    def x(self, value: float):
        dereference(self._ptr).x = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def y(self):
        cdef float res = dereference(self._ptr).y
        return res
    @y.setter
    def y(self, value: float):
        dereference(self._ptr).y = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def z(self):
        cdef float res = dereference(self._ptr).z
        return res
    @z.setter
    def z(self, value: float):
        dereference(self._ptr).z = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def w(self):
        cdef float res = dereference(self._ptr).w
        return res
    @w.setter
    def w(self, value: float):
        dereference(self._ptr).w = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVec4)
    @staticmethod
    def float_(_x: float, _y: float, _z: float, _w: float):
        cdef ccimgui.ImVec4* _ptr = ccimgui.ImVec4_ImVec4_Float(_x, _y, _z, _w)
        if _ptr is NULL:
            raise MemoryError
        return ImVec4.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVec4)
    @staticmethod
    def nil():
        cdef ccimgui.ImVec4* _ptr = ccimgui.ImVec4_ImVec4_Nil()
        if _ptr is NULL:
            raise MemoryError
        return ImVec4.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImVec4):
        ccimgui.ImVec4_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImColor:
    cdef ccimgui.ImColor* _ptr
    
    @staticmethod
    cdef ImColor from_ptr(ccimgui.ImColor* _ptr):
        cdef ImColor wrapper = ImColor.__new__(ImColor)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def value(self):
        cdef ccimgui.ImVec4 res = dereference(self._ptr).Value
        return ImVec4.from_ptr(res)
    @value.setter
    def value(self, value: tuple):
        dereference(self._ptr).Value = _cast_tuple_ImVec4(value)
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImColor)
    @staticmethod
    def float_(r: float, g: float, b: float, a: float=1.0):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Float(r, g, b, a)
        if _ptr is NULL:
            raise MemoryError
        return ImColor.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImColor)
    @staticmethod
    def int_(r: int, g: int, b: int, a: int=255):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Int(r, g, b, a)
        if _ptr is NULL:
            raise MemoryError
        return ImColor.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImColor)
    @staticmethod
    def nil():
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Nil()
        if _ptr is NULL:
            raise MemoryError
        return ImColor.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImColor)
    @staticmethod
    def u32(rgba: int):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_U32(rgba)
        if _ptr is NULL:
            raise MemoryError
        return ImColor.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImColor)
    @staticmethod
    def vec4(col: tuple):
        cdef ccimgui.ImColor* _ptr = ccimgui.ImColor_ImColor_Vec4(_cast_tuple_ImVec4(col))
        if _ptr is NULL:
            raise MemoryError
        return ImColor.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImColor):
        ccimgui.ImColor_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def hsv(pOut: ImColor, h: float, s: float, value: float, a: float=1.0):
        ccimgui.ImColor_HSV(pOut._ptr, h, s, value, a)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_hsv(self: ImColor, h: float, s: float, value: float, a: float=1.0):
        ccimgui.ImColor_SetHSV(self._ptr, h, s, value, a)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawChannel:
    cdef ccimgui.ImDrawChannel* _ptr
    
    @staticmethod
    cdef ImDrawChannel from_ptr(ccimgui.ImDrawChannel* _ptr):
        cdef ImDrawChannel wrapper = ImDrawChannel.__new__(ImDrawChannel)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImDrawCmd)
    @property
    def _cmd_buffer(self):
        cdef ccimgui.ImVector_ImDrawCmd res = dereference(self._ptr)._CmdBuffer
        return ImVector_ImDrawCmd.from_ptr(res)
    @_cmd_buffer.setter
    def _cmd_buffer(self, value: ImVector_ImDrawCmd):
        dereference(self._ptr)._CmdBuffer = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImDrawIdx)
    @property
    def _idx_buffer(self):
        cdef ccimgui.ImVector_ImDrawIdx res = dereference(self._ptr)._IdxBuffer
        return ImVector_ImDrawIdx.from_ptr(res)
    @_idx_buffer.setter
    def _idx_buffer(self, value: ImVector_ImDrawIdx):
        dereference(self._ptr)._IdxBuffer = value._ptr
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawCmd:
    cdef ccimgui.ImDrawCmd* _ptr
    
    @staticmethod
    cdef ImDrawCmd from_ptr(ccimgui.ImDrawCmd* _ptr):
        cdef ImDrawCmd wrapper = ImDrawCmd.__new__(ImDrawCmd)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(tuple)
    @property
    def clip_rect(self):
        return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
    @clip_rect.setter
    def clip_rect(self, value: tuple):
        # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(object)
    @property
    def texture_id(self):
        cdef object res = <object>dereference(self._ptr).TextureId
        return res
    @texture_id.setter
    def texture_id(self, value: Any):
        # dereference(self._ptr).TextureId = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def vtx_offset(self):
        cdef Any res = dereference(self._ptr).VtxOffset
        return res
    @vtx_offset.setter
    def vtx_offset(self, value: int):
        dereference(self._ptr).VtxOffset = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def idx_offset(self):
        cdef Any res = dereference(self._ptr).IdxOffset
        return res
    @idx_offset.setter
    def idx_offset(self, value: int):
        dereference(self._ptr).IdxOffset = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(int)
    @property
    def elem_count(self):
        cdef int res = dereference(self._ptr).ElemCount
        return res
    @elem_count.setter
    def elem_count(self, value: int):
        # dereference(self._ptr).ElemCount = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def user_callback_data(self):
        cdef Any res = dereference(self._ptr).UserCallbackData
        return res
    @user_callback_data.setter
    def user_callback_data(self, value: Any):
        dereference(self._ptr).UserCallbackData = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawCmd)
    @staticmethod
    def draw_cmd():
        """
        Also ensure our padding fields are zeroed
        """
        cdef ccimgui.ImDrawCmd* _ptr = ccimgui.ImDrawCmd_ImDrawCmd()
        if _ptr is NULL:
            raise MemoryError
        return ImDrawCmd.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImDrawCmd):
        ccimgui.ImDrawCmd_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def get_tex_id(self: ImDrawCmd):
        cdef ccimgui.ImTextureID res = ccimgui.ImDrawCmd_GetTexID(self._ptr)
        return res
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawCmdHeader:
    cdef ccimgui.ImDrawCmdHeader* _ptr
    
    @staticmethod
    cdef ImDrawCmdHeader from_ptr(ccimgui.ImDrawCmdHeader* _ptr):
        cdef ImDrawCmdHeader wrapper = ImDrawCmdHeader.__new__(ImDrawCmdHeader)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(tuple)
    @property
    def clip_rect(self):
        return _cast_ImVec4_tuple(dereference(self._ptr).ClipRect)
    @clip_rect.setter
    def clip_rect(self, value: tuple):
        # dereference(self._ptr).ClipRect = _cast_tuple_ImVec4(value)
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def texture_id(self):
        cdef ccimgui.ImTextureID res = dereference(self._ptr).TextureId
        return res
    @texture_id.setter
    def texture_id(self, value: Any):
        dereference(self._ptr).TextureId = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def vtx_offset(self):
        cdef Any res = dereference(self._ptr).VtxOffset
        return res
    @vtx_offset.setter
    def vtx_offset(self, value: int):
        dereference(self._ptr).VtxOffset = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawData:
    cdef ccimgui.ImDrawData* _ptr
    
    @staticmethod
    cdef ImDrawData from_ptr(ccimgui.ImDrawData* _ptr):
        cdef ImDrawData wrapper = ImDrawData.__new__(ImDrawData)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def valid(self):
        cdef Any res = dereference(self._ptr).Valid
        return res
    @valid.setter
    def valid(self, value: Any):
        dereference(self._ptr).Valid = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def cmd_lists_count(self):
        cdef int res = dereference(self._ptr).CmdListsCount
        return res
    @cmd_lists_count.setter
    def cmd_lists_count(self, value: int):
        dereference(self._ptr).CmdListsCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def total_idx_count(self):
        cdef int res = dereference(self._ptr).TotalIdxCount
        return res
    @total_idx_count.setter
    def total_idx_count(self, value: int):
        dereference(self._ptr).TotalIdxCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def total_vtx_count(self):
        cdef int res = dereference(self._ptr).TotalVtxCount
        return res
    @total_vtx_count.setter
    def total_vtx_count(self, value: int):
        dereference(self._ptr).TotalVtxCount = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(List[ImDrawList])
    @property
    def cmd_lists(self):
        return [
            ImDrawList.from_ptr(dereference(self._ptr).CmdLists[idx])
            for idx in range(dereference(self._ptr).CmdListsCount)
        ]
    @cmd_lists.setter
    def cmd_lists(self, value: ImDrawList):
        # dereference(self._ptr).CmdLists = value._ptr
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def display_pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).DisplayPos
        return ImVec2.from_ptr(res)
    @display_pos.setter
    def display_pos(self, value: tuple):
        dereference(self._ptr).DisplayPos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def display_size(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).DisplaySize
        return ImVec2.from_ptr(res)
    @display_size.setter
    def display_size(self, value: tuple):
        dereference(self._ptr).DisplaySize = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def framebuffer_scale(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).FramebufferScale
        return ImVec2.from_ptr(res)
    @framebuffer_scale.setter
    def framebuffer_scale(self, value: tuple):
        dereference(self._ptr).FramebufferScale = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiViewport)
    @property
    def owner_viewport(self):
        cdef ccimgui.ImGuiViewport res = dereference(self._ptr).OwnerViewport
        return ImGuiViewport.from_ptr(res)
    @owner_viewport.setter
    def owner_viewport(self, value: ImGuiViewport):
        dereference(self._ptr).OwnerViewport = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawData)
    @staticmethod
    def draw_data():
        cdef ccimgui.ImDrawData* _ptr = ccimgui.ImDrawData_ImDrawData()
        if _ptr is NULL:
            raise MemoryError
        return ImDrawData.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImDrawData):
        ccimgui.ImDrawData_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImDrawData):
        """
        The imdrawlist are owned by imguicontext!
        """
        ccimgui.ImDrawData_Clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def de_index_all_buffers(self: ImDrawData):
        """
        Helper to convert all buffers from indexed to non-indexed, in
        case you cannot render indexed. note: this is slow and most
        likely a waste of resources. always prefer indexed rendering!
        """
        ccimgui.ImDrawData_DeIndexAllBuffers(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def scale_clip_rects(self: ImDrawData, fb_scale):
        """
        Helper to scale the cliprect field of each imdrawcmd. use if
        your final output buffer is at a different scale than dear imgui
        expects, or if there is a difference between your window resolution
        and framebuffer resolution.
        """
        ccimgui.ImDrawData_ScaleClipRects(self._ptr, _cast_tuple_ImVec2(fb_scale))
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawListSplitter:
    cdef ccimgui.ImDrawListSplitter* _ptr
    
    @staticmethod
    cdef ImDrawListSplitter from_ptr(ccimgui.ImDrawListSplitter* _ptr):
        cdef ImDrawListSplitter wrapper = ImDrawListSplitter.__new__(ImDrawListSplitter)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def _current(self):
        cdef int res = dereference(self._ptr)._Current
        return res
    @_current.setter
    def _current(self, value: int):
        dereference(self._ptr)._Current = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def _count(self):
        cdef int res = dereference(self._ptr)._Count
        return res
    @_count.setter
    def _count(self, value: int):
        dereference(self._ptr)._Count = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImDrawChannel)
    @property
    def _channels(self):
        cdef ccimgui.ImVector_ImDrawChannel res = dereference(self._ptr)._Channels
        return ImVector_ImDrawChannel.from_ptr(res)
    @_channels.setter
    def _channels(self, value: ImVector_ImDrawChannel):
        dereference(self._ptr)._Channels = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawListSplitter)
    @staticmethod
    def draw_list_splitter():
        cdef ccimgui.ImDrawListSplitter* _ptr = ccimgui.ImDrawListSplitter_ImDrawListSplitter()
        if _ptr is NULL:
            raise MemoryError
        return ImDrawListSplitter.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImDrawListSplitter):
        ccimgui.ImDrawListSplitter_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImDrawListSplitter):
        """
        Do not clear channels[] so our allocations are reused next frame
        """
        ccimgui.ImDrawListSplitter_Clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear_free_memory(self: ImDrawListSplitter):
        ccimgui.ImDrawListSplitter_ClearFreeMemory(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def merge(self: ImDrawListSplitter, draw_list: ImDrawList):
        ccimgui.ImDrawListSplitter_Merge(self._ptr, draw_list._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_current_channel(self: ImDrawListSplitter, draw_list: ImDrawList, channel_idx: int):
        ccimgui.ImDrawListSplitter_SetCurrentChannel(self._ptr, draw_list._ptr, channel_idx)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def split(self: ImDrawListSplitter, draw_list: ImDrawList, count: int):
        ccimgui.ImDrawListSplitter_Split(self._ptr, draw_list._ptr, count)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawVert:
    cdef ccimgui.ImDrawVert* _ptr
    
    @staticmethod
    cdef ImDrawVert from_ptr(ccimgui.ImDrawVert* _ptr):
        cdef ImDrawVert wrapper = ImDrawVert.__new__(ImDrawVert)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).pos
        return ImVec2.from_ptr(res)
    @pos.setter
    def pos(self, value: tuple):
        dereference(self._ptr).pos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def uv(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).uv
        return ImVec2.from_ptr(res)
    @uv.setter
    def uv(self, value: tuple):
        dereference(self._ptr).uv = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def col(self):
        cdef ccimgui.ImU32 res = dereference(self._ptr).col
        return res
    @col.setter
    def col(self, value: int):
        dereference(self._ptr).col = value
    # [End Field]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImFont:
    cdef ccimgui.ImFont* _ptr
    
    @staticmethod
    cdef ImFont from_ptr(ccimgui.ImFont* _ptr):
        cdef ImFont wrapper = ImFont.__new__(ImFont)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_float)
    @property
    def index_advancex(self):
        cdef ccimgui.ImVector_float res = dereference(self._ptr).IndexAdvanceX
        return ImVector_float.from_ptr(res)
    @index_advancex.setter
    def index_advancex(self, value: ImVector_float):
        dereference(self._ptr).IndexAdvanceX = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def fallback_advancex(self):
        cdef float res = dereference(self._ptr).FallbackAdvanceX
        return res
    @fallback_advancex.setter
    def fallback_advancex(self, value: float):
        dereference(self._ptr).FallbackAdvanceX = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def font_size(self):
        cdef float res = dereference(self._ptr).FontSize
        return res
    @font_size.setter
    def font_size(self, value: float):
        dereference(self._ptr).FontSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImWchar)
    @property
    def index_lookup(self):
        cdef ccimgui.ImVector_ImWchar res = dereference(self._ptr).IndexLookup
        return ImVector_ImWchar.from_ptr(res)
    @index_lookup.setter
    def index_lookup(self, value: ImVector_ImWchar):
        dereference(self._ptr).IndexLookup = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImFontGlyph)
    @property
    def glyphs(self):
        cdef ccimgui.ImVector_ImFontGlyph res = dereference(self._ptr).Glyphs
        return ImVector_ImFontGlyph.from_ptr(res)
    @glyphs.setter
    def glyphs(self, value: ImVector_ImFontGlyph):
        dereference(self._ptr).Glyphs = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontGlyph)
    @property
    def fallback_glyph(self):
        cdef ccimgui.ImFontGlyph res = dereference(self._ptr).FallbackGlyph
        return ImFontGlyph.from_ptr(res)
    @fallback_glyph.setter
    def fallback_glyph(self, value: ImFontGlyph):
        dereference(self._ptr).FallbackGlyph = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontAtlas)
    @property
    def container_atlas(self):
        cdef ccimgui.ImFontAtlas res = dereference(self._ptr).ContainerAtlas
        return ImFontAtlas.from_ptr(res)
    @container_atlas.setter
    def container_atlas(self, value: ImFontAtlas):
        dereference(self._ptr).ContainerAtlas = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontConfig)
    @property
    def config_data(self):
        cdef ccimgui.ImFontConfig res = dereference(self._ptr).ConfigData
        return ImFontConfig.from_ptr(res)
    @config_data.setter
    def config_data(self, value: ImFontConfig):
        dereference(self._ptr).ConfigData = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def config_data_count(self):
        cdef Any res = dereference(self._ptr).ConfigDataCount
        return res
    @config_data_count.setter
    def config_data_count(self, value: int):
        dereference(self._ptr).ConfigDataCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def fallback_char(self):
        cdef ccimgui.ImWchar res = dereference(self._ptr).FallbackChar
        return res
    @fallback_char.setter
    def fallback_char(self, value: int):
        dereference(self._ptr).FallbackChar = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def ellipsis_char(self):
        cdef ccimgui.ImWchar res = dereference(self._ptr).EllipsisChar
        return res
    @ellipsis_char.setter
    def ellipsis_char(self, value: int):
        dereference(self._ptr).EllipsisChar = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def ellipsis_char_count(self):
        cdef Any res = dereference(self._ptr).EllipsisCharCount
        return res
    @ellipsis_char_count.setter
    def ellipsis_char_count(self, value: int):
        dereference(self._ptr).EllipsisCharCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def ellipsis_width(self):
        cdef float res = dereference(self._ptr).EllipsisWidth
        return res
    @ellipsis_width.setter
    def ellipsis_width(self, value: float):
        dereference(self._ptr).EllipsisWidth = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def ellipsis_char_step(self):
        cdef float res = dereference(self._ptr).EllipsisCharStep
        return res
    @ellipsis_char_step.setter
    def ellipsis_char_step(self, value: float):
        dereference(self._ptr).EllipsisCharStep = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def dirty_lookup_tables(self):
        cdef Any res = dereference(self._ptr).DirtyLookupTables
        return res
    @dirty_lookup_tables.setter
    def dirty_lookup_tables(self, value: Any):
        dereference(self._ptr).DirtyLookupTables = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def scale(self):
        cdef float res = dereference(self._ptr).Scale
        return res
    @scale.setter
    def scale(self, value: float):
        dereference(self._ptr).Scale = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def ascent(self):
        cdef float res = dereference(self._ptr).Ascent
        return res
    @ascent.setter
    def ascent(self, value: float):
        dereference(self._ptr).Ascent = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def descent(self):
        cdef float res = dereference(self._ptr).Descent
        return res
    @descent.setter
    def descent(self, value: float):
        dereference(self._ptr).Descent = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def metrics_total_surface(self):
        cdef int res = dereference(self._ptr).MetricsTotalSurface
        return res
    @metrics_total_surface.setter
    def metrics_total_surface(self, value: int):
        dereference(self._ptr).MetricsTotalSurface = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def used_4k_pages_map(self):
        cdef ccimgui.ImU8 res = dereference(self._ptr).Used4kPagesMap
        return res
    @used_4k_pages_map.setter
    def used_4k_pages_map(self, value: int):
        dereference(self._ptr).Used4kPagesMap = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    @staticmethod
    def font():
        cdef ccimgui.ImFont* _ptr = ccimgui.ImFont_ImFont()
        if _ptr is NULL:
            raise MemoryError
        return ImFont.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImFont):
        ccimgui.ImFont_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_glyph(self: ImFont, src_cfg: ImFontConfig, c: int, x0: float, y0: float, x1: float, y1: float, u0: float, v0: float, u1: float, v1: float, advance_x: float):
        ccimgui.ImFont_AddGlyph(
            self._ptr,
            src_cfg._ptr,
            c,
            x0,
            y0,
            x1,
            y1,
            u0,
            v0,
            u1,
            v1,
            advance_x
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_remap_char(self: ImFont, dst: int, src: int, overwrite_dst: Any=True):
        """
        Makes 'dst' character/glyph points to 'src' character/glyph.
        currently needs to be called after fonts have been built.
        """
        ccimgui.ImFont_AddRemapChar(self._ptr, dst, src, overwrite_dst)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def build_lookup_table(self: ImFont):
        ccimgui.ImFont_BuildLookupTable(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def calc_text_sizea(pOut: ImVec2, self: ImFont, size: float, max_width: float, wrap_width: float, text_begin: str, text_end: str=None, remaining: Any=None):
        """
        Utf8
        """
        ccimgui.ImFont_CalcTextSizeA(
            pOut._ptr,
            self._ptr,
            size,
            max_width,
            wrap_width,
            _bytes(text_begin),
            _bytes(text_end),
            remaining
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    def calc_word_wrap_positiona(self: ImFont, scale: float, text: str, text_end: str, wrap_width: float):
        cdef const char* res = ccimgui.ImFont_CalcWordWrapPositionA(self._ptr, scale, _bytes(text), _bytes(text_end), wrap_width)
        return _bytes(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear_output_data(self: ImFont):
        ccimgui.ImFont_ClearOutputData(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontGlyph)
    def find_glyph(self: ImFont, c: int):
        cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyph(self._ptr, c)
        return ImFontGlyph.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontGlyph)
    def find_glyph_no_fallback(self: ImFont, c: int):
        cdef ccimgui.ImFontGlyph* res = ccimgui.ImFont_FindGlyphNoFallback(self._ptr, c)
        return ImFontGlyph.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    def get_char_advance(self: ImFont, c: int):
        cdef float res = ccimgui.ImFont_GetCharAdvance(self._ptr, c)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    def get_debug_name(self: ImFont):
        cdef const char* res = ccimgui.ImFont_GetDebugName(self._ptr)
        return _bytes(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def grow_index(self: ImFont, new_size: int):
        ccimgui.ImFont_GrowIndex(self._ptr, new_size)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_glyph_range_unused(self: ImFont, c_begin: int, c_last: int):
        cdef ccimgui.bool res = ccimgui.ImFont_IsGlyphRangeUnused(self._ptr, c_begin, c_last)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_loaded(self: ImFont):
        cdef ccimgui.bool res = ccimgui.ImFont_IsLoaded(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def render_char(self: ImFont, draw_list: ImDrawList, size: float, pos: tuple, col: int, c: int):
        ccimgui.ImFont_RenderChar(
            self._ptr,
            draw_list._ptr,
            size,
            _cast_tuple_ImVec2(pos),
            col,
            c
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def render_text(self: ImFont, draw_list: ImDrawList, size: float, pos: tuple, col: int, clip_rect: tuple, text_begin: str, text_end: str, wrap_width: float=0.0, cpu_fine_clip: Any=False):
        ccimgui.ImFont_RenderText(
            self._ptr,
            draw_list._ptr,
            size,
            _cast_tuple_ImVec2(pos),
            col,
            _cast_tuple_ImVec4(clip_rect),
            _bytes(text_begin),
            _bytes(text_end),
            wrap_width,
            cpu_fine_clip
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_glyph_visible(self: ImFont, c: int, visible: Any):
        ccimgui.ImFont_SetGlyphVisible(self._ptr, c, visible)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImFontAtlas:
    cdef ccimgui.ImFontAtlas* _ptr
    
    @staticmethod
    cdef ImFontAtlas from_ptr(ccimgui.ImFontAtlas* _ptr):
        cdef ImFontAtlas wrapper = ImFontAtlas.__new__(ImFontAtlas)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def flags(self):
        cdef ccimgui.ImFontAtlasFlags res = dereference(self._ptr).Flags
        return res
    @flags.setter
    def flags(self, value: int):
        dereference(self._ptr).Flags = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(object)
    @property
    def tex_id(self):
        cdef object res = <object>dereference(self._ptr).TexID
        return res
    @tex_id.setter
    def tex_id(self, value: Any):
        dereference(self._ptr).TexID = <void*>value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def tex_desired_width(self):
        cdef int res = dereference(self._ptr).TexDesiredWidth
        return res
    @tex_desired_width.setter
    def tex_desired_width(self, value: int):
        dereference(self._ptr).TexDesiredWidth = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def tex_glyph_padding(self):
        cdef int res = dereference(self._ptr).TexGlyphPadding
        return res
    @tex_glyph_padding.setter
    def tex_glyph_padding(self, value: int):
        dereference(self._ptr).TexGlyphPadding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def locked(self):
        cdef Any res = dereference(self._ptr).Locked
        return res
    @locked.setter
    def locked(self, value: Any):
        dereference(self._ptr).Locked = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def user_data(self):
        cdef Any res = dereference(self._ptr).UserData
        return res
    @user_data.setter
    def user_data(self, value: Any):
        dereference(self._ptr).UserData = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def tex_ready(self):
        cdef Any res = dereference(self._ptr).TexReady
        return res
    @tex_ready.setter
    def tex_ready(self, value: Any):
        dereference(self._ptr).TexReady = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def tex_pixels_use_colors(self):
        cdef Any res = dereference(self._ptr).TexPixelsUseColors
        return res
    @tex_pixels_use_colors.setter
    def tex_pixels_use_colors(self, value: Any):
        dereference(self._ptr).TexPixelsUseColors = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def tex_pixels_alpha8(self):
        cdef Any res = dereference(self._ptr).TexPixelsAlpha8
        return res
    @tex_pixels_alpha8.setter
    def tex_pixels_alpha8(self, value: str):
        dereference(self._ptr).TexPixelsAlpha8 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def tex_pixels_rgba32(self):
        cdef Any res = dereference(self._ptr).TexPixelsRGBA32
        return res
    @tex_pixels_rgba32.setter
    def tex_pixels_rgba32(self, value: int):
        dereference(self._ptr).TexPixelsRGBA32 = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def tex_width(self):
        cdef int res = dereference(self._ptr).TexWidth
        return res
    @tex_width.setter
    def tex_width(self, value: int):
        dereference(self._ptr).TexWidth = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def tex_height(self):
        cdef int res = dereference(self._ptr).TexHeight
        return res
    @tex_height.setter
    def tex_height(self, value: int):
        dereference(self._ptr).TexHeight = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def tex_uv_scale(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).TexUvScale
        return ImVec2.from_ptr(res)
    @tex_uv_scale.setter
    def tex_uv_scale(self, value: tuple):
        dereference(self._ptr).TexUvScale = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def tex_uv_white_pixel(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).TexUvWhitePixel
        return ImVec2.from_ptr(res)
    @tex_uv_white_pixel.setter
    def tex_uv_white_pixel(self, value: tuple):
        dereference(self._ptr).TexUvWhitePixel = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImFontPtr)
    @property
    def fonts(self):
        cdef ccimgui.ImVector_ImFontPtr res = dereference(self._ptr).Fonts
        return ImVector_ImFontPtr.from_ptr(res)
    @fonts.setter
    def fonts(self, value: ImVector_ImFontPtr):
        dereference(self._ptr).Fonts = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImFontAtlasCustomRect)
    @property
    def custom_rects(self):
        cdef ccimgui.ImVector_ImFontAtlasCustomRect res = dereference(self._ptr).CustomRects
        return ImVector_ImFontAtlasCustomRect.from_ptr(res)
    @custom_rects.setter
    def custom_rects(self, value: ImVector_ImFontAtlasCustomRect):
        dereference(self._ptr).CustomRects = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImFontConfig)
    @property
    def config_data(self):
        cdef ccimgui.ImVector_ImFontConfig res = dereference(self._ptr).ConfigData
        return ImVector_ImFontConfig.from_ptr(res)
    @config_data.setter
    def config_data(self, value: ImVector_ImFontConfig):
        dereference(self._ptr).ConfigData = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def tex_uv_lines(self):
        cdef ccimgui.ImVec4 res = dereference(self._ptr).TexUvLines
        return ImVec4.from_ptr(res)
    @tex_uv_lines.setter
    def tex_uv_lines(self, value: tuple):
        dereference(self._ptr).TexUvLines = _cast_tuple_ImVec4(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontBuilderIO)
    @property
    def font_builder_io(self):
        cdef ccimgui.ImFontBuilderIO res = dereference(self._ptr).FontBuilderIO
        return ImFontBuilderIO.from_ptr(res)
    @font_builder_io.setter
    def font_builder_io(self, value: ImFontBuilderIO):
        dereference(self._ptr).FontBuilderIO = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def font_builder_flags(self):
        cdef Any res = dereference(self._ptr).FontBuilderFlags
        return res
    @font_builder_flags.setter
    def font_builder_flags(self, value: int):
        dereference(self._ptr).FontBuilderFlags = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def pack_id_mouse_cursors(self):
        cdef int res = dereference(self._ptr).PackIdMouseCursors
        return res
    @pack_id_mouse_cursors.setter
    def pack_id_mouse_cursors(self, value: int):
        dereference(self._ptr).PackIdMouseCursors = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def pack_id_lines(self):
        cdef int res = dereference(self._ptr).PackIdLines
        return res
    @pack_id_lines.setter
    def pack_id_lines(self, value: int):
        dereference(self._ptr).PackIdLines = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontAtlas)
    @staticmethod
    def font_atlas():
        cdef ccimgui.ImFontAtlas* _ptr = ccimgui.ImFontAtlas_ImFontAtlas()
        if _ptr is NULL:
            raise MemoryError
        return ImFontAtlas.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def destroy(self: ImFontAtlas):
        ccimgui.ImFontAtlas_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def add_custom_rect_font_glyph(self: ImFontAtlas, font: ImFont, id_: int, width: int, height: int, advance_x: float, offset: tuple=(0, 0)):
        cdef int res = ccimgui.ImFontAtlas_AddCustomRectFontGlyph(
            self._ptr,
            font._ptr,
            id_,
            width,
            height,
            advance_x,
            _cast_tuple_ImVec2(offset)
        )
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def add_custom_rect_regular(self: ImFontAtlas, width: int, height: int):
        cdef int res = ccimgui.ImFontAtlas_AddCustomRectRegular(self._ptr, width, height)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    def add_font(self: ImFontAtlas, font_cfg: ImFontConfig):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFont(self._ptr, font_cfg._ptr)
        return ImFont.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    def add_font_default(self: ImFontAtlas, font_cfg: ImFontConfig=None):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontDefault(self._ptr, font_cfg._ptr)
        return ImFont.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    def add_font_from_file_ttf(self: ImFontAtlas, filename: str, size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: int=None):
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromFileTTF(self._ptr, _bytes(filename), size_pixels, font_cfg._ptr, glyph_ranges)
        return ImFont.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    def add_font_from_memory_compressed_base_85ttf(self: ImFontAtlas, compressed_font_data_base85: str, size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: int=None):
        """
        'compressed_font_data_base85' still owned by caller. compress
        with binary_to_compressed_c.cpp with -base85 parameter.
        """
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self._ptr, _bytes(compressed_font_data_base85), size_pixels, font_cfg._ptr, glyph_ranges)
        return ImFont.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    def add_font_from_memory_compressed_ttf(self: ImFontAtlas, compressed_font_data: Any, compressed_font_size: int, size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: int=None):
        """
        'compressed_font_data' still owned by caller. compress with binary_to_compressed_c.cpp.
        """
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryCompressedTTF(
            self._ptr,
            compressed_font_data,
            compressed_font_size,
            size_pixels,
            font_cfg._ptr,
            glyph_ranges
        )
        return ImFont.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    def add_font_from_memory_ttf(self: ImFontAtlas, font_data: Any, font_size: int, size_pixels: float, font_cfg: ImFontConfig=None, glyph_ranges: int=None):
        """
        Note: transfer ownership of 'ttf_data' to imfontatlas! will be
        deleted after destruction of the atlas. set font_cfg->fontdataownedbyatlas=false
        to keep ownership of your data and it won't be freed.
        """
        cdef ccimgui.ImFont* res = ccimgui.ImFontAtlas_AddFontFromMemoryTTF(
            self._ptr,
            font_data,
            font_size,
            size_pixels,
            font_cfg._ptr,
            glyph_ranges
        )
        return ImFont.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def build(self: ImFontAtlas):
        """
        Build pixels data. this is called automatically for you by the
        gettexdata*** functions.
        """
        cdef ccimgui.bool res = ccimgui.ImFontAtlas_Build(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def calc_custom_rect_uv(self: ImFontAtlas, rect: ImFontAtlasCustomRect, out_uv_min: ImVec2, out_uv_max: ImVec2):
        ccimgui.ImFontAtlas_CalcCustomRectUV(self._ptr, rect._ptr, out_uv_min._ptr, out_uv_max._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImFontAtlas):
        """
        Clear all input and output.
        """
        ccimgui.ImFontAtlas_Clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear_fonts(self: ImFontAtlas):
        """
        Clear output font data (glyphs storage, uv coordinates).
        """
        ccimgui.ImFontAtlas_ClearFonts(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear_input_data(self: ImFontAtlas):
        """
        Clear input data (all imfontconfig structures including sizes,
        ttf data, glyph ranges, etc.) = all the data used to build the
        texture and fonts.
        """
        ccimgui.ImFontAtlas_ClearInputData(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def clear_tex_data(self: ImFontAtlas):
        """
        Clear output texture data (cpu side). saves ram once the texture
        has been copied to graphics memory.
        """
        ccimgui.ImFontAtlas_ClearTexData(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontAtlasCustomRect)
    def get_custom_rect_by_index(self: ImFontAtlas, index: int):
        cdef ccimgui.ImFontAtlasCustomRect* res = ccimgui.ImFontAtlas_GetCustomRectByIndex(self._ptr, index)
        return ImFontAtlasCustomRect.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_chinese_full(self: ImFontAtlas):
        """
        Default + half-width + japanese hiragana/katakana + full set
        of about 21000 cjk unified ideographs
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseFull(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_chinese_simplified_common(self: ImFontAtlas):
        """
        Default + half-width + japanese hiragana/katakana + set of 2500
        cjk unified ideographs for common simplified chinese
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_cyrillic(self: ImFontAtlas):
        """
        Default + about 400 cyrillic characters
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesCyrillic(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_default(self: ImFontAtlas):
        """
        Basic latin, extended latin
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesDefault(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_greek(self: ImFontAtlas):
        """
        Default + greek and coptic
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesGreek(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_japanese(self: ImFontAtlas):
        """
        Default + hiragana, katakana, half-width, selection of 2999 ideographs
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesJapanese(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_korean(self: ImFontAtlas):
        """
        Default + korean characters
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesKorean(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_thai(self: ImFontAtlas):
        """
        Default + thai characters
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesThai(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_glyph_ranges_vietnamese(self: ImFontAtlas):
        """
        Default + vietnamese characters
        """
        cdef ccimgui.ImWchar* res = ccimgui.ImFontAtlas_GetGlyphRangesVietnamese(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def get_mouse_cursor_tex_data(self: ImFontAtlas, cursor: int, out_offset: ImVec2, out_size: ImVec2, out_uv_border0: tuple, out_uv_border1: tuple, out_uv_fill0: tuple, out_uv_fill1: tuple):
        cdef ccimgui.ImVec2[2] io_ImVec2_out_uv_border = [out_uv_border0, out_uv_border1]
        cdef ccimgui.ImVec2[2] io_ImVec2_out_uv_fill = [out_uv_fill0, out_uv_fill1]
        cdef ccimgui.bool res = ccimgui.ImFontAtlas_GetMouseCursorTexData(
            self._ptr,
            cursor,
            out_offset._ptr,
            out_size._ptr,
            _cast_tuple_ImVec2(<ccimgui.ImVec2*>&io_ImVec2_out_uv_border),
            _cast_tuple_ImVec2(<ccimgui.ImVec2*>&io_ImVec2_out_uv_fill)
        )
        return res
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def get_tex_data_as_alpha8(self: ImFontAtlas):
        """
        1 byte per-pixel
        """
        # ccimgui.ImFontAtlas_GetTexDataAsAlpha8(self._ptr, out_pixels, out_width, out_height, out_bytes_per_pixel)
        cdef unsigned char* pixels
        cdef int width
        cdef int height
        
        ccimgui.ImFontAtlas_GetTexDataAsAlpha8(self._ptr, &pixels, &width, &height, NULL)
        return width, height, bytes(pixels[:width*height])
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def get_tex_data_as_rgba32(self: ImFontAtlas):
        """
        4 bytes-per-pixel
        """
        # ccimgui.ImFontAtlas_GetTexDataAsRGBA32(self._ptr, out_pixels, out_width, out_height, out_bytes_per_pixel)
        cdef unsigned char* pixels
        cdef int width
        cdef int height
        
        ccimgui.ImFontAtlas_GetTexDataAsRGBA32(self._ptr, &pixels, &width, &height, NULL)
        return width, height, bytes(pixels[:width*height*4])
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_built(self: ImFontAtlas):
        """
        Bit ambiguous: used to detect when user didn't build texture
        but effectively we should check texid != 0 except that would
        be backend dependent...
        """
        cdef ccimgui.bool res = ccimgui.ImFontAtlas_IsBuilt(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_tex_id(self: ImFontAtlas, id_: Any):
        ccimgui.ImFontAtlas_SetTexID(self._ptr, id_)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImFontAtlasCustomRect:
    cdef ccimgui.ImFontAtlasCustomRect* _ptr
    
    @staticmethod
    cdef ImFontAtlasCustomRect from_ptr(ccimgui.ImFontAtlasCustomRect* _ptr):
        cdef ImFontAtlasCustomRect wrapper = ImFontAtlasCustomRect.__new__(ImFontAtlasCustomRect)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def width(self):
        cdef Any res = dereference(self._ptr).Width
        return res
    @width.setter
    def width(self, value: int):
        dereference(self._ptr).Width = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def height(self):
        cdef Any res = dereference(self._ptr).Height
        return res
    @height.setter
    def height(self, value: int):
        dereference(self._ptr).Height = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def x(self):
        cdef Any res = dereference(self._ptr).X
        return res
    @x.setter
    def x(self, value: int):
        dereference(self._ptr).X = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def y(self):
        cdef Any res = dereference(self._ptr).Y
        return res
    @y.setter
    def y(self, value: int):
        dereference(self._ptr).Y = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def glyph_id(self):
        cdef Any res = dereference(self._ptr).GlyphID
        return res
    @glyph_id.setter
    def glyph_id(self, value: int):
        dereference(self._ptr).GlyphID = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def glyph_advancex(self):
        cdef float res = dereference(self._ptr).GlyphAdvanceX
        return res
    @glyph_advancex.setter
    def glyph_advancex(self, value: float):
        dereference(self._ptr).GlyphAdvanceX = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def glyph_offset(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).GlyphOffset
        return ImVec2.from_ptr(res)
    @glyph_offset.setter
    def glyph_offset(self, value: tuple):
        dereference(self._ptr).GlyphOffset = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    @property
    def font(self):
        cdef ccimgui.ImFont res = dereference(self._ptr).Font
        return ImFont.from_ptr(res)
    @font.setter
    def font(self, value: ImFont):
        dereference(self._ptr).Font = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontAtlasCustomRect)
    @staticmethod
    def font_atlas_custom_rect():
        cdef ccimgui.ImFontAtlasCustomRect* _ptr = ccimgui.ImFontAtlasCustomRect_ImFontAtlasCustomRect()
        if _ptr is NULL:
            raise MemoryError
        return ImFontAtlasCustomRect.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImFontAtlasCustomRect):
        ccimgui.ImFontAtlasCustomRect_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_packed(self: ImFontAtlasCustomRect):
        cdef ccimgui.bool res = ccimgui.ImFontAtlasCustomRect_IsPacked(self._ptr)
        return res
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImFontConfig:
    cdef ccimgui.ImFontConfig* _ptr
    
    @staticmethod
    cdef ImFontConfig from_ptr(ccimgui.ImFontConfig* _ptr):
        cdef ImFontConfig wrapper = ImFontConfig.__new__(ImFontConfig)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def font_data(self):
        cdef Any res = dereference(self._ptr).FontData
        return res
    @font_data.setter
    def font_data(self, value: Any):
        dereference(self._ptr).FontData = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def font_data_size(self):
        cdef int res = dereference(self._ptr).FontDataSize
        return res
    @font_data_size.setter
    def font_data_size(self, value: int):
        dereference(self._ptr).FontDataSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def font_data_owned_by_atlas(self):
        cdef Any res = dereference(self._ptr).FontDataOwnedByAtlas
        return res
    @font_data_owned_by_atlas.setter
    def font_data_owned_by_atlas(self, value: Any):
        dereference(self._ptr).FontDataOwnedByAtlas = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def font_no(self):
        cdef int res = dereference(self._ptr).FontNo
        return res
    @font_no.setter
    def font_no(self, value: int):
        dereference(self._ptr).FontNo = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def size_pixels(self):
        cdef float res = dereference(self._ptr).SizePixels
        return res
    @size_pixels.setter
    def size_pixels(self, value: float):
        dereference(self._ptr).SizePixels = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def oversampleh(self):
        cdef int res = dereference(self._ptr).OversampleH
        return res
    @oversampleh.setter
    def oversampleh(self, value: int):
        dereference(self._ptr).OversampleH = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def oversamplev(self):
        cdef int res = dereference(self._ptr).OversampleV
        return res
    @oversamplev.setter
    def oversamplev(self, value: int):
        dereference(self._ptr).OversampleV = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def pixel_snaph(self):
        cdef Any res = dereference(self._ptr).PixelSnapH
        return res
    @pixel_snaph.setter
    def pixel_snaph(self, value: Any):
        dereference(self._ptr).PixelSnapH = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def glyph_extra_spacing(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).GlyphExtraSpacing
        return ImVec2.from_ptr(res)
    @glyph_extra_spacing.setter
    def glyph_extra_spacing(self, value: tuple):
        dereference(self._ptr).GlyphExtraSpacing = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def glyph_offset(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).GlyphOffset
        return ImVec2.from_ptr(res)
    @glyph_offset.setter
    def glyph_offset(self, value: tuple):
        dereference(self._ptr).GlyphOffset = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def glyph_ranges(self):
        cdef Any res = dereference(self._ptr).GlyphRanges
        return res
    @glyph_ranges.setter
    def glyph_ranges(self, value: int):
        dereference(self._ptr).GlyphRanges = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def glyph_min_advancex(self):
        cdef float res = dereference(self._ptr).GlyphMinAdvanceX
        return res
    @glyph_min_advancex.setter
    def glyph_min_advancex(self, value: float):
        dereference(self._ptr).GlyphMinAdvanceX = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def glyph_max_advancex(self):
        cdef float res = dereference(self._ptr).GlyphMaxAdvanceX
        return res
    @glyph_max_advancex.setter
    def glyph_max_advancex(self, value: float):
        dereference(self._ptr).GlyphMaxAdvanceX = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def merge_mode(self):
        cdef Any res = dereference(self._ptr).MergeMode
        return res
    @merge_mode.setter
    def merge_mode(self, value: Any):
        dereference(self._ptr).MergeMode = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def font_builder_flags(self):
        cdef Any res = dereference(self._ptr).FontBuilderFlags
        return res
    @font_builder_flags.setter
    def font_builder_flags(self, value: int):
        dereference(self._ptr).FontBuilderFlags = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def rasterizer_multiply(self):
        cdef float res = dereference(self._ptr).RasterizerMultiply
        return res
    @rasterizer_multiply.setter
    def rasterizer_multiply(self, value: float):
        dereference(self._ptr).RasterizerMultiply = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def ellipsis_char(self):
        cdef ccimgui.ImWchar res = dereference(self._ptr).EllipsisChar
        return res
    @ellipsis_char.setter
    def ellipsis_char(self, value: int):
        dereference(self._ptr).EllipsisChar = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def name(self):
        cdef Any res = dereference(self._ptr).Name
        return res
    @name.setter
    def name(self, value: int):
        dereference(self._ptr).Name = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    @property
    def dst_font(self):
        cdef ccimgui.ImFont res = dereference(self._ptr).DstFont
        return ImFont.from_ptr(res)
    @dst_font.setter
    def dst_font(self, value: ImFont):
        dereference(self._ptr).DstFont = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontConfig)
    @staticmethod
    def font_config():
        cdef ccimgui.ImFontConfig* _ptr = ccimgui.ImFontConfig_ImFontConfig()
        if _ptr is NULL:
            raise MemoryError
        return ImFontConfig.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImFontConfig):
        ccimgui.ImFontConfig_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImFontGlyphRangesBuilder:
    cdef ccimgui.ImFontGlyphRangesBuilder* _ptr
    
    @staticmethod
    cdef ImFontGlyphRangesBuilder from_ptr(ccimgui.ImFontGlyphRangesBuilder* _ptr):
        cdef ImFontGlyphRangesBuilder wrapper = ImFontGlyphRangesBuilder.__new__(ImFontGlyphRangesBuilder)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImU32)
    @property
    def used_chars(self):
        cdef ccimgui.ImVector_ImU32 res = dereference(self._ptr).UsedChars
        return ImVector_ImU32.from_ptr(res)
    @used_chars.setter
    def used_chars(self, value: ImVector_ImU32):
        dereference(self._ptr).UsedChars = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFontGlyphRangesBuilder)
    @staticmethod
    def font_glyph_ranges_builder():
        cdef ccimgui.ImFontGlyphRangesBuilder* _ptr = ccimgui.ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
        if _ptr is NULL:
            raise MemoryError
        return ImFontGlyphRangesBuilder.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImFontGlyphRangesBuilder):
        ccimgui.ImFontGlyphRangesBuilder_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_char(self: ImFontGlyphRangesBuilder, c: int):
        """
        Add character
        """
        ccimgui.ImFontGlyphRangesBuilder_AddChar(self._ptr, c)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_ranges(self: ImFontGlyphRangesBuilder, ranges: int):
        """
        Add ranges, e.g. builder.addranges(imfontatlas::getglyphrangesdefault())
        to force add all of ascii/latin+ext
        """
        ccimgui.ImFontGlyphRangesBuilder_AddRanges(self._ptr, ranges)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_text(self: ImFontGlyphRangesBuilder, text: str, text_end: str=None):
        """
        Add string (each character of the utf-8 string are added)
        """
        ccimgui.ImFontGlyphRangesBuilder_AddText(self._ptr, _bytes(text), _bytes(text_end))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def build_ranges(self: ImFontGlyphRangesBuilder, out_ranges: ImVector_ImWchar):
        """
        Output new ranges
        """
        ccimgui.ImFontGlyphRangesBuilder_BuildRanges(self._ptr, out_ranges._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImFontGlyphRangesBuilder):
        ccimgui.ImFontGlyphRangesBuilder_Clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def get_bit(self: ImFontGlyphRangesBuilder, n: Any):
        """
        Get bit n in the array
        """
        cdef ccimgui.bool res = ccimgui.ImFontGlyphRangesBuilder_GetBit(self._ptr, n)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_bit(self: ImFontGlyphRangesBuilder, n: Any):
        """
        Set bit n in the array
        """
        ccimgui.ImFontGlyphRangesBuilder_SetBit(self._ptr, n)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(True)
_io_clipboard = {}
cdef class ImGuiIO:
    cdef ccimgui.ImGuiIO* _ptr
    
    @staticmethod
    cdef ImGuiIO from_ptr(ccimgui.ImGuiIO* _ptr):
       cdef ImGuiIO wrapper = ImGuiIO.__new__(ImGuiIO)
       wrapper._ptr = _ptr
       if <uintptr_t>ccimgui.igGetCurrentContext() not in _io_clipboard:
           _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()] = {
               '_get_clipboard_text_fn': None,
               '_set_clipboard_text_fn': None
       }
       return wrapper

    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(int)
    @property
    def config_flags(self):
        cdef ccimgui.ImGuiConfigFlags res = dereference(self._ptr).ConfigFlags
        return res
    @config_flags.setter
    def config_flags(self, value: int):
        dereference(self._ptr).ConfigFlags = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def backend_flags(self):
        cdef ccimgui.ImGuiBackendFlags res = dereference(self._ptr).BackendFlags
        return res
    @backend_flags.setter
    def backend_flags(self, value: int):
        dereference(self._ptr).BackendFlags = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(tuple)
    @property
    def display_size(self):
        return _cast_ImVec2_tuple(dereference(self._ptr).DisplaySize)
    @display_size.setter
    def display_size(self, value: tuple):
        dereference(self._ptr).DisplaySize = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(float)
    @property
    def delta_time(self):
        cdef float res = dereference(self._ptr).DeltaTime
        return res
    @delta_time.setter
    def delta_time(self, value: float):
        dereference(self._ptr).DeltaTime = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def ini_saving_rate(self):
        cdef float res = dereference(self._ptr).IniSavingRate
        return res
    @ini_saving_rate.setter
    def ini_saving_rate(self, value: float):
        dereference(self._ptr).IniSavingRate = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def ini_filename(self):
        cdef str res = dereference(self._ptr).IniFilename
        return res
    @ini_filename.setter
    def ini_filename(self, value: str):
        dereference(self._ptr).IniFilename = _bytes(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def log_filename(self):
        cdef str res = dereference(self._ptr).LogFilename
        return res
    @log_filename.setter
    def log_filename(self, value: str):
        dereference(self._ptr).LogFilename = _bytes(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_double_click_time(self):
        cdef float res = dereference(self._ptr).MouseDoubleClickTime
        return res
    @mouse_double_click_time.setter
    def mouse_double_click_time(self, value: float):
        dereference(self._ptr).MouseDoubleClickTime = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_double_click_max_dist(self):
        cdef float res = dereference(self._ptr).MouseDoubleClickMaxDist
        return res
    @mouse_double_click_max_dist.setter
    def mouse_double_click_max_dist(self, value: float):
        dereference(self._ptr).MouseDoubleClickMaxDist = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_drag_threshold(self):
        cdef float res = dereference(self._ptr).MouseDragThreshold
        return res
    @mouse_drag_threshold.setter
    def mouse_drag_threshold(self, value: float):
        dereference(self._ptr).MouseDragThreshold = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def key_repeat_delay(self):
        cdef float res = dereference(self._ptr).KeyRepeatDelay
        return res
    @key_repeat_delay.setter
    def key_repeat_delay(self, value: float):
        dereference(self._ptr).KeyRepeatDelay = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def key_repeat_rate(self):
        cdef float res = dereference(self._ptr).KeyRepeatRate
        return res
    @key_repeat_rate.setter
    def key_repeat_rate(self, value: float):
        dereference(self._ptr).KeyRepeatRate = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def hover_delay_normal(self):
        cdef float res = dereference(self._ptr).HoverDelayNormal
        return res
    @hover_delay_normal.setter
    def hover_delay_normal(self, value: float):
        dereference(self._ptr).HoverDelayNormal = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def hover_delay_short(self):
        cdef float res = dereference(self._ptr).HoverDelayShort
        return res
    @hover_delay_short.setter
    def hover_delay_short(self, value: float):
        dereference(self._ptr).HoverDelayShort = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def user_data(self):
        cdef Any res = dereference(self._ptr).UserData
        return res
    @user_data.setter
    def user_data(self, value: Any):
        dereference(self._ptr).UserData = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(ImFontAtlas)
    @property
    def fonts(self):
        cdef ccimgui.ImFontAtlas* res = dereference(self._ptr).Fonts
        return ImFontAtlas.from_ptr(res)
    @fonts.setter
    def fonts(self, value: ImFontAtlas):
        # dereference(self._ptr).Fonts = value._ptr
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def font_global_scale(self):
        cdef float res = dereference(self._ptr).FontGlobalScale
        return res
    @font_global_scale.setter
    def font_global_scale(self, value: float):
        dereference(self._ptr).FontGlobalScale = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def font_allow_user_scaling(self):
        cdef Any res = dereference(self._ptr).FontAllowUserScaling
        return res
    @font_allow_user_scaling.setter
    def font_allow_user_scaling(self, value: Any):
        dereference(self._ptr).FontAllowUserScaling = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImFont)
    @property
    def font_default(self):
        cdef ccimgui.ImFont res = dereference(self._ptr).FontDefault
        return ImFont.from_ptr(res)
    @font_default.setter
    def font_default(self, value: ImFont):
        dereference(self._ptr).FontDefault = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(tuple)
    @property
    def display_framebuffer_scale(self):
        return _cast_ImVec2_tuple(dereference(self._ptr).DisplayFramebufferScale)
    @display_framebuffer_scale.setter
    def display_framebuffer_scale(self, value: tuple):
        dereference(self._ptr).DisplayFramebufferScale = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_docking_no_split(self):
        cdef Any res = dereference(self._ptr).ConfigDockingNoSplit
        return res
    @config_docking_no_split.setter
    def config_docking_no_split(self, value: Any):
        dereference(self._ptr).ConfigDockingNoSplit = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_docking_with_shift(self):
        cdef Any res = dereference(self._ptr).ConfigDockingWithShift
        return res
    @config_docking_with_shift.setter
    def config_docking_with_shift(self, value: Any):
        dereference(self._ptr).ConfigDockingWithShift = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_docking_always_tab_bar(self):
        cdef Any res = dereference(self._ptr).ConfigDockingAlwaysTabBar
        return res
    @config_docking_always_tab_bar.setter
    def config_docking_always_tab_bar(self, value: Any):
        dereference(self._ptr).ConfigDockingAlwaysTabBar = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_docking_transparent_payload(self):
        cdef Any res = dereference(self._ptr).ConfigDockingTransparentPayload
        return res
    @config_docking_transparent_payload.setter
    def config_docking_transparent_payload(self, value: Any):
        dereference(self._ptr).ConfigDockingTransparentPayload = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_viewports_no_auto_merge(self):
        cdef Any res = dereference(self._ptr).ConfigViewportsNoAutoMerge
        return res
    @config_viewports_no_auto_merge.setter
    def config_viewports_no_auto_merge(self, value: Any):
        dereference(self._ptr).ConfigViewportsNoAutoMerge = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_viewports_no_task_bar_icon(self):
        cdef Any res = dereference(self._ptr).ConfigViewportsNoTaskBarIcon
        return res
    @config_viewports_no_task_bar_icon.setter
    def config_viewports_no_task_bar_icon(self, value: Any):
        dereference(self._ptr).ConfigViewportsNoTaskBarIcon = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_viewports_no_decoration(self):
        cdef Any res = dereference(self._ptr).ConfigViewportsNoDecoration
        return res
    @config_viewports_no_decoration.setter
    def config_viewports_no_decoration(self, value: Any):
        dereference(self._ptr).ConfigViewportsNoDecoration = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_viewports_no_default_parent(self):
        cdef Any res = dereference(self._ptr).ConfigViewportsNoDefaultParent
        return res
    @config_viewports_no_default_parent.setter
    def config_viewports_no_default_parent(self, value: Any):
        dereference(self._ptr).ConfigViewportsNoDefaultParent = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def mouse_draw_cursor(self):
        cdef Any res = dereference(self._ptr).MouseDrawCursor
        return res
    @mouse_draw_cursor.setter
    def mouse_draw_cursor(self, value: Any):
        dereference(self._ptr).MouseDrawCursor = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_mac_osx_behaviors(self):
        cdef Any res = dereference(self._ptr).ConfigMacOSXBehaviors
        return res
    @config_mac_osx_behaviors.setter
    def config_mac_osx_behaviors(self, value: Any):
        dereference(self._ptr).ConfigMacOSXBehaviors = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_input_trickle_event_queue(self):
        cdef Any res = dereference(self._ptr).ConfigInputTrickleEventQueue
        return res
    @config_input_trickle_event_queue.setter
    def config_input_trickle_event_queue(self, value: Any):
        dereference(self._ptr).ConfigInputTrickleEventQueue = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_input_text_cursor_blink(self):
        cdef Any res = dereference(self._ptr).ConfigInputTextCursorBlink
        return res
    @config_input_text_cursor_blink.setter
    def config_input_text_cursor_blink(self, value: Any):
        dereference(self._ptr).ConfigInputTextCursorBlink = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_input_text_enter_keep_active(self):
        cdef Any res = dereference(self._ptr).ConfigInputTextEnterKeepActive
        return res
    @config_input_text_enter_keep_active.setter
    def config_input_text_enter_keep_active(self, value: Any):
        dereference(self._ptr).ConfigInputTextEnterKeepActive = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_drag_click_to_input_text(self):
        cdef Any res = dereference(self._ptr).ConfigDragClickToInputText
        return res
    @config_drag_click_to_input_text.setter
    def config_drag_click_to_input_text(self, value: Any):
        dereference(self._ptr).ConfigDragClickToInputText = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_windows_resize_from_edges(self):
        cdef Any res = dereference(self._ptr).ConfigWindowsResizeFromEdges
        return res
    @config_windows_resize_from_edges.setter
    def config_windows_resize_from_edges(self, value: Any):
        dereference(self._ptr).ConfigWindowsResizeFromEdges = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_windows_move_from_title_bar_only(self):
        cdef Any res = dereference(self._ptr).ConfigWindowsMoveFromTitleBarOnly
        return res
    @config_windows_move_from_title_bar_only.setter
    def config_windows_move_from_title_bar_only(self, value: Any):
        dereference(self._ptr).ConfigWindowsMoveFromTitleBarOnly = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def config_memory_compact_timer(self):
        cdef float res = dereference(self._ptr).ConfigMemoryCompactTimer
        return res
    @config_memory_compact_timer.setter
    def config_memory_compact_timer(self, value: float):
        dereference(self._ptr).ConfigMemoryCompactTimer = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_debug_begin_return_value_once(self):
        cdef Any res = dereference(self._ptr).ConfigDebugBeginReturnValueOnce
        return res
    @config_debug_begin_return_value_once.setter
    def config_debug_begin_return_value_once(self, value: Any):
        dereference(self._ptr).ConfigDebugBeginReturnValueOnce = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def config_debug_begin_return_value_loop(self):
        cdef Any res = dereference(self._ptr).ConfigDebugBeginReturnValueLoop
        return res
    @config_debug_begin_return_value_loop.setter
    def config_debug_begin_return_value_loop(self, value: Any):
        dereference(self._ptr).ConfigDebugBeginReturnValueLoop = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def backend_platform_name(self):
        cdef str res = dereference(self._ptr).BackendPlatformName
        return res
    @backend_platform_name.setter
    def backend_platform_name(self, value: str):
        dereference(self._ptr).BackendPlatformName = _bytes(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def backend_renderer_name(self):
        cdef str res = dereference(self._ptr).BackendRendererName
        return res
    @backend_renderer_name.setter
    def backend_renderer_name(self, value: str):
        dereference(self._ptr).BackendRendererName = _bytes(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def backend_platform_user_data(self):
        cdef Any res = dereference(self._ptr).BackendPlatformUserData
        return res
    @backend_platform_user_data.setter
    def backend_platform_user_data(self, value: Any):
        dereference(self._ptr).BackendPlatformUserData = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def backend_renderer_user_data(self):
        cdef Any res = dereference(self._ptr).BackendRendererUserData
        return res
    @backend_renderer_user_data.setter
    def backend_renderer_user_data(self, value: Any):
        dereference(self._ptr).BackendRendererUserData = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def backend_language_user_data(self):
        cdef Any res = dereference(self._ptr).BackendLanguageUserData
        return res
    @backend_language_user_data.setter
    def backend_language_user_data(self, value: Any):
        dereference(self._ptr).BackendLanguageUserData = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(Callable)
    @property
    def get_clipboard_text_fn(self):
        return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']
    @get_clipboard_text_fn.setter
    def get_clipboard_text_fn(self, value: Callable):
        if callable(value):
            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn'] = value
            dereference(self._ptr).GetClipboardTextFn = self._get_clipboard_text
        else:
            raise ValueError("func is not a callable: %s" % str(value))
    
    @staticmethod
    cdef const char* _get_clipboard_text(void* user_data):
        text = _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_get_clipboard_text_fn']()
        if type(text) is bytes:
            return text
        return _bytes(text)
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(Callable)
    @property
    def set_clipboard_text_fn(self):
        return _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn']
    @set_clipboard_text_fn.setter
    def set_clipboard_text_fn(self, value: Callable):
        if callable(value):
            _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'] = value
            dereference(self._ptr).SetClipboardTextFn = self._set_clipboard_text
        else:
            raise ValueError("func is not a callable: %s" % str(value))
    
    @staticmethod
    cdef void _set_clipboard_text(void* user_data, const char* text):
        _io_clipboard[<uintptr_t>ccimgui.igGetCurrentContext()]['_set_clipboard_text_fn'](_from_bytes(text))
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def clipboard_user_data(self):
        cdef Any res = dereference(self._ptr).ClipboardUserData
        return res
    @clipboard_user_data.setter
    def clipboard_user_data(self, value: Any):
        dereference(self._ptr).ClipboardUserData = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def set_platform_ime_data_fn(self):
        cdef Callable res = dereference(self._ptr).SetPlatformImeDataFn
        return res
    @set_platform_ime_data_fn.setter
    def set_platform_ime_data_fn(self, value: Callable):
        dereference(self._ptr).SetPlatformImeDataFn = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def _unused_padding(self):
        cdef Any res = dereference(self._ptr)._UnusedPadding
        return res
    @_unused_padding.setter
    def _unused_padding(self, value: Any):
        dereference(self._ptr)._UnusedPadding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def want_capture_mouse(self):
        cdef Any res = dereference(self._ptr).WantCaptureMouse
        return res
    @want_capture_mouse.setter
    def want_capture_mouse(self, value: Any):
        dereference(self._ptr).WantCaptureMouse = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def want_capture_keyboard(self):
        cdef Any res = dereference(self._ptr).WantCaptureKeyboard
        return res
    @want_capture_keyboard.setter
    def want_capture_keyboard(self, value: Any):
        dereference(self._ptr).WantCaptureKeyboard = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def want_text_input(self):
        cdef Any res = dereference(self._ptr).WantTextInput
        return res
    @want_text_input.setter
    def want_text_input(self, value: Any):
        dereference(self._ptr).WantTextInput = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def want_set_mouse_pos(self):
        cdef Any res = dereference(self._ptr).WantSetMousePos
        return res
    @want_set_mouse_pos.setter
    def want_set_mouse_pos(self, value: Any):
        dereference(self._ptr).WantSetMousePos = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def want_save_ini_settings(self):
        cdef Any res = dereference(self._ptr).WantSaveIniSettings
        return res
    @want_save_ini_settings.setter
    def want_save_ini_settings(self, value: Any):
        dereference(self._ptr).WantSaveIniSettings = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def nav_active(self):
        cdef Any res = dereference(self._ptr).NavActive
        return res
    @nav_active.setter
    def nav_active(self, value: Any):
        dereference(self._ptr).NavActive = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def nav_visible(self):
        cdef Any res = dereference(self._ptr).NavVisible
        return res
    @nav_visible.setter
    def nav_visible(self, value: Any):
        dereference(self._ptr).NavVisible = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(float)
    @property
    def framerate(self):
        cdef float res = dereference(self._ptr).Framerate
        return res
    @framerate.setter
    def framerate(self, value: float):
        # dereference(self._ptr).Framerate = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def metrics_render_vertices(self):
        cdef int res = dereference(self._ptr).MetricsRenderVertices
        return res
    @metrics_render_vertices.setter
    def metrics_render_vertices(self, value: int):
        dereference(self._ptr).MetricsRenderVertices = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def metrics_render_indices(self):
        cdef int res = dereference(self._ptr).MetricsRenderIndices
        return res
    @metrics_render_indices.setter
    def metrics_render_indices(self, value: int):
        dereference(self._ptr).MetricsRenderIndices = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def metrics_render_windows(self):
        cdef int res = dereference(self._ptr).MetricsRenderWindows
        return res
    @metrics_render_windows.setter
    def metrics_render_windows(self, value: int):
        dereference(self._ptr).MetricsRenderWindows = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def metrics_active_windows(self):
        cdef int res = dereference(self._ptr).MetricsActiveWindows
        return res
    @metrics_active_windows.setter
    def metrics_active_windows(self, value: int):
        dereference(self._ptr).MetricsActiveWindows = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def metrics_active_allocations(self):
        cdef int res = dereference(self._ptr).MetricsActiveAllocations
        return res
    @metrics_active_allocations.setter
    def metrics_active_allocations(self, value: int):
        dereference(self._ptr).MetricsActiveAllocations = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def mouse_delta(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).MouseDelta
        return ImVec2.from_ptr(res)
    @mouse_delta.setter
    def mouse_delta(self, value: tuple):
        dereference(self._ptr).MouseDelta = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(int)
    @property
    def key_map(self):
        cdef cvarray res = cvarray(
            shape=(ccimgui.ImGuiKey.ImGuiKey_COUNT,),
            format='i',
            itemsize=sizeof(int),
            allocate_buffer=False
        )
        res.data = <char*>(dereference(self._ptr).KeyMap)
        return res
    @key_map.setter
    def key_map(self, value: int):
        # dereference(self._ptr).KeyMap = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(List[bool])
    @property
    def keys_down(self):
        cdef cvarray res = cvarray(
            shape=(512,),
            format='b',
            itemsize=sizeof(bool),
            allocate_buffer=False
        )
        res.data = <char*>dereference(self._ptr).KeysDown
        return res
    @keys_down.setter
    def keys_down(self, value: Any):
        # dereference(self._ptr).KeysDown = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def nav_inputs(self):
        cdef float res = dereference(self._ptr).NavInputs
        return res
    @nav_inputs.setter
    def nav_inputs(self, value: float):
        dereference(self._ptr).NavInputs = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiContext)
    @property
    def ctx(self):
        cdef ccimgui.ImGuiContext res = dereference(self._ptr).Ctx
        return ImGuiContext.from_ptr(res)
    @ctx.setter
    def ctx(self, value: ImGuiContext):
        dereference(self._ptr).Ctx = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(tuple)
    @property
    def mouse_pos(self):
        return _cast_ImVec2_tuple(dereference(self._ptr).MousePos)
    @mouse_pos.setter
    def mouse_pos(self, value: tuple):
        dereference(self._ptr).MousePos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(List[bool])
    @property
    def mouse_down(self):
        cdef cvarray res = cvarray(
            shape=(5,),
            format='b',
            itemsize=sizeof(bool),
            allocate_buffer=False
        )
        res.data = <char*>dereference(self._ptr).MouseDown
        return res
    @mouse_down.setter
    def mouse_down(self, value: Any):
        # dereference(self._ptr).MouseDown = value
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(float)
    @property
    def mouse_wheel(self):
        cdef float res = dereference(self._ptr).MouseWheel
        return res
    @mouse_wheel.setter
    def mouse_wheel(self, value: float):
        dereference(self._ptr).MouseWheel = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(float)
    @property
    def mouse_wheelh(self):
        cdef float res = dereference(self._ptr).MouseWheelH
        return res
    @mouse_wheelh.setter
    def mouse_wheelh(self, value: float):
        dereference(self._ptr).MouseWheelH = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def mouse_hovered_viewport(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).MouseHoveredViewport
        return res
    @mouse_hovered_viewport.setter
    def mouse_hovered_viewport(self, value: int):
        dereference(self._ptr).MouseHoveredViewport = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(bool)
    @property
    def key_ctrl(self):
        cdef bool res = dereference(self._ptr).KeyCtrl
        return res
    @key_ctrl.setter
    def key_ctrl(self, value: bool):
        dereference(self._ptr).KeyCtrl = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(bool)
    @property
    def key_shift(self):
        cdef bool res = dereference(self._ptr).KeyShift
        return res
    @key_shift.setter
    def key_shift(self, value: bool):
        dereference(self._ptr).KeyShift = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(bool)
    @property
    def key_alt(self):
        cdef bool res = dereference(self._ptr).KeyAlt
        return res
    @key_alt.setter
    def key_alt(self, value: bool):
        dereference(self._ptr).KeyAlt = value
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(bool)
    @property
    def key_super(self):
        cdef bool res = dereference(self._ptr).KeySuper
        return res
    @key_super.setter
    def key_super(self, value: bool):
        dereference(self._ptr).KeySuper = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def key_mods(self):
        cdef ccimgui.ImGuiKeyChord res = dereference(self._ptr).KeyMods
        return res
    @key_mods.setter
    def key_mods(self, value: int):
        dereference(self._ptr).KeyMods = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiKeyData)
    @property
    def keys_data(self):
        cdef ccimgui.ImGuiKeyData res = dereference(self._ptr).KeysData
        return ImGuiKeyData.from_ptr(res)
    @keys_data.setter
    def keys_data(self, value: ImGuiKeyData):
        dereference(self._ptr).KeysData = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def want_capture_mouse_unless_popup_close(self):
        cdef Any res = dereference(self._ptr).WantCaptureMouseUnlessPopupClose
        return res
    @want_capture_mouse_unless_popup_close.setter
    def want_capture_mouse_unless_popup_close(self, value: Any):
        dereference(self._ptr).WantCaptureMouseUnlessPopupClose = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def mouse_pos_prev(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).MousePosPrev
        return ImVec2.from_ptr(res)
    @mouse_pos_prev.setter
    def mouse_pos_prev(self, value: tuple):
        dereference(self._ptr).MousePosPrev = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def mouse_clicked_pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).MouseClickedPos
        return ImVec2.from_ptr(res)
    @mouse_clicked_pos.setter
    def mouse_clicked_pos(self, value: tuple):
        dereference(self._ptr).MouseClickedPos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_clicked_time(self):
        cdef Any res = dereference(self._ptr).MouseClickedTime
        return res
    @mouse_clicked_time.setter
    def mouse_clicked_time(self, value: float):
        dereference(self._ptr).MouseClickedTime = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def mouse_clicked(self):
        cdef Any res = dereference(self._ptr).MouseClicked
        return res
    @mouse_clicked.setter
    def mouse_clicked(self, value: Any):
        dereference(self._ptr).MouseClicked = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def mouse_double_clicked(self):
        cdef Any res = dereference(self._ptr).MouseDoubleClicked
        return res
    @mouse_double_clicked.setter
    def mouse_double_clicked(self, value: Any):
        dereference(self._ptr).MouseDoubleClicked = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def mouse_clicked_count(self):
        cdef ccimgui.ImU16 res = dereference(self._ptr).MouseClickedCount
        return res
    @mouse_clicked_count.setter
    def mouse_clicked_count(self, value: int):
        dereference(self._ptr).MouseClickedCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def mouse_clicked_last_count(self):
        cdef ccimgui.ImU16 res = dereference(self._ptr).MouseClickedLastCount
        return res
    @mouse_clicked_last_count.setter
    def mouse_clicked_last_count(self, value: int):
        dereference(self._ptr).MouseClickedLastCount = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def mouse_released(self):
        cdef Any res = dereference(self._ptr).MouseReleased
        return res
    @mouse_released.setter
    def mouse_released(self, value: Any):
        dereference(self._ptr).MouseReleased = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def mouse_down_owned(self):
        cdef Any res = dereference(self._ptr).MouseDownOwned
        return res
    @mouse_down_owned.setter
    def mouse_down_owned(self, value: Any):
        dereference(self._ptr).MouseDownOwned = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def mouse_down_owned_unless_popup_close(self):
        cdef Any res = dereference(self._ptr).MouseDownOwnedUnlessPopupClose
        return res
    @mouse_down_owned_unless_popup_close.setter
    def mouse_down_owned_unless_popup_close(self, value: Any):
        dereference(self._ptr).MouseDownOwnedUnlessPopupClose = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_down_duration(self):
        cdef float res = dereference(self._ptr).MouseDownDuration
        return res
    @mouse_down_duration.setter
    def mouse_down_duration(self, value: float):
        dereference(self._ptr).MouseDownDuration = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_down_duration_prev(self):
        cdef float res = dereference(self._ptr).MouseDownDurationPrev
        return res
    @mouse_down_duration_prev.setter
    def mouse_down_duration_prev(self, value: float):
        dereference(self._ptr).MouseDownDurationPrev = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def mouse_drag_max_distance_abs(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).MouseDragMaxDistanceAbs
        return ImVec2.from_ptr(res)
    @mouse_drag_max_distance_abs.setter
    def mouse_drag_max_distance_abs(self, value: tuple):
        dereference(self._ptr).MouseDragMaxDistanceAbs = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_drag_max_distance_sqr(self):
        cdef float res = dereference(self._ptr).MouseDragMaxDistanceSqr
        return res
    @mouse_drag_max_distance_sqr.setter
    def mouse_drag_max_distance_sqr(self, value: float):
        dereference(self._ptr).MouseDragMaxDistanceSqr = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def pen_pressure(self):
        cdef float res = dereference(self._ptr).PenPressure
        return res
    @pen_pressure.setter
    def pen_pressure(self, value: float):
        dereference(self._ptr).PenPressure = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def app_focus_lost(self):
        cdef Any res = dereference(self._ptr).AppFocusLost
        return res
    @app_focus_lost.setter
    def app_focus_lost(self, value: Any):
        dereference(self._ptr).AppFocusLost = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def app_accepting_events(self):
        cdef Any res = dereference(self._ptr).AppAcceptingEvents
        return res
    @app_accepting_events.setter
    def app_accepting_events(self, value: Any):
        dereference(self._ptr).AppAcceptingEvents = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def backend_using_legacy_key_arrays(self):
        cdef ccimgui.ImS8 res = dereference(self._ptr).BackendUsingLegacyKeyArrays
        return res
    @backend_using_legacy_key_arrays.setter
    def backend_using_legacy_key_arrays(self, value: int):
        dereference(self._ptr).BackendUsingLegacyKeyArrays = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def backend_using_legacy_nav_input_array(self):
        cdef Any res = dereference(self._ptr).BackendUsingLegacyNavInputArray
        return res
    @backend_using_legacy_nav_input_array.setter
    def backend_using_legacy_nav_input_array(self, value: Any):
        dereference(self._ptr).BackendUsingLegacyNavInputArray = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def input_queue_surrogate(self):
        cdef ccimgui.ImWchar16 res = dereference(self._ptr).InputQueueSurrogate
        return res
    @input_queue_surrogate.setter
    def input_queue_surrogate(self, value: int):
        dereference(self._ptr).InputQueueSurrogate = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImWchar)
    @property
    def input_queue_characters(self):
        cdef ccimgui.ImVector_ImWchar res = dereference(self._ptr).InputQueueCharacters
        return ImVector_ImWchar.from_ptr(res)
    @input_queue_characters.setter
    def input_queue_characters(self, value: ImVector_ImWchar):
        dereference(self._ptr).InputQueueCharacters = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiIO)
    @staticmethod
    def io():
        cdef ccimgui.ImGuiIO* _ptr = ccimgui.ImGuiIO_ImGuiIO()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiIO.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiIO):
        ccimgui.ImGuiIO_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_focus_event(self: ImGuiIO, focused: Any):
        """
        Queue a gain/loss of focus for the application (generally based
        on os/platform focus of your window)
        """
        ccimgui.ImGuiIO_AddFocusEvent(self._ptr, focused)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def add_input_character(self: ImGuiIO, c: int):
        """
        Queue a new character input
        """
        ccimgui.ImGuiIO_AddInputCharacter(self._ptr, c)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_input_character_utf16(self: ImGuiIO, c: int):
        """
        Queue a new character input from a utf-16 character, it can be
        a surrogate
        """
        ccimgui.ImGuiIO_AddInputCharacterUTF16(self._ptr, c)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_input_characters_utf8(self: ImGuiIO, str_: str):
        """
        Queue a new characters input from a utf-8 string
        """
        ccimgui.ImGuiIO_AddInputCharactersUTF8(self._ptr, _bytes(str_))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_key_analog_event(self: ImGuiIO, key: Any, down: Any, value: float):
        """
        Queue a new key down/up event for analog values (e.g. imguikey_gamepad_
        values). dead-zones should be handled by the backend.
        """
        ccimgui.ImGuiIO_AddKeyAnalogEvent(self._ptr, key, down, value)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def add_key_event(self: ImGuiIO, key: int, down: bool):
        """
        Queue a new key down/up event. key should be translated (as in,
        generally imguikey_a matches the key end-user would use to emit
        an 'a' character)
        """
        ccimgui.ImGuiIO_AddKeyEvent(self._ptr, key, down)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def add_mouse_button_event(self: ImGuiIO, button: int, down: Any):
        """
        Queue a mouse button change
        """
        ccimgui.ImGuiIO_AddMouseButtonEvent(self._ptr, button, down)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def add_mouse_pos_event(self: ImGuiIO, x: float, y: float):
        """
        Queue a mouse position update. use -flt_max,-flt_max to signify
        no mouse (e.g. app not focused and not hovered)
        """
        ccimgui.ImGuiIO_AddMousePosEvent(self._ptr, x, y)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_mouse_viewport_event(self: ImGuiIO, id_: int):
        """
        Queue a mouse hovered viewport. requires backend to set imguibackendflags_hasmousehoveredviewport
        to call this (for multi-viewport support).
        """
        ccimgui.ImGuiIO_AddMouseViewportEvent(self._ptr, id_)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def add_mouse_wheel_event(self: ImGuiIO, wheel_x: float, wheel_y: float):
        """
        Queue a mouse wheel update. wheel_y<0: scroll down, wheel_y>0:
        scroll up, wheel_x<0: scroll right, wheel_x>0: scroll left.
        """
        ccimgui.ImGuiIO_AddMouseWheelEvent(self._ptr, wheel_x, wheel_y)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear_input_characters(self: ImGuiIO):
        """
        [internal] clear the text input buffer manually
        """
        ccimgui.ImGuiIO_ClearInputCharacters(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear_input_keys(self: ImGuiIO):
        """
        [internal] release all keys
        """
        ccimgui.ImGuiIO_ClearInputKeys(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_app_accepting_events(self: ImGuiIO, accepting_events: Any):
        """
        Set master flag for accepting key/mouse/text events (default
        to true). useful if you have native dialog boxes that are interrupting
        your application loop/refresh, and you want to disable events
        being queued while your app is frozen.
        """
        ccimgui.ImGuiIO_SetAppAcceptingEvents(self._ptr, accepting_events)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_key_event_native_data(self: ImGuiIO, key: Any, native_keycode: int, native_scancode: int, native_legacy_index: int=-1):
        """
        [optional] specify index for legacy <1.87 iskeyxxx() functions
        with native indices + specify native keycode, scancode.
        """
        ccimgui.ImGuiIO_SetKeyEventNativeData(self._ptr, key, native_keycode, native_scancode, native_legacy_index)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiPlatformIO:
    cdef ccimgui.ImGuiPlatformIO* _ptr
    
    @staticmethod
    cdef ImGuiPlatformIO from_ptr(ccimgui.ImGuiPlatformIO* _ptr):
        cdef ImGuiPlatformIO wrapper = ImGuiPlatformIO.__new__(ImGuiPlatformIO)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_create_window(self):
        cdef Callable res = dereference(self._ptr).Platform_CreateWindow
        return res
    @platform_create_window.setter
    def platform_create_window(self, value: Callable):
        dereference(self._ptr).Platform_CreateWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_destroy_window(self):
        cdef Callable res = dereference(self._ptr).Platform_DestroyWindow
        return res
    @platform_destroy_window.setter
    def platform_destroy_window(self, value: Callable):
        dereference(self._ptr).Platform_DestroyWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_show_window(self):
        cdef Callable res = dereference(self._ptr).Platform_ShowWindow
        return res
    @platform_show_window.setter
    def platform_show_window(self, value: Callable):
        dereference(self._ptr).Platform_ShowWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_set_window_pos(self):
        cdef Callable res = dereference(self._ptr).Platform_SetWindowPos
        return res
    @platform_set_window_pos.setter
    def platform_set_window_pos(self, value: Callable):
        dereference(self._ptr).Platform_SetWindowPos = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_get_window_pos(self):
        cdef Callable res = dereference(self._ptr).Platform_GetWindowPos
        return res
    @platform_get_window_pos.setter
    def platform_get_window_pos(self, value: Callable):
        dereference(self._ptr).Platform_GetWindowPos = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_set_window_size(self):
        cdef Callable res = dereference(self._ptr).Platform_SetWindowSize
        return res
    @platform_set_window_size.setter
    def platform_set_window_size(self, value: Callable):
        dereference(self._ptr).Platform_SetWindowSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_get_window_size(self):
        cdef Callable res = dereference(self._ptr).Platform_GetWindowSize
        return res
    @platform_get_window_size.setter
    def platform_get_window_size(self, value: Callable):
        dereference(self._ptr).Platform_GetWindowSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_set_window_focus(self):
        cdef Callable res = dereference(self._ptr).Platform_SetWindowFocus
        return res
    @platform_set_window_focus.setter
    def platform_set_window_focus(self, value: Callable):
        dereference(self._ptr).Platform_SetWindowFocus = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_get_window_focus(self):
        cdef Callable res = dereference(self._ptr).Platform_GetWindowFocus
        return res
    @platform_get_window_focus.setter
    def platform_get_window_focus(self, value: Callable):
        dereference(self._ptr).Platform_GetWindowFocus = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_get_window_minimized(self):
        cdef Callable res = dereference(self._ptr).Platform_GetWindowMinimized
        return res
    @platform_get_window_minimized.setter
    def platform_get_window_minimized(self, value: Callable):
        dereference(self._ptr).Platform_GetWindowMinimized = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_set_window_title(self):
        cdef Callable res = dereference(self._ptr).Platform_SetWindowTitle
        return res
    @platform_set_window_title.setter
    def platform_set_window_title(self, value: Callable):
        dereference(self._ptr).Platform_SetWindowTitle = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_set_window_alpha(self):
        cdef Callable res = dereference(self._ptr).Platform_SetWindowAlpha
        return res
    @platform_set_window_alpha.setter
    def platform_set_window_alpha(self, value: Callable):
        dereference(self._ptr).Platform_SetWindowAlpha = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_update_window(self):
        cdef Callable res = dereference(self._ptr).Platform_UpdateWindow
        return res
    @platform_update_window.setter
    def platform_update_window(self, value: Callable):
        dereference(self._ptr).Platform_UpdateWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_render_window(self):
        cdef Callable res = dereference(self._ptr).Platform_RenderWindow
        return res
    @platform_render_window.setter
    def platform_render_window(self, value: Callable):
        dereference(self._ptr).Platform_RenderWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_swap_buffers(self):
        cdef Callable res = dereference(self._ptr).Platform_SwapBuffers
        return res
    @platform_swap_buffers.setter
    def platform_swap_buffers(self, value: Callable):
        dereference(self._ptr).Platform_SwapBuffers = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_get_window_dpi_scale(self):
        cdef Callable res = dereference(self._ptr).Platform_GetWindowDpiScale
        return res
    @platform_get_window_dpi_scale.setter
    def platform_get_window_dpi_scale(self, value: Callable):
        dereference(self._ptr).Platform_GetWindowDpiScale = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_on_changed_viewport(self):
        cdef Callable res = dereference(self._ptr).Platform_OnChangedViewport
        return res
    @platform_on_changed_viewport.setter
    def platform_on_changed_viewport(self, value: Callable):
        dereference(self._ptr).Platform_OnChangedViewport = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def platform_create_vk_surface(self):
        cdef Callable res = dereference(self._ptr).Platform_CreateVkSurface
        return res
    @platform_create_vk_surface.setter
    def platform_create_vk_surface(self, value: Callable):
        dereference(self._ptr).Platform_CreateVkSurface = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def renderer_create_window(self):
        cdef Callable res = dereference(self._ptr).Renderer_CreateWindow
        return res
    @renderer_create_window.setter
    def renderer_create_window(self, value: Callable):
        dereference(self._ptr).Renderer_CreateWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def renderer_destroy_window(self):
        cdef Callable res = dereference(self._ptr).Renderer_DestroyWindow
        return res
    @renderer_destroy_window.setter
    def renderer_destroy_window(self, value: Callable):
        dereference(self._ptr).Renderer_DestroyWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def renderer_set_window_size(self):
        cdef Callable res = dereference(self._ptr).Renderer_SetWindowSize
        return res
    @renderer_set_window_size.setter
    def renderer_set_window_size(self, value: Callable):
        dereference(self._ptr).Renderer_SetWindowSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def renderer_render_window(self):
        cdef Callable res = dereference(self._ptr).Renderer_RenderWindow
        return res
    @renderer_render_window.setter
    def renderer_render_window(self, value: Callable):
        dereference(self._ptr).Renderer_RenderWindow = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Callable)
    @property
    def renderer_swap_buffers(self):
        cdef Callable res = dereference(self._ptr).Renderer_SwapBuffers
        return res
    @renderer_swap_buffers.setter
    def renderer_swap_buffers(self, value: Callable):
        dereference(self._ptr).Renderer_SwapBuffers = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImGuiPlatformMonitor)
    @property
    def monitors(self):
        cdef ccimgui.ImVector_ImGuiPlatformMonitor res = dereference(self._ptr).Monitors
        return ImVector_ImGuiPlatformMonitor.from_ptr(res)
    @monitors.setter
    def monitors(self, value: ImVector_ImGuiPlatformMonitor):
        dereference(self._ptr).Monitors = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImGuiViewportPtr)
    @property
    def viewports(self):
        cdef ccimgui.ImVector_ImGuiViewportPtr res = dereference(self._ptr).Viewports
        return ImVector_ImGuiViewportPtr.from_ptr(res)
    @viewports.setter
    def viewports(self, value: ImVector_ImGuiViewportPtr):
        dereference(self._ptr).Viewports = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiPlatformIO)
    @staticmethod
    def platform_io():
        """
        Zero clear
        """
        cdef ccimgui.ImGuiPlatformIO* _ptr = ccimgui.ImGuiPlatformIO_ImGuiPlatformIO()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiPlatformIO.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiPlatformIO):
        ccimgui.ImGuiPlatformIO_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiPlatformImeData:
    cdef ccimgui.ImGuiPlatformImeData* _ptr
    
    @staticmethod
    cdef ImGuiPlatformImeData from_ptr(ccimgui.ImGuiPlatformImeData* _ptr):
        cdef ImGuiPlatformImeData wrapper = ImGuiPlatformImeData.__new__(ImGuiPlatformImeData)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def want_visible(self):
        cdef Any res = dereference(self._ptr).WantVisible
        return res
    @want_visible.setter
    def want_visible(self, value: Any):
        dereference(self._ptr).WantVisible = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def input_pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).InputPos
        return ImVec2.from_ptr(res)
    @input_pos.setter
    def input_pos(self, value: tuple):
        dereference(self._ptr).InputPos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def input_line_height(self):
        cdef float res = dereference(self._ptr).InputLineHeight
        return res
    @input_line_height.setter
    def input_line_height(self, value: float):
        dereference(self._ptr).InputLineHeight = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiPlatformImeData)
    @staticmethod
    def platform_ime_data():
        cdef ccimgui.ImGuiPlatformImeData* _ptr = ccimgui.ImGuiPlatformImeData_ImGuiPlatformImeData()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiPlatformImeData.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiPlatformImeData):
        ccimgui.ImGuiPlatformImeData_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiPlatformMonitor:
    cdef ccimgui.ImGuiPlatformMonitor* _ptr
    
    @staticmethod
    cdef ImGuiPlatformMonitor from_ptr(ccimgui.ImGuiPlatformMonitor* _ptr):
        cdef ImGuiPlatformMonitor wrapper = ImGuiPlatformMonitor.__new__(ImGuiPlatformMonitor)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def main_pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).MainPos
        return ImVec2.from_ptr(res)
    @main_pos.setter
    def main_pos(self, value: tuple):
        dereference(self._ptr).MainPos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def main_size(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).MainSize
        return ImVec2.from_ptr(res)
    @main_size.setter
    def main_size(self, value: tuple):
        dereference(self._ptr).MainSize = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def work_pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).WorkPos
        return ImVec2.from_ptr(res)
    @work_pos.setter
    def work_pos(self, value: tuple):
        dereference(self._ptr).WorkPos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def work_size(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).WorkSize
        return ImVec2.from_ptr(res)
    @work_size.setter
    def work_size(self, value: tuple):
        dereference(self._ptr).WorkSize = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def dpi_scale(self):
        cdef float res = dereference(self._ptr).DpiScale
        return res
    @dpi_scale.setter
    def dpi_scale(self, value: float):
        dereference(self._ptr).DpiScale = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiPlatformMonitor)
    @staticmethod
    def platform_monitor():
        cdef ccimgui.ImGuiPlatformMonitor* _ptr = ccimgui.ImGuiPlatformMonitor_ImGuiPlatformMonitor()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiPlatformMonitor.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiPlatformMonitor):
        ccimgui.ImGuiPlatformMonitor_destroy(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiStorage:
    cdef ccimgui.ImGuiStorage* _ptr
    
    @staticmethod
    cdef ImGuiStorage from_ptr(ccimgui.ImGuiStorage* _ptr):
        cdef ImGuiStorage wrapper = ImGuiStorage.__new__(ImGuiStorage)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImGuiStoragePair)
    @property
    def data(self):
        cdef ccimgui.ImVector_ImGuiStoragePair res = dereference(self._ptr).Data
        return ImVector_ImGuiStoragePair.from_ptr(res)
    @data.setter
    def data(self, value: ImVector_ImGuiStoragePair):
        dereference(self._ptr).Data = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def build_sort_by_key(self: ImGuiStorage):
        ccimgui.ImGuiStorage_BuildSortByKey(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImGuiStorage):
        ccimgui.ImGuiStorage_Clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def get_bool(self: ImGuiStorage, key: int, default_val: Any=False):
        cdef ccimgui.bool res = ccimgui.ImGuiStorage_GetBool(self._ptr, key, default_val)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def get_bool_ref(self: ImGuiStorage, key: int, default_val: Any=False):
        cdef ccimgui.bool* res = ccimgui.ImGuiStorage_GetBoolRef(self._ptr, key, default_val)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    def get_float(self: ImGuiStorage, key: int, default_val: float=0.0):
        cdef float res = ccimgui.ImGuiStorage_GetFloat(self._ptr, key, default_val)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    def get_float_ref(self: ImGuiStorage, key: int, default_val: float=0.0):
        cdef float* res = ccimgui.ImGuiStorage_GetFloatRef(self._ptr, key, default_val)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_int(self: ImGuiStorage, key: int, default_val: int=0):
        cdef int res = ccimgui.ImGuiStorage_GetInt(self._ptr, key, default_val)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def get_int_ref(self: ImGuiStorage, key: int, default_val: int=0):
        cdef int* res = ccimgui.ImGuiStorage_GetIntRef(self._ptr, key, default_val)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def get_void_ptr(self: ImGuiStorage, key: int):
        """
        Default_val is null
        """
        cdef void* res = ccimgui.ImGuiStorage_GetVoidPtr(self._ptr, key)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def get_void_ptr_ref(self: ImGuiStorage, key: int, default_val: Any=None):
        cdef void** res = ccimgui.ImGuiStorage_GetVoidPtrRef(self._ptr, key, default_val)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_all_int(self: ImGuiStorage, val: int):
        ccimgui.ImGuiStorage_SetAllInt(self._ptr, val)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_bool(self: ImGuiStorage, key: int, val: Any):
        ccimgui.ImGuiStorage_SetBool(self._ptr, key, val)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_float(self: ImGuiStorage, key: int, val: float):
        ccimgui.ImGuiStorage_SetFloat(self._ptr, key, val)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_int(self: ImGuiStorage, key: int, val: int):
        ccimgui.ImGuiStorage_SetInt(self._ptr, key, val)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def set_void_ptr(self: ImGuiStorage, key: int, val: Any):
        ccimgui.ImGuiStorage_SetVoidPtr(self._ptr, key, val)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiStyle:
    cdef ccimgui.ImGuiStyle* _ptr
    
    @staticmethod
    cdef ImGuiStyle from_ptr(ccimgui.ImGuiStyle* _ptr):
        cdef ImGuiStyle wrapper = ImGuiStyle.__new__(ImGuiStyle)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def alpha(self):
        cdef float res = dereference(self._ptr).Alpha
        return res
    @alpha.setter
    def alpha(self, value: float):
        dereference(self._ptr).Alpha = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def disabled_alpha(self):
        cdef float res = dereference(self._ptr).DisabledAlpha
        return res
    @disabled_alpha.setter
    def disabled_alpha(self, value: float):
        dereference(self._ptr).DisabledAlpha = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def window_padding(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).WindowPadding
        return ImVec2.from_ptr(res)
    @window_padding.setter
    def window_padding(self, value: tuple):
        dereference(self._ptr).WindowPadding = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def window_rounding(self):
        cdef float res = dereference(self._ptr).WindowRounding
        return res
    @window_rounding.setter
    def window_rounding(self, value: float):
        dereference(self._ptr).WindowRounding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def window_border_size(self):
        cdef float res = dereference(self._ptr).WindowBorderSize
        return res
    @window_border_size.setter
    def window_border_size(self, value: float):
        dereference(self._ptr).WindowBorderSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def window_min_size(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).WindowMinSize
        return ImVec2.from_ptr(res)
    @window_min_size.setter
    def window_min_size(self, value: tuple):
        dereference(self._ptr).WindowMinSize = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def window_title_align(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).WindowTitleAlign
        return ImVec2.from_ptr(res)
    @window_title_align.setter
    def window_title_align(self, value: tuple):
        dereference(self._ptr).WindowTitleAlign = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def window_menu_button_position(self):
        cdef ccimgui.ImGuiDir res = dereference(self._ptr).WindowMenuButtonPosition
        return res
    @window_menu_button_position.setter
    def window_menu_button_position(self, value: int):
        dereference(self._ptr).WindowMenuButtonPosition = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def child_rounding(self):
        cdef float res = dereference(self._ptr).ChildRounding
        return res
    @child_rounding.setter
    def child_rounding(self, value: float):
        dereference(self._ptr).ChildRounding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def child_border_size(self):
        cdef float res = dereference(self._ptr).ChildBorderSize
        return res
    @child_border_size.setter
    def child_border_size(self, value: float):
        dereference(self._ptr).ChildBorderSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def popup_rounding(self):
        cdef float res = dereference(self._ptr).PopupRounding
        return res
    @popup_rounding.setter
    def popup_rounding(self, value: float):
        dereference(self._ptr).PopupRounding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def popup_border_size(self):
        cdef float res = dereference(self._ptr).PopupBorderSize
        return res
    @popup_border_size.setter
    def popup_border_size(self, value: float):
        dereference(self._ptr).PopupBorderSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def frame_padding(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).FramePadding
        return ImVec2.from_ptr(res)
    @frame_padding.setter
    def frame_padding(self, value: tuple):
        dereference(self._ptr).FramePadding = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def frame_rounding(self):
        cdef float res = dereference(self._ptr).FrameRounding
        return res
    @frame_rounding.setter
    def frame_rounding(self, value: float):
        dereference(self._ptr).FrameRounding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def frame_border_size(self):
        cdef float res = dereference(self._ptr).FrameBorderSize
        return res
    @frame_border_size.setter
    def frame_border_size(self, value: float):
        dereference(self._ptr).FrameBorderSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def item_spacing(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).ItemSpacing
        return ImVec2.from_ptr(res)
    @item_spacing.setter
    def item_spacing(self, value: tuple):
        dereference(self._ptr).ItemSpacing = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def item_inner_spacing(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).ItemInnerSpacing
        return ImVec2.from_ptr(res)
    @item_inner_spacing.setter
    def item_inner_spacing(self, value: tuple):
        dereference(self._ptr).ItemInnerSpacing = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def cell_padding(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).CellPadding
        return ImVec2.from_ptr(res)
    @cell_padding.setter
    def cell_padding(self, value: tuple):
        dereference(self._ptr).CellPadding = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def touch_extra_padding(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).TouchExtraPadding
        return ImVec2.from_ptr(res)
    @touch_extra_padding.setter
    def touch_extra_padding(self, value: tuple):
        dereference(self._ptr).TouchExtraPadding = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def indent_spacing(self):
        cdef float res = dereference(self._ptr).IndentSpacing
        return res
    @indent_spacing.setter
    def indent_spacing(self, value: float):
        dereference(self._ptr).IndentSpacing = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def columns_min_spacing(self):
        cdef float res = dereference(self._ptr).ColumnsMinSpacing
        return res
    @columns_min_spacing.setter
    def columns_min_spacing(self, value: float):
        dereference(self._ptr).ColumnsMinSpacing = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def scrollbar_size(self):
        cdef float res = dereference(self._ptr).ScrollbarSize
        return res
    @scrollbar_size.setter
    def scrollbar_size(self, value: float):
        dereference(self._ptr).ScrollbarSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def scrollbar_rounding(self):
        cdef float res = dereference(self._ptr).ScrollbarRounding
        return res
    @scrollbar_rounding.setter
    def scrollbar_rounding(self, value: float):
        dereference(self._ptr).ScrollbarRounding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def grab_min_size(self):
        cdef float res = dereference(self._ptr).GrabMinSize
        return res
    @grab_min_size.setter
    def grab_min_size(self, value: float):
        dereference(self._ptr).GrabMinSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def grab_rounding(self):
        cdef float res = dereference(self._ptr).GrabRounding
        return res
    @grab_rounding.setter
    def grab_rounding(self, value: float):
        dereference(self._ptr).GrabRounding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def log_slider_deadzone(self):
        cdef float res = dereference(self._ptr).LogSliderDeadzone
        return res
    @log_slider_deadzone.setter
    def log_slider_deadzone(self, value: float):
        dereference(self._ptr).LogSliderDeadzone = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def tab_rounding(self):
        cdef float res = dereference(self._ptr).TabRounding
        return res
    @tab_rounding.setter
    def tab_rounding(self, value: float):
        dereference(self._ptr).TabRounding = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def tab_border_size(self):
        cdef float res = dereference(self._ptr).TabBorderSize
        return res
    @tab_border_size.setter
    def tab_border_size(self, value: float):
        dereference(self._ptr).TabBorderSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def tab_min_width_for_close_button(self):
        cdef float res = dereference(self._ptr).TabMinWidthForCloseButton
        return res
    @tab_min_width_for_close_button.setter
    def tab_min_width_for_close_button(self, value: float):
        dereference(self._ptr).TabMinWidthForCloseButton = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def color_button_position(self):
        cdef ccimgui.ImGuiDir res = dereference(self._ptr).ColorButtonPosition
        return res
    @color_button_position.setter
    def color_button_position(self, value: int):
        dereference(self._ptr).ColorButtonPosition = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def button_text_align(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).ButtonTextAlign
        return ImVec2.from_ptr(res)
    @button_text_align.setter
    def button_text_align(self, value: tuple):
        dereference(self._ptr).ButtonTextAlign = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def selectable_text_align(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).SelectableTextAlign
        return ImVec2.from_ptr(res)
    @selectable_text_align.setter
    def selectable_text_align(self, value: tuple):
        dereference(self._ptr).SelectableTextAlign = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def separator_text_border_size(self):
        cdef float res = dereference(self._ptr).SeparatorTextBorderSize
        return res
    @separator_text_border_size.setter
    def separator_text_border_size(self, value: float):
        dereference(self._ptr).SeparatorTextBorderSize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def separator_text_align(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).SeparatorTextAlign
        return ImVec2.from_ptr(res)
    @separator_text_align.setter
    def separator_text_align(self, value: tuple):
        dereference(self._ptr).SeparatorTextAlign = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def separator_text_padding(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).SeparatorTextPadding
        return ImVec2.from_ptr(res)
    @separator_text_padding.setter
    def separator_text_padding(self, value: tuple):
        dereference(self._ptr).SeparatorTextPadding = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def display_window_padding(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).DisplayWindowPadding
        return ImVec2.from_ptr(res)
    @display_window_padding.setter
    def display_window_padding(self, value: tuple):
        dereference(self._ptr).DisplayWindowPadding = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def display_safe_area_padding(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).DisplaySafeAreaPadding
        return ImVec2.from_ptr(res)
    @display_safe_area_padding.setter
    def display_safe_area_padding(self, value: tuple):
        dereference(self._ptr).DisplaySafeAreaPadding = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def mouse_cursor_scale(self):
        cdef float res = dereference(self._ptr).MouseCursorScale
        return res
    @mouse_cursor_scale.setter
    def mouse_cursor_scale(self, value: float):
        dereference(self._ptr).MouseCursorScale = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def anti_aliased_lines(self):
        cdef Any res = dereference(self._ptr).AntiAliasedLines
        return res
    @anti_aliased_lines.setter
    def anti_aliased_lines(self, value: Any):
        dereference(self._ptr).AntiAliasedLines = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def anti_aliased_lines_use_tex(self):
        cdef Any res = dereference(self._ptr).AntiAliasedLinesUseTex
        return res
    @anti_aliased_lines_use_tex.setter
    def anti_aliased_lines_use_tex(self, value: Any):
        dereference(self._ptr).AntiAliasedLinesUseTex = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def anti_aliased_fill(self):
        cdef Any res = dereference(self._ptr).AntiAliasedFill
        return res
    @anti_aliased_fill.setter
    def anti_aliased_fill(self, value: Any):
        dereference(self._ptr).AntiAliasedFill = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def curve_tessellation_tol(self):
        cdef float res = dereference(self._ptr).CurveTessellationTol
        return res
    @curve_tessellation_tol.setter
    def curve_tessellation_tol(self, value: float):
        dereference(self._ptr).CurveTessellationTol = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def circle_tessellation_max_error(self):
        cdef float res = dereference(self._ptr).CircleTessellationMaxError
        return res
    @circle_tessellation_max_error.setter
    def circle_tessellation_max_error(self, value: float):
        dereference(self._ptr).CircleTessellationMaxError = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def colors(self):
        cdef ccimgui.ImVec4 res = dereference(self._ptr).Colors
        return ImVec4.from_ptr(res)
    @colors.setter
    def colors(self, value: tuple):
        dereference(self._ptr).Colors = _cast_tuple_ImVec4(value)
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiStyle)
    @staticmethod
    def style():
        cdef ccimgui.ImGuiStyle* _ptr = ccimgui.ImGuiStyle_ImGuiStyle()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiStyle.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiStyle):
        ccimgui.ImGuiStyle_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def scale_all_sizes(self: ImGuiStyle, scale_factor: float):
        ccimgui.ImGuiStyle_ScaleAllSizes(self._ptr, scale_factor)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiTextBuffer:
    cdef ccimgui.ImGuiTextBuffer* _ptr
    
    @staticmethod
    cdef ImGuiTextBuffer from_ptr(ccimgui.ImGuiTextBuffer* _ptr):
        cdef ImGuiTextBuffer wrapper = ImGuiTextBuffer.__new__(ImGuiTextBuffer)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_char)
    @property
    def buf(self):
        cdef ccimgui.ImVector_char res = dereference(self._ptr).Buf
        return ImVector_char.from_ptr(res)
    @buf.setter
    def buf(self, value: ImVector_char):
        dereference(self._ptr).Buf = value._ptr
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTextBuffer)
    @staticmethod
    def text_buffer():
        cdef ccimgui.ImGuiTextBuffer* _ptr = ccimgui.ImGuiTextBuffer_ImGuiTextBuffer()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiTextBuffer.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiTextBuffer):
        ccimgui.ImGuiTextBuffer_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def append(self: ImGuiTextBuffer, str_: str, str_end: str=None):
        ccimgui.ImGuiTextBuffer_append(self._ptr, _bytes(str_), _bytes(str_end))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def appendf(self: ImGuiTextBuffer, fmt: str):
        ccimgui.ImGuiTextBuffer_appendf(self._ptr, _bytes(fmt))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def appendfv(self: ImGuiTextBuffer, fmt: str, args: str):
        ccimgui.ImGuiTextBuffer_appendfv(self._ptr, _bytes(fmt), _bytes(args))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    def begin(self: ImGuiTextBuffer):
        cdef const char* res = ccimgui.ImGuiTextBuffer_begin(self._ptr)
        return _bytes(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    def c_str(self: ImGuiTextBuffer):
        cdef const char* res = ccimgui.ImGuiTextBuffer_c_str(self._ptr)
        return _bytes(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImGuiTextBuffer):
        ccimgui.ImGuiTextBuffer_clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def empty(self: ImGuiTextBuffer):
        cdef ccimgui.bool res = ccimgui.ImGuiTextBuffer_empty(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    def end(self: ImGuiTextBuffer):
        """
        Buf is zero-terminated, so end() will point on the zero-terminator
        """
        cdef const char* res = ccimgui.ImGuiTextBuffer_end(self._ptr)
        return _bytes(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def reserve(self: ImGuiTextBuffer, capacity: int):
        ccimgui.ImGuiTextBuffer_reserve(self._ptr, capacity)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def size(self: ImGuiTextBuffer):
        cdef int res = ccimgui.ImGuiTextBuffer_size(self._ptr)
        return res
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiTextFilter:
    cdef ccimgui.ImGuiTextFilter* _ptr
    
    @staticmethod
    cdef ImGuiTextFilter from_ptr(ccimgui.ImGuiTextFilter* _ptr):
        cdef ImGuiTextFilter wrapper = ImGuiTextFilter.__new__(ImGuiTextFilter)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def input_buf(self):
        cdef Any res = dereference(self._ptr).InputBuf
        return res
    @input_buf.setter
    def input_buf(self, value: int):
        dereference(self._ptr).InputBuf = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImGuiTextRange)
    @property
    def filters(self):
        cdef ccimgui.ImVector_ImGuiTextRange res = dereference(self._ptr).Filters
        return ImVector_ImGuiTextRange.from_ptr(res)
    @filters.setter
    def filters(self, value: ImVector_ImGuiTextRange):
        dereference(self._ptr).Filters = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def count_grep(self):
        cdef int res = dereference(self._ptr).CountGrep
        return res
    @count_grep.setter
    def count_grep(self, value: int):
        dereference(self._ptr).CountGrep = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiTextFilter)
    @staticmethod
    def text_filter(default_filter: str=""):
        cdef ccimgui.ImGuiTextFilter* _ptr = ccimgui.ImGuiTextFilter_ImGuiTextFilter(_bytes(default_filter))
        if _ptr is NULL:
            raise MemoryError
        return ImGuiTextFilter.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiTextFilter):
        ccimgui.ImGuiTextFilter_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def build(self: ImGuiTextFilter):
        ccimgui.ImGuiTextFilter_Build(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def clear(self: ImGuiTextFilter):
        ccimgui.ImGuiTextFilter_Clear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def draw(self: ImGuiTextFilter, label: str="Filter(inc, -exc)", width: float=0.0):
        """
        Helper calling inputtext+build
        """
        cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_Draw(self._ptr, _bytes(label), width)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def is_active(self: ImGuiTextFilter):
        cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_IsActive(self._ptr)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    def pass_filter(self: ImGuiTextFilter, text: str, text_end: str=None):
        cdef ccimgui.bool res = ccimgui.ImGuiTextFilter_PassFilter(self._ptr, _bytes(text), _bytes(text_end))
        return res
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiViewport:
    cdef ccimgui.ImGuiViewport* _ptr
    
    @staticmethod
    cdef ImGuiViewport from_ptr(ccimgui.ImGuiViewport* _ptr):
        cdef ImGuiViewport wrapper = ImGuiViewport.__new__(ImGuiViewport)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def id(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).ID
        return res
    @id.setter
    def id(self, value: int):
        dereference(self._ptr).ID = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def flags(self):
        cdef ccimgui.ImGuiViewportFlags res = dereference(self._ptr).Flags
        return res
    @flags.setter
    def flags(self, value: int):
        dereference(self._ptr).Flags = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).Pos
        return ImVec2.from_ptr(res)
    @pos.setter
    def pos(self, value: tuple):
        dereference(self._ptr).Pos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def size(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).Size
        return ImVec2.from_ptr(res)
    @size.setter
    def size(self, value: tuple):
        dereference(self._ptr).Size = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def work_pos(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).WorkPos
        return ImVec2.from_ptr(res)
    @work_pos.setter
    def work_pos(self, value: tuple):
        dereference(self._ptr).WorkPos = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(tuple)
    @property
    def work_size(self):
        cdef ccimgui.ImVec2 res = dereference(self._ptr).WorkSize
        return ImVec2.from_ptr(res)
    @work_size.setter
    def work_size(self, value: tuple):
        dereference(self._ptr).WorkSize = _cast_tuple_ImVec2(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def dpi_scale(self):
        cdef float res = dereference(self._ptr).DpiScale
        return res
    @dpi_scale.setter
    def dpi_scale(self, value: float):
        dereference(self._ptr).DpiScale = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def parent_viewport_id(self):
        cdef ccimgui.ImGuiID res = dereference(self._ptr).ParentViewportId
        return res
    @parent_viewport_id.setter
    def parent_viewport_id(self, value: int):
        dereference(self._ptr).ParentViewportId = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawData)
    @property
    def draw_data(self):
        cdef ccimgui.ImDrawData res = dereference(self._ptr).DrawData
        return ImDrawData.from_ptr(res)
    @draw_data.setter
    def draw_data(self, value: ImDrawData):
        dereference(self._ptr).DrawData = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def renderer_user_data(self):
        cdef Any res = dereference(self._ptr).RendererUserData
        return res
    @renderer_user_data.setter
    def renderer_user_data(self, value: Any):
        dereference(self._ptr).RendererUserData = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def platform_user_data(self):
        cdef Any res = dereference(self._ptr).PlatformUserData
        return res
    @platform_user_data.setter
    def platform_user_data(self, value: Any):
        dereference(self._ptr).PlatformUserData = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def platform_handle(self):
        cdef Any res = dereference(self._ptr).PlatformHandle
        return res
    @platform_handle.setter
    def platform_handle(self, value: Any):
        dereference(self._ptr).PlatformHandle = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def platform_handle_raw(self):
        cdef Any res = dereference(self._ptr).PlatformHandleRaw
        return res
    @platform_handle_raw.setter
    def platform_handle_raw(self, value: Any):
        dereference(self._ptr).PlatformHandleRaw = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def platform_window_created(self):
        cdef Any res = dereference(self._ptr).PlatformWindowCreated
        return res
    @platform_window_created.setter
    def platform_window_created(self, value: Any):
        dereference(self._ptr).PlatformWindowCreated = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def platform_request_move(self):
        cdef Any res = dereference(self._ptr).PlatformRequestMove
        return res
    @platform_request_move.setter
    def platform_request_move(self, value: Any):
        dereference(self._ptr).PlatformRequestMove = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def platform_request_resize(self):
        cdef Any res = dereference(self._ptr).PlatformRequestResize
        return res
    @platform_request_resize.setter
    def platform_request_resize(self, value: Any):
        dereference(self._ptr).PlatformRequestResize = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(Any)
    @property
    def platform_request_close(self):
        cdef Any res = dereference(self._ptr).PlatformRequestClose
        return res
    @platform_request_close.setter
    def platform_request_close(self, value: Any):
        dereference(self._ptr).PlatformRequestClose = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImGuiViewport)
    @staticmethod
    def viewport():
        cdef ccimgui.ImGuiViewport* _ptr = ccimgui.ImGuiViewport_ImGuiViewport()
        if _ptr is NULL:
            raise MemoryError
        return ImGuiViewport.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def destroy(self: ImGuiViewport):
        ccimgui.ImGuiViewport_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def get_center(pOut: ImVec2, self: ImGuiViewport):
        ccimgui.ImGuiViewport_GetCenter(pOut._ptr, self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def get_work_center(pOut: ImVec2, self: ImGuiViewport):
        ccimgui.ImGuiViewport_GetWorkCenter(pOut._ptr, self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawList:
    cdef ccimgui.ImDrawList* _ptr
    
    @staticmethod
    cdef ImDrawList from_ptr(ccimgui.ImDrawList* _ptr):
        cdef ImDrawList wrapper = ImDrawList.__new__(ImDrawList)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(List[ImDrawCmd])
    @property
    def cmd_buffer(self):
        return [
            ImDrawCmd.from_ptr(&dereference(self._ptr).CmdBuffer.Data[idx])
            for idx in range(dereference(self._ptr).CmdBuffer.Size)
        ]
    @cmd_buffer.setter
    def cmd_buffer(self, value: ImVector_ImDrawCmd):
        # dereference(self._ptr).CmdBuffer = value._ptr
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(ImVector_ImDrawIdx)
    @property
    def idx_buffer(self):
        cdef ccimgui.ImVector_ImDrawIdx* res = &dereference(self._ptr).IdxBuffer
        return ImVector_ImDrawIdx.from_ptr(res)
    @idx_buffer.setter
    def idx_buffer(self, value: ImVector_ImDrawIdx):
        # dereference(self._ptr).IdxBuffer = value._ptr
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(True)
    # ?active(True)
    # ?returns(ImVector_ImDrawVert)
    @property
    def vtx_buffer(self):
        cdef ccimgui.ImVector_ImDrawVert* res = &dereference(self._ptr).VtxBuffer
        return ImVector_ImDrawVert.from_ptr(res)
    @vtx_buffer.setter
    def vtx_buffer(self, value: ImVector_ImDrawVert):
        # dereference(self._ptr).VtxBuffer = value._ptr
        raise NotImplementedError
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def flags(self):
        cdef ccimgui.ImDrawListFlags res = dereference(self._ptr).Flags
        return res
    @flags.setter
    def flags(self, value: int):
        dereference(self._ptr).Flags = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def _vtx_current_idx(self):
        cdef Any res = dereference(self._ptr)._VtxCurrentIdx
        return res
    @_vtx_current_idx.setter
    def _vtx_current_idx(self, value: int):
        dereference(self._ptr)._VtxCurrentIdx = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawListSharedData)
    @property
    def _data(self):
        cdef ccimgui.ImDrawListSharedData res = dereference(self._ptr)._Data
        return ImDrawListSharedData.from_ptr(res)
    @_data.setter
    def _data(self, value: ImDrawListSharedData):
        dereference(self._ptr)._Data = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(str)
    @property
    def _owner_name(self):
        cdef str res = dereference(self._ptr)._OwnerName
        return res
    @_owner_name.setter
    def _owner_name(self, value: str):
        dereference(self._ptr)._OwnerName = _bytes(value)
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawVert)
    @property
    def _vtx_write_ptr(self):
        cdef ccimgui.ImDrawVert res = dereference(self._ptr)._VtxWritePtr
        return ImDrawVert.from_ptr(res)
    @_vtx_write_ptr.setter
    def _vtx_write_ptr(self, value: ImDrawVert):
        dereference(self._ptr)._VtxWritePtr = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    @property
    def _idx_write_ptr(self):
        cdef Any res = dereference(self._ptr)._IdxWritePtr
        return res
    @_idx_write_ptr.setter
    def _idx_write_ptr(self, value: int):
        dereference(self._ptr)._IdxWritePtr = value
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImVec4)
    @property
    def _clip_rect_stack(self):
        cdef ccimgui.ImVector_ImVec4 res = dereference(self._ptr)._ClipRectStack
        return ImVector_ImVec4.from_ptr(res)
    @_clip_rect_stack.setter
    def _clip_rect_stack(self, value: ImVector_ImVec4):
        dereference(self._ptr)._ClipRectStack = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImTextureID)
    @property
    def _texture_id_stack(self):
        cdef ccimgui.ImVector_ImTextureID res = dereference(self._ptr)._TextureIdStack
        return ImVector_ImTextureID.from_ptr(res)
    @_texture_id_stack.setter
    def _texture_id_stack(self, value: ImVector_ImTextureID):
        dereference(self._ptr)._TextureIdStack = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImVector_ImVec2)
    @property
    def _path(self):
        cdef ccimgui.ImVector_ImVec2 res = dereference(self._ptr)._Path
        return ImVector_ImVec2.from_ptr(res)
    @_path.setter
    def _path(self, value: ImVector_ImVec2):
        dereference(self._ptr)._Path = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawCmdHeader)
    @property
    def _cmd_header(self):
        cdef ccimgui.ImDrawCmdHeader res = dereference(self._ptr)._CmdHeader
        return ImDrawCmdHeader.from_ptr(res)
    @_cmd_header.setter
    def _cmd_header(self, value: ImDrawCmdHeader):
        dereference(self._ptr)._CmdHeader = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawListSplitter)
    @property
    def _splitter(self):
        cdef ccimgui.ImDrawListSplitter res = dereference(self._ptr)._Splitter
        return ImDrawListSplitter.from_ptr(res)
    @_splitter.setter
    def _splitter(self, value: ImDrawListSplitter):
        dereference(self._ptr)._Splitter = value._ptr
    # [End Field]

    # [Field]
    # ?use_template(False)
    # ?active(False)
    # ?returns(float)
    @property
    def _fringe_scale(self):
        cdef float res = dereference(self._ptr)._FringeScale
        return res
    @_fringe_scale.setter
    def _fringe_scale(self, value: float):
        dereference(self._ptr)._FringeScale = value
    # [End Field]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawList)
    @staticmethod
    def draw_list(shared_data: ImDrawListSharedData):
        cdef ccimgui.ImDrawList* _ptr = ccimgui.ImDrawList_ImDrawList(shared_data._ptr)
        if _ptr is NULL:
            raise MemoryError
        return ImDrawList.from_ptr(_ptr)
    # [End Method]

    # [Method]
    # ?use_template(True)
    # ?active(True)
    # ?returns(None)
    def destroy(self: ImDrawList):
        ccimgui.ImDrawList_destroy(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_bezier_cubic(self: ImDrawList, p1: tuple, p2: tuple, p3: tuple, p4: tuple, col: int, thickness: float, num_segments: int=0):
        """
        Cubic bezier (4 control points)
        """
        ccimgui.ImDrawList_AddBezierCubic(
            self._ptr,
            _cast_tuple_ImVec2(p1),
            _cast_tuple_ImVec2(p2),
            _cast_tuple_ImVec2(p3),
            _cast_tuple_ImVec2(p4),
            col,
            thickness,
            num_segments
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_bezier_quadratic(self: ImDrawList, p1: tuple, p2: tuple, p3: tuple, col: int, thickness: float, num_segments: int=0):
        """
        Quadratic bezier (3 control points)
        """
        ccimgui.ImDrawList_AddBezierQuadratic(
            self._ptr,
            _cast_tuple_ImVec2(p1),
            _cast_tuple_ImVec2(p2),
            _cast_tuple_ImVec2(p3),
            col,
            thickness,
            num_segments
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_circle(self: ImDrawList, center: tuple, radius: float, col: int, num_segments: int=0, thickness: float=1.0):
        ccimgui.ImDrawList_AddCircle(
            self._ptr,
            _cast_tuple_ImVec2(center),
            radius,
            col,
            num_segments,
            thickness
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_circle_filled(self: ImDrawList, center: tuple, radius: float, col: int, num_segments: int=0):
        ccimgui.ImDrawList_AddCircleFilled(self._ptr, _cast_tuple_ImVec2(center), radius, col, num_segments)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_convex_poly_filled(self: ImDrawList, points: ImVec2, num_points: int, col: int):
        ccimgui.ImDrawList_AddConvexPolyFilled(self._ptr, points._ptr, num_points, col)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_draw_cmd(self: ImDrawList):
        """
        This is useful if you need to forcefully create a new draw call
        (to allow for dependent rendering / blending). otherwise primitives
        are merged into the same draw-call as much as possible
        """
        ccimgui.ImDrawList_AddDrawCmd(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_image(self: ImDrawList, user_texture_id: Any, p_min: tuple, p_max: tuple, uv_min: tuple=(0, 0), uv_max: tuple=(1, 1), col: int=4294967295):
        ccimgui.ImDrawList_AddImage(
            self._ptr,
            user_texture_id,
            _cast_tuple_ImVec2(p_min),
            _cast_tuple_ImVec2(p_max),
            _cast_tuple_ImVec2(uv_min),
            _cast_tuple_ImVec2(uv_max),
            col
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_image_quad(self: ImDrawList, user_texture_id: Any, p1: tuple, p2: tuple, p3: tuple, p4: tuple, uv1: tuple=(0, 0), uv2: tuple=(1, 0), uv3: tuple=(1, 1), uv4: tuple=(0, 1), col: int=4294967295):
        ccimgui.ImDrawList_AddImageQuad(
            self._ptr,
            user_texture_id,
            _cast_tuple_ImVec2(p1),
            _cast_tuple_ImVec2(p2),
            _cast_tuple_ImVec2(p3),
            _cast_tuple_ImVec2(p4),
            _cast_tuple_ImVec2(uv1),
            _cast_tuple_ImVec2(uv2),
            _cast_tuple_ImVec2(uv3),
            _cast_tuple_ImVec2(uv4),
            col
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_image_rounded(self: ImDrawList, user_texture_id: Any, p_min: tuple, p_max: tuple, uv_min: tuple, uv_max: tuple, col: int, rounding: float, flags: int=0):
        ccimgui.ImDrawList_AddImageRounded(
            self._ptr,
            user_texture_id,
            _cast_tuple_ImVec2(p_min),
            _cast_tuple_ImVec2(p_max),
            _cast_tuple_ImVec2(uv_min),
            _cast_tuple_ImVec2(uv_max),
            col,
            rounding,
            flags
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_line(self: ImDrawList, p1: tuple, p2: tuple, col: int, thickness: float=1.0):
        ccimgui.ImDrawList_AddLine(self._ptr, _cast_tuple_ImVec2(p1), _cast_tuple_ImVec2(p2), col, thickness)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_ngon(self: ImDrawList, center: tuple, radius: float, col: int, num_segments: int, thickness: float=1.0):
        ccimgui.ImDrawList_AddNgon(
            self._ptr,
            _cast_tuple_ImVec2(center),
            radius,
            col,
            num_segments,
            thickness
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_ngon_filled(self: ImDrawList, center: tuple, radius: float, col: int, num_segments: int):
        ccimgui.ImDrawList_AddNgonFilled(self._ptr, _cast_tuple_ImVec2(center), radius, col, num_segments)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_polyline(self: ImDrawList, points: ImVec2, num_points: int, col: int, flags: int, thickness: float):
        ccimgui.ImDrawList_AddPolyline(
            self._ptr,
            points._ptr,
            num_points,
            col,
            flags,
            thickness
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_quad(self: ImDrawList, p1: tuple, p2: tuple, p3: tuple, p4: tuple, col: int, thickness: float=1.0):
        ccimgui.ImDrawList_AddQuad(
            self._ptr,
            _cast_tuple_ImVec2(p1),
            _cast_tuple_ImVec2(p2),
            _cast_tuple_ImVec2(p3),
            _cast_tuple_ImVec2(p4),
            col,
            thickness
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_quad_filled(self: ImDrawList, p1: tuple, p2: tuple, p3: tuple, p4: tuple, col: int):
        ccimgui.ImDrawList_AddQuadFilled(
            self._ptr,
            _cast_tuple_ImVec2(p1),
            _cast_tuple_ImVec2(p2),
            _cast_tuple_ImVec2(p3),
            _cast_tuple_ImVec2(p4),
            col
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_rect(self: ImDrawList, p_min: tuple, p_max: tuple, col: int, rounding: float=0.0, flags: int=0, thickness: float=1.0):
        """
        A: upper-left, b: lower-right (== upper-left + size)
        """
        ccimgui.ImDrawList_AddRect(
            self._ptr,
            _cast_tuple_ImVec2(p_min),
            _cast_tuple_ImVec2(p_max),
            col,
            rounding,
            flags,
            thickness
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_rect_filled(self: ImDrawList, p_min: tuple, p_max: tuple, col: int, rounding: float=0.0, flags: int=0):
        """
        A: upper-left, b: lower-right (== upper-left + size)
        """
        ccimgui.ImDrawList_AddRectFilled(
            self._ptr,
            _cast_tuple_ImVec2(p_min),
            _cast_tuple_ImVec2(p_max),
            col,
            rounding,
            flags
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_rect_filled_multi_color(self: ImDrawList, p_min: tuple, p_max: tuple, col_upr_left: int, col_upr_right: int, col_bot_right: int, col_bot_left: int):
        ccimgui.ImDrawList_AddRectFilledMultiColor(
            self._ptr,
            _cast_tuple_ImVec2(p_min),
            _cast_tuple_ImVec2(p_max),
            col_upr_left,
            col_upr_right,
            col_bot_right,
            col_bot_left
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_text_font_ptr(self: ImDrawList, font: ImFont, font_size: float, pos: tuple, col: int, text_begin: str, text_end: str=None, wrap_width: float=0.0, cpu_fine_clip_rect: ImVec4=None):
        ccimgui.ImDrawList_AddText_FontPtr(
            self._ptr,
            font._ptr,
            font_size,
            _cast_tuple_ImVec2(pos),
            col,
            _bytes(text_begin),
            _bytes(text_end),
            wrap_width,
            cpu_fine_clip_rect._ptr
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_text_vec2(self: ImDrawList, pos: tuple, col: int, text_begin: str, text_end: str=None):
        ccimgui.ImDrawList_AddText_Vec2(self._ptr, _cast_tuple_ImVec2(pos), col, _bytes(text_begin), _bytes(text_end))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_triangle(self: ImDrawList, p1: tuple, p2: tuple, p3: tuple, col: int, thickness: float=1.0):
        ccimgui.ImDrawList_AddTriangle(
            self._ptr,
            _cast_tuple_ImVec2(p1),
            _cast_tuple_ImVec2(p2),
            _cast_tuple_ImVec2(p3),
            col,
            thickness
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def add_triangle_filled(self: ImDrawList, p1: tuple, p2: tuple, p3: tuple, col: int):
        ccimgui.ImDrawList_AddTriangleFilled(self._ptr, _cast_tuple_ImVec2(p1), _cast_tuple_ImVec2(p2), _cast_tuple_ImVec2(p3), col)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def channels_merge(self: ImDrawList):
        ccimgui.ImDrawList_ChannelsMerge(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def channels_set_current(self: ImDrawList, n: int):
        ccimgui.ImDrawList_ChannelsSetCurrent(self._ptr, n)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def channels_split(self: ImDrawList, count: int):
        ccimgui.ImDrawList_ChannelsSplit(self._ptr, count)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(ImDrawList)
    def clone_output(self: ImDrawList):
        """
        Create a clone of the cmdbuffer/idxbuffer/vtxbuffer.
        """
        cdef ccimgui.ImDrawList* res = ccimgui.ImDrawList_CloneOutput(self._ptr)
        return ImDrawList.from_ptr(res)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def get_clip_rect_max(pOut: ImVec2, self: ImDrawList):
        ccimgui.ImDrawList_GetClipRectMax(pOut._ptr, self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def get_clip_rect_min(pOut: ImVec2, self: ImDrawList):
        ccimgui.ImDrawList_GetClipRectMin(pOut._ptr, self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_arc_to(self: ImDrawList, center: tuple, radius: float, a_min: float, a_max: float, num_segments: int=0):
        ccimgui.ImDrawList_PathArcTo(
            self._ptr,
            _cast_tuple_ImVec2(center),
            radius,
            a_min,
            a_max,
            num_segments
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_arc_to_fast(self: ImDrawList, center: tuple, radius: float, a_min_of_12: int, a_max_of_12: int):
        """
        Use precomputed angles for a 12 steps circle
        """
        ccimgui.ImDrawList_PathArcToFast(self._ptr, _cast_tuple_ImVec2(center), radius, a_min_of_12, a_max_of_12)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_bezier_cubic_curve_to(self: ImDrawList, p2: tuple, p3: tuple, p4: tuple, num_segments: int=0):
        """
        Cubic bezier (4 control points)
        """
        ccimgui.ImDrawList_PathBezierCubicCurveTo(self._ptr, _cast_tuple_ImVec2(p2), _cast_tuple_ImVec2(p3), _cast_tuple_ImVec2(p4), num_segments)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_bezier_quadratic_curve_to(self: ImDrawList, p2: tuple, p3: tuple, num_segments: int=0):
        """
        Quadratic bezier (3 control points)
        """
        ccimgui.ImDrawList_PathBezierQuadraticCurveTo(self._ptr, _cast_tuple_ImVec2(p2), _cast_tuple_ImVec2(p3), num_segments)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_clear(self: ImDrawList):
        ccimgui.ImDrawList_PathClear(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_fill_convex(self: ImDrawList, col: int):
        ccimgui.ImDrawList_PathFillConvex(self._ptr, col)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_line_to(self: ImDrawList, pos: tuple):
        ccimgui.ImDrawList_PathLineTo(self._ptr, _cast_tuple_ImVec2(pos))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_line_to_merge_duplicate(self: ImDrawList, pos: tuple):
        ccimgui.ImDrawList_PathLineToMergeDuplicate(self._ptr, _cast_tuple_ImVec2(pos))
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_rect(self: ImDrawList, rect_min: tuple, rect_max: tuple, rounding: float=0.0, flags: int=0):
        ccimgui.ImDrawList_PathRect(self._ptr, _cast_tuple_ImVec2(rect_min), _cast_tuple_ImVec2(rect_max), rounding, flags)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def path_stroke(self: ImDrawList, col: int, flags: int=0, thickness: float=1.0):
        ccimgui.ImDrawList_PathStroke(self._ptr, col, flags, thickness)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def pop_clip_rect(self: ImDrawList):
        ccimgui.ImDrawList_PopClipRect(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def pop_texture_id(self: ImDrawList):
        ccimgui.ImDrawList_PopTextureID(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_quad_uv(self: ImDrawList, a: tuple, b: tuple, c: tuple, d: tuple, uv_a: tuple, uv_b: tuple, uv_c: tuple, uv_d: tuple, col: int):
        ccimgui.ImDrawList_PrimQuadUV(
            self._ptr,
            _cast_tuple_ImVec2(a),
            _cast_tuple_ImVec2(b),
            _cast_tuple_ImVec2(c),
            _cast_tuple_ImVec2(d),
            _cast_tuple_ImVec2(uv_a),
            _cast_tuple_ImVec2(uv_b),
            _cast_tuple_ImVec2(uv_c),
            _cast_tuple_ImVec2(uv_d),
            col
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_rect(self: ImDrawList, a: tuple, b: tuple, col: int):
        """
        Axis aligned rectangle (composed of two triangles)
        """
        ccimgui.ImDrawList_PrimRect(self._ptr, _cast_tuple_ImVec2(a), _cast_tuple_ImVec2(b), col)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_rect_uv(self: ImDrawList, a: tuple, b: tuple, uv_a: tuple, uv_b: tuple, col: int):
        ccimgui.ImDrawList_PrimRectUV(
            self._ptr,
            _cast_tuple_ImVec2(a),
            _cast_tuple_ImVec2(b),
            _cast_tuple_ImVec2(uv_a),
            _cast_tuple_ImVec2(uv_b),
            col
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_reserve(self: ImDrawList, idx_count: int, vtx_count: int):
        ccimgui.ImDrawList_PrimReserve(self._ptr, idx_count, vtx_count)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_unreserve(self: ImDrawList, idx_count: int, vtx_count: int):
        ccimgui.ImDrawList_PrimUnreserve(self._ptr, idx_count, vtx_count)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_vtx(self: ImDrawList, pos: tuple, uv: tuple, col: int):
        """
        Write vertex with unique index
        """
        ccimgui.ImDrawList_PrimVtx(self._ptr, _cast_tuple_ImVec2(pos), _cast_tuple_ImVec2(uv), col)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_write_idx(self: ImDrawList, idx: int):
        ccimgui.ImDrawList_PrimWriteIdx(self._ptr, idx)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def prim_write_vtx(self: ImDrawList, pos: tuple, uv: tuple, col: int):
        ccimgui.ImDrawList_PrimWriteVtx(self._ptr, _cast_tuple_ImVec2(pos), _cast_tuple_ImVec2(uv), col)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def push_clip_rect(self: ImDrawList, clip_rect_min: tuple, clip_rect_max: tuple, intersect_with_current_clip_rect: Any=False):
        """
        Render-level scissoring. this is passed down to your render function
        but not used for cpu-side coarse clipping. prefer using higher-level
        imgui::pushcliprect() to affect logic (hit-testing and widget
        culling)
        """
        ccimgui.ImDrawList_PushClipRect(self._ptr, _cast_tuple_ImVec2(clip_rect_min), _cast_tuple_ImVec2(clip_rect_max), intersect_with_current_clip_rect)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def push_clip_rect_full_screen(self: ImDrawList):
        ccimgui.ImDrawList_PushClipRectFullScreen(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def push_texture_id(self: ImDrawList, texture_id: Any):
        ccimgui.ImDrawList_PushTextureID(self._ptr, texture_id)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(int)
    def _calc_circle_auto_segment_count(self: ImDrawList, radius: float):
        cdef int res = ccimgui.ImDrawList__CalcCircleAutoSegmentCount(self._ptr, radius)
        return res
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _clear_free_memory(self: ImDrawList):
        ccimgui.ImDrawList__ClearFreeMemory(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _on_changed_clip_rect(self: ImDrawList):
        ccimgui.ImDrawList__OnChangedClipRect(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _on_changed_texture_id(self: ImDrawList):
        ccimgui.ImDrawList__OnChangedTextureID(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _on_changed_vtx_offset(self: ImDrawList):
        ccimgui.ImDrawList__OnChangedVtxOffset(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _path_arc_to_fast_ex(self: ImDrawList, center: tuple, radius: float, a_min_sample: int, a_max_sample: int, a_step: int):
        ccimgui.ImDrawList__PathArcToFastEx(
            self._ptr,
            _cast_tuple_ImVec2(center),
            radius,
            a_min_sample,
            a_max_sample,
            a_step
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _path_arc_ton(self: ImDrawList, center: tuple, radius: float, a_min: float, a_max: float, num_segments: int):
        ccimgui.ImDrawList__PathArcToN(
            self._ptr,
            _cast_tuple_ImVec2(center),
            radius,
            a_min,
            a_max,
            num_segments
        )
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _pop_unused_draw_cmd(self: ImDrawList):
        ccimgui.ImDrawList__PopUnusedDrawCmd(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _reset_for_new_frame(self: ImDrawList):
        ccimgui.ImDrawList__ResetForNewFrame(self._ptr)
    # [End Method]

    # [Method]
    # ?use_template(False)
    # ?active(False)
    # ?returns(None)
    def _try_merge_draw_cmds(self: ImDrawList):
        ccimgui.ImDrawList__TryMergeDrawCmds(self._ptr)
    # [End Method]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImDrawListSharedData:
    cdef ccimgui.ImDrawListSharedData* _ptr
    
    @staticmethod
    cdef ImDrawListSharedData from_ptr(ccimgui.ImDrawListSharedData* _ptr):
        cdef ImDrawListSharedData wrapper = ImDrawListSharedData.__new__(ImDrawListSharedData)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImFontBuilderIO:
    cdef ccimgui.ImFontBuilderIO* _ptr
    
    @staticmethod
    cdef ImFontBuilderIO from_ptr(ccimgui.ImFontBuilderIO* _ptr):
        cdef ImFontBuilderIO wrapper = ImFontBuilderIO.__new__(ImFontBuilderIO)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class ImGuiContext:
    cdef ccimgui.ImGuiContext* _ptr
    
    @staticmethod
    cdef ImGuiContext from_ptr(ccimgui.ImGuiContext* _ptr):
        cdef ImGuiContext wrapper = ImGuiContext.__new__(ImGuiContext)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class GLFWwindow:
    cdef ccimgui.GLFWwindow* _ptr
    
    @staticmethod
    cdef GLFWwindow from_ptr(ccimgui.GLFWwindow* _ptr):
        cdef GLFWwindow wrapper = GLFWwindow.__new__(GLFWwindow)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]
# [End Class]

# [Class]
# [Class Constants]
# ?use_template(False)
cdef class GLFWmonitor:
    cdef ccimgui.GLFWmonitor* _ptr
    
    @staticmethod
    cdef GLFWmonitor from_ptr(ccimgui.GLFWmonitor* _ptr):
        cdef GLFWmonitor wrapper = GLFWmonitor.__new__(GLFWmonitor)
        wrapper._ptr = _ptr
        return wrapper
    
    def __init__(self):
        raise TypeError("This class cannot be instantiated directly.")
    # [End Class Constants]
# [End Class]

