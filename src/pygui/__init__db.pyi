
from typing import Any, Callable, Tuple, List, Sequence
from PIL import Image


VERTEX_BUFFER_POS_OFFSET: int
VERTEX_BUFFER_UV_OFFSET: int
VERTEX_BUFFER_COL_OFFSET: int
VERTEX_SIZE: int
INDEX_SIZE: int
FLT_MIN: float
FLT_MAX: float

IMGUI_PAYLOAD_TYPE_COLOR_3F: int
IMGUI_PAYLOAD_TYPE_COLOR_4F: int

class BoolPtr:
    ptr: bool
    def __init__(self, initial_value: bool): ...
    def __bool__(self) -> bool: ...

class IntPtr:
    value: int
    def __init__(self, initial_value: int): ...

class FloatPtr:
    value: float
    def __float__(self) -> float: ...

class DoublePtr:
    value: float
    def __init__(self, initial_value: float): ...

class StrPtr:
    value: str
    def __init__(self, initial_value: str, buffer_size=256): ...

class Vec4Ptr:
    x: float
    y: float
    z: float
    w: float
    def __init__(self, x: float, y: float, z: float, w: float): ...
    def vec(self) -> Tuple[float, float, float, float]: ...
    def as_floatptrs(self) -> Sequence[FloatPtr]: ...
    def from_floatptrs(self, float_ptrs: Sequence[FloatPtr]): ...
    def to_floatptrs(self) -> Sequence[FloatPtr]: ...
    def copy(self) -> Vec4Ptr: ...

class Vec2Ptr:
    x: float
    y: float
    def __init__(self, x: float, y: float): ...
    def vec(self) -> Tuple[float, float]: ...
    def as_floatptrs(self) -> Sequence[FloatPtr]: ...
    def from_floatptrs(self, float_ptrs: Sequence[FloatPtr]): ...
    def to_floatptrs(self) -> Sequence[FloatPtr]: ...
    def copy(self) -> Vec2Ptr: ...

def IM_COL32(r: int, g: int, b: int, a: int) -> int: ...

def load_image(image: Image) -> int: ...


WINDOW_FLAGS_NONE: int
WINDOW_FLAGS_NO_TITLE_BAR: int
WINDOW_FLAGS_NO_RESIZE: int
WINDOW_FLAGS_NO_MOVE: int
WINDOW_FLAGS_NO_SCROLLBAR: int
WINDOW_FLAGS_NO_SCROLL_WITH_MOUSE: int
WINDOW_FLAGS_NO_COLLAPSE: int
WINDOW_FLAGS_ALWAYS_AUTO_RESIZE: int
WINDOW_FLAGS_NO_BACKGROUND: int
WINDOW_FLAGS_NO_SAVED_SETTINGS: int
WINDOW_FLAGS_NO_MOUSE_INPUTS: int
WINDOW_FLAGS_MENU_BAR: int
WINDOW_FLAGS_HORIZONTAL_SCROLLBAR: int
WINDOW_FLAGS_NO_FOCUS_ON_APPEARING: int
WINDOW_FLAGS_NO_BRING_TO_FRONT_ON_FOCUS: int
WINDOW_FLAGS_ALWAYS_VERTICAL_SCROLLBAR: int
WINDOW_FLAGS_ALWAYS_HORIZONTAL_SCROLLBAR: int
WINDOW_FLAGS_ALWAYS_USE_WINDOW_PADDING: int
WINDOW_FLAGS_NO_NAV_INPUTS: int
WINDOW_FLAGS_NO_NAV_FOCUS: int
WINDOW_FLAGS_UNSAVED_DOCUMENT: int
WINDOW_FLAGS_NO_DOCKING: int
WINDOW_FLAGS_NO_NAV: int
WINDOW_FLAGS_NO_DECORATION: int
WINDOW_FLAGS_NO_INPUTS: int
WINDOW_FLAGS_NAV_FLATTENED: int
WINDOW_FLAGS_CHILD_WINDOW: int
WINDOW_FLAGS_TOOLTIP: int
WINDOW_FLAGS_POPUP: int
WINDOW_FLAGS_MODAL: int
WINDOW_FLAGS_CHILD_MENU: int
WINDOW_FLAGS_DOCK_NODE_HOST: int
INPUT_TEXT_FLAGS_NONE: int
INPUT_TEXT_FLAGS_CHARS_DECIMAL: int
INPUT_TEXT_FLAGS_CHARS_HEXADECIMAL: int
INPUT_TEXT_FLAGS_CHARS_UPPERCASE: int
INPUT_TEXT_FLAGS_CHARS_NO_BLANK: int
INPUT_TEXT_FLAGS_AUTO_SELECT_ALL: int
INPUT_TEXT_FLAGS_ENTER_RETURNS_TRUE: int
INPUT_TEXT_FLAGS_CALLBACK_COMPLETION: int
INPUT_TEXT_FLAGS_CALLBACK_HISTORY: int
INPUT_TEXT_FLAGS_CALLBACK_ALWAYS: int
INPUT_TEXT_FLAGS_CALLBACK_CHAR_FILTER: int
INPUT_TEXT_FLAGS_ALLOW_TAB_INPUT: int
INPUT_TEXT_FLAGS_CTRL_ENTER_FOR_NEW_LINE: int
INPUT_TEXT_FLAGS_NO_HORIZONTAL_SCROLL: int
INPUT_TEXT_FLAGS_ALWAYS_OVERWRITE: int
INPUT_TEXT_FLAGS_READ_ONLY: int
INPUT_TEXT_FLAGS_PASSWORD: int
INPUT_TEXT_FLAGS_NO_UNDO_REDO: int
INPUT_TEXT_FLAGS_CHARS_SCIENTIFIC: int
INPUT_TEXT_FLAGS_CALLBACK_RESIZE: int
INPUT_TEXT_FLAGS_CALLBACK_EDIT: int
INPUT_TEXT_FLAGS_ESCAPE_CLEARS_ALL: int
TREE_NODE_FLAGS_NONE: int
TREE_NODE_FLAGS_SELECTED: int
TREE_NODE_FLAGS_FRAMED: int
TREE_NODE_FLAGS_ALLOW_ITEM_OVERLAP: int
TREE_NODE_FLAGS_NO_TREE_PUSH_ON_OPEN: int
TREE_NODE_FLAGS_NO_AUTO_OPEN_ON_LOG: int
TREE_NODE_FLAGS_DEFAULT_OPEN: int
TREE_NODE_FLAGS_OPEN_ON_DOUBLE_CLICK: int
TREE_NODE_FLAGS_OPEN_ON_ARROW: int
TREE_NODE_FLAGS_LEAF: int
TREE_NODE_FLAGS_BULLET: int
TREE_NODE_FLAGS_FRAME_PADDING: int
TREE_NODE_FLAGS_SPAN_AVAIL_WIDTH: int
TREE_NODE_FLAGS_SPAN_FULL_WIDTH: int
TREE_NODE_FLAGS_NAV_LEFT_JUMPS_BACK_HERE: int
TREE_NODE_FLAGS_COLLAPSING_HEADER: int
POPUP_FLAGS_NONE: int
POPUP_FLAGS_MOUSE_BUTTON_LEFT: int
POPUP_FLAGS_MOUSE_BUTTON_RIGHT: int
POPUP_FLAGS_MOUSE_BUTTON_MIDDLE: int
POPUP_FLAGS_MOUSE_BUTTON_MASK: int
POPUP_FLAGS_MOUSE_BUTTON_DEFAULT: int
POPUP_FLAGS_NO_OPEN_OVER_EXISTING_POPUP: int
POPUP_FLAGS_NO_OPEN_OVER_ITEMS: int
POPUP_FLAGS_ANY_POPUP_ID: int
POPUP_FLAGS_ANY_POPUP_LEVEL: int
POPUP_FLAGS_ANY_POPUP: int
SELECTABLE_FLAGS_NONE: int
SELECTABLE_FLAGS_DONT_CLOSE_POPUPS: int
SELECTABLE_FLAGS_SPAN_ALL_COLUMNS: int
SELECTABLE_FLAGS_ALLOW_DOUBLE_CLICK: int
SELECTABLE_FLAGS_DISABLED: int
SELECTABLE_FLAGS_ALLOW_ITEM_OVERLAP: int
COMBO_FLAGS_NONE: int
COMBO_FLAGS_POPUP_ALIGN_LEFT: int
COMBO_FLAGS_HEIGHT_SMALL: int
COMBO_FLAGS_HEIGHT_REGULAR: int
COMBO_FLAGS_HEIGHT_LARGE: int
COMBO_FLAGS_HEIGHT_LARGEST: int
COMBO_FLAGS_NO_ARROW_BUTTON: int
COMBO_FLAGS_NO_PREVIEW: int
COMBO_FLAGS_HEIGHT_MASK: int
TAB_BAR_FLAGS_NONE: int
TAB_BAR_FLAGS_REORDERABLE: int
TAB_BAR_FLAGS_AUTO_SELECT_NEW_TABS: int
TAB_BAR_FLAGS_TAB_LIST_POPUP_BUTTON: int
TAB_BAR_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON: int
TAB_BAR_FLAGS_NO_TAB_LIST_SCROLLING_BUTTONS: int
TAB_BAR_FLAGS_NO_TOOLTIP: int
TAB_BAR_FLAGS_FITTING_POLICY_RESIZE_DOWN: int
TAB_BAR_FLAGS_FITTING_POLICY_SCROLL: int
TAB_BAR_FLAGS_FITTING_POLICY_MASK: int
TAB_BAR_FLAGS_FITTING_POLICY_DEFAULT: int
TAB_ITEM_FLAGS_NONE: int
TAB_ITEM_FLAGS_UNSAVED_DOCUMENT: int
TAB_ITEM_FLAGS_SET_SELECTED: int
TAB_ITEM_FLAGS_NO_CLOSE_WITH_MIDDLE_MOUSE_BUTTON: int
TAB_ITEM_FLAGS_NO_PUSH_ID: int
TAB_ITEM_FLAGS_NO_TOOLTIP: int
TAB_ITEM_FLAGS_NO_REORDER: int
TAB_ITEM_FLAGS_LEADING: int
TAB_ITEM_FLAGS_TRAILING: int
TABLE_FLAGS_NONE: int
TABLE_FLAGS_RESIZABLE: int
TABLE_FLAGS_REORDERABLE: int
TABLE_FLAGS_HIDEABLE: int
TABLE_FLAGS_SORTABLE: int
TABLE_FLAGS_NO_SAVED_SETTINGS: int
TABLE_FLAGS_CONTEXT_MENU_IN_BODY: int
TABLE_FLAGS_ROW_BG: int
TABLE_FLAGS_BORDERS_INNER_H: int
TABLE_FLAGS_BORDERS_OUTER_H: int
TABLE_FLAGS_BORDERS_INNER_V: int
TABLE_FLAGS_BORDERS_OUTER_V: int
TABLE_FLAGS_BORDERS_H: int
TABLE_FLAGS_BORDERS_V: int
TABLE_FLAGS_BORDERS_INNER: int
TABLE_FLAGS_BORDERS_OUTER: int
TABLE_FLAGS_BORDERS: int
TABLE_FLAGS_NO_BORDERS_IN_BODY: int
TABLE_FLAGS_NO_BORDERS_IN_BODY_UNTIL_RESIZE: int
TABLE_FLAGS_SIZING_FIXED_FIT: int
TABLE_FLAGS_SIZING_FIXED_SAME: int
TABLE_FLAGS_SIZING_STRETCH_PROP: int
TABLE_FLAGS_SIZING_STRETCH_SAME: int
TABLE_FLAGS_NO_HOST_EXTEND_X: int
TABLE_FLAGS_NO_HOST_EXTEND_Y: int
TABLE_FLAGS_NO_KEEP_COLUMNS_VISIBLE: int
TABLE_FLAGS_PRECISE_WIDTHS: int
TABLE_FLAGS_NO_CLIP: int
TABLE_FLAGS_PAD_OUTER_X: int
TABLE_FLAGS_NO_PAD_OUTER_X: int
TABLE_FLAGS_NO_PAD_INNER_X: int
TABLE_FLAGS_SCROLL_X: int
TABLE_FLAGS_SCROLL_Y: int
TABLE_FLAGS_SORT_MULTI: int
TABLE_FLAGS_SORT_TRISTATE: int
TABLE_FLAGS_SIZING_MASK: int
TABLE_COLUMN_FLAGS_NONE: int
TABLE_COLUMN_FLAGS_DISABLED: int
TABLE_COLUMN_FLAGS_DEFAULT_HIDE: int
TABLE_COLUMN_FLAGS_DEFAULT_SORT: int
TABLE_COLUMN_FLAGS_WIDTH_STRETCH: int
TABLE_COLUMN_FLAGS_WIDTH_FIXED: int
TABLE_COLUMN_FLAGS_NO_RESIZE: int
TABLE_COLUMN_FLAGS_NO_REORDER: int
TABLE_COLUMN_FLAGS_NO_HIDE: int
TABLE_COLUMN_FLAGS_NO_CLIP: int
TABLE_COLUMN_FLAGS_NO_SORT: int
TABLE_COLUMN_FLAGS_NO_SORT_ASCENDING: int
TABLE_COLUMN_FLAGS_NO_SORT_DESCENDING: int
TABLE_COLUMN_FLAGS_NO_HEADER_LABEL: int
TABLE_COLUMN_FLAGS_NO_HEADER_WIDTH: int
TABLE_COLUMN_FLAGS_PREFER_SORT_ASCENDING: int
TABLE_COLUMN_FLAGS_PREFER_SORT_DESCENDING: int
TABLE_COLUMN_FLAGS_INDENT_ENABLE: int
TABLE_COLUMN_FLAGS_INDENT_DISABLE: int
TABLE_COLUMN_FLAGS_IS_ENABLED: int
TABLE_COLUMN_FLAGS_IS_VISIBLE: int
TABLE_COLUMN_FLAGS_IS_SORTED: int
TABLE_COLUMN_FLAGS_IS_HOVERED: int
TABLE_COLUMN_FLAGS_WIDTH_MASK: int
TABLE_COLUMN_FLAGS_INDENT_MASK: int
TABLE_COLUMN_FLAGS_STATUS_MASK: int
TABLE_COLUMN_FLAGS_NO_DIRECT_RESIZE: int
TABLE_ROW_FLAGS_NONE: int
TABLE_ROW_FLAGS_HEADERS: int
TABLE_BG_TARGET_NONE: int
TABLE_BG_TARGET_ROW_BG0: int
TABLE_BG_TARGET_ROW_BG1: int
TABLE_BG_TARGET_CELL_BG: int
FOCUSED_FLAGS_NONE: int
FOCUSED_FLAGS_CHILD_WINDOWS: int
FOCUSED_FLAGS_ROOT_WINDOW: int
FOCUSED_FLAGS_ANY_WINDOW: int
FOCUSED_FLAGS_NO_POPUP_HIERARCHY: int
FOCUSED_FLAGS_DOCK_HIERARCHY: int
FOCUSED_FLAGS_ROOT_AND_CHILD_WINDOWS: int
HOVERED_FLAGS_NONE: int
HOVERED_FLAGS_CHILD_WINDOWS: int
HOVERED_FLAGS_ROOT_WINDOW: int
HOVERED_FLAGS_ANY_WINDOW: int
HOVERED_FLAGS_NO_POPUP_HIERARCHY: int
HOVERED_FLAGS_DOCK_HIERARCHY: int
HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_POPUP: int
HOVERED_FLAGS_ALLOW_WHEN_BLOCKED_BY_ACTIVE_ITEM: int
HOVERED_FLAGS_ALLOW_WHEN_OVERLAPPED: int
HOVERED_FLAGS_ALLOW_WHEN_DISABLED: int
HOVERED_FLAGS_NO_NAV_OVERRIDE: int
HOVERED_FLAGS_RECT_ONLY: int
HOVERED_FLAGS_ROOT_AND_CHILD_WINDOWS: int
HOVERED_FLAGS_DELAY_NORMAL: int
HOVERED_FLAGS_DELAY_SHORT: int
HOVERED_FLAGS_NO_SHARED_DELAY: int
DOCK_NODE_FLAGS_NONE: int
DOCK_NODE_FLAGS_KEEP_ALIVE_ONLY: int
DOCK_NODE_FLAGS_NO_DOCKING_IN_CENTRAL_NODE: int
DOCK_NODE_FLAGS_PASSTHRU_CENTRAL_NODE: int
DOCK_NODE_FLAGS_NO_SPLIT: int
DOCK_NODE_FLAGS_NO_RESIZE: int
DOCK_NODE_FLAGS_AUTO_HIDE_TAB_BAR: int
DRAG_DROP_FLAGS_NONE: int
DRAG_DROP_FLAGS_SOURCE_NO_PREVIEW_TOOLTIP: int
DRAG_DROP_FLAGS_SOURCE_NO_DISABLE_HOVER: int
DRAG_DROP_FLAGS_SOURCE_NO_HOLD_TO_OPEN_OTHERS: int
DRAG_DROP_FLAGS_SOURCE_ALLOW_NULL_ID: int
DRAG_DROP_FLAGS_SOURCE_EXTERN: int
DRAG_DROP_FLAGS_SOURCE_AUTO_EXPIRE_PAYLOAD: int
DRAG_DROP_FLAGS_ACCEPT_BEFORE_DELIVERY: int
DRAG_DROP_FLAGS_ACCEPT_NO_DRAW_DEFAULT_RECT: int
DRAG_DROP_FLAGS_ACCEPT_NO_PREVIEW_TOOLTIP: int
DRAG_DROP_FLAGS_ACCEPT_PEEK_ONLY: int
DATA_TYPE_S8: int
DATA_TYPE_U8: int
DATA_TYPE_S16: int
DATA_TYPE_U16: int
DATA_TYPE_S32: int
DATA_TYPE_U32: int
DATA_TYPE_S64: int
DATA_TYPE_U64: int
DATA_TYPE_FLOAT: int
DATA_TYPE_DOUBLE: int
DATA_TYPE_COUNT: int
DIR_NONE: int
DIR_LEFT: int
DIR_RIGHT: int
DIR_UP: int
DIR_DOWN: int
DIR_COUNT: int
SORT_DIRECTION_NONE: int
SORT_DIRECTION_ASCENDING: int
SORT_DIRECTION_DESCENDING: int
KEY_NONE: int
KEY_TAB: int
KEY_LEFT_ARROW: int
KEY_RIGHT_ARROW: int
KEY_UP_ARROW: int
KEY_DOWN_ARROW: int
KEY_PAGE_UP: int
KEY_PAGE_DOWN: int
KEY_HOME: int
KEY_END: int
KEY_INSERT: int
KEY_DELETE: int
KEY_BACKSPACE: int
KEY_SPACE: int
KEY_ENTER: int
KEY_ESCAPE: int
KEY_LEFT_CTRL: int
KEY_LEFT_SHIFT: int
KEY_LEFT_ALT: int
KEY_LEFT_SUPER: int
KEY_RIGHT_CTRL: int
KEY_RIGHT_SHIFT: int
KEY_RIGHT_ALT: int
KEY_RIGHT_SUPER: int
KEY_MENU: int
KEY0: int
KEY1: int
KEY2: int
KEY3: int
KEY4: int
KEY5: int
KEY6: int
KEY7: int
KEY8: int
KEY9: int
KEY_A: int
KEY_B: int
KEY_C: int
KEY_D: int
KEY_E: int
KEY_F: int
KEY_G: int
KEY_H: int
KEY_I: int
KEY_J: int
KEY_K: int
KEY_L: int
KEY_M: int
KEY_N: int
KEY_O: int
KEY_P: int
KEY_Q: int
KEY_R: int
KEY_S: int
KEY_T: int
KEY_U: int
KEY_V: int
KEY_W: int
KEY_X: int
KEY_Y: int
KEY_Z: int
KEY_F1: int
KEY_F2: int
KEY_F3: int
KEY_F4: int
KEY_F5: int
KEY_F6: int
KEY_F7: int
KEY_F8: int
KEY_F9: int
KEY_F10: int
KEY_F11: int
KEY_F12: int
KEY_APOSTROPHE: int
KEY_COMMA: int
KEY_MINUS: int
KEY_PERIOD: int
KEY_SLASH: int
KEY_SEMICOLON: int
KEY_EQUAL: int
KEY_LEFT_BRACKET: int
KEY_BACKSLASH: int
KEY_RIGHT_BRACKET: int
KEY_GRAVE_ACCENT: int
KEY_CAPS_LOCK: int
KEY_SCROLL_LOCK: int
KEY_NUM_LOCK: int
KEY_PRINT_SCREEN: int
KEY_PAUSE: int
KEY_KEYPAD0: int
KEY_KEYPAD1: int
KEY_KEYPAD2: int
KEY_KEYPAD3: int
KEY_KEYPAD4: int
KEY_KEYPAD5: int
KEY_KEYPAD6: int
KEY_KEYPAD7: int
KEY_KEYPAD8: int
KEY_KEYPAD9: int
KEY_KEYPAD_DECIMAL: int
KEY_KEYPAD_DIVIDE: int
KEY_KEYPAD_MULTIPLY: int
KEY_KEYPAD_SUBTRACT: int
KEY_KEYPAD_ADD: int
KEY_KEYPAD_ENTER: int
KEY_KEYPAD_EQUAL: int
KEY_GAMEPAD_START: int
KEY_GAMEPAD_BACK: int
KEY_GAMEPAD_FACE_LEFT: int
KEY_GAMEPAD_FACE_RIGHT: int
KEY_GAMEPAD_FACE_UP: int
KEY_GAMEPAD_FACE_DOWN: int
KEY_GAMEPAD_DPAD_LEFT: int
KEY_GAMEPAD_DPAD_RIGHT: int
KEY_GAMEPAD_DPAD_UP: int
KEY_GAMEPAD_DPAD_DOWN: int
KEY_GAMEPAD_L1: int
KEY_GAMEPAD_R1: int
KEY_GAMEPAD_L2: int
KEY_GAMEPAD_R2: int
KEY_GAMEPAD_L3: int
KEY_GAMEPAD_R3: int
KEY_GAMEPAD_LS_TICK_LEFT: int
KEY_GAMEPAD_LS_TICK_RIGHT: int
KEY_GAMEPAD_LS_TICK_UP: int
KEY_GAMEPAD_LS_TICK_DOWN: int
KEY_GAMEPAD_RS_TICK_LEFT: int
KEY_GAMEPAD_RS_TICK_RIGHT: int
KEY_GAMEPAD_RS_TICK_UP: int
KEY_GAMEPAD_RS_TICK_DOWN: int
KEY_MOUSE_LEFT: int
KEY_MOUSE_RIGHT: int
KEY_MOUSE_MIDDLE: int
KEY_MOUSE_X1: int
KEY_MOUSE_X2: int
KEY_MOUSE_WHEEL_X: int
KEY_MOUSE_WHEEL_Y: int
KEY_RESERVED_FOR_MOD_CTRL: int
KEY_RESERVED_FOR_MOD_SHIFT: int
KEY_RESERVED_FOR_MOD_ALT: int
KEY_RESERVED_FOR_MOD_SUPER: int
KEY_COUNT: int
MOD_NONE: int
MOD_CTRL: int
MOD_SHIFT: int
MOD_ALT: int
MOD_SUPER: int
MOD_SHORTCUT: int
MOD_MASK: int
KEY_NAMED_KEY_BEGIN: int
KEY_NAMED_KEY_END: int
KEY_NAMED_KEY_COUNT: int
KEY_KEYS_DATA_SIZE: int
KEY_KEYS_DATA_OFFSET: int
CONFIG_FLAGS_NONE: int
CONFIG_FLAGS_NAV_ENABLE_KEYBOARD: int
CONFIG_FLAGS_NAV_ENABLE_GAMEPAD: int
CONFIG_FLAGS_NAV_ENABLE_SET_MOUSE_POS: int
CONFIG_FLAGS_NAV_NO_CAPTURE_KEYBOARD: int
CONFIG_FLAGS_NO_MOUSE: int
CONFIG_FLAGS_NO_MOUSE_CURSOR_CHANGE: int
CONFIG_FLAGS_DOCKING_ENABLE: int
CONFIG_FLAGS_VIEWPORTS_ENABLE: int
CONFIG_FLAGS_DPI_ENABLE_SCALE_VIEWPORTS: int
CONFIG_FLAGS_DPI_ENABLE_SCALE_FONTS: int
CONFIG_FLAGS_IS_SRGB: int
CONFIG_FLAGS_IS_TOUCH_SCREEN: int
BACKEND_FLAGS_NONE: int
BACKEND_FLAGS_HAS_GAMEPAD: int
BACKEND_FLAGS_HAS_MOUSE_CURSORS: int
BACKEND_FLAGS_HAS_SET_MOUSE_POS: int
BACKEND_FLAGS_RENDERER_HAS_VTX_OFFSET: int
BACKEND_FLAGS_PLATFORM_HAS_VIEWPORTS: int
BACKEND_FLAGS_HAS_MOUSE_HOVERED_VIEWPORT: int
BACKEND_FLAGS_RENDERER_HAS_VIEWPORTS: int
COL_TEXT: int
COL_TEXT_DISABLED: int
COL_WINDOW_BG: int
COL_CHILD_BG: int
COL_POPUP_BG: int
COL_BORDER: int
COL_BORDER_SHADOW: int
COL_FRAME_BG: int
COL_FRAME_BG_HOVERED: int
COL_FRAME_BG_ACTIVE: int
COL_TITLE_BG: int
COL_TITLE_BG_ACTIVE: int
COL_TITLE_BG_COLLAPSED: int
COL_MENU_BAR_BG: int
COL_SCROLLBAR_BG: int
COL_SCROLLBAR_GRAB: int
COL_SCROLLBAR_GRAB_HOVERED: int
COL_SCROLLBAR_GRAB_ACTIVE: int
COL_CHECK_MARK: int
COL_SLIDER_GRAB: int
COL_SLIDER_GRAB_ACTIVE: int
COL_BUTTON: int
COL_BUTTON_HOVERED: int
COL_BUTTON_ACTIVE: int
COL_HEADER: int
COL_HEADER_HOVERED: int
COL_HEADER_ACTIVE: int
COL_SEPARATOR: int
COL_SEPARATOR_HOVERED: int
COL_SEPARATOR_ACTIVE: int
COL_RESIZE_GRIP: int
COL_RESIZE_GRIP_HOVERED: int
COL_RESIZE_GRIP_ACTIVE: int
COL_TAB: int
COL_TAB_HOVERED: int
COL_TAB_ACTIVE: int
COL_TAB_UNFOCUSED: int
COL_TAB_UNFOCUSED_ACTIVE: int
COL_DOCKING_PREVIEW: int
COL_DOCKING_EMPTY_BG: int
COL_PLOT_LINES: int
COL_PLOT_LINES_HOVERED: int
COL_PLOT_HISTOGRAM: int
COL_PLOT_HISTOGRAM_HOVERED: int
COL_TABLE_HEADER_BG: int
COL_TABLE_BORDER_STRONG: int
COL_TABLE_BORDER_LIGHT: int
COL_TABLE_ROW_BG: int
COL_TABLE_ROW_BG_ALT: int
COL_TEXT_SELECTED_BG: int
COL_DRAG_DROP_TARGET: int
COL_NAV_HIGHLIGHT: int
COL_NAV_WINDOWING_HIGHLIGHT: int
COL_NAV_WINDOWING_DIM_BG: int
COL_MODAL_WINDOW_DIM_BG: int
COL_COUNT: int
STYLE_VAR_ALPHA: int
STYLE_VAR_DISABLED_ALPHA: int
STYLE_VAR_WINDOW_PADDING: int
STYLE_VAR_WINDOW_ROUNDING: int
STYLE_VAR_WINDOW_BORDER_SIZE: int
STYLE_VAR_WINDOW_MIN_SIZE: int
STYLE_VAR_WINDOW_TITLE_ALIGN: int
STYLE_VAR_CHILD_ROUNDING: int
STYLE_VAR_CHILD_BORDER_SIZE: int
STYLE_VAR_POPUP_ROUNDING: int
STYLE_VAR_POPUP_BORDER_SIZE: int
STYLE_VAR_FRAME_PADDING: int
STYLE_VAR_FRAME_ROUNDING: int
STYLE_VAR_FRAME_BORDER_SIZE: int
STYLE_VAR_ITEM_SPACING: int
STYLE_VAR_ITEM_INNER_SPACING: int
STYLE_VAR_INDENT_SPACING: int
STYLE_VAR_CELL_PADDING: int
STYLE_VAR_SCROLLBAR_SIZE: int
STYLE_VAR_SCROLLBAR_ROUNDING: int
STYLE_VAR_GRAB_MIN_SIZE: int
STYLE_VAR_GRAB_ROUNDING: int
STYLE_VAR_TAB_ROUNDING: int
STYLE_VAR_BUTTON_TEXT_ALIGN: int
STYLE_VAR_SELECTABLE_TEXT_ALIGN: int
STYLE_VAR_SEPARATOR_TEXT_BORDER_SIZE: int
STYLE_VAR_SEPARATOR_TEXT_ALIGN: int
STYLE_VAR_SEPARATOR_TEXT_PADDING: int
STYLE_VAR_COUNT: int
BUTTON_FLAGS_NONE: int
BUTTON_FLAGS_MOUSE_BUTTON_LEFT: int
BUTTON_FLAGS_MOUSE_BUTTON_RIGHT: int
BUTTON_FLAGS_MOUSE_BUTTON_MIDDLE: int
BUTTON_FLAGS_MOUSE_BUTTON_MASK: int
BUTTON_FLAGS_MOUSE_BUTTON_DEFAULT: int
COLOR_EDIT_FLAGS_NONE: int
COLOR_EDIT_FLAGS_NO_ALPHA: int
COLOR_EDIT_FLAGS_NO_PICKER: int
COLOR_EDIT_FLAGS_NO_OPTIONS: int
COLOR_EDIT_FLAGS_NO_SMALL_PREVIEW: int
COLOR_EDIT_FLAGS_NO_INPUTS: int
COLOR_EDIT_FLAGS_NO_TOOLTIP: int
COLOR_EDIT_FLAGS_NO_LABEL: int
COLOR_EDIT_FLAGS_NO_SIDE_PREVIEW: int
COLOR_EDIT_FLAGS_NO_DRAG_DROP: int
COLOR_EDIT_FLAGS_NO_BORDER: int
COLOR_EDIT_FLAGS_ALPHA_BAR: int
COLOR_EDIT_FLAGS_ALPHA_PREVIEW: int
COLOR_EDIT_FLAGS_ALPHA_PREVIEW_HALF: int
COLOR_EDIT_FLAGS_HDR: int
COLOR_EDIT_FLAGS_DISPLAY_RGB: int
COLOR_EDIT_FLAGS_DISPLAY_HSV: int
COLOR_EDIT_FLAGS_DISPLAY_HEX: int
COLOR_EDIT_FLAGS_UINT8: int
COLOR_EDIT_FLAGS_FLOAT: int
COLOR_EDIT_FLAGS_PICKER_HUE_BAR: int
COLOR_EDIT_FLAGS_PICKER_HUE_WHEEL: int
COLOR_EDIT_FLAGS_INPUT_RGB: int
COLOR_EDIT_FLAGS_INPUT_HSV: int
COLOR_EDIT_FLAGS_DEFAULT_OPTIONS: int
COLOR_EDIT_FLAGS_DISPLAY_MASK: int
COLOR_EDIT_FLAGS_DATA_TYPE_MASK: int
COLOR_EDIT_FLAGS_PICKER_MASK: int
COLOR_EDIT_FLAGS_INPUT_MASK: int
SLIDER_FLAGS_NONE: int
SLIDER_FLAGS_ALWAYS_CLAMP: int
SLIDER_FLAGS_LOGARITHMIC: int
SLIDER_FLAGS_NO_ROUND_TO_FORMAT: int
SLIDER_FLAGS_NO_INPUT: int
SLIDER_FLAGS_INVALID_MASK: int
MOUSE_BUTTON_LEFT: int
MOUSE_BUTTON_RIGHT: int
MOUSE_BUTTON_MIDDLE: int
MOUSE_BUTTON_COUNT: int
MOUSE_CURSOR_NONE: int
MOUSE_CURSOR_ARROW: int
MOUSE_CURSOR_TEXT_INPUT: int
MOUSE_CURSOR_RESIZE_ALL: int
MOUSE_CURSOR_RESIZE_NS: int
MOUSE_CURSOR_RESIZE_EW: int
MOUSE_CURSOR_RESIZE_NESW: int
MOUSE_CURSOR_RESIZE_NWSE: int
MOUSE_CURSOR_HAND: int
MOUSE_CURSOR_NOT_ALLOWED: int
MOUSE_CURSOR_COUNT: int
COND_NONE: int
COND_ALWAYS: int
COND_ONCE: int
COND_FIRST_USE_EVER: int
COND_APPEARING: int
IM_DRAW_FLAGS_NONE: int
IM_DRAW_FLAGS_CLOSED: int
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_LEFT: int
IM_DRAW_FLAGS_ROUND_CORNERS_TOP_RIGHT: int
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_LEFT: int
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM_RIGHT: int
IM_DRAW_FLAGS_ROUND_CORNERS_NONE: int
IM_DRAW_FLAGS_ROUND_CORNERS_TOP: int
IM_DRAW_FLAGS_ROUND_CORNERS_BOTTOM: int
IM_DRAW_FLAGS_ROUND_CORNERS_LEFT: int
IM_DRAW_FLAGS_ROUND_CORNERS_RIGHT: int
IM_DRAW_FLAGS_ROUND_CORNERS_ALL: int
IM_DRAW_FLAGS_ROUND_CORNERS_DEFAULT: int
IM_DRAW_FLAGS_ROUND_CORNERS_MASK: int
IM_DRAW_LIST_FLAGS_NONE: int
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES: int
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_LINES_USE_TEX: int
IM_DRAW_LIST_FLAGS_ANTI_ALIASED_FILL: int
IM_DRAW_LIST_FLAGS_ALLOW_VTX_OFFSET: int
IM_FONT_ATLAS_FLAGS_NONE: int
IM_FONT_ATLAS_FLAGS_NO_POWER_OF_TWO_HEIGHT: int
IM_FONT_ATLAS_FLAGS_NO_MOUSE_CURSORS: int
IM_FONT_ATLAS_FLAGS_NO_BAKED_LINES: int
VIEWPORT_FLAGS_NONE: int
VIEWPORT_FLAGS_IS_PLATFORM_WINDOW: int
VIEWPORT_FLAGS_IS_PLATFORM_MONITOR: int
VIEWPORT_FLAGS_OWNED_BY_APP: int
VIEWPORT_FLAGS_NO_DECORATION: int
VIEWPORT_FLAGS_NO_TASK_BAR_ICON: int
VIEWPORT_FLAGS_NO_FOCUS_ON_APPEARING: int
VIEWPORT_FLAGS_NO_FOCUS_ON_CLICK: int
VIEWPORT_FLAGS_NO_INPUTS: int
VIEWPORT_FLAGS_NO_RENDERER_CLEAR: int
VIEWPORT_FLAGS_TOP_MOST: int
VIEWPORT_FLAGS_MINIMIZED: int
VIEWPORT_FLAGS_NO_AUTO_MERGE: int
VIEWPORT_FLAGS_CAN_HOST_OTHER_WINDOWS: int

# def accept_drag_drop_payload(type_: str, flags: int=0) -> ImGuiPayload: ...
# def align_text_to_frame_padding() -> None: ...
# def arrow_button(str_id: str, dir_: int) -> bool: ...
# def begin(name: str, p_open: BoolPtr=None, flags: int=0) -> bool: ...
# def begin_child(str_id: str, size: tuple=(0, 0), border: bool=False, flags: int=0) -> bool: ...
# def begin_child_frame(id_: int, size: tuple, flags: int=0) -> bool: ...
# def begin_child_id(id_: int, size: tuple=(0, 0), border: bool=False, flags: int=0) -> bool: ...
# def begin_combo(label: str, preview_value: str, flags: int=0) -> bool: ...
# def begin_disabled(disabled: bool=True) -> None: ...
# def begin_drag_drop_source(flags: int=0) -> bool: ...
# def begin_drag_drop_target() -> bool: ...
# def begin_group() -> None: ...
# def begin_list_box(label: str, size: tuple=(0, 0)) -> bool: ...
# def begin_main_menu_bar() -> bool: ...
# def begin_menu(label: str) -> bool: ...
# def begin_menu_bar() -> bool: ...
# def begin_menu_ex(label: str, enabled: bool=True) -> bool: ...
# def begin_popup(str_id: str, flags: int=0) -> bool: ...
# def begin_popup_context_item() -> bool: ...
# def begin_popup_context_item_ex(str_id: str=None, popup_flags: int=1) -> bool: ...
# def begin_popup_context_void() -> bool: ...
# def begin_popup_context_void_ex(str_id: str=None, popup_flags: int=1) -> bool: ...
# def begin_popup_context_window() -> bool: ...
# def begin_popup_context_window_ex(str_id: str=None, popup_flags: int=1) -> bool: ...
# def begin_popup_modal(name: str, p_open: BoolPtr=None, flags: int=0) -> bool: ...
# def begin_tab_bar(str_id: str, flags: int=0) -> bool: ...
# def begin_tab_item(label: str, p_open: BoolPtr=None, flags: int=0) -> bool: ...
# def begin_table(str_id: str, column: int, flags: int=0) -> bool: ...
# def begin_table_ex(str_id: str, column: int, flags: int=0, outer_size: tuple=(0.0, 0.0), inner_width: float=0.0) -> bool: ...
# def begin_tooltip() -> bool: ...
# def bullet() -> None: ...
# def bullet_text(fmt: str) -> None: ...
# def bullet_text_v(fmt: str) -> None: ...
# def button(label: str) -> bool: ...
# def button_ex(label: str, size: tuple=(0, 0)) -> bool: ...
# def calc_item_width() -> float: ...
# def calc_text_size(text: str) -> tuple: ...
# def calc_text_size_ex(text: str, text_end: str=None, hide_text_after_double_hash: bool=False, wrap_width: float=-1.0) -> tuple: ...
# def checkbox(label: str, v: BoolPtr) -> bool: ...
# def checkbox_flags_int_ptr(label: str, flags: IntPtr, flags_value: int) -> bool: ...
# def checkbox_flags_uint_ptr(label: str, flags: IntPtr, flags_value: int) -> bool: ...
# def close_current_popup() -> None: ...
# def collapsing_header(label: str, flags: int=0) -> bool: ...
# def collapsing_header_bool_ptr(label: str, p_visible: BoolPtr, flags: int=0) -> bool: ...
# def color_button(desc_id: str, col: tuple, flags: int=0) -> bool: ...
# def color_button_ex(desc_id: str, col: tuple, flags: int=0, size: tuple=(0, 0)) -> bool: ...
# def color_convert_float4_to_u32(in_: tuple) -> int: ...
# def color_convert_hsv_to_rgb(h: float, s: float, v: float, out_r: FloatPtr, out_g: FloatPtr, out_b: FloatPtr) -> None: ...
# def color_convert_rgb_to_hsv(r: float, g: float, b: float, out_h: FloatPtr, out_s: FloatPtr, out_v: FloatPtr) -> None: ...
# def color_convert_u32_to_float4(in_: int) -> tuple: ...
# def color_edit3(label: str, col: Sequence[FloatPtr], flags: int=0) -> bool: ...
# def color_edit4(label: str, col: Sequence[FloatPtr], flags: int=0) -> bool: ...
# def color_picker3(label: str, col: Sequence[FloatPtr], flags: int=0) -> bool: ...
# def color_picker4(label: str, col: Sequence[FloatPtr], flags: int=0, ref_col: FloatPtr=None) -> bool: ...
# def columns() -> None: ...
# def columns_ex(count: int=1, id_: str=None, border: bool=True) -> None: ...
# def combo(label: str, current_item: IntPtr, items_separated_by_zeros: str) -> bool: ...
# def combo_callback(label: str, current_item: IntPtr, items_getter: Callable, data: Any, items_count: int) -> bool: ...
# def combo_callback_ex(label: str, current_item: IntPtr, items_getter: Callable, data: Any, items_count: int, popup_max_height_in_items: int=-1) -> bool: ...
# def combo_char(label: str, current_item: IntPtr, items: str, items_count: int) -> bool: ...
# def combo_char_ex(label: str, current_item: IntPtr, items: str, items_count: int, popup_max_height_in_items: int=-1) -> bool: ...
# def combo_ex(label: str, current_item: IntPtr, items_separated_by_zeros: str, popup_max_height_in_items: int=-1) -> bool: ...
# def create_context(shared_font_atlas: ImFontAtlas=None) -> ImGuiContext: ...
# def debug_check_version_and_data_layout(version_str: str, sz_io: Any, sz_style: Any, sz_vec2: Any, sz_vec4: Any, sz_drawvert: Any, sz_drawidx: Any) -> bool: ...
# def debug_text_encoding(text: str) -> None: ...
# def destroy_context(ctx: ImGuiContext=None) -> None: ...
# def destroy_platform_windows() -> None: ...
# def dock_space(id_: int) -> int: ...
# def dock_space_ex(id_: int, size: tuple=(0, 0), flags: int=0, window_class: ImGuiWindowClass=None) -> int: ...
# def dock_space_over_viewport() -> int: ...
# def dock_space_over_viewport_ex(viewport: ImGuiViewport=None, flags: int=0, window_class: ImGuiWindowClass=None) -> int: ...
# def drag_float(label: str, v: FloatPtr) -> bool: ...
# def drag_float2(label: str, v: Sequence[FloatPtr]) -> bool: ...
# def drag_float2_ex(label: str, v: Sequence[FloatPtr], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3f", flags: int=0) -> bool: ...
# def drag_float3(label: str, v: Sequence[FloatPtr]) -> bool: ...
# def drag_float3_ex(label: str, v: Sequence[FloatPtr], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3f", flags: int=0) -> bool: ...
# def drag_float4(label: str, v: Sequence[FloatPtr]) -> bool: ...
# def drag_float4_ex(label: str, v: Sequence[FloatPtr], v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3f", flags: int=0) -> bool: ...
# def drag_float_ex(label: str, v: FloatPtr, v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3f", flags: int=0) -> bool: ...
# def drag_float_range2(label: str, v_current_min: FloatPtr, v_current_max: FloatPtr) -> bool: ...
# def drag_float_range2_ex(label: str, v_current_min: FloatPtr, v_current_max: FloatPtr, v_speed: float=1.0, v_min: float=0.0, v_max: float=0.0, format_: str="%.3f", format_max: str=None, flags: int=0) -> bool: ...
# def drag_int(label: str, v: IntPtr) -> bool: ...
# def drag_int2(label: str, v: Sequence[IntPtr]) -> bool: ...
# def drag_int2_ex(label: str, v: Sequence[IntPtr], v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0) -> bool: ...
# def drag_int3(label: str, v: Sequence[IntPtr]) -> bool: ...
# def drag_int3_ex(label: str, v: Sequence[IntPtr], v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0) -> bool: ...
# def drag_int4(label: str, v: Sequence[IntPtr]) -> bool: ...
# def drag_int4_ex(label: str, v: Sequence[IntPtr], v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0) -> bool: ...
# def drag_int_ex(label: str, v: IntPtr, v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", flags: int=0) -> bool: ...
# def drag_int_range2(label: str, v_current_min: IntPtr, v_current_max: IntPtr) -> bool: ...
# def drag_int_range2_ex(label: str, v_current_min: IntPtr, v_current_max: IntPtr, v_speed: float=1.0, v_min: int=0, v_max: int=0, format_: str="%d", format_max: str=None, flags: int=0) -> bool: ...
# def drag_scalar(label: str, data_type: int, p_data: Any) -> bool: ...
# def drag_scalar_ex(label: str, data_type: int, p_data: Any, v_speed: float=1.0, p_min: Any=None, p_max: Any=None, format_: str=None, flags: int=0) -> bool: ...
# def drag_scalar_n(label: str, data_type: int, p_data: Any, components: int) -> bool: ...
# def drag_scalar_ne_x(label: str, data_type: int, p_data: Any, components: int, v_speed: float=1.0, p_min: Any=None, p_max: Any=None, format_: str=None, flags: int=0) -> bool: ...
# def dummy(size: tuple) -> None: ...
# def end() -> None: ...
# def end_child() -> None: ...
# def end_child_frame() -> None: ...
# def end_combo() -> None: ...
# def end_disabled() -> None: ...
# def end_drag_drop_source() -> None: ...
# def end_drag_drop_target() -> None: ...
# def end_frame() -> None: ...
# def end_group() -> None: ...
# def end_list_box() -> None: ...
# def end_main_menu_bar() -> None: ...
# def end_menu() -> None: ...
# def end_menu_bar() -> None: ...
# def end_popup() -> None: ...
# def end_tab_bar() -> None: ...
# def end_tab_item() -> None: ...
# def end_table() -> None: ...
# def end_tooltip() -> None: ...
# def find_viewport_by_id(id_: int) -> ImGuiViewport: ...
# def find_viewport_by_platform_handle(platform_handle: Any) -> ImGuiViewport: ...
# def get_allocator_functions(p_alloc_func: Callable, p_free_func: Callable, p_user_data: Any) -> None: ...
# def get_background_draw_list() -> ImDrawList: ...
# def get_background_draw_list_im_gui_viewport_ptr(viewport: ImGuiViewport) -> ImDrawList: ...
# def get_clipboard_text() -> str: ...
# def get_color_u32(idx: int) -> int: ...
# def get_color_u32_ex(idx: int, alpha_mul: float=1.0) -> int: ...
# def get_color_u32_im_u32(col: int) -> int: ...
# def get_color_u32_im_vec4(col: tuple) -> int: ...
# def get_column_index() -> int: ...
# def get_column_offset(column_index: int=-1) -> float: ...
# def get_column_width(column_index: int=-1) -> float: ...
# def get_columns_count() -> int: ...
# def get_content_region_avail() -> tuple: ...
# def get_content_region_max() -> tuple: ...
# def get_current_context() -> ImGuiContext: ...
# def get_cursor_pos() -> tuple: ...
# def get_cursor_pos_x() -> float: ...
# def get_cursor_pos_y() -> float: ...
# def get_cursor_screen_pos() -> tuple: ...
# def get_cursor_start_pos() -> tuple: ...
# def get_drag_drop_payload() -> ImGuiPayload: ...
# def get_draw_data() -> ImDrawData: ...
# def get_draw_list_shared_data() -> ImDrawListSharedData: ...
# def get_font() -> ImFont: ...
# def get_font_size() -> float: ...
# def get_font_tex_uv_white_pixel() -> tuple: ...
# def get_foreground_draw_list() -> ImDrawList: ...
# def get_foreground_draw_list_im_gui_viewport_ptr(viewport: ImGuiViewport) -> ImDrawList: ...
# def get_frame_count() -> int: ...
# def get_frame_height() -> float: ...
# def get_frame_height_with_spacing() -> float: ...
# def get_id(str_id: str) -> int: ...
# def get_idp_tr(ptr_id: Any) -> int: ...
# def get_ids_tr(str_id_begin: str, str_id_end: str) -> int: ...
# def get_io() -> ImGuiIO: ...
# def get_item_id() -> int: ...
# def get_item_rect_max() -> tuple: ...
# def get_item_rect_min() -> tuple: ...
# def get_item_rect_size() -> tuple: ...
# def get_key_index(key: int) -> int: ...
# def get_key_name(key: int) -> str: ...
# def get_key_pressed_amount(key: int, repeat_delay: float, rate: float) -> int: ...
# def get_main_viewport() -> ImGuiViewport: ...
# def get_mouse_clicked_count(button: int) -> int: ...
# def get_mouse_cursor() -> int: ...
# def get_mouse_drag_delta(button: int=0, lock_threshold: float=-1.0) -> tuple: ...
# def get_mouse_pos() -> tuple: ...
# def get_mouse_pos_on_opening_current_popup() -> tuple: ...
# def get_platform_io() -> ImGuiPlatformIO: ...
# def get_scroll_max_x() -> float: ...
# def get_scroll_max_y() -> float: ...
# def get_scroll_x() -> float: ...
# def get_scroll_y() -> float: ...
# def get_state_storage() -> ImGuiStorage: ...
# def get_style() -> ImGuiStyle: ...
# def get_style_color_name(idx: int) -> str: ...
# def get_style_color_vec4(idx: int) -> ImVec4: ...
# def get_text_line_height() -> float: ...
# def get_text_line_height_with_spacing() -> float: ...
# def get_time() -> float: ...
# def get_tree_node_to_label_spacing() -> float: ...
# def get_version() -> str: ...
# def get_window_content_region_max() -> tuple: ...
# def get_window_content_region_min() -> tuple: ...
# def get_window_dock_id() -> int: ...
# def get_window_dpi_scale() -> float: ...
# def get_window_draw_list() -> ImDrawList: ...
# def get_window_height() -> float: ...
# def get_window_pos() -> tuple: ...
# def get_window_size() -> tuple: ...
# def get_window_viewport() -> ImGuiViewport: ...
# def get_window_width() -> float: ...
# def im_vector_construct(vector: Any) -> None: ...
# def im_vector_destruct(vector: Any) -> None: ...
# def image(user_texture_id: Any, size: tuple) -> None: ...
# def image_button(str_id: str, user_texture_id: Any, size: tuple) -> bool: ...
# def image_button_ex(str_id: str, user_texture_id: Any, size: tuple, uv0: tuple=(0, 0), uv1: tuple=(1, 1), bg_col: tuple=(0, 0, 0, 0), tint_col: tuple=(1, 1, 1, 1)) -> bool: ...
# def image_ex(user_texture_id: Any, size: tuple, uv0: tuple=(0, 0), uv1: tuple=(1, 1), tint_col: tuple=(1, 1, 1, 1), border_col: tuple=(0, 0, 0, 0)) -> None: ...
# def indent() -> None: ...
# def indent_ex(indent_w: float=0.0) -> None: ...
# def input_double(label: str, v: DoublePtr) -> bool: ...
# def input_double_ex(label: str, v: DoublePtr, step: float=0.0, step_fast: float=0.0, format_: str="%.6f", flags: int=0) -> bool: ...
# def input_float(label: str, v: FloatPtr) -> bool: ...
# def input_float2(label: str, v: Sequence[FloatPtr]) -> bool: ...
# def input_float2_ex(label: str, v: Sequence[FloatPtr], format_: str="%.3f", flags: int=0) -> bool: ...
# def input_float3(label: str, v: Sequence[FloatPtr]) -> bool: ...
# def input_float3_ex(label: str, v: Sequence[FloatPtr], format_: str="%.3f", flags: int=0) -> bool: ...
# def input_float4(label: str, v: Sequence[FloatPtr]) -> bool: ...
# def input_float4_ex(label: str, v: Sequence[FloatPtr], format_: str="%.3f", flags: int=0) -> bool: ...
# def input_float_ex(label: str, v: FloatPtr, step: float=0.0, step_fast: float=0.0, format_: str="%.3f", flags: int=0) -> bool: ...
# def input_int(label: str, v: IntPtr) -> bool: ...
# def input_int2(label: str, v: Sequence[IntPtr], flags: int=0) -> bool: ...
# def input_int3(label: str, v: Sequence[IntPtr], flags: int=0) -> bool: ...
# def input_int4(label: str, v: Sequence[IntPtr], flags: int=0) -> bool: ...
# def input_int_ex(label: str, v: IntPtr, step: int=1, step_fast: int=100, flags: int=0) -> bool: ...
# def input_scalar(label: str, data_type: int, p_data: Any) -> bool: ...
# def input_scalar_ex(label: str, data_type: int, p_data: Any, p_step: Any=None, p_step_fast: Any=None, format_: str=None, flags: int=0) -> bool: ...
# def input_scalar_n(label: str, data_type: int, p_data: Any, components: int) -> bool: ...
# def input_scalar_ne_x(label: str, data_type: int, p_data: Any, components: int, p_step: Any=None, p_step_fast: Any=None, format_: str=None, flags: int=0) -> bool: ...
# def input_text(label: str, buf: str, buf_size: Any, flags: int=0) -> bool: ...
# def input_text_ex(label: str, buf: str, buf_size: Any, flags: int=0, callback: Callable=None, user_data: Any=None) -> bool: ...
# def input_text_multiline(label: str, buf: str, buf_size: Any) -> bool: ...
# def input_text_multiline_ex(label: str, buf: str, buf_size: Any, size: tuple=(0, 0), flags: int=0, callback: Callable=None, user_data: Any=None) -> bool: ...
# def input_text_with_hint(label: str, hint: str, buf: str, buf_size: Any, flags: int=0) -> bool: ...
# def input_text_with_hint_ex(label: str, hint: str, buf: str, buf_size: Any, flags: int=0, callback: Callable=None, user_data: Any=None) -> bool: ...
# def invisible_button(str_id: str, size: tuple, flags: int=0) -> bool: ...
# def is_any_item_active() -> bool: ...
# def is_any_item_focused() -> bool: ...
# def is_any_item_hovered() -> bool: ...
# def is_any_mouse_down() -> bool: ...
# def is_item_activated() -> bool: ...
# def is_item_active() -> bool: ...
# def is_item_clicked() -> bool: ...
# def is_item_clicked_ex(mouse_button: int=0) -> bool: ...
# def is_item_deactivated() -> bool: ...
# def is_item_deactivated_after_edit() -> bool: ...
# def is_item_edited() -> bool: ...
# def is_item_focused() -> bool: ...
# def is_item_hovered(flags: int=0) -> bool: ...
# def is_item_toggled_open() -> bool: ...
# def is_item_visible() -> bool: ...
# def is_key_down(key: int) -> bool: ...
# def is_key_pressed(key: int) -> bool: ...
# def is_key_pressed_ex(key: int, repeat: bool=True) -> bool: ...
# def is_key_released(key: int) -> bool: ...
# def is_mouse_clicked(button: int) -> bool: ...
# def is_mouse_clicked_ex(button: int, repeat: bool=False) -> bool: ...
# def is_mouse_double_clicked(button: int) -> bool: ...
# def is_mouse_down(button: int) -> bool: ...
# def is_mouse_dragging(button: int, lock_threshold: float=-1.0) -> bool: ...
# def is_mouse_hovering_rect(r_min: tuple, r_max: tuple) -> bool: ...
# def is_mouse_hovering_rect_ex(r_min: tuple, r_max: tuple, clip: bool=True) -> bool: ...
# def is_mouse_pos_valid(mouse_pos: ImVec2=None) -> bool: ...
# def is_mouse_released(button: int) -> bool: ...
# def is_popup_open(str_id: str, flags: int=0) -> bool: ...
# def is_rect_visible(rect_min: tuple, rect_max: tuple) -> bool: ...
# def is_rect_visible_by_size(size: tuple) -> bool: ...
# def is_window_appearing() -> bool: ...
# def is_window_collapsed() -> bool: ...
# def is_window_docked() -> bool: ...
# def is_window_focused(flags: int=0) -> bool: ...
# def is_window_hovered(flags: int=0) -> bool: ...
# def label_text(label: str, fmt: str) -> None: ...
# def label_text_v(label: str, fmt: str) -> None: ...
# def list_box(label: str, current_item: IntPtr, items: str, items_count: int, height_in_items: int=-1) -> bool: ...
# def list_box_callback(label: str, current_item: IntPtr, items_getter: Callable, data: Any, items_count: int) -> bool: ...
# def list_box_callback_ex(label: str, current_item: IntPtr, items_getter: Callable, data: Any, items_count: int, height_in_items: int=-1) -> bool: ...
# def load_ini_settings_from_disk(ini_filename: str) -> None: ...
# def load_ini_settings_from_memory(ini_data: str, ini_size: Any=0) -> None: ...
# def log_buttons() -> None: ...
# def log_finish() -> None: ...
# def log_text(fmt: str) -> None: ...
# def log_text_v(fmt: str) -> None: ...
# def log_to_clipboard(auto_open_depth: int=-1) -> None: ...
# def log_to_file(auto_open_depth: int=-1, filename: str=None) -> None: ...
# def log_to_tty(auto_open_depth: int=-1) -> None: ...
# def mem_alloc(size: Any) -> Any: ...
# def mem_free(ptr: Any) -> None: ...
# def menu_item(label: str) -> bool: ...
# def menu_item_bool_ptr(label: str, shortcut: str, p_selected: BoolPtr, enabled: bool=True) -> bool: ...
# def menu_item_ex(label: str, shortcut: str=None, selected: bool=False, enabled: bool=True) -> bool: ...
# def new_frame() -> None: ...
# def new_line() -> None: ...
# def next_column() -> None: ...
# def open_popup(str_id: str, popup_flags: int=0) -> None: ...
# def open_popup_id(id_: int, popup_flags: int=0) -> None: ...
# def open_popup_on_item_click(str_id: str=None, popup_flags: int=1) -> None: ...
# def plot_histogram(label: str, values: FloatPtr, values_count: int) -> None: ...
# def plot_histogram_callback(label: str, values_getter: Callable, data: Any, values_count: int) -> None: ...
# def plot_histogram_callback_ex(label: str, values_getter: Callable, data: Any, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0)) -> None: ...
# def plot_histogram_ex(label: str, values: FloatPtr, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0), stride: int=sizeof(float)) -> None: ...
# def plot_lines(label: str, values: FloatPtr, values_count: int) -> None: ...
# def plot_lines_callback(label: str, values_getter: Callable, data: Any, values_count: int) -> None: ...
# def plot_lines_callback_ex(label: str, values_getter: Callable, data: Any, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0)) -> None: ...
# def plot_lines_ex(label: str, values: FloatPtr, values_count: int, values_offset: int=0, overlay_text: str=None, scale_min: float=FLT_MAX, scale_max: float=FLT_MAX, graph_size: tuple=(0, 0), stride: int=sizeof(float)) -> None: ...
# def pop_button_repeat() -> None: ...
# def pop_clip_rect() -> None: ...
# def pop_font() -> None: ...
# def pop_id() -> None: ...
# def pop_item_width() -> None: ...
# def pop_style_color() -> None: ...
# def pop_style_color_ex(count: int=1) -> None: ...
# def pop_style_var() -> None: ...
# def pop_style_var_ex(count: int=1) -> None: ...
# def pop_tab_stop() -> None: ...
# def pop_text_wrap_pos() -> None: ...
# def progress_bar(fraction: float, size_arg: tuple=(-FLT_MIN, 0), overlay: str=None) -> None: ...
# def push_button_repeat(repeat: bool) -> None: ...
# def push_clip_rect(clip_rect_min: tuple, clip_rect_max: tuple, intersect_with_current_clip_rect: bool) -> None: ...
# def push_font(font: ImFont) -> None: ...
# def push_id(str_id: str) -> None: ...
# def push_idi_nt(int_id: int) -> None: ...
# def push_idp_tr(ptr_id: Any) -> None: ...
# def push_ids_tr(str_id_begin: str, str_id_end: str) -> None: ...
# def push_item_width(item_width: float) -> None: ...
# def push_style_color(idx: int, col: int) -> None: ...
# def push_style_color_im_vec4(idx: int, col: tuple) -> None: ...
# def push_style_var(idx: int, val: float) -> None: ...
# def push_style_var_im_vec2(idx: int, val: tuple) -> None: ...
# def push_tab_stop(tab_stop: bool) -> None: ...
# def push_text_wrap_pos(wrap_local_pos_x: float=0.0) -> None: ...
# def radio_button(label: str, active: bool) -> bool: ...
# def radio_button_int_ptr(label: str, v: IntPtr, v_button: int) -> bool: ...
# def render() -> None: ...
# def render_platform_windows_default() -> None: ...
# def render_platform_windows_default_ex(platform_render_arg: Any=None, renderer_render_arg: Any=None) -> None: ...
# def reset_mouse_drag_delta() -> None: ...
# def reset_mouse_drag_delta_ex(button: int=0) -> None: ...
# def same_line() -> None: ...
# def same_line_ex(offset_from_start_x: float=0.0, spacing: float=-1.0) -> None: ...
# def save_ini_settings_to_disk(ini_filename: str) -> None: ...
# def save_ini_settings_to_memory(out_ini_size: Any=None) -> str: ...
# def selectable(label: str) -> bool: ...
# def selectable_bool_ptr(label: str, p_selected: BoolPtr, flags: int=0) -> bool: ...
# def selectable_bool_ptr_ex(label: str, p_selected: BoolPtr, flags: int=0, size: tuple=(0, 0)) -> bool: ...
# def selectable_ex(label: str, selected: bool=False, flags: int=0, size: tuple=(0, 0)) -> bool: ...
# def separator() -> None: ...
# def separator_text(label: str) -> None: ...
# def set_allocator_functions(alloc_func: Callable, free_func: Callable, user_data: Any=None) -> None: ...
# def set_clipboard_text(text: str) -> None: ...
# def set_color_edit_options(flags: int) -> None: ...
# def set_column_offset(column_index: int, offset_x: float) -> None: ...
# def set_column_width(column_index: int, width: float) -> None: ...
# def set_current_context(ctx: ImGuiContext) -> None: ...
# def set_cursor_pos(local_pos: tuple) -> None: ...
# def set_cursor_pos_x(local_x: float) -> None: ...
# def set_cursor_pos_y(local_y: float) -> None: ...
# def set_cursor_screen_pos(pos: tuple) -> None: ...
# def set_drag_drop_payload(type_: str, data: Any, sz: Any, cond: int=0) -> bool: ...
# def set_item_allow_overlap() -> None: ...
# def set_item_default_focus() -> None: ...
# def set_keyboard_focus_here() -> None: ...
# def set_keyboard_focus_here_ex(offset: int=0) -> None: ...
# def set_mouse_cursor(cursor_type: int) -> None: ...
# def set_next_frame_want_capture_keyboard(want_capture_keyboard: bool) -> None: ...
# def set_next_frame_want_capture_mouse(want_capture_mouse: bool) -> None: ...
# def set_next_item_open(is_open: bool, cond: int=0) -> None: ...
# def set_next_item_width(item_width: float) -> None: ...
# def set_next_window_bg_alpha(alpha: float) -> None: ...
# def set_next_window_class(window_class: ImGuiWindowClass) -> None: ...
# def set_next_window_collapsed(collapsed: bool, cond: int=0) -> None: ...
# def set_next_window_content_size(size: tuple) -> None: ...
# def set_next_window_dock_id(dock_id: int, cond: int=0) -> None: ...
# def set_next_window_focus() -> None: ...
# def set_next_window_pos(pos: tuple, cond: int=0) -> None: ...
# def set_next_window_pos_ex(pos: tuple, cond: int=0, pivot: tuple=(0, 0)) -> None: ...
# def set_next_window_scroll(scroll: tuple) -> None: ...
# def set_next_window_size(size: tuple, cond: int=0) -> None: ...
# def set_next_window_size_constraints(size_min: tuple, size_max: tuple, custom_callback: Callable=None, custom_callback_data: Any=None) -> None: ...
# def set_next_window_viewport(viewport_id: int) -> None: ...
# def set_scroll_from_pos_x(local_x: float, center_x_ratio: float=0.5) -> None: ...
# def set_scroll_from_pos_y(local_y: float, center_y_ratio: float=0.5) -> None: ...
# def set_scroll_here_x(center_x_ratio: float=0.5) -> None: ...
# def set_scroll_here_y(center_y_ratio: float=0.5) -> None: ...
# def set_scroll_x(scroll_x: float) -> None: ...
# def set_scroll_y(scroll_y: float) -> None: ...
# def set_state_storage(storage: ImGuiStorage) -> None: ...
# def set_tab_item_closed(tab_or_docked_window_label: str) -> None: ...
# def set_tooltip(fmt: str) -> None: ...
# def set_tooltip_v(fmt: str) -> None: ...
# def set_window_collapsed(collapsed: bool, cond: int=0) -> None: ...
# def set_window_collapsed_str(name: str, collapsed: bool, cond: int=0) -> None: ...
# def set_window_focus() -> None: ...
# def set_window_focus_str(name: str) -> None: ...
# def set_window_font_scale(scale: float) -> None: ...
# def set_window_pos(pos: tuple, cond: int=0) -> None: ...
# def set_window_pos_str(name: str, pos: tuple, cond: int=0) -> None: ...
# def set_window_size(size: tuple, cond: int=0) -> None: ...
# def set_window_size_str(name: str, size: tuple, cond: int=0) -> None: ...
# def show_about_window(p_open: BoolPtr=None) -> None: ...
# def show_debug_log_window(p_open: BoolPtr=None) -> None: ...
# def show_demo_window(p_open: BoolPtr=None) -> None: ...
# def show_font_selector(label: str) -> None: ...
# def show_metrics_window(p_open: BoolPtr=None) -> None: ...
# def show_stack_tool_window(p_open: BoolPtr=None) -> None: ...
# def show_style_editor(ref: ImGuiStyle=None) -> None: ...
# def show_style_selector(label: str) -> bool: ...
# def show_user_guide() -> None: ...
# def slider_angle(label: str, v_rad: FloatPtr) -> bool: ...
# def slider_angle_ex(label: str, v_rad: FloatPtr, v_degrees_min: float=-360.0, v_degrees_max: float=+360.0, format_: str="%.0f deg", flags: int=0) -> bool: ...
# def slider_float(label: str, v: FloatPtr, v_min: float, v_max: float) -> bool: ...
# def slider_float2(label: str, v: Sequence[FloatPtr], v_min: float, v_max: float) -> bool: ...
# def slider_float2_ex(label: str, v: Sequence[FloatPtr], v_min: float, v_max: float, format_: str="%.3f", flags: int=0) -> bool: ...
# def slider_float3(label: str, v: Sequence[FloatPtr], v_min: float, v_max: float) -> bool: ...
# def slider_float3_ex(label: str, v: Sequence[FloatPtr], v_min: float, v_max: float, format_: str="%.3f", flags: int=0) -> bool: ...
# def slider_float4(label: str, v: Sequence[FloatPtr], v_min: float, v_max: float) -> bool: ...
# def slider_float4_ex(label: str, v: Sequence[FloatPtr], v_min: float, v_max: float, format_: str="%.3f", flags: int=0) -> bool: ...
# def slider_float_ex(label: str, v: FloatPtr, v_min: float, v_max: float, format_: str="%.3f", flags: int=0) -> bool: ...
# def slider_int(label: str, v: IntPtr, v_min: int, v_max: int) -> bool: ...
# def slider_int2(label: str, v: Sequence[IntPtr], v_min: int, v_max: int) -> bool: ...
# def slider_int2_ex(label: str, v: Sequence[IntPtr], v_min: int, v_max: int, format_: str="%d", flags: int=0) -> bool: ...
# def slider_int3(label: str, v: Sequence[IntPtr], v_min: int, v_max: int) -> bool: ...
# def slider_int3_ex(label: str, v: Sequence[IntPtr], v_min: int, v_max: int, format_: str="%d", flags: int=0) -> bool: ...
# def slider_int4(label: str, v: Sequence[IntPtr], v_min: int, v_max: int) -> bool: ...
# def slider_int4_ex(label: str, v: Sequence[IntPtr], v_min: int, v_max: int, format_: str="%d", flags: int=0) -> bool: ...
# def slider_int_ex(label: str, v: IntPtr, v_min: int, v_max: int, format_: str="%d", flags: int=0) -> bool: ...
# def slider_scalar(label: str, data_type: int, p_data: Any, p_min: Any, p_max: Any) -> bool: ...
# def slider_scalar_ex(label: str, data_type: int, p_data: Any, p_min: Any, p_max: Any, format_: str=None, flags: int=0) -> bool: ...
# def slider_scalar_n(label: str, data_type: int, p_data: Any, components: int, p_min: Any, p_max: Any) -> bool: ...
# def slider_scalar_ne_x(label: str, data_type: int, p_data: Any, components: int, p_min: Any, p_max: Any, format_: str=None, flags: int=0) -> bool: ...
# def small_button(label: str) -> bool: ...
# def spacing() -> None: ...
# def style_colors_classic(dst: ImGuiStyle=None) -> None: ...
# def style_colors_dark(dst: ImGuiStyle=None) -> None: ...
# def style_colors_light(dst: ImGuiStyle=None) -> None: ...
# def tab_item_button(label: str, flags: int=0) -> bool: ...
# def table_get_column_count() -> int: ...
# def table_get_column_flags(column_n: int=-1) -> int: ...
# def table_get_column_index() -> int: ...
# def table_get_column_name(column_n: int=-1) -> str: ...
# def table_get_row_index() -> int: ...
# def table_get_sort_specs() -> ImGuiTableSortSpecs: ...
# def table_header(label: str) -> None: ...
# def table_headers_row() -> None: ...
# def table_next_column() -> bool: ...
# def table_next_row() -> None: ...
# def table_next_row_ex(row_flags: int=0, min_row_height: float=0.0) -> None: ...
# def table_set_bg_color(target: int, color: int, column_n: int=-1) -> None: ...
# def table_set_column_enabled(column_n: int, v: bool) -> None: ...
# def table_set_column_index(column_n: int) -> bool: ...
# def table_setup_column(label: str, flags: int=0) -> None: ...
# def table_setup_column_ex(label: str, flags: int=0, init_width_or_weight: float=0.0, user_id: int=0) -> None: ...
# def table_setup_scroll_freeze(cols: int, rows: int) -> None: ...
# def text(fmt: str) -> None: ...
# def text_colored(col: tuple, fmt: str) -> None: ...
# def text_colored_v(col: tuple, fmt: str) -> None: ...
# def text_disabled(fmt: str) -> None: ...
# def text_disabled_v(fmt: str) -> None: ...
# def text_unformatted(text: str) -> None: ...
# def text_unformatted_ex(text: str, text_end: str=None) -> None: ...
# def text_v(fmt: str) -> None: ...
# def text_wrapped(fmt: str) -> None: ...
# def text_wrapped_v(fmt: str) -> None: ...
# def tree_node(label: str) -> bool: ...
# def tree_node_ex(label: str, flags: int=0) -> bool: ...
# def tree_node_ex_ptr(ptr_id: Any, flags: int, fmt: str) -> bool: ...
# def tree_node_ex_str(str_id: str, flags: int, fmt: str) -> bool: ...
# def tree_node_ex_v(str_id: str, flags: int, fmt: str) -> bool: ...
# def tree_node_ex_vp_tr(ptr_id: Any, flags: int, fmt: str) -> bool: ...
# def tree_node_ptr(ptr_id: Any, fmt: str) -> bool: ...
# def tree_node_str(str_id: str, fmt: str) -> bool: ...
# def tree_node_v(str_id: str, fmt: str) -> bool: ...
# def tree_node_vp_tr(ptr_id: Any, fmt: str) -> bool: ...
# def tree_pop() -> None: ...
# def tree_push(str_id: str) -> None: ...
# def tree_push_ptr(ptr_id: Any) -> None: ...
# def unindent() -> None: ...
# def unindent_ex(indent_w: float=0.0) -> None: ...
# def update_platform_windows() -> None: ...
# def vslider_float(label: str, size: tuple, v: FloatPtr, v_min: float, v_max: float) -> bool: ...
# def vslider_float_ex(label: str, size: tuple, v: FloatPtr, v_min: float, v_max: float, format_: str="%.3f", flags: int=0) -> bool: ...
# def vslider_int(label: str, size: tuple, v: IntPtr, v_min: int, v_max: int) -> bool: ...
# def vslider_int_ex(label: str, size: tuple, v: IntPtr, v_min: int, v_max: int, format_: str="%d", flags: int=0) -> bool: ...
# def vslider_scalar(label: str, size: tuple, data_type: int, p_data: Any, p_min: Any, p_max: Any) -> bool: ...
# def vslider_scalar_ex(label: str, size: tuple, data_type: int, p_data: Any, p_min: Any, p_max: Any, format_: str=None, flags: int=0) -> bool: ...

class ImColor: ...
class ImDrawChannel: ...
class ImDrawCmd: ...
class ImDrawCmdHeader: ...
class ImDrawData: ...
class ImDrawList: ...
class ImDrawListSharedData: ...
class ImDrawListSplitter: ...
class ImDrawVert: ...
class ImFont: ...
class ImFontAtlas: ...
class ImFontAtlasCustomRect: ...
class ImFontBuilderIO: ...
class ImFontConfig: ...
class ImFontGlyph: ...
class ImFontGlyphRangesBuilder: ...
class ImGuiContext: ...
class ImGuiIO: ...
class ImGuiInputTextCallbackData: ...
class ImGuiKeyData: ...
class ImGuiListClipper: ...
class ImGuiPayload: ...
class ImGuiPlatformIO: ...
class ImGuiPlatformImeData: ...
class ImGuiPlatformMonitor: ...
class ImGuiSizeCallbackData: ...
class ImGuiStorage: ...
class ImGuiStorage_ImGuiStoragePair: ...
class ImGuiStyle: ...
class ImGuiTableColumnSortSpecs: ...
class ImGuiTableSortSpecs: ...
class ImGuiTextBuffer: ...
class ImGuiTextFilter: ...
class ImGuiTextFilter_ImGuiTextRange: ...
class ImGuiViewport: ...
class ImGuiWindowClass: ...
class ImVec2: ...
class ImVec4: ...
class ImVector_ImDrawChannel: ...
class ImVector_ImDrawCmd: ...
class ImVector_ImDrawIdx: ...
class ImVector_ImDrawVert: ...
class ImVector_ImFontAtlasCustomRect: ...
class ImVector_ImFontConfig: ...
class ImVector_ImFontGlyph: ...
class ImVector_ImFontPtr: ...
class ImVector_ImGuiPlatformMonitor: ...
class ImVector_ImGuiStorage_ImGuiStoragePair: ...
class ImVector_ImGuiTextFilter_ImGuiTextRange: ...
class ImVector_ImGuiViewportPtr: ...
class ImVector_ImTextureID: ...
class ImVector_ImU32: ...
class ImVector_ImVec2: ...
class ImVector_ImVec4: ...
class ImVector_ImWchar: ...
class ImVector_char: ...
class ImVector_float: ...
